
DMM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008828  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003014  080089b8  080089b8  000099b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9cc  0800b9cc  0000d06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b9cc  0800b9cc  0000c9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9d4  0800b9d4  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9d4  0800b9d4  0000c9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9d8  0800b9d8  0000c9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b9dc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d06c  2**0
                  CONTENTS
 10 .bss          00000538  20000070  20000070  0000d070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005a8  200005a8  0000d070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ccf  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f47  00000000  00000000  0001ed6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00021cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b84  00000000  00000000  00022bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002477b  00000000  00000000  0002375c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013521  00000000  00000000  00047ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1698  00000000  00000000  0005b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ca90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045c0  00000000  00000000  0012cad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00131094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089a0 	.word	0x080089a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080089a0 	.word	0x080089a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <MX_AD7190_SPI_Init>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 该函数被HAL库内部调用
*/
void MX_AD7190_SPI_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
  
  GPIO_InitTypeDef GPIO_InitStruct;
  /* 使能SPI外设以及SPI引脚时钟 */
  AD7190_SPIx_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b3e      	ldr	r3, [pc, #248]	@ (8000e8c <MX_AD7190_SPI_Init+0x104>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	4a3d      	ldr	r2, [pc, #244]	@ (8000e8c <MX_AD7190_SPI_Init+0x104>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e8c <MX_AD7190_SPI_Init+0x104>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  AD7190_GPIO_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b37      	ldr	r3, [pc, #220]	@ (8000e8c <MX_AD7190_SPI_Init+0x104>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a36      	ldr	r2, [pc, #216]	@ (8000e8c <MX_AD7190_SPI_Init+0x104>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b34      	ldr	r3, [pc, #208]	@ (8000e8c <MX_AD7190_SPI_Init+0x104>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  /**SPI2 GPIO Configuration    
  PB13     ------> SPI2_SCK
  PB14     ------> SPI2_MISO
  PB15     ------> SPI2_MOSI 
  */    
  GPIO_InitStruct.Pin = AD7190_SCK_Pin;
 8000dc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd8:	2305      	movs	r3, #5
 8000dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD7190_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4619      	mov	r1, r3
 8000de2:	482b      	ldr	r0, [pc, #172]	@ (8000e90 <MX_AD7190_SPI_Init+0x108>)
 8000de4:	f001 fcc0 	bl	8002768 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = AD7190_MISO_Pin|AD7190_MOSI_Pin;
 8000de8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD7190_MISO_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4822      	ldr	r0, [pc, #136]	@ (8000e90 <MX_AD7190_SPI_Init+0x108>)
 8000e06:	f001 fcaf 	bl	8002768 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = AD7190_CS_Pin;
 8000e0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e14:	2301      	movs	r3, #1
 8000e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AD7190_CS_GPIO_Port, &GPIO_InitStruct);  
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481c      	ldr	r0, [pc, #112]	@ (8000e90 <MX_AD7190_SPI_Init+0x108>)
 8000e20:	f001 fca2 	bl	8002768 <HAL_GPIO_Init>

  /* SPI外设配置 */
  hspi_AD7190.Instance = AD7190_SPIx;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e26:	4a1c      	ldr	r2, [pc, #112]	@ (8000e98 <MX_AD7190_SPI_Init+0x110>)
 8000e28:	601a      	str	r2, [r3, #0]
  hspi_AD7190.Init.Mode = SPI_MODE_MASTER;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e30:	605a      	str	r2, [r3, #4]
  hspi_AD7190.Init.Direction = SPI_DIRECTION_2LINES;
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  hspi_AD7190.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  hspi_AD7190.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	611a      	str	r2, [r3, #16]
  hspi_AD7190.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	615a      	str	r2, [r3, #20]
  hspi_AD7190.Init.NSS = SPI_NSS_SOFT;
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e50:	619a      	str	r2, [r3, #24]
  hspi_AD7190.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e54:	2220      	movs	r2, #32
 8000e56:	61da      	str	r2, [r3, #28]
  hspi_AD7190.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
  hspi_AD7190.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi_AD7190.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi_AD7190.Init.CRCPolynomial = 7;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_SPI_Init(&hspi_AD7190);
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <MX_AD7190_SPI_Init+0x10c>)
 8000e72:	f002 fc0f 	bl	8003694 <HAL_SPI_Init>
  /* 片选使能 */
  AD7190_CS_ENABLE();
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <MX_AD7190_SPI_Init+0x108>)
 8000e7e:	f001 fe0f 	bl	8002aa0 <HAL_GPIO_WritePin>
}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020400 	.word	0x40020400
 8000e94:	2000008c 	.word	0x2000008c
 8000e98:	40003800 	.word	0x40003800

08000e9c <AD7190_SetRegisterValue>:
 * @param bytesNumber - Number of bytes to be written.
 *
 * @return none.
*******************************************************************************/
void AD7190_SetRegisterValue(unsigned char registerAddress,unsigned int  registerValue,unsigned char bytesNumber)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	71bb      	strb	r3, [r7, #6]
  unsigned char writeCommand[5] = {0, 0, 0, 0, 0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	711a      	strb	r2, [r3, #4]
  unsigned char* dataPointer    = (unsigned char*)&registerValue;
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	617b      	str	r3, [r7, #20]
  unsigned char bytesNr         = bytesNumber;
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	74fb      	strb	r3, [r7, #19]
  
  writeCommand[0] = AD7190_COMM_WRITE | AD7190_COMM_ADDR(registerAddress);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	733b      	strb	r3, [r7, #12]
  while(bytesNr > 0)
 8000ecc:	e00c      	b.n	8000ee8 <AD7190_SetRegisterValue+0x4c>
  {
      writeCommand[bytesNr] = *dataPointer;
 8000ece:	7cfb      	ldrb	r3, [r7, #19]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	7812      	ldrb	r2, [r2, #0]
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	443b      	add	r3, r7
 8000ed8:	f803 2c0c 	strb.w	r2, [r3, #-12]
      dataPointer ++;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
      bytesNr --;
 8000ee2:	7cfb      	ldrb	r3, [r7, #19]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	74fb      	strb	r3, [r7, #19]
  while(bytesNr > 0)
 8000ee8:	7cfb      	ldrb	r3, [r7, #19]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1ef      	bne.n	8000ece <AD7190_SetRegisterValue+0x32>
  }
  HAL_SPI_Transmit(&hspi_AD7190,writeCommand, bytesNumber+1,0xFFFFFF);
 8000eee:	79bb      	ldrb	r3, [r7, #6]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	f107 010c 	add.w	r1, r7, #12
 8000efa:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000efe:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <AD7190_SetRegisterValue+0x70>)
 8000f00:	f002 fc51 	bl	80037a6 <HAL_SPI_Transmit>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	2000008c 	.word	0x2000008c

08000f10 <AD7190_GetRegisterValue>:
 * @param bytesNumber - Number of bytes that will be read.
 *
 * @return buffer - Value of the register.
*******************************************************************************/
unsigned int AD7190_GetRegisterValue(unsigned char registerAddress,unsigned char bytesNumber)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
  unsigned char registerWord[4] = {0, 0, 0, 0}; 
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  unsigned char address         = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	72fb      	strb	r3, [r7, #11]
  unsigned int  buffer          = 0x0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  unsigned char i               = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	74fb      	strb	r3, [r7, #19]
  
  address = AD7190_COMM_READ | AD7190_COMM_ADDR(registerAddress);
 8000f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]
  
  HAL_SPI_Transmit(&hspi_AD7190,&address, 1,0xFFFFFF);    
 8000f48:	f107 010b 	add.w	r1, r7, #11
 8000f4c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000f50:	2201      	movs	r2, #1
 8000f52:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <AD7190_GetRegisterValue+0x8c>)
 8000f54:	f002 fc27 	bl	80037a6 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi_AD7190,registerWord,bytesNumber,0xFFFFFF);
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f107 010c 	add.w	r1, r7, #12
 8000f60:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000f64:	480d      	ldr	r0, [pc, #52]	@ (8000f9c <AD7190_GetRegisterValue+0x8c>)
 8000f66:	f002 fd62 	bl	8003a2e <HAL_SPI_Receive>
  for(i = 0; i < bytesNumber; i++) 
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	74fb      	strb	r3, [r7, #19]
 8000f6e:	e00b      	b.n	8000f88 <AD7190_GetRegisterValue+0x78>
  {
    buffer = (buffer << 8) + registerWord[i];
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	7cfa      	ldrb	r2, [r7, #19]
 8000f76:	3218      	adds	r2, #24
 8000f78:	443a      	add	r2, r7
 8000f7a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]
  for(i = 0; i < bytesNumber; i++) 
 8000f82:	7cfb      	ldrb	r3, [r7, #19]
 8000f84:	3301      	adds	r3, #1
 8000f86:	74fb      	strb	r3, [r7, #19]
 8000f88:	7cfa      	ldrb	r2, [r7, #19]
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3ef      	bcc.n	8000f70 <AD7190_GetRegisterValue+0x60>
  }
  return buffer;
 8000f90:	697b      	ldr	r3, [r7, #20]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000008c 	.word	0x2000008c

08000fa0 <AD7190_Reset>:
 * @brief Resets the device.
 *
 * @return none.
*******************************************************************************/
void AD7190_Reset(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  unsigned char registerWord[7];
  
  registerWord[0] = 0x01;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	703b      	strb	r3, [r7, #0]
  registerWord[1] = 0xFF;
 8000faa:	23ff      	movs	r3, #255	@ 0xff
 8000fac:	707b      	strb	r3, [r7, #1]
  registerWord[2] = 0xFF;
 8000fae:	23ff      	movs	r3, #255	@ 0xff
 8000fb0:	70bb      	strb	r3, [r7, #2]
  registerWord[3] = 0xFF;
 8000fb2:	23ff      	movs	r3, #255	@ 0xff
 8000fb4:	70fb      	strb	r3, [r7, #3]
  registerWord[4] = 0xFF;
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	713b      	strb	r3, [r7, #4]
  registerWord[5] = 0xFF;
 8000fba:	23ff      	movs	r3, #255	@ 0xff
 8000fbc:	717b      	strb	r3, [r7, #5]
  registerWord[6] = 0xFF;
 8000fbe:	23ff      	movs	r3, #255	@ 0xff
 8000fc0:	71bb      	strb	r3, [r7, #6]
  HAL_SPI_Transmit(&hspi_AD7190,registerWord, 7,0xFFFFFF);
 8000fc2:	4639      	mov	r1, r7
 8000fc4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8000fc8:	2207      	movs	r2, #7
 8000fca:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <AD7190_Reset+0x38>)
 8000fcc:	f002 fbeb 	bl	80037a6 <HAL_SPI_Transmit>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000008c 	.word	0x2000008c

08000fdc <AD7190_WaitRdyGoLow>:
 * @brief Waits for RDY pin to go low.
 *
 * @return none.
*******************************************************************************/
void AD7190_WaitRdyGoLow(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
  unsigned int timeOutCnt = 0xFFFFF;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <AD7190_WaitRdyGoLow+0x30>)
 8000fe4:	607b      	str	r3, [r7, #4]

  while(AD7190_RDY_STATE() && timeOutCnt--)
 8000fe6:	bf00      	nop
 8000fe8:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <AD7190_WaitRdyGoLow+0x34>)
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d004      	beq.n	8000ffe <AD7190_WaitRdyGoLow+0x22>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f4      	bne.n	8000fe8 <AD7190_WaitRdyGoLow+0xc>
  {
      ;
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	000fffff 	.word	0x000fffff
 8001010:	40020400 	.word	0x40020400

08001014 <AD7190_Continuous_ReadData>:
 *                          1 - enable
 *
 * @return none.
*******************************************************************************/
void AD7190_Continuous_ReadData(unsigned char cread)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  unsigned char registerWord=0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
  
  if(cread==1)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <AD7190_Continuous_ReadData+0x1a>
  {
    registerWord=0x5C;
 8001028:	235c      	movs	r3, #92	@ 0x5c
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e003      	b.n	8001036 <AD7190_Continuous_ReadData+0x22>
  }
  else
  {
    AD7190_WaitRdyGoLow();
 800102e:	f7ff ffd5 	bl	8000fdc <AD7190_WaitRdyGoLow>
    registerWord=0x5e;
 8001032:	235e      	movs	r3, #94	@ 0x5e
 8001034:	73fb      	strb	r3, [r7, #15]
  }
  HAL_SPI_Transmit(&hspi_AD7190,&registerWord,1,0xFFFFFF);
 8001036:	f107 010f 	add.w	r1, r7, #15
 800103a:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800103e:	2201      	movs	r2, #1
 8001040:	4803      	ldr	r0, [pc, #12]	@ (8001050 <AD7190_Continuous_ReadData+0x3c>)
 8001042:	f002 fbb0 	bl	80037a6 <HAL_SPI_Transmit>
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000008c 	.word	0x2000008c

08001054 <AD7190_Calibrate>:
 * @param channel - Channel to be calibrated.
 *
 * @return none.
*******************************************************************************/
void AD7190_Calibrate(unsigned char mode, unsigned char channel)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	71bb      	strb	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  
  AD7190_ChannelSelect(channel);
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f83e 	bl	80010f2 <AD7190_ChannelSelect>
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_MODE, 3);
 8001076:	2103      	movs	r1, #3
 8001078:	2001      	movs	r0, #1
 800107a:	f7ff ff49 	bl	8000f10 <AD7190_GetRegisterValue>
 800107e:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~AD7190_MODE_SEL(0x7);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8001086:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | AD7190_MODE_SEL(mode);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	055b      	lsls	r3, r3, #21
 800108c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	60bb      	str	r3, [r7, #8]
//    AD7190_CS_ENABLE(); 
  AD7190_SetRegisterValue(AD7190_REG_MODE, newRegValue, 3);
 8001096:	2203      	movs	r2, #3
 8001098:	68b9      	ldr	r1, [r7, #8]
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff fefe 	bl	8000e9c <AD7190_SetRegisterValue>
  AD7190_WaitRdyGoLow();
 80010a0:	f7ff ff9c 	bl	8000fdc <AD7190_WaitRdyGoLow>
//    AD7190_CS_DISABLE();
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <AD7190_ChopSetting>:
 *                        1 - enable
 *  
 * @return none.
*******************************************************************************/
void AD7190_ChopSetting(unsigned char chop)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  unsigned int oldRegValue = 0x0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  unsigned int newRegValue = 0x0;   
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
   
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3);
 80010be:	2103      	movs	r1, #3
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff ff25 	bl	8000f10 <AD7190_GetRegisterValue>
 80010c6:	60b8      	str	r0, [r7, #8]
  if(chop==1)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d104      	bne.n	80010d8 <AD7190_ChopSetting+0x2c>
  {
    newRegValue = oldRegValue | AD7190_CONF_CHOP;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e003      	b.n	80010e0 <AD7190_ChopSetting+0x34>
  }
  else
  {
    newRegValue = oldRegValue & (~AD7190_CONF_CHOP); 
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80010de:	60fb      	str	r3, [r7, #12]
  }
  
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 80010e0:	2203      	movs	r2, #3
 80010e2:	68f9      	ldr	r1, [r7, #12]
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fed9 	bl	8000e9c <AD7190_SetRegisterValue>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <AD7190_ChannelSelect>:
 * @param channel - Selects a channel.
 *  
 * @return none.
*******************************************************************************/
void AD7190_ChannelSelect(unsigned short channel)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	80fb      	strh	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;   
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
   
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3);
 8001104:	2103      	movs	r1, #3
 8001106:	2002      	movs	r0, #2
 8001108:	f7ff ff02 	bl	8000f10 <AD7190_GetRegisterValue>
 800110c:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~(AD7190_CONF_CHAN(0xFF));
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001114:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | AD7190_CONF_CHAN(1 << channel);   
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	2201      	movs	r2, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 8001128:	2203      	movs	r2, #3
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	2002      	movs	r0, #2
 800112e:	f7ff feb5 	bl	8000e9c <AD7190_SetRegisterValue>
}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <AD7190_MultiChannelSelect>:

void AD7190_MultiChannelSelect(unsigned short channel)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	80fb      	strh	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;   
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
   
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3);
 800114c:	2103      	movs	r1, #3
 800114e:	2002      	movs	r0, #2
 8001150:	f7ff fede 	bl	8000f10 <AD7190_GetRegisterValue>
 8001154:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~(AD7190_CONF_CHAN(0xFF));
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800115c:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | AD7190_CONF_CHAN(channel);   
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	60bb      	str	r3, [r7, #8]
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 800116a:	2203      	movs	r2, #3
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	2002      	movs	r0, #2
 8001170:	f7ff fe94 	bl	8000e9c <AD7190_SetRegisterValue>
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <AD7190_RangeSetup>:
                 the ADC input range.     
 *
 * @return none.
*******************************************************************************/
void AD7190_RangeSetup(unsigned char polarity, unsigned char range)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF,3);
 8001194:	2103      	movs	r1, #3
 8001196:	2002      	movs	r0, #2
 8001198:	f7ff feba 	bl	8000f10 <AD7190_GetRegisterValue>
 800119c:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~(AD7190_CONF_UNIPOLAR | AD7190_CONF_GAIN(0x7));
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f023 030f 	bic.w	r3, r3, #15
 80011a4:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | (polarity * AD7190_CONF_UNIPOLAR) | AD7190_CONF_GAIN(range) | AD7190_CONF_BUF; 
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	79bb      	ldrb	r3, [r7, #6]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	4313      	orrs	r3, r2
 80011b8:	f043 0310 	orr.w	r3, r3, #16
 80011bc:	60bb      	str	r3, [r7, #8]
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 80011be:	2203      	movs	r2, #3
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff fe6a 	bl	8000e9c <AD7190_SetRegisterValue>
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <ad7190_unipolar_multichannel_conf>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 无
  */
void ad7190_unipolar_multichannel_conf(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  unsigned int command = 0x0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
  
  // chop enable
  AD7190_ChopSetting(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff ff66 	bl	80010ac <AD7190_ChopSetting>
  
  /* Calibrates channel AIN1(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN1P_AINCOM);
 80011e0:	2104      	movs	r1, #4
 80011e2:	2004      	movs	r0, #4
 80011e4:	f7ff ff36 	bl	8001054 <AD7190_Calibrate>
  /* Calibrates channel AIN2(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN2P_AINCOM);
 80011e8:	2105      	movs	r1, #5
 80011ea:	2004      	movs	r0, #4
 80011ec:	f7ff ff32 	bl	8001054 <AD7190_Calibrate>
  /* Calibrates channel AIN3(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN3P_AINCOM);
 80011f0:	2106      	movs	r1, #6
 80011f2:	2004      	movs	r0, #4
 80011f4:	f7ff ff2e 	bl	8001054 <AD7190_Calibrate>
  /* Calibrates channel AIN4(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN4P_AINCOM);
 80011f8:	2107      	movs	r1, #7
 80011fa:	2004      	movs	r0, #4
 80011fc:	f7ff ff2a 	bl	8001054 <AD7190_Calibrate>
  
  /* Selects unipolar operation and ADC's input range to +-Vref/1. */
  AD7190_RangeSetup(1, AD7190_CONF_GAIN_1);  
 8001200:	2100      	movs	r1, #0
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff ffba 	bl	800117c <AD7190_RangeSetup>
  /* Calibrates channel AIN1(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN1P_AINCOM);
 8001208:	2104      	movs	r1, #4
 800120a:	2005      	movs	r0, #5
 800120c:	f7ff ff22 	bl	8001054 <AD7190_Calibrate>
  /* Calibrates channel AIN2(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN2P_AINCOM);
 8001210:	2105      	movs	r1, #5
 8001212:	2005      	movs	r0, #5
 8001214:	f7ff ff1e 	bl	8001054 <AD7190_Calibrate>
  /* Calibrates channel AIN3(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN3P_AINCOM);
 8001218:	2106      	movs	r1, #6
 800121a:	2005      	movs	r0, #5
 800121c:	f7ff ff1a 	bl	8001054 <AD7190_Calibrate>
  /* Calibrates channel AIN4(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN4P_AINCOM);
 8001220:	2107      	movs	r1, #7
 8001222:	2005      	movs	r0, #5
 8001224:	f7ff ff16 	bl	8001054 <AD7190_Calibrate>
     
  // 使能：AD7190_CH_AIN1P_AINCOM
  //       AD7190_CH_AIN2P_AINCOM
  //       AD7190_CH_AIN3P_AINCOM
  //       AD7190_CH_AIN4P_AINCOM
  AD7190_MultiChannelSelect(0xF0);
 8001228:	20f0      	movs	r0, #240	@ 0xf0
 800122a:	f7ff ff86 	bl	800113a <AD7190_MultiChannelSelect>
  
  /* Performs a conversion. */ 
  command = AD7190_MODE_SEL(AD7190_MODE_CONT) | AD7190_MODE_DAT_STA| \
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <ad7190_unipolar_multichannel_conf+0x7c>)
 8001230:	607b      	str	r3, [r7, #4]
                            AD7190_MODE_CLKSRC(AD7190_CLK_EXT_MCLK1_2) | AD7190_MODE_RATE(Get_Speed);
  AD7190_SetRegisterValue(AD7190_REG_MODE, command, 3);  
 8001232:	2203      	movs	r2, #3
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff fe30 	bl	8000e9c <AD7190_SetRegisterValue>
  
  AD7190_Continuous_ReadData(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f7ff fee9 	bl	8001014 <AD7190_Continuous_ReadData>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	00100064 	.word	0x00100064

08001250 <AD7190_Init>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 检测AD7190模块连接是否正常
*/
uint8_t AD7190_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
	uint8_t reg_data;
  MX_AD7190_SPI_Init();
 8001256:	f7ff fd97 	bl	8000d88 <MX_AD7190_SPI_Init>
	AD7190_Reset();
 800125a:	f7ff fea1 	bl	8000fa0 <AD7190_Reset>
	/* Allow at least 500 us before accessing any of the on-chip registers. */
	HAL_Delay(10);  
 800125e:	200a      	movs	r0, #10
 8001260:	f000 fe1c 	bl	8001e9c <HAL_Delay>
  reg_data=AD7190_COMM_READ | AD7190_COMM_ADDR(AD7190_REG_ID);
 8001264:	2360      	movs	r3, #96	@ 0x60
 8001266:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi_AD7190,&reg_data,1,0xFFFF);
 8001268:	1df9      	adds	r1, r7, #7
 800126a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800126e:	2201      	movs	r2, #1
 8001270:	480d      	ldr	r0, [pc, #52]	@ (80012a8 <AD7190_Init+0x58>)
 8001272:	f002 fa98 	bl	80037a6 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi_AD7190,&reg_data,1,0xFFFF);
 8001276:	1df9      	adds	r1, r7, #7
 8001278:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800127c:	2201      	movs	r2, #1
 800127e:	480a      	ldr	r0, [pc, #40]	@ (80012a8 <AD7190_Init+0x58>)
 8001280:	f002 fbd5 	bl	8003a2e <HAL_SPI_Receive>
  printf("AD7190 AD:0x%02X\n",reg_data);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4619      	mov	r1, r3
 8001288:	4808      	ldr	r0, [pc, #32]	@ (80012ac <AD7190_Init+0x5c>)
 800128a:	f006 fd1d 	bl	8007cc8 <iprintf>
	if((reg_data & AD7190_ID_MASK) == ID_AD7190)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	2b04      	cmp	r3, #4
 8001296:	d101      	bne.n	800129c <AD7190_Init+0x4c>
  {
//    printf("conf:0x%06X  ",AD7190_Get_REG_Data(AD7190_REG_CONF));
//    printf("mode:0x%06X\n",AD7190_Get_REG_Data(AD7190_REG_MODE));  
    return ID_AD7190;
 8001298:	2304      	movs	r3, #4
 800129a:	e000      	b.n	800129e <AD7190_Init+0x4e>
  }
	return 0 ;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000008c 	.word	0x2000008c
 80012ac:	080089d8 	.word	0x080089d8

080012b0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <MX_ETH_Init+0x84>)
 80012b6:	4a20      	ldr	r2, [pc, #128]	@ (8001338 <MX_ETH_Init+0x88>)
 80012b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <MX_ETH_Init+0x8c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_ETH_Init+0x8c>)
 80012c2:	2280      	movs	r2, #128	@ 0x80
 80012c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <MX_ETH_Init+0x8c>)
 80012c8:	22e1      	movs	r2, #225	@ 0xe1
 80012ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <MX_ETH_Init+0x8c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80012d2:	4b1a      	ldr	r3, [pc, #104]	@ (800133c <MX_ETH_Init+0x8c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_ETH_Init+0x8c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_ETH_Init+0x84>)
 80012e0:	4a16      	ldr	r2, [pc, #88]	@ (800133c <MX_ETH_Init+0x8c>)
 80012e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80012e4:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_ETH_Init+0x84>)
 80012e6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012ea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_ETH_Init+0x84>)
 80012ee:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <MX_ETH_Init+0x90>)
 80012f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <MX_ETH_Init+0x84>)
 80012f4:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <MX_ETH_Init+0x94>)
 80012f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_ETH_Init+0x84>)
 80012fa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80012fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <MX_ETH_Init+0x84>)
 8001302:	f000 fee1 	bl	80020c8 <HAL_ETH_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800130c:	f000 fbce 	bl	8001aac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001310:	2238      	movs	r2, #56	@ 0x38
 8001312:	2100      	movs	r1, #0
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_ETH_Init+0x98>)
 8001316:	f006 fd2c 	bl	8007d72 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_ETH_Init+0x98>)
 800131c:	2221      	movs	r2, #33	@ 0x21
 800131e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_ETH_Init+0x98>)
 8001322:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001326:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <MX_ETH_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000025c 	.word	0x2000025c
 8001338:	40028000 	.word	0x40028000
 800133c:	2000030c 	.word	0x2000030c
 8001340:	20000184 	.word	0x20000184
 8001344:	200000e4 	.word	0x200000e4
 8001348:	20000224 	.word	0x20000224

0800134c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	@ 0x38
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a46      	ldr	r2, [pc, #280]	@ (8001484 <HAL_ETH_MspInit+0x138>)
 800136a:	4293      	cmp	r3, r2
 800136c:	f040 8085 	bne.w	800147a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
 8001374:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001378:	4a43      	ldr	r2, [pc, #268]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 800137a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800137e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001380:	4b41      	ldr	r3, [pc, #260]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	4b3d      	ldr	r3, [pc, #244]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001394:	4a3c      	ldr	r2, [pc, #240]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 8001396:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800139a:	6313      	str	r3, [r2, #48]	@ 0x30
 800139c:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b0:	4a35      	ldr	r2, [pc, #212]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 80013b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80013b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b8:	4b33      	ldr	r3, [pc, #204]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	4a27      	ldr	r2, [pc, #156]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f0:	4b25      	ldr	r3, [pc, #148]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001404:	4a20      	ldr	r2, [pc, #128]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	6313      	str	r3, [r2, #48]	@ 0x30
 800140c:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <HAL_ETH_MspInit+0x13c>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001418:	2332      	movs	r3, #50	@ 0x32
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001428:	230b      	movs	r3, #11
 800142a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4816      	ldr	r0, [pc, #88]	@ (800148c <HAL_ETH_MspInit+0x140>)
 8001434:	f001 f998 	bl	8002768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001438:	2386      	movs	r3, #134	@ 0x86
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001448:	230b      	movs	r3, #11
 800144a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001450:	4619      	mov	r1, r3
 8001452:	480f      	ldr	r0, [pc, #60]	@ (8001490 <HAL_ETH_MspInit+0x144>)
 8001454:	f001 f988 	bl	8002768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001458:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800146a:	230b      	movs	r3, #11
 800146c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	4807      	ldr	r0, [pc, #28]	@ (8001494 <HAL_ETH_MspInit+0x148>)
 8001476:	f001 f977 	bl	8002768 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800147a:	bf00      	nop
 800147c:	3738      	adds	r7, #56	@ 0x38
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40028000 	.word	0x40028000
 8001488:	40023800 	.word	0x40023800
 800148c:	40020800 	.word	0x40020800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400

08001498 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08e      	sub	sp, #56	@ 0x38
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80014b2:	463b      	mov	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
 80014c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 80014c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014c6:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80014ca:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001588 <MX_FSMC_Init+0xf0>)
 80014d0:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 80014d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014d4:	2206      	movs	r2, #6
 80014d6:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80014de:	4b29      	ldr	r3, [pc, #164]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80014e4:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014e6:	2210      	movs	r2, #16
 80014e8:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80014f0:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80014f6:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80014fc:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <MX_FSMC_Init+0xec>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <MX_FSMC_Init+0xec>)
 8001504:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800150a:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <MX_FSMC_Init+0xec>)
 800150c:	2200      	movs	r2, #0
 800150e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001510:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <MX_FSMC_Init+0xec>)
 8001512:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001516:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001518:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_FSMC_Init+0xec>)
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <MX_FSMC_Init+0xec>)
 8001520:	2200      	movs	r2, #0
 8001522:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_FSMC_Init+0xec>)
 8001526:	2200      	movs	r2, #0
 8001528:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 800152a:	2302      	movs	r3, #2
 800152c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800152e:	230f      	movs	r3, #15
 8001530:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 16;
 8001532:	2310      	movs	r3, #16
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 15;
 8001536:	230f      	movs	r3, #15
 8001538:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800153a:	2310      	movs	r3, #16
 800153c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800153e:	2311      	movs	r3, #17
 8001540:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001542:	2300      	movs	r3, #0
 8001544:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 4;
 8001546:	2304      	movs	r3, #4
 8001548:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800154a:	230f      	movs	r3, #15
 800154c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800154e:	2309      	movs	r3, #9
 8001550:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001556:	2310      	movs	r3, #16
 8001558:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800155a:	2311      	movs	r3, #17
 800155c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8001562:	463a      	mov	r2, r7
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	4806      	ldr	r0, [pc, #24]	@ (8001584 <MX_FSMC_Init+0xec>)
 800156c:	f002 fe64 	bl	8004238 <HAL_SRAM_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001576:	f000 fa99 	bl	8001aac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800157a:	bf00      	nop
 800157c:	3738      	adds	r7, #56	@ 0x38
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000314 	.word	0x20000314
 8001588:	a0000104 	.word	0xa0000104

0800158c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80015a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <HAL_FSMC_MspInit+0xc8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d151      	bne.n	800164c <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_FSMC_MspInit+0xc8>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <HAL_FSMC_MspInit+0xcc>)
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	4a28      	ldr	r2, [pc, #160]	@ (8001658 <HAL_FSMC_MspInit+0xcc>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6393      	str	r3, [r2, #56]	@ 0x38
 80015be:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <HAL_FSMC_MspInit+0xcc>)
 80015c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015dc:	230c      	movs	r3, #12
 80015de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	481d      	ldr	r0, [pc, #116]	@ (800165c <HAL_FSMC_MspInit+0xd0>)
 80015e6:	f001 f8bf 	bl	8002768 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80015ea:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80015ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015fc:	230c      	movs	r3, #12
 80015fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4816      	ldr	r0, [pc, #88]	@ (8001660 <HAL_FSMC_MspInit+0xd4>)
 8001606:	f001 f8af 	bl	8002768 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800160a:	f24c 7333 	movw	r3, #50995	@ 0xc733
 800160e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800161c:	230c      	movs	r3, #12
 800161e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	@ (8001664 <HAL_FSMC_MspInit+0xd8>)
 8001626:	f001 f89f 	bl	8002768 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800162a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800163c:	230c      	movs	r3, #12
 800163e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4808      	ldr	r0, [pc, #32]	@ (8001668 <HAL_FSMC_MspInit+0xdc>)
 8001646:	f001 f88f 	bl	8002768 <HAL_GPIO_Init>
 800164a:	e000      	b.n	800164e <HAL_FSMC_MspInit+0xc2>
    return;
 800164c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000364 	.word	0x20000364
 8001658:	40023800 	.word	0x40023800
 800165c:	40021400 	.word	0x40021400
 8001660:	40021000 	.word	0x40021000
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40021800 	.word	0x40021800

0800166c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001674:	f7ff ff8a 	bl	800158c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	@ 0x38
 8001684:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
 800169a:	4b5c      	ldr	r3, [pc, #368]	@ (800180c <MX_GPIO_Init+0x18c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a5b      	ldr	r2, [pc, #364]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b59      	ldr	r3, [pc, #356]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	4b55      	ldr	r3, [pc, #340]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a54      	ldr	r2, [pc, #336]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b52      	ldr	r3, [pc, #328]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	4b4e      	ldr	r3, [pc, #312]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a4d      	ldr	r2, [pc, #308]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b4b      	ldr	r3, [pc, #300]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
 80016e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b47      	ldr	r3, [pc, #284]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a46      	ldr	r2, [pc, #280]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016f4:	f043 0320 	orr.w	r3, r3, #32
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b44      	ldr	r3, [pc, #272]	@ (800180c <MX_GPIO_Init+0x18c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b40      	ldr	r3, [pc, #256]	@ (800180c <MX_GPIO_Init+0x18c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a3f      	ldr	r2, [pc, #252]	@ (800180c <MX_GPIO_Init+0x18c>)
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b3d      	ldr	r3, [pc, #244]	@ (800180c <MX_GPIO_Init+0x18c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b39      	ldr	r3, [pc, #228]	@ (800180c <MX_GPIO_Init+0x18c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a38      	ldr	r2, [pc, #224]	@ (800180c <MX_GPIO_Init+0x18c>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b36      	ldr	r3, [pc, #216]	@ (800180c <MX_GPIO_Init+0x18c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b32      	ldr	r3, [pc, #200]	@ (800180c <MX_GPIO_Init+0x18c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a31      	ldr	r2, [pc, #196]	@ (800180c <MX_GPIO_Init+0x18c>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <MX_GPIO_Init+0x18c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <MX_GPIO_Init+0x18c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a2a      	ldr	r2, [pc, #168]	@ (800180c <MX_GPIO_Init+0x18c>)
 8001764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b28      	ldr	r3, [pc, #160]	@ (800180c <MX_GPIO_Init+0x18c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	2108      	movs	r1, #8
 800177a:	4825      	ldr	r0, [pc, #148]	@ (8001810 <MX_GPIO_Init+0x190>)
 800177c:	f001 f990 	bl	8002aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001786:	4823      	ldr	r0, [pc, #140]	@ (8001814 <MX_GPIO_Init+0x194>)
 8001788:	f001 f98a 	bl	8002aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KeyUp_Pin;
 800178c:	2301      	movs	r3, #1
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001790:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001796:	2302      	movs	r3, #2
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(KeyUp_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179e:	4619      	mov	r1, r3
 80017a0:	481b      	ldr	r0, [pc, #108]	@ (8001810 <MX_GPIO_Init+0x190>)
 80017a2:	f000 ffe1 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin;
 80017a6:	2308      	movs	r3, #8
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	4814      	ldr	r0, [pc, #80]	@ (8001810 <MX_GPIO_Init+0x190>)
 80017be:	f000 ffd3 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LCD_BL_Pin;
 80017c2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d8:	4619      	mov	r1, r3
 80017da:	480e      	ldr	r0, [pc, #56]	@ (8001814 <MX_GPIO_Init+0x194>)
 80017dc:	f000 ffc4 	bl	8002768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80017f2:	2300      	movs	r3, #0
 80017f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	4806      	ldr	r0, [pc, #24]	@ (8001818 <MX_GPIO_Init+0x198>)
 80017fe:	f000 ffb3 	bl	8002768 <HAL_GPIO_Init>

}
 8001802:	bf00      	nop
 8001804:	3738      	adds	r7, #56	@ 0x38
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020800 	.word	0x40020800
 800181c:	00000000 	.word	0x00000000

08001820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b083      	sub	sp, #12
 8001824:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001826:	f000 fac7 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182a:	f000 f8b1 	bl	8001990 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800182e:	f000 f921 	bl	8001a74 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001832:	f7ff ff25 	bl	8001680 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001836:	f7ff fe2f 	bl	8001498 <MX_FSMC_Init>
  MX_ETH_Init();
 800183a:	f7ff fd39 	bl	80012b0 <MX_ETH_Init>
  //MX_UART4_Init();
  MX_DEBUG_USART_Init();
 800183e:	f006 f949 	bl	8007ad4 <MX_DEBUG_USART_Init>
  lcd_init();
 8001842:	f005 fe31 	bl	80074a8 <lcd_init>

 // MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  if(AD7190_Init()==0)
 8001846:	f7ff fd03 	bl	8001250 <AD7190_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d113      	bne.n	8001878 <main+0x58>
  {
   // printf("获取不到 AD7190 !\n");
   lcd_show_str(10, 0*20 + 10, 16, "AD7190 Init fail", RED);
 8001850:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	4b44      	ldr	r3, [pc, #272]	@ (8001968 <main+0x148>)
 8001858:	2210      	movs	r2, #16
 800185a:	210a      	movs	r1, #10
 800185c:	200a      	movs	r0, #10
 800185e:	f006 f8a9 	bl	80079b4 <lcd_show_str>
    while(1)
    {
      HAL_Delay(1000);
 8001862:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001866:	f000 fb19 	bl	8001e9c <HAL_Delay>
      if(AD7190_Init())
 800186a:	f7ff fcf1 	bl	8001250 <AD7190_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d100      	bne.n	8001876 <main+0x56>
      HAL_Delay(1000);
 8001874:	e7f5      	b.n	8001862 <main+0x42>
        break;
 8001876:	bf00      	nop
    }
  }
  ad7190_unipolar_multichannel_conf();
 8001878:	f7ff fcaa 	bl	80011d0 <ad7190_unipolar_multichannel_conf>
  bias_data[0]=BIAS_VOLTAGE_IN1;
 800187c:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <main+0x14c>)
 800187e:	4a3c      	ldr	r2, [pc, #240]	@ (8001970 <main+0x150>)
 8001880:	601a      	str	r2, [r3, #0]
  bias_data[1]=BIAS_VOLTAGE_IN2;
 8001882:	4b3a      	ldr	r3, [pc, #232]	@ (800196c <main+0x14c>)
 8001884:	4a3b      	ldr	r2, [pc, #236]	@ (8001974 <main+0x154>)
 8001886:	605a      	str	r2, [r3, #4]
  bias_data[2]=BIAS_VOLTAGE_IN3;
 8001888:	4b38      	ldr	r3, [pc, #224]	@ (800196c <main+0x14c>)
 800188a:	4a3b      	ldr	r2, [pc, #236]	@ (8001978 <main+0x158>)
 800188c:	609a      	str	r2, [r3, #8]
  bias_data[3]=BIAS_VOLTAGE_IN4;
 800188e:	4b37      	ldr	r3, [pc, #220]	@ (800196c <main+0x14c>)
 8001890:	4a3a      	ldr	r2, [pc, #232]	@ (800197c <main+0x15c>)
 8001892:	60da      	str	r2, [r3, #12]
  flag=1;
 8001894:	4b3a      	ldr	r3, [pc, #232]	@ (8001980 <main+0x160>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    if(flag==2)
 800189a:	4b39      	ldr	r3, [pc, #228]	@ (8001980 <main+0x160>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d14b      	bne.n	800193c <main+0x11c>
	    {
	#if ZERO_MODE==1
	     // printf("IN%d. 0x%05X\n",number,bias_data[number]);
	#else
	      voltage_data[number]=ad7190_data[number]>>4;
 80018a4:	4b37      	ldr	r3, [pc, #220]	@ (8001984 <main+0x164>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b36      	ldr	r3, [pc, #216]	@ (8001988 <main+0x168>)
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	111b      	asrs	r3, r3, #4
 80018b4:	4a33      	ldr	r2, [pc, #204]	@ (8001984 <main+0x164>)
 80018b6:	7812      	ldrb	r2, [r2, #0]
 80018b8:	b252      	sxtb	r2, r2
 80018ba:	4614      	mov	r4, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe31 	bl	8000524 <__aeabi_i2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4831      	ldr	r0, [pc, #196]	@ (800198c <main+0x16c>)
 80018c8:	00e1      	lsls	r1, r4, #3
 80018ca:	4401      	add	r1, r0
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
	      voltage_data[number]=voltage_data[number]*REFERENCE_VOLTAGE/OPA_RES_R2*OPA_RES_R1/0xFFFFF;
 80018d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <main+0x164>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	4a2d      	ldr	r2, [pc, #180]	@ (800198c <main+0x16c>)
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e0:	a319      	add	r3, pc, #100	@ (adr r3, 8001948 <main+0x128>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fe87 	bl	80005f8 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	a317      	add	r3, pc, #92	@ (adr r3, 8001950 <main+0x130>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe ffa8 	bl	800084c <__aeabi_ddiv>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	a314      	add	r3, pc, #80	@ (adr r3, 8001958 <main+0x138>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fe75 	bl	80005f8 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <main+0x164>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b25b      	sxtb	r3, r3
 800191c:	461c      	mov	r4, r3
 800191e:	a310      	add	r3, pc, #64	@ (adr r3, 8001960 <main+0x140>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe ff92 	bl	800084c <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4817      	ldr	r0, [pc, #92]	@ (800198c <main+0x16c>)
 800192e:	00e1      	lsls	r1, r4, #3
 8001930:	4401      	add	r1, r0
 8001932:	e9c1 2300 	strd	r2, r3, [r1]
	      //printf("IN%d. 0x%05X->%0.3fV\n",number,ad7190_data[number],voltage_data[number]/1000);
	#endif

	      flag=1;
 8001936:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <main+0x160>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
	    }
	    HAL_Delay(10);
 800193c:	200a      	movs	r0, #10
 800193e:	f000 faad 	bl	8001e9c <HAL_Delay>
	    if(flag==2)
 8001942:	e7aa      	b.n	800189a <main+0x7a>
 8001944:	f3af 8000 	nop.w
 8001948:	00000000 	.word	0x00000000
 800194c:	40a9c200 	.word	0x40a9c200
 8001950:	00000000 	.word	0x00000000
 8001954:	40977000 	.word	0x40977000
 8001958:	00000000 	.word	0x00000000
 800195c:	40e3a100 	.word	0x40e3a100
 8001960:	00000000 	.word	0x00000000
 8001964:	412ffffe 	.word	0x412ffffe
 8001968:	080089ec 	.word	0x080089ec
 800196c:	20000378 	.word	0x20000378
 8001970:	0039cf8c 	.word	0x0039cf8c
 8001974:	0039cf52 	.word	0x0039cf52
 8001978:	0039cf4d 	.word	0x0039cf4d
 800197c:	0039d027 	.word	0x0039d027
 8001980:	200003a8 	.word	0x200003a8
 8001984:	200003a9 	.word	0x200003a9
 8001988:	20000368 	.word	0x20000368
 800198c:	20000388 	.word	0x20000388

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b094      	sub	sp, #80	@ 0x50
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	2230      	movs	r2, #48	@ 0x30
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f006 f9e7 	bl	8007d72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a6c <SystemClock_Config+0xdc>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	4a2b      	ldr	r2, [pc, #172]	@ (8001a6c <SystemClock_Config+0xdc>)
 80019be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c4:	4b29      	ldr	r3, [pc, #164]	@ (8001a6c <SystemClock_Config+0xdc>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <SystemClock_Config+0xe0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a25      	ldr	r2, [pc, #148]	@ (8001a70 <SystemClock_Config+0xe0>)
 80019da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b23      	ldr	r3, [pc, #140]	@ (8001a70 <SystemClock_Config+0xe0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ec:	2301      	movs	r3, #1
 80019ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f6:	2302      	movs	r3, #2
 80019f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a00:	2310      	movs	r3, #16
 8001a02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 f85c 	bl	8002ad4 <HAL_RCC_OscConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a22:	f000 f843 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a26:	230f      	movs	r3, #15
 8001a28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2105      	movs	r1, #5
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 fabd 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a50:	f000 f82c 	bl	8001aac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLI2SCLK, RCC_MCODIV_2);
 8001a54:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a58:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f001 fb97 	bl	8003190 <HAL_RCC_MCOConfig>
}
 8001a62:	bf00      	nop
 8001a64:	3750      	adds	r7, #80	@ 0x50
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40007000 	.word	0x40007000

08001a74 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S;
 8001a86:	2304      	movs	r3, #4
 8001a88:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001a8a:	23c8      	movs	r3, #200	@ 0xc8
 8001a8c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	4618      	mov	r0, r3
 8001a96:	f001 fd1b 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8001aa0:	f000 f804 	bl	8001aac <Error_Handler>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <Error_Handler+0x8>

08001ab8 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a19      	ldr	r2, [pc, #100]	@ (8001b3c <HAL_SPI_MspInit+0x84>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d12b      	bne.n	8001b32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001ae4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b12:	2338      	movs	r3, #56	@ 0x38
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b22:	2305      	movs	r3, #5
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_SPI_MspInit+0x8c>)
 8001b2e:	f000 fe1b 	bl	8002768 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	@ 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40013000 	.word	0x40013000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020400 	.word	0x40020400

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_MspInit+0x4c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	4a0f      	ldr	r2, [pc, #60]	@ (8001b94 <HAL_MspInit+0x4c>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_MspInit+0x4c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	603b      	str	r3, [r7, #0]
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <HAL_MspInit+0x4c>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a08      	ldr	r2, [pc, #32]	@ (8001b94 <HAL_MspInit+0x4c>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <HAL_MspInit+0x4c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <NMI_Handler+0x4>

08001ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <MemManage_Handler+0x4>

08001bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bee:	f000 f935 	bl	8001e5c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001bf2:	f000 fa5c 	bl	80020ae <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e00a      	b.n	8001c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0c:	f3af 8000 	nop.w
 8001c10:	4601      	mov	r1, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	60ba      	str	r2, [r7, #8]
 8001c18:	b2ca      	uxtb	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dbf0      	blt.n	8001c0c <_read+0x12>
  }

  return len;
 8001c2a:	687b      	ldr	r3, [r7, #4]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e009      	b.n	8001c5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbf1      	blt.n	8001c46 <_write+0x12>
  }
  return len;
 8001c62:	687b      	ldr	r3, [r7, #4]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_close>:

int _close(int file)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c94:	605a      	str	r2, [r3, #4]
  return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_isatty>:

int _isatty(int file)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	@ (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	@ (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f006 f884 	bl	8007e10 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20020000 	.word	0x20020000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	200003ac 	.word	0x200003ac
 8001d3c:	200005a8 	.word	0x200005a8

08001d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	@ (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d68:	f7ff ffea 	bl	8001d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	@ (8001da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	@ (8001db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d92:	f006 f843 	bl	8007e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7ff fd43 	bl	8001820 <main>
  bx  lr    
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001da8:	0800b9dc 	.word	0x0800b9dc
  ldr r2, =_sbss
 8001dac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001db0:	200005a8 	.word	0x200005a8

08001db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <HAL_Init+0x40>)
 8001dc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <HAL_Init+0x40>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	@ (8001df8 <HAL_Init+0x40>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 f931 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f808 	bl	8001dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dec:	f7ff feac 	bl	8001b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_InitTick+0x54>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_InitTick+0x58>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f93b 	bl	8002096 <HAL_SYSTICK_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00e      	b.n	8001e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b0f      	cmp	r3, #15
 8001e2e:	d80a      	bhi.n	8001e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e30:	2200      	movs	r2, #0
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f000 f911 	bl	800205e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e3c:	4a06      	ldr	r2, [pc, #24]	@ (8001e58 <HAL_InitTick+0x5c>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e000      	b.n	8001e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000008 	.word	0x20000008
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <HAL_IncTick+0x20>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_IncTick+0x24>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a04      	ldr	r2, [pc, #16]	@ (8001e80 <HAL_IncTick+0x24>)
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	200003b0 	.word	0x200003b0

08001e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return uwTick;
 8001e88:	4b03      	ldr	r3, [pc, #12]	@ (8001e98 <HAL_GetTick+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	200003b0 	.word	0x200003b0

08001e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff ffee 	bl	8001e84 <HAL_GetTick>
 8001ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d005      	beq.n	8001ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_Delay+0x44>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ec2:	bf00      	nop
 8001ec4:	f7ff ffde 	bl	8001e84 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d8f7      	bhi.n	8001ec4 <HAL_Delay+0x28>
  {
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	@ 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	@ 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff8e 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff47 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff5c 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff8e 	bl	8001f9c <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5d 	bl	8001f48 <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffb0 	bl	8002004 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80020b2:	f000 f802 	bl	80020ba <HAL_SYSTICK_Callback>
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e08a      	b.n	80021f0 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d106      	bne.n	80020f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff f92d 	bl	800134c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	4b40      	ldr	r3, [pc, #256]	@ (80021f8 <HAL_ETH_Init+0x130>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	4a3f      	ldr	r2, [pc, #252]	@ (80021f8 <HAL_ETH_Init+0x130>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002100:	6453      	str	r3, [r2, #68]	@ 0x44
 8002102:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <HAL_ETH_Init+0x130>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800210e:	4b3b      	ldr	r3, [pc, #236]	@ (80021fc <HAL_ETH_Init+0x134>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a3a      	ldr	r2, [pc, #232]	@ (80021fc <HAL_ETH_Init+0x134>)
 8002114:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002118:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800211a:	4b38      	ldr	r3, [pc, #224]	@ (80021fc <HAL_ETH_Init+0x134>)
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4936      	ldr	r1, [pc, #216]	@ (80021fc <HAL_ETH_Init+0x134>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002128:	4b34      	ldr	r3, [pc, #208]	@ (80021fc <HAL_ETH_Init+0x134>)
 800212a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002142:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002144:	f7ff fe9e 	bl	8001e84 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800214a:	e011      	b.n	8002170 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800214c:	f7ff fe9a 	bl	8001e84 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800215a:	d909      	bls.n	8002170 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2204      	movs	r2, #4
 8002160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	22e0      	movs	r2, #224	@ 0xe0
 8002168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e03f      	b.n	80021f0 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1e4      	bne.n	800214c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f97a 	bl	800247c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fa25 	bl	80025d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fa7b 	bl	800268a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	461a      	mov	r2, r3
 800219a:	2100      	movs	r1, #0
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f9e3 	bl	8002568 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80021b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80021c6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80021da:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2210      	movs	r2, #16
 80021ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40013800 	.word	0x40013800

08002200 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <ETH_SetMACConfig+0x164>)
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7b9b      	ldrb	r3, [r3, #14]
 800221e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	7c12      	ldrb	r2, [r2, #16]
 8002224:	2a00      	cmp	r2, #0
 8002226:	d102      	bne.n	800222e <ETH_SetMACConfig+0x2e>
 8002228:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800222c:	e000      	b.n	8002230 <ETH_SetMACConfig+0x30>
 800222e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002230:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	7c52      	ldrb	r2, [r2, #17]
 8002236:	2a00      	cmp	r2, #0
 8002238:	d102      	bne.n	8002240 <ETH_SetMACConfig+0x40>
 800223a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800223e:	e000      	b.n	8002242 <ETH_SetMACConfig+0x42>
 8002240:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002242:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002248:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	7fdb      	ldrb	r3, [r3, #31]
 800224e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002250:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002256:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	7f92      	ldrb	r2, [r2, #30]
 800225c:	2a00      	cmp	r2, #0
 800225e:	d102      	bne.n	8002266 <ETH_SetMACConfig+0x66>
 8002260:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002264:	e000      	b.n	8002268 <ETH_SetMACConfig+0x68>
 8002266:	2200      	movs	r2, #0
                        macconf->Speed |
 8002268:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	7f1b      	ldrb	r3, [r3, #28]
 800226e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002270:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002276:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	791b      	ldrb	r3, [r3, #4]
 800227c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800227e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002286:	2a00      	cmp	r2, #0
 8002288:	d102      	bne.n	8002290 <ETH_SetMACConfig+0x90>
 800228a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800228e:	e000      	b.n	8002292 <ETH_SetMACConfig+0x92>
 8002290:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002292:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	7bdb      	ldrb	r3, [r3, #15]
 8002298:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800229a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80022aa:	4313      	orrs	r3, r2
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff fdea 	bl	8001e9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80022de:	4013      	ands	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80022ee:	2a00      	cmp	r2, #0
 80022f0:	d101      	bne.n	80022f6 <ETH_SetMACConfig+0xf6>
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	e000      	b.n	80022f8 <ETH_SetMACConfig+0xf8>
 80022f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002306:	2a01      	cmp	r2, #1
 8002308:	d101      	bne.n	800230e <ETH_SetMACConfig+0x10e>
 800230a:	2208      	movs	r2, #8
 800230c:	e000      	b.n	8002310 <ETH_SetMACConfig+0x110>
 800230e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002310:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002318:	2a01      	cmp	r2, #1
 800231a:	d101      	bne.n	8002320 <ETH_SetMACConfig+0x120>
 800231c:	2204      	movs	r2, #4
 800231e:	e000      	b.n	8002322 <ETH_SetMACConfig+0x122>
 8002320:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002322:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800232a:	2a01      	cmp	r2, #1
 800232c:	d101      	bne.n	8002332 <ETH_SetMACConfig+0x132>
 800232e:	2202      	movs	r2, #2
 8002330:	e000      	b.n	8002334 <ETH_SetMACConfig+0x134>
 8002332:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002334:	4313      	orrs	r3, r2
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800234c:	2001      	movs	r0, #1
 800234e:	f7ff fda5 	bl	8001e9c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	619a      	str	r2, [r3, #24]
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	fd20810f 	.word	0xfd20810f

08002368 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <ETH_SetDMAConfig+0x110>)
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	7b1b      	ldrb	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <ETH_SetDMAConfig+0x2c>
 800238e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002392:	e000      	b.n	8002396 <ETH_SetDMAConfig+0x2e>
 8002394:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	7b5b      	ldrb	r3, [r3, #13]
 800239a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800239c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	7f52      	ldrb	r2, [r2, #29]
 80023a2:	2a00      	cmp	r2, #0
 80023a4:	d102      	bne.n	80023ac <ETH_SetDMAConfig+0x44>
 80023a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80023aa:	e000      	b.n	80023ae <ETH_SetDMAConfig+0x46>
 80023ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	7b9b      	ldrb	r3, [r3, #14]
 80023b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7f1b      	ldrb	r3, [r3, #28]
 80023c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7f9b      	ldrb	r3, [r3, #30]
 80023ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023dc:	4313      	orrs	r3, r2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ec:	461a      	mov	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff fd4c 	bl	8001e9c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800240c:	461a      	mov	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800241c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002422:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002428:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002430:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002432:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800243a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002440:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800244a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800244e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff fd1d 	bl	8001e9c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	f8de3f23 	.word	0xf8de3f23

0800247c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0a6      	sub	sp, #152	@ 0x98
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800248a:	2301      	movs	r3, #1
 800248c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002490:	2300      	movs	r3, #0
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024be:	2300      	movs	r3, #0
 80024c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fe7f 	bl	8002200 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002502:	2301      	movs	r3, #1
 8002504:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002506:	2301      	movs	r3, #1
 8002508:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002510:	2301      	movs	r3, #1
 8002512:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002524:	2300      	movs	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800252e:	2301      	movs	r3, #1
 8002530:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002532:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002536:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002538:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800253c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800253e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002542:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800254a:	2300      	movs	r3, #0
 800254c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff05 	bl	8002368 <ETH_SetDMAConfig>
}
 800255e:	bf00      	nop
 8002560:	3798      	adds	r7, #152	@ 0x98
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3305      	adds	r3, #5
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	3204      	adds	r2, #4
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <ETH_MACAddressConfig+0x68>)
 800258a:	4413      	add	r3, r2
 800258c:	461a      	mov	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3303      	adds	r3, #3
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	061a      	lsls	r2, r3, #24
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3302      	adds	r3, #2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3301      	adds	r3, #1
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	4313      	orrs	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <ETH_MACAddressConfig+0x6c>)
 80025ba:	4413      	add	r3, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6013      	str	r3, [r2, #0]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40028040 	.word	0x40028040
 80025d4:	40028044 	.word	0x40028044

080025d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e03e      	b.n	8002664 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2200      	movs	r2, #0
 8002602:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	3206      	adds	r2, #6
 8002618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d80c      	bhi.n	8002648 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68d9      	ldr	r1, [r3, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	e004      	b.n	8002652 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3301      	adds	r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d9bd      	bls.n	80025e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267c:	611a      	str	r2, [r3, #16]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	e048      	b.n	800272a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6919      	ldr	r1, [r3, #16]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80026d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	3212      	adds	r2, #18
 80026f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d80c      	bhi.n	800271a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6919      	ldr	r1, [r3, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	e004      	b.n	8002724 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3301      	adds	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d9b3      	bls.n	8002698 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800275a:	60da      	str	r2, [r3, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	@ 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	e16b      	b.n	8002a5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	f040 815a 	bne.w	8002a56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d005      	beq.n	80027ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d130      	bne.n	800281c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f0:	2201      	movs	r2, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0201 	and.w	r2, r3, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b03      	cmp	r3, #3
 8002826:	d017      	beq.n	8002858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d123      	bne.n	80028ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	08da      	lsrs	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3208      	adds	r2, #8
 80028a6:	69b9      	ldr	r1, [r7, #24]
 80028a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80b4 	beq.w	8002a56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b60      	ldr	r3, [pc, #384]	@ (8002a74 <HAL_GPIO_Init+0x30c>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4a5f      	ldr	r2, [pc, #380]	@ (8002a74 <HAL_GPIO_Init+0x30c>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002a74 <HAL_GPIO_Init+0x30c>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290a:	4a5b      	ldr	r2, [pc, #364]	@ (8002a78 <HAL_GPIO_Init+0x310>)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a52      	ldr	r2, [pc, #328]	@ (8002a7c <HAL_GPIO_Init+0x314>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d02b      	beq.n	800298e <HAL_GPIO_Init+0x226>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a51      	ldr	r2, [pc, #324]	@ (8002a80 <HAL_GPIO_Init+0x318>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d025      	beq.n	800298a <HAL_GPIO_Init+0x222>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a50      	ldr	r2, [pc, #320]	@ (8002a84 <HAL_GPIO_Init+0x31c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01f      	beq.n	8002986 <HAL_GPIO_Init+0x21e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4f      	ldr	r2, [pc, #316]	@ (8002a88 <HAL_GPIO_Init+0x320>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d019      	beq.n	8002982 <HAL_GPIO_Init+0x21a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4e      	ldr	r2, [pc, #312]	@ (8002a8c <HAL_GPIO_Init+0x324>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_GPIO_Init+0x216>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4d      	ldr	r2, [pc, #308]	@ (8002a90 <HAL_GPIO_Init+0x328>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00d      	beq.n	800297a <HAL_GPIO_Init+0x212>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4c      	ldr	r2, [pc, #304]	@ (8002a94 <HAL_GPIO_Init+0x32c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d007      	beq.n	8002976 <HAL_GPIO_Init+0x20e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4b      	ldr	r2, [pc, #300]	@ (8002a98 <HAL_GPIO_Init+0x330>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d101      	bne.n	8002972 <HAL_GPIO_Init+0x20a>
 800296e:	2307      	movs	r3, #7
 8002970:	e00e      	b.n	8002990 <HAL_GPIO_Init+0x228>
 8002972:	2308      	movs	r3, #8
 8002974:	e00c      	b.n	8002990 <HAL_GPIO_Init+0x228>
 8002976:	2306      	movs	r3, #6
 8002978:	e00a      	b.n	8002990 <HAL_GPIO_Init+0x228>
 800297a:	2305      	movs	r3, #5
 800297c:	e008      	b.n	8002990 <HAL_GPIO_Init+0x228>
 800297e:	2304      	movs	r3, #4
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x228>
 8002982:	2303      	movs	r3, #3
 8002984:	e004      	b.n	8002990 <HAL_GPIO_Init+0x228>
 8002986:	2302      	movs	r3, #2
 8002988:	e002      	b.n	8002990 <HAL_GPIO_Init+0x228>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_GPIO_Init+0x228>
 800298e:	2300      	movs	r3, #0
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f002 0203 	and.w	r2, r2, #3
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	4093      	lsls	r3, r2
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a0:	4935      	ldr	r1, [pc, #212]	@ (8002a78 <HAL_GPIO_Init+0x310>)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ae:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <HAL_GPIO_Init+0x334>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029d2:	4a32      	ldr	r2, [pc, #200]	@ (8002a9c <HAL_GPIO_Init+0x334>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d8:	4b30      	ldr	r3, [pc, #192]	@ (8002a9c <HAL_GPIO_Init+0x334>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029fc:	4a27      	ldr	r2, [pc, #156]	@ (8002a9c <HAL_GPIO_Init+0x334>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a02:	4b26      	ldr	r3, [pc, #152]	@ (8002a9c <HAL_GPIO_Init+0x334>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a26:	4a1d      	ldr	r2, [pc, #116]	@ (8002a9c <HAL_GPIO_Init+0x334>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_GPIO_Init+0x334>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a50:	4a12      	ldr	r2, [pc, #72]	@ (8002a9c <HAL_GPIO_Init+0x334>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	f67f ae90 	bls.w	8002784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3724      	adds	r7, #36	@ 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40013800 	.word	0x40013800
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40020400 	.word	0x40020400
 8002a84:	40020800 	.word	0x40020800
 8002a88:	40020c00 	.word	0x40020c00
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40021400 	.word	0x40021400
 8002a94:	40021800 	.word	0x40021800
 8002a98:	40021c00 	.word	0x40021c00
 8002a9c:	40013c00 	.word	0x40013c00

08002aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
 8002aac:	4613      	mov	r3, r2
 8002aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab0:	787b      	ldrb	r3, [r7, #1]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ab6:	887a      	ldrh	r2, [r7, #2]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002abc:	e003      	b.n	8002ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	041a      	lsls	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	619a      	str	r2, [r3, #24]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e267      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d075      	beq.n	8002bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002af2:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d00c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afe:	4b85      	ldr	r3, [pc, #532]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d112      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0a:	4b82      	ldr	r3, [pc, #520]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b16:	d10b      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	4b7e      	ldr	r3, [pc, #504]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05b      	beq.n	8002bdc <HAL_RCC_OscConfig+0x108>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d157      	bne.n	8002bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e242      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x74>
 8002b3a:	4b76      	ldr	r3, [pc, #472]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a75      	ldr	r2, [pc, #468]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x98>
 8002b52:	4b70      	ldr	r3, [pc, #448]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6f      	ldr	r2, [pc, #444]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6c      	ldr	r2, [pc, #432]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	4b69      	ldr	r3, [pc, #420]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a68      	ldr	r2, [pc, #416]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b66      	ldr	r3, [pc, #408]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a65      	ldr	r2, [pc, #404]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f97a 	bl	8001e84 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff f976 	bl	8001e84 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e207      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xc0>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff f966 	bl	8001e84 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7ff f962 	bl	8001e84 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	@ 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1f3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b51      	ldr	r3, [pc, #324]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0xe8>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d063      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bea:	4b4a      	ldr	r3, [pc, #296]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b44      	ldr	r3, [pc, #272]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1c7      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4937      	ldr	r1, [pc, #220]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e03a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b34      	ldr	r3, [pc, #208]	@ (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7ff f91b 	bl	8001e84 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c52:	f7ff f917 	bl	8001e84 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1a8      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b28      	ldr	r3, [pc, #160]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4925      	ldr	r1, [pc, #148]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7ff f8fa 	bl	8001e84 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7ff f8f6 	bl	8001e84 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e187      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d036      	beq.n	8002d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7ff f8da 	bl	8001e84 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7ff f8d6 	bl	8001e84 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e167      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x200>
 8002cf2:	e01b      	b.n	8002d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf4:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7ff f8c3 	bl	8001e84 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	e00e      	b.n	8002d20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d02:	f7ff f8bf 	bl	8001e84 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d907      	bls.n	8002d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e150      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002d14:	40023800 	.word	0x40023800
 8002d18:	42470000 	.word	0x42470000
 8002d1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ea      	bne.n	8002d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8097 	beq.w	8002e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3e:	4b81      	ldr	r3, [pc, #516]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a7c      	ldr	r2, [pc, #496]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b77      	ldr	r3, [pc, #476]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b74      	ldr	r3, [pc, #464]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a73      	ldr	r2, [pc, #460]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7ff f87f 	bl	8001e84 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7ff f87b 	bl	8001e84 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e10c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2ea>
 8002db0:	4b64      	ldr	r3, [pc, #400]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db4:	4a63      	ldr	r2, [pc, #396]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x30c>
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	4a5e      	ldr	r2, [pc, #376]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002de0:	4b58      	ldr	r3, [pc, #352]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de4:	4a57      	ldr	r2, [pc, #348]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dec:	4b55      	ldr	r3, [pc, #340]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df0:	4a54      	ldr	r2, [pc, #336]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f023 0304 	bic.w	r3, r3, #4
 8002df6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d015      	beq.n	8002e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7ff f840 	bl	8001e84 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7ff f83c 	bl	8001e84 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0cb      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	4b49      	ldr	r3, [pc, #292]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ee      	beq.n	8002e08 <HAL_RCC_OscConfig+0x334>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7ff f82a 	bl	8001e84 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7ff f826 	bl	8001e84 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0b5      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ee      	bne.n	8002e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	4a38      	ldr	r2, [pc, #224]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a1 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e72:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d05c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d141      	bne.n	8002f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b31      	ldr	r3, [pc, #196]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fffa 	bl	8001e84 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe fff6 	bl	8001e84 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e087      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	019b      	lsls	r3, r3, #6
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	491b      	ldr	r1, [pc, #108]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fe ffcf 	bl	8001e84 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fe ffcb 	bl	8001e84 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e05c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x416>
 8002f08:	e054      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe ffb8 	bl	8001e84 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe ffb4 	bl	8001e84 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e045      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x444>
 8002f36:	e03d      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e038      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <HAL_RCC_OscConfig+0x4ec>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d028      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d121      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d11a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0cc      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b68      	ldr	r3, [pc, #416]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d90c      	bls.n	8003000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a58      	ldr	r2, [pc, #352]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a52      	ldr	r2, [pc, #328]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800303a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d119      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d003      	beq.n	8003082 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b3f      	ldr	r3, [pc, #252]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e067      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b37      	ldr	r3, [pc, #220]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4934      	ldr	r1, [pc, #208]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fee6 	bl	8001e84 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe fee2 	bl	8001e84 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d20c      	bcs.n	800310c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b22      	ldr	r3, [pc, #136]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f889 	bl	8003260 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	@ (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fe46 	bl	8001dfc <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023c00 	.word	0x40023c00
 8003180:	40023800 	.word	0x40023800
 8003184:	08008a00 	.word	0x08008a00
 8003188:	20000000 	.word	0x20000000
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	@ 0x30
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d129      	bne.n	80031f6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b2:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80031be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c8:	2303      	movs	r3, #3
 80031ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80031d4:	f107 031c 	add.w	r3, r7, #28
 80031d8:	4619      	mov	r1, r3
 80031da:	481f      	ldr	r0, [pc, #124]	@ (8003258 <HAL_RCC_MCOConfig+0xc8>)
 80031dc:	f7ff fac4 	bl	8002768 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80031e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	4919      	ldr	r1, [pc, #100]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80031f4:	e029      	b.n	800324a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	4b16      	ldr	r3, [pc, #88]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	4a15      	ldr	r2, [pc, #84]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 8003200:	f043 0304 	orr.w	r3, r3, #4
 8003204:	6313      	str	r3, [r2, #48]	@ 0x30
 8003206:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	617b      	str	r3, [r7, #20]
 8003210:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003212:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800321c:	2303      	movs	r3, #3
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003228:	f107 031c 	add.w	r3, r7, #28
 800322c:	4619      	mov	r1, r3
 800322e:	480b      	ldr	r0, [pc, #44]	@ (800325c <HAL_RCC_MCOConfig+0xcc>)
 8003230:	f7ff fa9a 	bl	8002768 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003234:	4b07      	ldr	r3, [pc, #28]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	00d9      	lsls	r1, r3, #3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	430b      	orrs	r3, r1
 8003244:	4903      	ldr	r1, [pc, #12]	@ (8003254 <HAL_RCC_MCOConfig+0xc4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
}
 800324a:	bf00      	nop
 800324c:	3730      	adds	r7, #48	@ 0x30
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	40020000 	.word	0x40020000
 800325c:	40020800 	.word	0x40020800

08003260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003264:	b094      	sub	sp, #80	@ 0x50
 8003266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003278:	4b79      	ldr	r3, [pc, #484]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	2b08      	cmp	r3, #8
 8003282:	d00d      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003284:	2b08      	cmp	r3, #8
 8003286:	f200 80e1 	bhi.w	800344c <HAL_RCC_GetSysClockFreq+0x1ec>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0x34>
 800328e:	2b04      	cmp	r3, #4
 8003290:	d003      	beq.n	800329a <HAL_RCC_GetSysClockFreq+0x3a>
 8003292:	e0db      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b73      	ldr	r3, [pc, #460]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x204>)
 8003296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003298:	e0db      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329a:	4b72      	ldr	r3, [pc, #456]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x204>)
 800329c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800329e:	e0d8      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d063      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2200      	movs	r2, #0
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ca:	2300      	movs	r3, #0
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032d2:	4622      	mov	r2, r4
 80032d4:	462b      	mov	r3, r5
 80032d6:	f04f 0000 	mov.w	r0, #0
 80032da:	f04f 0100 	mov.w	r1, #0
 80032de:	0159      	lsls	r1, r3, #5
 80032e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e4:	0150      	lsls	r0, r2, #5
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4621      	mov	r1, r4
 80032ec:	1a51      	subs	r1, r2, r1
 80032ee:	6139      	str	r1, [r7, #16]
 80032f0:	4629      	mov	r1, r5
 80032f2:	eb63 0301 	sbc.w	r3, r3, r1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003304:	4659      	mov	r1, fp
 8003306:	018b      	lsls	r3, r1, #6
 8003308:	4651      	mov	r1, sl
 800330a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800330e:	4651      	mov	r1, sl
 8003310:	018a      	lsls	r2, r1, #6
 8003312:	4651      	mov	r1, sl
 8003314:	ebb2 0801 	subs.w	r8, r2, r1
 8003318:	4659      	mov	r1, fp
 800331a:	eb63 0901 	sbc.w	r9, r3, r1
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800332a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800332e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003332:	4690      	mov	r8, r2
 8003334:	4699      	mov	r9, r3
 8003336:	4623      	mov	r3, r4
 8003338:	eb18 0303 	adds.w	r3, r8, r3
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	462b      	mov	r3, r5
 8003340:	eb49 0303 	adc.w	r3, r9, r3
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003352:	4629      	mov	r1, r5
 8003354:	028b      	lsls	r3, r1, #10
 8003356:	4621      	mov	r1, r4
 8003358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800335c:	4621      	mov	r1, r4
 800335e:	028a      	lsls	r2, r1, #10
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003366:	2200      	movs	r2, #0
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800336a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800336c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003370:	f7fd fb74 	bl	8000a5c <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4613      	mov	r3, r2
 800337a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800337c:	e058      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b38      	ldr	r3, [pc, #224]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	2200      	movs	r2, #0
 8003386:	4618      	mov	r0, r3
 8003388:	4611      	mov	r1, r2
 800338a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
 8003394:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003398:	4642      	mov	r2, r8
 800339a:	464b      	mov	r3, r9
 800339c:	f04f 0000 	mov.w	r0, #0
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	0159      	lsls	r1, r3, #5
 80033a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033aa:	0150      	lsls	r0, r2, #5
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4641      	mov	r1, r8
 80033b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80033b6:	4649      	mov	r1, r9
 80033b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033d0:	ebb2 040a 	subs.w	r4, r2, sl
 80033d4:	eb63 050b 	sbc.w	r5, r3, fp
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	00eb      	lsls	r3, r5, #3
 80033e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e6:	00e2      	lsls	r2, r4, #3
 80033e8:	4614      	mov	r4, r2
 80033ea:	461d      	mov	r5, r3
 80033ec:	4643      	mov	r3, r8
 80033ee:	18e3      	adds	r3, r4, r3
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	464b      	mov	r3, r9
 80033f4:	eb45 0303 	adc.w	r3, r5, r3
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003406:	4629      	mov	r1, r5
 8003408:	028b      	lsls	r3, r1, #10
 800340a:	4621      	mov	r1, r4
 800340c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003410:	4621      	mov	r1, r4
 8003412:	028a      	lsls	r2, r1, #10
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341a:	2200      	movs	r2, #0
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	61fa      	str	r2, [r7, #28]
 8003420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003424:	f7fd fb1a 	bl	8000a5c <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003430:	4b0b      	ldr	r3, [pc, #44]	@ (8003460 <HAL_RCC_GetSysClockFreq+0x200>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	3301      	adds	r3, #1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800344a:	e002      	b.n	8003452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_RCC_GetSysClockFreq+0x204>)
 800344e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003454:	4618      	mov	r0, r3
 8003456:	3750      	adds	r7, #80	@ 0x50
 8003458:	46bd      	mov	sp, r7
 800345a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800
 8003464:	00f42400 	.word	0x00f42400

08003468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	@ (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003484:	f7ff fff0 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0a9b      	lsrs	r3, r3, #10
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	@ (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	08008a10 	.word	0x08008a10

080034a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034ac:	f7ff ffdc 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0b5b      	lsrs	r3, r3, #13
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	@ (80034cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08008a10 	.word	0x08008a10

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d035      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034f8:	4b62      	ldr	r3, [pc, #392]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034fe:	f7fe fcc1 	bl	8001e84 <HAL_GetTick>
 8003502:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003506:	f7fe fcbd 	bl	8001e84 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e0b0      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003518:	4b5b      	ldr	r3, [pc, #364]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f0      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	019a      	lsls	r2, r3, #6
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	071b      	lsls	r3, r3, #28
 8003530:	4955      	ldr	r1, [pc, #340]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003538:	4b52      	ldr	r3, [pc, #328]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800353e:	f7fe fca1 	bl	8001e84 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003546:	f7fe fc9d 	bl	8001e84 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e090      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003558:	4b4b      	ldr	r3, [pc, #300]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8083 	beq.w	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b44      	ldr	r3, [pc, #272]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	4a43      	ldr	r2, [pc, #268]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	@ 0x40
 8003582:	4b41      	ldr	r3, [pc, #260]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800358e:	4b3f      	ldr	r3, [pc, #252]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a3e      	ldr	r2, [pc, #248]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003598:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800359a:	f7fe fc73 	bl	8001e84 <HAL_GetTick>
 800359e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a2:	f7fe fc6f 	bl	8001e84 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e062      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80035b4:	4b35      	ldr	r3, [pc, #212]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c0:	4b31      	ldr	r3, [pc, #196]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035c8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d02f      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d028      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035de:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e8:	4b29      	ldr	r3, [pc, #164]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ee:	4b28      	ldr	r3, [pc, #160]	@ (8003690 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80035f4:	4a24      	ldr	r2, [pc, #144]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035fa:	4b23      	ldr	r3, [pc, #140]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d114      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003606:	f7fe fc3d 	bl	8001e84 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	e00a      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fe fc39 	bl	8001e84 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361c:	4293      	cmp	r3, r2
 800361e:	d901      	bls.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e02a      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003624:	4b18      	ldr	r3, [pc, #96]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ee      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800363c:	d10d      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800363e:	4b12      	ldr	r3, [pc, #72]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800364e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003652:	490d      	ldr	r1, [pc, #52]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003654:	4313      	orrs	r3, r2
 8003656:	608b      	str	r3, [r1, #8]
 8003658:	e005      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800365a:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003660:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003664:	6093      	str	r3, [r2, #8]
 8003666:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003668:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	4905      	ldr	r1, [pc, #20]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003674:	4313      	orrs	r3, r2
 8003676:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	42470068 	.word	0x42470068
 8003688:	40023800 	.word	0x40023800
 800368c:	40007000 	.word	0x40007000
 8003690:	42470e40 	.word	0x42470e40

08003694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e07b      	b.n	800379e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036b6:	d009      	beq.n	80036cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	61da      	str	r2, [r3, #28]
 80036be:	e005      	b.n	80036cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe f9e6 	bl	8001ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003750:	ea42 0103 	orr.w	r1, r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003758:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	f003 0104 	and.w	r1, r3, #4
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	f003 0210 	and.w	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800378c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b088      	sub	sp, #32
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	4613      	mov	r3, r2
 80037b4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037b6:	f7fe fb65 	bl	8001e84 <HAL_GetTick>
 80037ba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d001      	beq.n	80037d0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
 80037ce:	e12a      	b.n	8003a26 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_SPI_Transmit+0x36>
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e122      	b.n	8003a26 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_SPI_Transmit+0x48>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e11b      	b.n	8003a26 <HAL_SPI_Transmit+0x280>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2203      	movs	r2, #3
 80037fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800383c:	d10f      	bne.n	800385e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800384c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800385c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003868:	2b40      	cmp	r3, #64	@ 0x40
 800386a:	d007      	beq.n	800387c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800387a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003884:	d152      	bne.n	800392c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_SPI_Transmit+0xee>
 800388e:	8b7b      	ldrh	r3, [r7, #26]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d145      	bne.n	8003920 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	881a      	ldrh	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a4:	1c9a      	adds	r2, r3, #2
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038b8:	e032      	b.n	8003920 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d112      	bne.n	80038ee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038cc:	881a      	ldrh	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	1c9a      	adds	r2, r3, #2
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038ec:	e018      	b.n	8003920 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ee:	f7fe fac9 	bl	8001e84 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d803      	bhi.n	8003906 <HAL_SPI_Transmit+0x160>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d102      	bne.n	800390c <HAL_SPI_Transmit+0x166>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e082      	b.n	8003a26 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1c7      	bne.n	80038ba <HAL_SPI_Transmit+0x114>
 800392a:	e053      	b.n	80039d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_SPI_Transmit+0x194>
 8003934:	8b7b      	ldrh	r3, [r7, #26]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d147      	bne.n	80039ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	7812      	ldrb	r2, [r2, #0]
 8003946:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003960:	e033      	b.n	80039ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b02      	cmp	r3, #2
 800396e:	d113      	bne.n	8003998 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003996:	e018      	b.n	80039ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003998:	f7fe fa74 	bl	8001e84 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d803      	bhi.n	80039b0 <HAL_SPI_Transmit+0x20a>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ae:	d102      	bne.n	80039b6 <HAL_SPI_Transmit+0x210>
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e02d      	b.n	8003a26 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1c6      	bne.n	8003962 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	6839      	ldr	r1, [r7, #0]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fbd9 	bl	8004190 <SPI_EndRxTxTransaction>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b088      	sub	sp, #32
 8003a32:	af02      	add	r7, sp, #8
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d001      	beq.n	8003a4e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e104      	b.n	8003c58 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_SPI_Receive+0x2c>
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0fc      	b.n	8003c58 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a66:	d112      	bne.n	8003a8e <HAL_SPI_Receive+0x60>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10e      	bne.n	8003a8e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2204      	movs	r2, #4
 8003a74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f8eb 	bl	8003c60 <HAL_SPI_TransmitReceive>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	e0e4      	b.n	8003c58 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a8e:	f7fe f9f9 	bl	8001e84 <HAL_GetTick>
 8003a92:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_SPI_Receive+0x74>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e0da      	b.n	8003c58 <HAL_SPI_Receive+0x22a>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2204      	movs	r2, #4
 8003aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003af0:	d10f      	bne.n	8003b12 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b10:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	d007      	beq.n	8003b30 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d170      	bne.n	8003c1a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b38:	e035      	b.n	8003ba6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d115      	bne.n	8003b74 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f103 020c 	add.w	r2, r3, #12
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b72:	e018      	b.n	8003ba6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b74:	f7fe f986 	bl	8001e84 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d803      	bhi.n	8003b8c <HAL_SPI_Receive+0x15e>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_Receive+0x164>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e058      	b.n	8003c58 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1c4      	bne.n	8003b3a <HAL_SPI_Receive+0x10c>
 8003bb0:	e038      	b.n	8003c24 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d113      	bne.n	8003be8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003be6:	e018      	b.n	8003c1a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be8:	f7fe f94c 	bl	8001e84 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d803      	bhi.n	8003c00 <HAL_SPI_Receive+0x1d2>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfe:	d102      	bne.n	8003c06 <HAL_SPI_Receive+0x1d8>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d109      	bne.n	8003c1a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e01e      	b.n	8003c58 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1c6      	bne.n	8003bb2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	6839      	ldr	r1, [r7, #0]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fa4b 	bl	80040c4 <SPI_EndRxTransaction>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003c56:	2300      	movs	r3, #0
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c72:	f7fe f907 	bl	8001e84 <HAL_GetTick>
 8003c76:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c7e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c8a:	7ffb      	ldrb	r3, [r7, #31]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d00c      	beq.n	8003caa <HAL_SPI_TransmitReceive+0x4a>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c96:	d106      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <HAL_SPI_TransmitReceive+0x46>
 8003ca0:	7ffb      	ldrb	r3, [r7, #31]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d001      	beq.n	8003caa <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e17f      	b.n	8003faa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x5c>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x5c>
 8003cb6:	887b      	ldrh	r3, [r7, #2]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e174      	b.n	8003faa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x6e>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e16d      	b.n	8003faa <HAL_SPI_TransmitReceive+0x34a>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d003      	beq.n	8003cea <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2205      	movs	r2, #5
 8003ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	887a      	ldrh	r2, [r7, #2]
 8003cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	887a      	ldrh	r2, [r7, #2]
 8003d12:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d2a:	2b40      	cmp	r3, #64	@ 0x40
 8003d2c:	d007      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d46:	d17e      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0xf6>
 8003d50:	8afb      	ldrh	r3, [r7, #22]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d16c      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	881a      	ldrh	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	1c9a      	adds	r2, r3, #2
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d7a:	e059      	b.n	8003e30 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d11b      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x162>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d016      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x162>
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d113      	bne.n	8003dc2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	881a      	ldrh	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	1c9a      	adds	r2, r3, #2
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d119      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x1a4>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d014      	beq.n	8003e04 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de4:	b292      	uxth	r2, r2
 8003de6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	1c9a      	adds	r2, r3, #2
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e00:	2301      	movs	r3, #1
 8003e02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e04:	f7fe f83e 	bl	8001e84 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d80d      	bhi.n	8003e30 <HAL_SPI_TransmitReceive+0x1d0>
 8003e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d009      	beq.n	8003e30 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0bc      	b.n	8003faa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1a0      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x11c>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d19b      	bne.n	8003d7c <HAL_SPI_TransmitReceive+0x11c>
 8003e44:	e082      	b.n	8003f4c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_TransmitReceive+0x1f4>
 8003e4e:	8afb      	ldrh	r3, [r7, #22]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d171      	bne.n	8003f38 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	7812      	ldrb	r2, [r2, #0]
 8003e60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e7a:	e05d      	b.n	8003f38 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d11c      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x264>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d017      	beq.n	8003ec4 <HAL_SPI_TransmitReceive+0x264>
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d114      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d119      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x2a6>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f02:	2301      	movs	r3, #1
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f06:	f7fd ffbd 	bl	8001e84 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d803      	bhi.n	8003f1e <HAL_SPI_TransmitReceive+0x2be>
 8003f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d102      	bne.n	8003f24 <HAL_SPI_TransmitReceive+0x2c4>
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e038      	b.n	8003faa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d19c      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x21c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d197      	bne.n	8003e7c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f4c:	6a3a      	ldr	r2, [r7, #32]
 8003f4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f91d 	bl	8004190 <SPI_EndRxTxTransaction>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e01d      	b.n	8003faa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3728      	adds	r7, #40	@ 0x28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fc4:	f7fd ff5e 	bl	8001e84 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fd4:	f7fd ff56 	bl	8001e84 <HAL_GetTick>
 8003fd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fda:	4b39      	ldr	r3, [pc, #228]	@ (80040c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	015b      	lsls	r3, r3, #5
 8003fe0:	0d1b      	lsrs	r3, r3, #20
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	fb02 f303 	mul.w	r3, r2, r3
 8003fe8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fea:	e055      	b.n	8004098 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d051      	beq.n	8004098 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ff4:	f7fd ff46 	bl	8001e84 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	429a      	cmp	r2, r3
 8004002:	d902      	bls.n	800400a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d13d      	bne.n	8004086 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004018:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004022:	d111      	bne.n	8004048 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800402c:	d004      	beq.n	8004038 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004036:	d107      	bne.n	8004048 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004046:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004050:	d10f      	bne.n	8004072 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004070:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e018      	b.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	e002      	b.n	8004098 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	3b01      	subs	r3, #1
 8004096:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4013      	ands	r3, r2
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	461a      	mov	r2, r3
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d19a      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000000 	.word	0x20000000

080040c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040d8:	d111      	bne.n	80040fe <SPI_EndRxTransaction+0x3a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e2:	d004      	beq.n	80040ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ec:	d107      	bne.n	80040fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004106:	d12a      	bne.n	800415e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004110:	d012      	beq.n	8004138 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2200      	movs	r2, #0
 800411a:	2180      	movs	r1, #128	@ 0x80
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff ff49 	bl	8003fb4 <SPI_WaitFlagStateUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d02d      	beq.n	8004184 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800412c:	f043 0220 	orr.w	r2, r3, #32
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e026      	b.n	8004186 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2200      	movs	r2, #0
 8004140:	2101      	movs	r1, #1
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff ff36 	bl	8003fb4 <SPI_WaitFlagStateUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01a      	beq.n	8004184 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e013      	b.n	8004186 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2200      	movs	r2, #0
 8004166:	2101      	movs	r1, #1
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f7ff ff23 	bl	8003fb4 <SPI_WaitFlagStateUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f043 0220 	orr.w	r2, r3, #32
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e000      	b.n	8004186 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2201      	movs	r2, #1
 80041a4:	2102      	movs	r1, #2
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff ff04 	bl	8003fb4 <SPI_WaitFlagStateUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e032      	b.n	8004228 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004230 <SPI_EndRxTxTransaction+0xa0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004234 <SPI_EndRxTxTransaction+0xa4>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	0d5b      	lsrs	r3, r3, #21
 80041ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041e0:	d112      	bne.n	8004208 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2200      	movs	r2, #0
 80041ea:	2180      	movs	r1, #128	@ 0x80
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff fee1 	bl	8003fb4 <SPI_WaitFlagStateUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d016      	beq.n	8004226 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e00f      	b.n	8004228 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3b01      	subs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421e:	2b80      	cmp	r3, #128	@ 0x80
 8004220:	d0f2      	beq.n	8004208 <SPI_EndRxTxTransaction+0x78>
 8004222:	e000      	b.n	8004226 <SPI_EndRxTxTransaction+0x96>
        break;
 8004224:	bf00      	nop
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000000 	.word	0x20000000
 8004234:	165e9f81 	.word	0x165e9f81

08004238 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e038      	b.n	80042c0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7fd fa02 	bl	800166c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3308      	adds	r3, #8
 8004270:	4619      	mov	r1, r3
 8004272:	4610      	mov	r0, r2
 8004274:	f000 faec 	bl	8004850 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	461a      	mov	r2, r3
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	f000 fb4e 	bl	8004924 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6858      	ldr	r0, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	f000 fb73 	bl	8004980 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	6892      	ldr	r2, [r2, #8]
 80042a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	6892      	ldr	r2, [r2, #8]
 80042ae:	f041 0101 	orr.w	r1, r1, #1
 80042b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e042      	b.n	8004360 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f003 fbb4 	bl	8007a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2224      	movs	r2, #36	@ 0x24
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800430a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f82b 	bl	8004368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800436c:	b0c0      	sub	sp, #256	@ 0x100
 800436e:	af00      	add	r7, sp, #0
 8004370:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004384:	68d9      	ldr	r1, [r3, #12]
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	ea40 0301 	orr.w	r3, r0, r1
 8004390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	431a      	orrs	r2, r3
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043c0:	f021 010c 	bic.w	r1, r1, #12
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043ce:	430b      	orrs	r3, r1
 80043d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e2:	6999      	ldr	r1, [r3, #24]
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	ea40 0301 	orr.w	r3, r0, r1
 80043ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b8f      	ldr	r3, [pc, #572]	@ (8004634 <UART_SetConfig+0x2cc>)
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d005      	beq.n	8004408 <UART_SetConfig+0xa0>
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b8d      	ldr	r3, [pc, #564]	@ (8004638 <UART_SetConfig+0x2d0>)
 8004404:	429a      	cmp	r2, r3
 8004406:	d104      	bne.n	8004412 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7ff f84e 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 800440c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004410:	e003      	b.n	800441a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004412:	f7ff f835 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8004416:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004424:	f040 810c 	bne.w	8004640 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800442c:	2200      	movs	r2, #0
 800442e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004432:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800443a:	4622      	mov	r2, r4
 800443c:	462b      	mov	r3, r5
 800443e:	1891      	adds	r1, r2, r2
 8004440:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004442:	415b      	adcs	r3, r3
 8004444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800444a:	4621      	mov	r1, r4
 800444c:	eb12 0801 	adds.w	r8, r2, r1
 8004450:	4629      	mov	r1, r5
 8004452:	eb43 0901 	adc.w	r9, r3, r1
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800446a:	4690      	mov	r8, r2
 800446c:	4699      	mov	r9, r3
 800446e:	4623      	mov	r3, r4
 8004470:	eb18 0303 	adds.w	r3, r8, r3
 8004474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004478:	462b      	mov	r3, r5
 800447a:	eb49 0303 	adc.w	r3, r9, r3
 800447e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800448e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004496:	460b      	mov	r3, r1
 8004498:	18db      	adds	r3, r3, r3
 800449a:	653b      	str	r3, [r7, #80]	@ 0x50
 800449c:	4613      	mov	r3, r2
 800449e:	eb42 0303 	adc.w	r3, r2, r3
 80044a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80044a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044ac:	f7fc fad6 	bl	8000a5c <__aeabi_uldivmod>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4b61      	ldr	r3, [pc, #388]	@ (800463c <UART_SetConfig+0x2d4>)
 80044b6:	fba3 2302 	umull	r2, r3, r3, r2
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	011c      	lsls	r4, r3, #4
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044d8:	415b      	adcs	r3, r3
 80044da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044e0:	4641      	mov	r1, r8
 80044e2:	eb12 0a01 	adds.w	sl, r2, r1
 80044e6:	4649      	mov	r1, r9
 80044e8:	eb43 0b01 	adc.w	fp, r3, r1
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004500:	4692      	mov	sl, r2
 8004502:	469b      	mov	fp, r3
 8004504:	4643      	mov	r3, r8
 8004506:	eb1a 0303 	adds.w	r3, sl, r3
 800450a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800450e:	464b      	mov	r3, r9
 8004510:	eb4b 0303 	adc.w	r3, fp, r3
 8004514:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004524:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004528:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800452c:	460b      	mov	r3, r1
 800452e:	18db      	adds	r3, r3, r3
 8004530:	643b      	str	r3, [r7, #64]	@ 0x40
 8004532:	4613      	mov	r3, r2
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	647b      	str	r3, [r7, #68]	@ 0x44
 800453a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800453e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004542:	f7fc fa8b 	bl	8000a5c <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4611      	mov	r1, r2
 800454c:	4b3b      	ldr	r3, [pc, #236]	@ (800463c <UART_SetConfig+0x2d4>)
 800454e:	fba3 2301 	umull	r2, r3, r3, r1
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2264      	movs	r2, #100	@ 0x64
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	1acb      	subs	r3, r1, r3
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004562:	4b36      	ldr	r3, [pc, #216]	@ (800463c <UART_SetConfig+0x2d4>)
 8004564:	fba3 2302 	umull	r2, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004570:	441c      	add	r4, r3
 8004572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800457c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004580:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004584:	4642      	mov	r2, r8
 8004586:	464b      	mov	r3, r9
 8004588:	1891      	adds	r1, r2, r2
 800458a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800458c:	415b      	adcs	r3, r3
 800458e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004594:	4641      	mov	r1, r8
 8004596:	1851      	adds	r1, r2, r1
 8004598:	6339      	str	r1, [r7, #48]	@ 0x30
 800459a:	4649      	mov	r1, r9
 800459c:	414b      	adcs	r3, r1
 800459e:	637b      	str	r3, [r7, #52]	@ 0x34
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045ac:	4659      	mov	r1, fp
 80045ae:	00cb      	lsls	r3, r1, #3
 80045b0:	4651      	mov	r1, sl
 80045b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b6:	4651      	mov	r1, sl
 80045b8:	00ca      	lsls	r2, r1, #3
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	4603      	mov	r3, r0
 80045c0:	4642      	mov	r2, r8
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045c8:	464b      	mov	r3, r9
 80045ca:	460a      	mov	r2, r1
 80045cc:	eb42 0303 	adc.w	r3, r2, r3
 80045d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045e8:	460b      	mov	r3, r1
 80045ea:	18db      	adds	r3, r3, r3
 80045ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045ee:	4613      	mov	r3, r2
 80045f0:	eb42 0303 	adc.w	r3, r2, r3
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045fe:	f7fc fa2d 	bl	8000a5c <__aeabi_uldivmod>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <UART_SetConfig+0x2d4>)
 8004608:	fba3 1302 	umull	r1, r3, r3, r2
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	2164      	movs	r1, #100	@ 0x64
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	3332      	adds	r3, #50	@ 0x32
 800461a:	4a08      	ldr	r2, [pc, #32]	@ (800463c <UART_SetConfig+0x2d4>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	f003 0207 	and.w	r2, r3, #7
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4422      	add	r2, r4
 800462e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004630:	e106      	b.n	8004840 <UART_SetConfig+0x4d8>
 8004632:	bf00      	nop
 8004634:	40011000 	.word	0x40011000
 8004638:	40011400 	.word	0x40011400
 800463c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004644:	2200      	movs	r2, #0
 8004646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800464a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800464e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004652:	4642      	mov	r2, r8
 8004654:	464b      	mov	r3, r9
 8004656:	1891      	adds	r1, r2, r2
 8004658:	6239      	str	r1, [r7, #32]
 800465a:	415b      	adcs	r3, r3
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24
 800465e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004662:	4641      	mov	r1, r8
 8004664:	1854      	adds	r4, r2, r1
 8004666:	4649      	mov	r1, r9
 8004668:	eb43 0501 	adc.w	r5, r3, r1
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	00eb      	lsls	r3, r5, #3
 8004676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800467a:	00e2      	lsls	r2, r4, #3
 800467c:	4614      	mov	r4, r2
 800467e:	461d      	mov	r5, r3
 8004680:	4643      	mov	r3, r8
 8004682:	18e3      	adds	r3, r4, r3
 8004684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004688:	464b      	mov	r3, r9
 800468a:	eb45 0303 	adc.w	r3, r5, r3
 800468e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800469e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046ae:	4629      	mov	r1, r5
 80046b0:	008b      	lsls	r3, r1, #2
 80046b2:	4621      	mov	r1, r4
 80046b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046b8:	4621      	mov	r1, r4
 80046ba:	008a      	lsls	r2, r1, #2
 80046bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046c0:	f7fc f9cc 	bl	8000a5c <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4b60      	ldr	r3, [pc, #384]	@ (800484c <UART_SetConfig+0x4e4>)
 80046ca:	fba3 2302 	umull	r2, r3, r3, r2
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	011c      	lsls	r4, r3, #4
 80046d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	61b9      	str	r1, [r7, #24]
 80046ec:	415b      	adcs	r3, r3
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f4:	4641      	mov	r1, r8
 80046f6:	1851      	adds	r1, r2, r1
 80046f8:	6139      	str	r1, [r7, #16]
 80046fa:	4649      	mov	r1, r9
 80046fc:	414b      	adcs	r3, r1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800470c:	4659      	mov	r1, fp
 800470e:	00cb      	lsls	r3, r1, #3
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004716:	4651      	mov	r1, sl
 8004718:	00ca      	lsls	r2, r1, #3
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	4603      	mov	r3, r0
 8004720:	4642      	mov	r2, r8
 8004722:	189b      	adds	r3, r3, r2
 8004724:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004728:	464b      	mov	r3, r9
 800472a:	460a      	mov	r2, r1
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800473e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800474c:	4649      	mov	r1, r9
 800474e:	008b      	lsls	r3, r1, #2
 8004750:	4641      	mov	r1, r8
 8004752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004756:	4641      	mov	r1, r8
 8004758:	008a      	lsls	r2, r1, #2
 800475a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800475e:	f7fc f97d 	bl	8000a5c <__aeabi_uldivmod>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4611      	mov	r1, r2
 8004768:	4b38      	ldr	r3, [pc, #224]	@ (800484c <UART_SetConfig+0x4e4>)
 800476a:	fba3 2301 	umull	r2, r3, r3, r1
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	2264      	movs	r2, #100	@ 0x64
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	1acb      	subs	r3, r1, r3
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	3332      	adds	r3, #50	@ 0x32
 800477c:	4a33      	ldr	r2, [pc, #204]	@ (800484c <UART_SetConfig+0x4e4>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004788:	441c      	add	r4, r3
 800478a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800478e:	2200      	movs	r2, #0
 8004790:	673b      	str	r3, [r7, #112]	@ 0x70
 8004792:	677a      	str	r2, [r7, #116]	@ 0x74
 8004794:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004798:	4642      	mov	r2, r8
 800479a:	464b      	mov	r3, r9
 800479c:	1891      	adds	r1, r2, r2
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	415b      	adcs	r3, r3
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a8:	4641      	mov	r1, r8
 80047aa:	1851      	adds	r1, r2, r1
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	4649      	mov	r1, r9
 80047b0:	414b      	adcs	r3, r1
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047c0:	4659      	mov	r1, fp
 80047c2:	00cb      	lsls	r3, r1, #3
 80047c4:	4651      	mov	r1, sl
 80047c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ca:	4651      	mov	r1, sl
 80047cc:	00ca      	lsls	r2, r1, #3
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	4603      	mov	r3, r0
 80047d4:	4642      	mov	r2, r8
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047da:	464b      	mov	r3, r9
 80047dc:	460a      	mov	r2, r1
 80047de:	eb42 0303 	adc.w	r3, r2, r3
 80047e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80047ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047fc:	4649      	mov	r1, r9
 80047fe:	008b      	lsls	r3, r1, #2
 8004800:	4641      	mov	r1, r8
 8004802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004806:	4641      	mov	r1, r8
 8004808:	008a      	lsls	r2, r1, #2
 800480a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800480e:	f7fc f925 	bl	8000a5c <__aeabi_uldivmod>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4b0d      	ldr	r3, [pc, #52]	@ (800484c <UART_SetConfig+0x4e4>)
 8004818:	fba3 1302 	umull	r1, r3, r3, r2
 800481c:	095b      	lsrs	r3, r3, #5
 800481e:	2164      	movs	r1, #100	@ 0x64
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	3332      	adds	r3, #50	@ 0x32
 800482a:	4a08      	ldr	r2, [pc, #32]	@ (800484c <UART_SetConfig+0x4e4>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	095b      	lsrs	r3, r3, #5
 8004832:	f003 020f 	and.w	r2, r3, #15
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4422      	add	r2, r4
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	bf00      	nop
 8004842:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004846:	46bd      	mov	sp, r7
 8004848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800484c:	51eb851f 	.word	0x51eb851f

08004850 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	f023 0101 	bic.w	r1, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b08      	cmp	r3, #8
 8004878:	d102      	bne.n	8004880 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800487a:	2340      	movs	r3, #64	@ 0x40
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e001      	b.n	8004884 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004890:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004896:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800489c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80048a2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80048a8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80048ae:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80048b4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80048ba:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80048c0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80048de:	4b10      	ldr	r3, [pc, #64]	@ (8004920 <FSMC_NORSRAM_Init+0xd0>)
 80048e0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048e8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80048f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43db      	mvns	r3, r3
 8004900:	ea02 0103 	and.w	r1, r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4319      	orrs	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	0008fb7f 	.word	0x0008fb7f

08004924 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800493a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8004942:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800494a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	3b01      	subs	r3, #1
 8004952:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8004954:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	3b02      	subs	r3, #2
 800495c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800495e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 800496a:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
 800498c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004994:	d11d      	bne.n	80049d2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800499e:	4b13      	ldr	r3, [pc, #76]	@ (80049ec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	6811      	ldr	r1, [r2, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	6852      	ldr	r2, [r2, #4]
 80049aa:	0112      	lsls	r2, r2, #4
 80049ac:	4311      	orrs	r1, r2
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	6892      	ldr	r2, [r2, #8]
 80049b2:	0212      	lsls	r2, r2, #8
 80049b4:	4311      	orrs	r1, r2
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	6992      	ldr	r2, [r2, #24]
 80049ba:	4311      	orrs	r1, r2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	68d2      	ldr	r2, [r2, #12]
 80049c0:	0412      	lsls	r2, r2, #16
 80049c2:	430a      	orrs	r2, r1
 80049c4:	ea43 0102 	orr.w	r1, r3, r2
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80049d0:	e005      	b.n	80049de <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	cff00000 	.word	0xcff00000

080049f0 <lcd_ex_st7789_reginit>:
 * @brief       ST7789 寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_st7789_reginit(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 80049f4:	2011      	movs	r0, #17
 80049f6:	f002 f9b1 	bl	8006d5c <lcd_wr_regno>

    HAL_Delay(120);
 80049fa:	2078      	movs	r0, #120	@ 0x78
 80049fc:	f7fd fa4e 	bl	8001e9c <HAL_Delay>

    lcd_wr_regno(0x36);
 8004a00:	2036      	movs	r0, #54	@ 0x36
 8004a02:	f002 f9ab 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004a06:	2000      	movs	r0, #0
 8004a08:	f002 f994 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8004a0c:	203a      	movs	r0, #58	@ 0x3a
 8004a0e:	f002 f9a5 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x05);
 8004a12:	2005      	movs	r0, #5
 8004a14:	f002 f98e 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8004a18:	20b2      	movs	r0, #178	@ 0xb2
 8004a1a:	f002 f99f 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8004a1e:	200c      	movs	r0, #12
 8004a20:	f002 f988 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8004a24:	200c      	movs	r0, #12
 8004a26:	f002 f985 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f002 f982 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x33);
 8004a30:	2033      	movs	r0, #51	@ 0x33
 8004a32:	f002 f97f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x33);
 8004a36:	2033      	movs	r0, #51	@ 0x33
 8004a38:	f002 f97c 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8004a3c:	20b7      	movs	r0, #183	@ 0xb7
 8004a3e:	f002 f98d 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x35);
 8004a42:	2035      	movs	r0, #53	@ 0x35
 8004a44:	f002 f976 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 8004a48:	20bb      	movs	r0, #187	@ 0xbb
 8004a4a:	f002 f987 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 8004a4e:	2032      	movs	r0, #50	@ 0x32
 8004a50:	f002 f970 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8004a54:	20c0      	movs	r0, #192	@ 0xc0
 8004a56:	f002 f981 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8004a5a:	200c      	movs	r0, #12
 8004a5c:	f002 f96a 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8004a60:	20c2      	movs	r0, #194	@ 0xc2
 8004a62:	f002 f97b 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8004a66:	2001      	movs	r0, #1
 8004a68:	f002 f964 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 8004a6c:	20c3      	movs	r0, #195	@ 0xc3
 8004a6e:	f002 f975 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 8004a72:	2010      	movs	r0, #16
 8004a74:	f002 f95e 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 8004a78:	20c4      	movs	r0, #196	@ 0xc4
 8004a7a:	f002 f96f 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 8004a7e:	2020      	movs	r0, #32
 8004a80:	f002 f958 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8004a84:	20c6      	movs	r0, #198	@ 0xc6
 8004a86:	f002 f969 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x0f);
 8004a8a:	200f      	movs	r0, #15
 8004a8c:	f002 f952 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xD0);
 8004a90:	20d0      	movs	r0, #208	@ 0xd0
 8004a92:	f002 f963 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0xA4); 
 8004a96:	20a4      	movs	r0, #164	@ 0xa4
 8004a98:	f002 f94c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA1); 
 8004a9c:	20a1      	movs	r0, #161	@ 0xa1
 8004a9e:	f002 f949 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 8004aa2:	20e0      	movs	r0, #224	@ 0xe0
 8004aa4:	f002 f95a 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8004aa8:	20d0      	movs	r0, #208	@ 0xd0
 8004aaa:	f002 f943 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f002 f940 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x02);
 8004ab4:	2002      	movs	r0, #2
 8004ab6:	f002 f93d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x07);
 8004aba:	2007      	movs	r0, #7
 8004abc:	f002 f93a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8004ac0:	200a      	movs	r0, #10
 8004ac2:	f002 f937 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x28);
 8004ac6:	2028      	movs	r0, #40	@ 0x28
 8004ac8:	f002 f934 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x32);
 8004acc:	2032      	movs	r0, #50	@ 0x32
 8004ace:	f002 f931 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x44);
 8004ad2:	2044      	movs	r0, #68	@ 0x44
 8004ad4:	f002 f92e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x42);
 8004ad8:	2042      	movs	r0, #66	@ 0x42
 8004ada:	f002 f92b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x06);
 8004ade:	2006      	movs	r0, #6
 8004ae0:	f002 f928 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8004ae4:	200e      	movs	r0, #14
 8004ae6:	f002 f925 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x12);
 8004aea:	2012      	movs	r0, #18
 8004aec:	f002 f922 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x14);
 8004af0:	2014      	movs	r0, #20
 8004af2:	f002 f91f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x17);
 8004af6:	2017      	movs	r0, #23
 8004af8:	f002 f91c 	bl	8006d34 <lcd_wr_data>


    lcd_wr_regno(0xE1);  /* Set Gamma */
 8004afc:	20e1      	movs	r0, #225	@ 0xe1
 8004afe:	f002 f92d 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8004b02:	20d0      	movs	r0, #208	@ 0xd0
 8004b04:	f002 f916 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f002 f913 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x02);
 8004b0e:	2002      	movs	r0, #2
 8004b10:	f002 f910 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x07);
 8004b14:	2007      	movs	r0, #7
 8004b16:	f002 f90d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8004b1a:	200a      	movs	r0, #10
 8004b1c:	f002 f90a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x28);
 8004b20:	2028      	movs	r0, #40	@ 0x28
 8004b22:	f002 f907 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x31);
 8004b26:	2031      	movs	r0, #49	@ 0x31
 8004b28:	f002 f904 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x54);
 8004b2c:	2054      	movs	r0, #84	@ 0x54
 8004b2e:	f002 f901 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x47);
 8004b32:	2047      	movs	r0, #71	@ 0x47
 8004b34:	f002 f8fe 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8004b38:	200e      	movs	r0, #14
 8004b3a:	f002 f8fb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x1c);
 8004b3e:	201c      	movs	r0, #28
 8004b40:	f002 f8f8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x17);
 8004b44:	2017      	movs	r0, #23
 8004b46:	f002 f8f5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x1b); 
 8004b4a:	201b      	movs	r0, #27
 8004b4c:	f002 f8f2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x1e);
 8004b50:	201e      	movs	r0, #30
 8004b52:	f002 f8ef 	bl	8006d34 <lcd_wr_data>


    lcd_wr_regno(0x2A);
 8004b56:	202a      	movs	r0, #42	@ 0x2a
 8004b58:	f002 f900 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f002 f8e9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b62:	2000      	movs	r0, #0
 8004b64:	f002 f8e6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b68:	2000      	movs	r0, #0
 8004b6a:	f002 f8e3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xef);
 8004b6e:	20ef      	movs	r0, #239	@ 0xef
 8004b70:	f002 f8e0 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0x2B);
 8004b74:	202b      	movs	r0, #43	@ 0x2b
 8004b76:	f002 f8f1 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f002 f8da 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b80:	2000      	movs	r0, #0
 8004b82:	f002 f8d7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x01);
 8004b86:	2001      	movs	r0, #1
 8004b88:	f002 f8d4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8004b8c:	203f      	movs	r0, #63	@ 0x3f
 8004b8e:	f002 f8d1 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 8004b92:	2029      	movs	r0, #41	@ 0x29
 8004b94:	f002 f8e2 	bl	8006d5c <lcd_wr_regno>
}
 8004b98:	bf00      	nop
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <lcd_ex_ili9341_reginit>:
 * @brief       ILI9341寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ili9341_reginit(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 8004ba0:	20cf      	movs	r0, #207	@ 0xcf
 8004ba2:	f002 f8db 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f002 f8c4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xC1);
 8004bac:	20c1      	movs	r0, #193	@ 0xc1
 8004bae:	f002 f8c1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x30);
 8004bb2:	2030      	movs	r0, #48	@ 0x30
 8004bb4:	f002 f8be 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xED);
 8004bb8:	20ed      	movs	r0, #237	@ 0xed
 8004bba:	f002 f8cf 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x64);
 8004bbe:	2064      	movs	r0, #100	@ 0x64
 8004bc0:	f002 f8b8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x03);
 8004bc4:	2003      	movs	r0, #3
 8004bc6:	f002 f8b5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x12);
 8004bca:	2012      	movs	r0, #18
 8004bcc:	f002 f8b2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x81);
 8004bd0:	2081      	movs	r0, #129	@ 0x81
 8004bd2:	f002 f8af 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xE8);
 8004bd6:	20e8      	movs	r0, #232	@ 0xe8
 8004bd8:	f002 f8c0 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x85);
 8004bdc:	2085      	movs	r0, #133	@ 0x85
 8004bde:	f002 f8a9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x10);
 8004be2:	2010      	movs	r0, #16
 8004be4:	f002 f8a6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8004be8:	207a      	movs	r0, #122	@ 0x7a
 8004bea:	f002 f8a3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xCB);
 8004bee:	20cb      	movs	r0, #203	@ 0xcb
 8004bf0:	f002 f8b4 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x39);
 8004bf4:	2039      	movs	r0, #57	@ 0x39
 8004bf6:	f002 f89d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8004bfa:	202c      	movs	r0, #44	@ 0x2c
 8004bfc:	f002 f89a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c00:	2000      	movs	r0, #0
 8004c02:	f002 f897 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x34);
 8004c06:	2034      	movs	r0, #52	@ 0x34
 8004c08:	f002 f894 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x02);
 8004c0c:	2002      	movs	r0, #2
 8004c0e:	f002 f891 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xF7);
 8004c12:	20f7      	movs	r0, #247	@ 0xf7
 8004c14:	f002 f8a2 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x20);
 8004c18:	2020      	movs	r0, #32
 8004c1a:	f002 f88b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xEA);
 8004c1e:	20ea      	movs	r0, #234	@ 0xea
 8004c20:	f002 f89c 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004c24:	2000      	movs	r0, #0
 8004c26:	f002 f885 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	f002 f882 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 8004c30:	20c0      	movs	r0, #192	@ 0xc0
 8004c32:	f002 f893 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 8004c36:	201b      	movs	r0, #27
 8004c38:	f002 f87c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 8004c3c:	20c1      	movs	r0, #193	@ 0xc1
 8004c3e:	f002 f88d 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 8004c42:	2001      	movs	r0, #1
 8004c44:	f002 f876 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 8004c48:	20c5      	movs	r0, #197	@ 0xc5
 8004c4a:	f002 f887 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 8004c4e:	2030      	movs	r0, #48	@ 0x30
 8004c50:	f002 f870 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 8004c54:	2030      	movs	r0, #48	@ 0x30
 8004c56:	f002 f86d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 8004c5a:	20c7      	movs	r0, #199	@ 0xc7
 8004c5c:	f002 f87e 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0xB7);
 8004c60:	20b7      	movs	r0, #183	@ 0xb7
 8004c62:	f002 f867 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0x36); /*  Memory Access Control */
 8004c66:	2036      	movs	r0, #54	@ 0x36
 8004c68:	f002 f878 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x48);
 8004c6c:	2048      	movs	r0, #72	@ 0x48
 8004c6e:	f002 f861 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0x3A);
 8004c72:	203a      	movs	r0, #58	@ 0x3a
 8004c74:	f002 f872 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x55);
 8004c78:	2055      	movs	r0, #85	@ 0x55
 8004c7a:	f002 f85b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xB1);
 8004c7e:	20b1      	movs	r0, #177	@ 0xb1
 8004c80:	f002 f86c 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004c84:	2000      	movs	r0, #0
 8004c86:	f002 f855 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x1A);
 8004c8a:	201a      	movs	r0, #26
 8004c8c:	f002 f852 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xB6); /*  Display Function Control */
 8004c90:	20b6      	movs	r0, #182	@ 0xb6
 8004c92:	f002 f863 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8004c96:	200a      	movs	r0, #10
 8004c98:	f002 f84c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8004c9c:	20a2      	movs	r0, #162	@ 0xa2
 8004c9e:	f002 f849 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
 8004ca2:	20f2      	movs	r0, #242	@ 0xf2
 8004ca4:	f002 f85a 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f002 f843 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 8004cae:	2026      	movs	r0, #38	@ 0x26
 8004cb0:	f002 f854 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	f002 f83d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 8004cba:	20e0      	movs	r0, #224	@ 0xe0
 8004cbc:	f002 f84e 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8004cc0:	200f      	movs	r0, #15
 8004cc2:	f002 f837 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x2A);
 8004cc6:	202a      	movs	r0, #42	@ 0x2a
 8004cc8:	f002 f834 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x28);
 8004ccc:	2028      	movs	r0, #40	@ 0x28
 8004cce:	f002 f831 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x08);
 8004cd2:	2008      	movs	r0, #8
 8004cd4:	f002 f82e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0E);
 8004cd8:	200e      	movs	r0, #14
 8004cda:	f002 f82b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x08);
 8004cde:	2008      	movs	r0, #8
 8004ce0:	f002 f828 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x54);
 8004ce4:	2054      	movs	r0, #84	@ 0x54
 8004ce6:	f002 f825 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA9);
 8004cea:	20a9      	movs	r0, #169	@ 0xa9
 8004cec:	f002 f822 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x43);
 8004cf0:	2043      	movs	r0, #67	@ 0x43
 8004cf2:	f002 f81f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0A);
 8004cf6:	200a      	movs	r0, #10
 8004cf8:	f002 f81c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8004cfc:	200f      	movs	r0, #15
 8004cfe:	f002 f819 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d02:	2000      	movs	r0, #0
 8004d04:	f002 f816 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d08:	2000      	movs	r0, #0
 8004d0a:	f002 f813 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f002 f810 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d14:	2000      	movs	r0, #0
 8004d16:	f002 f80d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xE1);    /* Set Gamma */
 8004d1a:	20e1      	movs	r0, #225	@ 0xe1
 8004d1c:	f002 f81e 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004d20:	2000      	movs	r0, #0
 8004d22:	f002 f807 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x15);
 8004d26:	2015      	movs	r0, #21
 8004d28:	f002 f804 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x17);
 8004d2c:	2017      	movs	r0, #23
 8004d2e:	f002 f801 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x07);
 8004d32:	2007      	movs	r0, #7
 8004d34:	f001 fffe 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x11);
 8004d38:	2011      	movs	r0, #17
 8004d3a:	f001 fffb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x06);
 8004d3e:	2006      	movs	r0, #6
 8004d40:	f001 fff8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x2B);
 8004d44:	202b      	movs	r0, #43	@ 0x2b
 8004d46:	f001 fff5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x56);
 8004d4a:	2056      	movs	r0, #86	@ 0x56
 8004d4c:	f001 fff2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8004d50:	203c      	movs	r0, #60	@ 0x3c
 8004d52:	f001 ffef 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x05);
 8004d56:	2005      	movs	r0, #5
 8004d58:	f001 ffec 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x10);
 8004d5c:	2010      	movs	r0, #16
 8004d5e:	f001 ffe9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8004d62:	200f      	movs	r0, #15
 8004d64:	f001 ffe6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8004d68:	203f      	movs	r0, #63	@ 0x3f
 8004d6a:	f001 ffe3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8004d6e:	203f      	movs	r0, #63	@ 0x3f
 8004d70:	f001 ffe0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8004d74:	200f      	movs	r0, #15
 8004d76:	f001 ffdd 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0x2B);
 8004d7a:	202b      	movs	r0, #43	@ 0x2b
 8004d7c:	f001 ffee 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004d80:	2000      	movs	r0, #0
 8004d82:	f001 ffd7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d86:	2000      	movs	r0, #0
 8004d88:	f001 ffd4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x01);
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f001 ffd1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8004d92:	203f      	movs	r0, #63	@ 0x3f
 8004d94:	f001 ffce 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8004d98:	202a      	movs	r0, #42	@ 0x2a
 8004d9a:	f001 ffdf 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f001 ffc8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004da4:	2000      	movs	r0, #0
 8004da6:	f001 ffc5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004daa:	2000      	movs	r0, #0
 8004dac:	f001 ffc2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xef);
 8004db0:	20ef      	movs	r0, #239	@ 0xef
 8004db2:	f001 ffbf 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 8004db6:	2011      	movs	r0, #17
 8004db8:	f001 ffd0 	bl	8006d5c <lcd_wr_regno>
    HAL_Delay(120);
 8004dbc:	2078      	movs	r0, #120	@ 0x78
 8004dbe:	f7fd f86d 	bl	8001e9c <HAL_Delay>
    lcd_wr_regno(0x29); /* display on */
 8004dc2:	2029      	movs	r0, #41	@ 0x29
 8004dc4:	f001 ffca 	bl	8006d5c <lcd_wr_regno>
 }
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <lcd_ex_nt35310_reginit>:
 * @brief       NT35310寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_nt35310_reginit(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 8004dd0:	20ed      	movs	r0, #237	@ 0xed
 8004dd2:	f001 ffc3 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	f001 ffac 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xFE);
 8004ddc:	20fe      	movs	r0, #254	@ 0xfe
 8004dde:	f001 ffa9 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xEE);
 8004de2:	20ee      	movs	r0, #238	@ 0xee
 8004de4:	f001 ffba 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0xDE);
 8004de8:	20de      	movs	r0, #222	@ 0xde
 8004dea:	f001 ffa3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x21);
 8004dee:	2021      	movs	r0, #33	@ 0x21
 8004df0:	f001 ffa0 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xF1);
 8004df4:	20f1      	movs	r0, #241	@ 0xf1
 8004df6:	f001 ffb1 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x01);
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	f001 ff9a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xDF);
 8004e00:	20df      	movs	r0, #223	@ 0xdf
 8004e02:	f001 ffab 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x10);
 8004e06:	2010      	movs	r0, #16
 8004e08:	f001 ff94 	bl	8006d34 <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8004e0c:	20c4      	movs	r0, #196	@ 0xc4
 8004e0e:	f001 ffa5 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 8004e12:	208f      	movs	r0, #143	@ 0x8f
 8004e14:	f001 ff8e 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8004e18:	20c6      	movs	r0, #198	@ 0xc6
 8004e1a:	f001 ff9f 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004e1e:	2000      	movs	r0, #0
 8004e20:	f001 ff88 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8004e24:	20e2      	movs	r0, #226	@ 0xe2
 8004e26:	f001 ff85 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8004e2a:	20e2      	movs	r0, #226	@ 0xe2
 8004e2c:	f001 ff82 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8004e30:	20e2      	movs	r0, #226	@ 0xe2
 8004e32:	f001 ff7f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xBF);
 8004e36:	20bf      	movs	r0, #191	@ 0xbf
 8004e38:	f001 ff90 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8004e3c:	20aa      	movs	r0, #170	@ 0xaa
 8004e3e:	f001 ff79 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB0);
 8004e42:	20b0      	movs	r0, #176	@ 0xb0
 8004e44:	f001 ff8a 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x0D);
 8004e48:	200d      	movs	r0, #13
 8004e4a:	f001 ff73 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f001 ff70 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8004e54:	200d      	movs	r0, #13
 8004e56:	f001 ff6d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f001 ff6a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x11);
 8004e60:	2011      	movs	r0, #17
 8004e62:	f001 ff67 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e66:	2000      	movs	r0, #0
 8004e68:	f001 ff64 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x19);
 8004e6c:	2019      	movs	r0, #25
 8004e6e:	f001 ff61 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e72:	2000      	movs	r0, #0
 8004e74:	f001 ff5e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x21);
 8004e78:	2021      	movs	r0, #33	@ 0x21
 8004e7a:	f001 ff5b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f001 ff58 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x2D);
 8004e84:	202d      	movs	r0, #45	@ 0x2d
 8004e86:	f001 ff55 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f001 ff52 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3D);
 8004e90:	203d      	movs	r0, #61	@ 0x3d
 8004e92:	f001 ff4f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e96:	2000      	movs	r0, #0
 8004e98:	f001 ff4c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8004e9c:	205d      	movs	r0, #93	@ 0x5d
 8004e9e:	f001 ff49 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f001 ff46 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8004ea8:	205d      	movs	r0, #93	@ 0x5d
 8004eaa:	f001 ff43 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f001 ff40 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB1);
 8004eb4:	20b1      	movs	r0, #177	@ 0xb1
 8004eb6:	f001 ff51 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x80);
 8004eba:	2080      	movs	r0, #128	@ 0x80
 8004ebc:	f001 ff3a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f001 ff37 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8004ec6:	208b      	movs	r0, #139	@ 0x8b
 8004ec8:	f001 ff34 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f001 ff31 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x96);
 8004ed2:	2096      	movs	r0, #150	@ 0x96
 8004ed4:	f001 ff2e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f001 ff2b 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8004ede:	20b2      	movs	r0, #178	@ 0xb2
 8004ee0:	f001 ff3c 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f001 ff25 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004eea:	2000      	movs	r0, #0
 8004eec:	f001 ff22 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x02);
 8004ef0:	2002      	movs	r0, #2
 8004ef2:	f001 ff1f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f001 ff1c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x03);
 8004efc:	2003      	movs	r0, #3
 8004efe:	f001 ff19 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f02:	2000      	movs	r0, #0
 8004f04:	f001 ff16 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB3);
 8004f08:	20b3      	movs	r0, #179	@ 0xb3
 8004f0a:	f001 ff27 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f001 ff10 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f14:	2000      	movs	r0, #0
 8004f16:	f001 ff0d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f001 ff0a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f20:	2000      	movs	r0, #0
 8004f22:	f001 ff07 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f26:	2000      	movs	r0, #0
 8004f28:	f001 ff04 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	f001 ff01 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f32:	2000      	movs	r0, #0
 8004f34:	f001 fefe 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f001 fefb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f001 fef8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f44:	2000      	movs	r0, #0
 8004f46:	f001 fef5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f001 fef2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f50:	2000      	movs	r0, #0
 8004f52:	f001 feef 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f56:	2000      	movs	r0, #0
 8004f58:	f001 feec 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f001 fee9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f62:	2000      	movs	r0, #0
 8004f64:	f001 fee6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f001 fee3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f001 fee0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f001 fedd 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f001 feda 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f80:	2000      	movs	r0, #0
 8004f82:	f001 fed7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f86:	2000      	movs	r0, #0
 8004f88:	f001 fed4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f001 fed1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f92:	2000      	movs	r0, #0
 8004f94:	f001 fece 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f001 fecb 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8004f9e:	20b4      	movs	r0, #180	@ 0xb4
 8004fa0:	f001 fedc 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x8B);
 8004fa4:	208b      	movs	r0, #139	@ 0x8b
 8004fa6:	f001 fec5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004faa:	2000      	movs	r0, #0
 8004fac:	f001 fec2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x96);
 8004fb0:	2096      	movs	r0, #150	@ 0x96
 8004fb2:	f001 febf 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f001 febc 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA1);
 8004fbc:	20a1      	movs	r0, #161	@ 0xa1
 8004fbe:	f001 feb9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f001 feb6 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB5);
 8004fc8:	20b5      	movs	r0, #181	@ 0xb5
 8004fca:	f001 fec7 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x02);
 8004fce:	2002      	movs	r0, #2
 8004fd0:	f001 feb0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f001 fead 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x03);
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f001 feaa 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f001 fea7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x04);
 8004fe6:	2004      	movs	r0, #4
 8004fe8:	f001 fea4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fec:	2000      	movs	r0, #0
 8004fee:	f001 fea1 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB6);
 8004ff2:	20b6      	movs	r0, #182	@ 0xb6
 8004ff4:	f001 feb2 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f001 fe9b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ffe:	2000      	movs	r0, #0
 8005000:	f001 fe98 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8005004:	20b7      	movs	r0, #183	@ 0xb7
 8005006:	f001 fea9 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 800500a:	2000      	movs	r0, #0
 800500c:	f001 fe92 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005010:	2000      	movs	r0, #0
 8005012:	f001 fe8f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8005016:	203f      	movs	r0, #63	@ 0x3f
 8005018:	f001 fe8c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800501c:	2000      	movs	r0, #0
 800501e:	f001 fe89 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x5E);
 8005022:	205e      	movs	r0, #94	@ 0x5e
 8005024:	f001 fe86 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005028:	2000      	movs	r0, #0
 800502a:	f001 fe83 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x64);
 800502e:	2064      	movs	r0, #100	@ 0x64
 8005030:	f001 fe80 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005034:	2000      	movs	r0, #0
 8005036:	f001 fe7d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x8C);
 800503a:	208c      	movs	r0, #140	@ 0x8c
 800503c:	f001 fe7a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005040:	2000      	movs	r0, #0
 8005042:	f001 fe77 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xAC);
 8005046:	20ac      	movs	r0, #172	@ 0xac
 8005048:	f001 fe74 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800504c:	2000      	movs	r0, #0
 800504e:	f001 fe71 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8005052:	20dc      	movs	r0, #220	@ 0xdc
 8005054:	f001 fe6e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005058:	2000      	movs	r0, #0
 800505a:	f001 fe6b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x70);
 800505e:	2070      	movs	r0, #112	@ 0x70
 8005060:	f001 fe68 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005064:	2000      	movs	r0, #0
 8005066:	f001 fe65 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x90);
 800506a:	2090      	movs	r0, #144	@ 0x90
 800506c:	f001 fe62 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005070:	2000      	movs	r0, #0
 8005072:	f001 fe5f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xEB);
 8005076:	20eb      	movs	r0, #235	@ 0xeb
 8005078:	f001 fe5c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800507c:	2000      	movs	r0, #0
 800507e:	f001 fe59 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8005082:	20dc      	movs	r0, #220	@ 0xdc
 8005084:	f001 fe56 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005088:	2000      	movs	r0, #0
 800508a:	f001 fe53 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB8);
 800508e:	20b8      	movs	r0, #184	@ 0xb8
 8005090:	f001 fe64 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005094:	2000      	movs	r0, #0
 8005096:	f001 fe4d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800509a:	2000      	movs	r0, #0
 800509c:	f001 fe4a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050a0:	2000      	movs	r0, #0
 80050a2:	f001 fe47 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050a6:	2000      	movs	r0, #0
 80050a8:	f001 fe44 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050ac:	2000      	movs	r0, #0
 80050ae:	f001 fe41 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050b2:	2000      	movs	r0, #0
 80050b4:	f001 fe3e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050b8:	2000      	movs	r0, #0
 80050ba:	f001 fe3b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050be:	2000      	movs	r0, #0
 80050c0:	f001 fe38 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xBA);
 80050c4:	20ba      	movs	r0, #186	@ 0xba
 80050c6:	f001 fe49 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x24);
 80050ca:	2024      	movs	r0, #36	@ 0x24
 80050cc:	f001 fe32 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050d0:	2000      	movs	r0, #0
 80050d2:	f001 fe2f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050d6:	2000      	movs	r0, #0
 80050d8:	f001 fe2c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050dc:	2000      	movs	r0, #0
 80050de:	f001 fe29 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 80050e2:	20c1      	movs	r0, #193	@ 0xc1
 80050e4:	f001 fe3a 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x20);
 80050e8:	2020      	movs	r0, #32
 80050ea:	f001 fe23 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050ee:	2000      	movs	r0, #0
 80050f0:	f001 fe20 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x54);
 80050f4:	2054      	movs	r0, #84	@ 0x54
 80050f6:	f001 fe1d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050fa:	2000      	movs	r0, #0
 80050fc:	f001 fe1a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8005100:	20ff      	movs	r0, #255	@ 0xff
 8005102:	f001 fe17 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005106:	2000      	movs	r0, #0
 8005108:	f001 fe14 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 800510c:	20c2      	movs	r0, #194	@ 0xc2
 800510e:	f001 fe25 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8005112:	200a      	movs	r0, #10
 8005114:	f001 fe0e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005118:	2000      	movs	r0, #0
 800511a:	f001 fe0b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x04);
 800511e:	2004      	movs	r0, #4
 8005120:	f001 fe08 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005124:	2000      	movs	r0, #0
 8005126:	f001 fe05 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC3);
 800512a:	20c3      	movs	r0, #195	@ 0xc3
 800512c:	f001 fe16 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8005130:	203c      	movs	r0, #60	@ 0x3c
 8005132:	f001 fdff 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005136:	2000      	movs	r0, #0
 8005138:	f001 fdfc 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3A);
 800513c:	203a      	movs	r0, #58	@ 0x3a
 800513e:	f001 fdf9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005142:	2000      	movs	r0, #0
 8005144:	f001 fdf6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x39);
 8005148:	2039      	movs	r0, #57	@ 0x39
 800514a:	f001 fdf3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800514e:	2000      	movs	r0, #0
 8005150:	f001 fdf0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x37);
 8005154:	2037      	movs	r0, #55	@ 0x37
 8005156:	f001 fded 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800515a:	2000      	movs	r0, #0
 800515c:	f001 fdea 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8005160:	203c      	movs	r0, #60	@ 0x3c
 8005162:	f001 fde7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005166:	2000      	movs	r0, #0
 8005168:	f001 fde4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x36);
 800516c:	2036      	movs	r0, #54	@ 0x36
 800516e:	f001 fde1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005172:	2000      	movs	r0, #0
 8005174:	f001 fdde 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x32);
 8005178:	2032      	movs	r0, #50	@ 0x32
 800517a:	f001 fddb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800517e:	2000      	movs	r0, #0
 8005180:	f001 fdd8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x2F);
 8005184:	202f      	movs	r0, #47	@ 0x2f
 8005186:	f001 fdd5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800518a:	2000      	movs	r0, #0
 800518c:	f001 fdd2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8005190:	202c      	movs	r0, #44	@ 0x2c
 8005192:	f001 fdcf 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005196:	2000      	movs	r0, #0
 8005198:	f001 fdcc 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x29);
 800519c:	2029      	movs	r0, #41	@ 0x29
 800519e:	f001 fdc9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051a2:	2000      	movs	r0, #0
 80051a4:	f001 fdc6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x26);
 80051a8:	2026      	movs	r0, #38	@ 0x26
 80051aa:	f001 fdc3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051ae:	2000      	movs	r0, #0
 80051b0:	f001 fdc0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x24);
 80051b4:	2024      	movs	r0, #36	@ 0x24
 80051b6:	f001 fdbd 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051ba:	2000      	movs	r0, #0
 80051bc:	f001 fdba 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x24);
 80051c0:	2024      	movs	r0, #36	@ 0x24
 80051c2:	f001 fdb7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051c6:	2000      	movs	r0, #0
 80051c8:	f001 fdb4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x23);
 80051cc:	2023      	movs	r0, #35	@ 0x23
 80051ce:	f001 fdb1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051d2:	2000      	movs	r0, #0
 80051d4:	f001 fdae 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80051d8:	203c      	movs	r0, #60	@ 0x3c
 80051da:	f001 fdab 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051de:	2000      	movs	r0, #0
 80051e0:	f001 fda8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x36);
 80051e4:	2036      	movs	r0, #54	@ 0x36
 80051e6:	f001 fda5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051ea:	2000      	movs	r0, #0
 80051ec:	f001 fda2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x32);
 80051f0:	2032      	movs	r0, #50	@ 0x32
 80051f2:	f001 fd9f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051f6:	2000      	movs	r0, #0
 80051f8:	f001 fd9c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x2F);
 80051fc:	202f      	movs	r0, #47	@ 0x2f
 80051fe:	f001 fd99 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005202:	2000      	movs	r0, #0
 8005204:	f001 fd96 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8005208:	202c      	movs	r0, #44	@ 0x2c
 800520a:	f001 fd93 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800520e:	2000      	movs	r0, #0
 8005210:	f001 fd90 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x29);
 8005214:	2029      	movs	r0, #41	@ 0x29
 8005216:	f001 fd8d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800521a:	2000      	movs	r0, #0
 800521c:	f001 fd8a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x26);
 8005220:	2026      	movs	r0, #38	@ 0x26
 8005222:	f001 fd87 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005226:	2000      	movs	r0, #0
 8005228:	f001 fd84 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x24);
 800522c:	2024      	movs	r0, #36	@ 0x24
 800522e:	f001 fd81 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005232:	2000      	movs	r0, #0
 8005234:	f001 fd7e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x24);
 8005238:	2024      	movs	r0, #36	@ 0x24
 800523a:	f001 fd7b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800523e:	2000      	movs	r0, #0
 8005240:	f001 fd78 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x23);
 8005244:	2023      	movs	r0, #35	@ 0x23
 8005246:	f001 fd75 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800524a:	2000      	movs	r0, #0
 800524c:	f001 fd72 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC4);
 8005250:	20c4      	movs	r0, #196	@ 0xc4
 8005252:	f001 fd83 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x62);
 8005256:	2062      	movs	r0, #98	@ 0x62
 8005258:	f001 fd6c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800525c:	2000      	movs	r0, #0
 800525e:	f001 fd69 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x05);
 8005262:	2005      	movs	r0, #5
 8005264:	f001 fd66 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005268:	2000      	movs	r0, #0
 800526a:	f001 fd63 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x84);
 800526e:	2084      	movs	r0, #132	@ 0x84
 8005270:	f001 fd60 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005274:	2000      	movs	r0, #0
 8005276:	f001 fd5d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xF0);
 800527a:	20f0      	movs	r0, #240	@ 0xf0
 800527c:	f001 fd5a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005280:	2000      	movs	r0, #0
 8005282:	f001 fd57 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x18);
 8005286:	2018      	movs	r0, #24
 8005288:	f001 fd54 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800528c:	2000      	movs	r0, #0
 800528e:	f001 fd51 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA4);
 8005292:	20a4      	movs	r0, #164	@ 0xa4
 8005294:	f001 fd4e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005298:	2000      	movs	r0, #0
 800529a:	f001 fd4b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x18);
 800529e:	2018      	movs	r0, #24
 80052a0:	f001 fd48 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052a4:	2000      	movs	r0, #0
 80052a6:	f001 fd45 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x50);
 80052aa:	2050      	movs	r0, #80	@ 0x50
 80052ac:	f001 fd42 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052b0:	2000      	movs	r0, #0
 80052b2:	f001 fd3f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0C);
 80052b6:	200c      	movs	r0, #12
 80052b8:	f001 fd3c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052bc:	2000      	movs	r0, #0
 80052be:	f001 fd39 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x17);
 80052c2:	2017      	movs	r0, #23
 80052c4:	f001 fd36 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052c8:	2000      	movs	r0, #0
 80052ca:	f001 fd33 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x95);
 80052ce:	2095      	movs	r0, #149	@ 0x95
 80052d0:	f001 fd30 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052d4:	2000      	movs	r0, #0
 80052d6:	f001 fd2d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80052da:	20f3      	movs	r0, #243	@ 0xf3
 80052dc:	f001 fd2a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052e0:	2000      	movs	r0, #0
 80052e2:	f001 fd27 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xE6);
 80052e6:	20e6      	movs	r0, #230	@ 0xe6
 80052e8:	f001 fd24 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052ec:	2000      	movs	r0, #0
 80052ee:	f001 fd21 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 80052f2:	20c5      	movs	r0, #197	@ 0xc5
 80052f4:	f001 fd32 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x32);
 80052f8:	2032      	movs	r0, #50	@ 0x32
 80052fa:	f001 fd1b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052fe:	2000      	movs	r0, #0
 8005300:	f001 fd18 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x44);
 8005304:	2044      	movs	r0, #68	@ 0x44
 8005306:	f001 fd15 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800530a:	2000      	movs	r0, #0
 800530c:	f001 fd12 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x65);
 8005310:	2065      	movs	r0, #101	@ 0x65
 8005312:	f001 fd0f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005316:	2000      	movs	r0, #0
 8005318:	f001 fd0c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x76);
 800531c:	2076      	movs	r0, #118	@ 0x76
 800531e:	f001 fd09 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005322:	2000      	movs	r0, #0
 8005324:	f001 fd06 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x88);
 8005328:	2088      	movs	r0, #136	@ 0x88
 800532a:	f001 fd03 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800532e:	2000      	movs	r0, #0
 8005330:	f001 fd00 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8005334:	20c6      	movs	r0, #198	@ 0xc6
 8005336:	f001 fd11 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x20);
 800533a:	2020      	movs	r0, #32
 800533c:	f001 fcfa 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005340:	2000      	movs	r0, #0
 8005342:	f001 fcf7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x17);
 8005346:	2017      	movs	r0, #23
 8005348:	f001 fcf4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800534c:	2000      	movs	r0, #0
 800534e:	f001 fcf1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x01);
 8005352:	2001      	movs	r0, #1
 8005354:	f001 fcee 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005358:	2000      	movs	r0, #0
 800535a:	f001 fceb 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC7);
 800535e:	20c7      	movs	r0, #199	@ 0xc7
 8005360:	f001 fcfc 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005364:	2000      	movs	r0, #0
 8005366:	f001 fce5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800536a:	2000      	movs	r0, #0
 800536c:	f001 fce2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005370:	2000      	movs	r0, #0
 8005372:	f001 fcdf 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005376:	2000      	movs	r0, #0
 8005378:	f001 fcdc 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC8);
 800537c:	20c8      	movs	r0, #200	@ 0xc8
 800537e:	f001 fced 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005382:	2000      	movs	r0, #0
 8005384:	f001 fcd6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005388:	2000      	movs	r0, #0
 800538a:	f001 fcd3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800538e:	2000      	movs	r0, #0
 8005390:	f001 fcd0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005394:	2000      	movs	r0, #0
 8005396:	f001 fccd 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xC9);
 800539a:	20c9      	movs	r0, #201	@ 0xc9
 800539c:	f001 fcde 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 80053a0:	2000      	movs	r0, #0
 80053a2:	f001 fcc7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053a6:	2000      	movs	r0, #0
 80053a8:	f001 fcc4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053ac:	2000      	movs	r0, #0
 80053ae:	f001 fcc1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053b2:	2000      	movs	r0, #0
 80053b4:	f001 fcbe 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053b8:	2000      	movs	r0, #0
 80053ba:	f001 fcbb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053be:	2000      	movs	r0, #0
 80053c0:	f001 fcb8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053c4:	2000      	movs	r0, #0
 80053c6:	f001 fcb5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053ca:	2000      	movs	r0, #0
 80053cc:	f001 fcb2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053d0:	2000      	movs	r0, #0
 80053d2:	f001 fcaf 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053d6:	2000      	movs	r0, #0
 80053d8:	f001 fcac 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053dc:	2000      	movs	r0, #0
 80053de:	f001 fca9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053e2:	2000      	movs	r0, #0
 80053e4:	f001 fca6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053e8:	2000      	movs	r0, #0
 80053ea:	f001 fca3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053ee:	2000      	movs	r0, #0
 80053f0:	f001 fca0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053f4:	2000      	movs	r0, #0
 80053f6:	f001 fc9d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053fa:	2000      	movs	r0, #0
 80053fc:	f001 fc9a 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8005400:	20e0      	movs	r0, #224	@ 0xe0
 8005402:	f001 fcab 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x16);
 8005406:	2016      	movs	r0, #22
 8005408:	f001 fc94 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800540c:	2000      	movs	r0, #0
 800540e:	f001 fc91 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x1C);
 8005412:	201c      	movs	r0, #28
 8005414:	f001 fc8e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005418:	2000      	movs	r0, #0
 800541a:	f001 fc8b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x21);
 800541e:	2021      	movs	r0, #33	@ 0x21
 8005420:	f001 fc88 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005424:	2000      	movs	r0, #0
 8005426:	f001 fc85 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x36);
 800542a:	2036      	movs	r0, #54	@ 0x36
 800542c:	f001 fc82 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005430:	2000      	movs	r0, #0
 8005432:	f001 fc7f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x46);
 8005436:	2046      	movs	r0, #70	@ 0x46
 8005438:	f001 fc7c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800543c:	2000      	movs	r0, #0
 800543e:	f001 fc79 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x52);
 8005442:	2052      	movs	r0, #82	@ 0x52
 8005444:	f001 fc76 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005448:	2000      	movs	r0, #0
 800544a:	f001 fc73 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x64);
 800544e:	2064      	movs	r0, #100	@ 0x64
 8005450:	f001 fc70 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005454:	2000      	movs	r0, #0
 8005456:	f001 fc6d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x7A);
 800545a:	207a      	movs	r0, #122	@ 0x7a
 800545c:	f001 fc6a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005460:	2000      	movs	r0, #0
 8005462:	f001 fc67 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8005466:	208b      	movs	r0, #139	@ 0x8b
 8005468:	f001 fc64 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800546c:	2000      	movs	r0, #0
 800546e:	f001 fc61 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x99);
 8005472:	2099      	movs	r0, #153	@ 0x99
 8005474:	f001 fc5e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005478:	2000      	movs	r0, #0
 800547a:	f001 fc5b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA8);
 800547e:	20a8      	movs	r0, #168	@ 0xa8
 8005480:	f001 fc58 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005484:	2000      	movs	r0, #0
 8005486:	f001 fc55 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xB9);
 800548a:	20b9      	movs	r0, #185	@ 0xb9
 800548c:	f001 fc52 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005490:	2000      	movs	r0, #0
 8005492:	f001 fc4f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8005496:	20c4      	movs	r0, #196	@ 0xc4
 8005498:	f001 fc4c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800549c:	2000      	movs	r0, #0
 800549e:	f001 fc49 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xCA);
 80054a2:	20ca      	movs	r0, #202	@ 0xca
 80054a4:	f001 fc46 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054a8:	2000      	movs	r0, #0
 80054aa:	f001 fc43 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD2);
 80054ae:	20d2      	movs	r0, #210	@ 0xd2
 80054b0:	f001 fc40 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054b4:	2000      	movs	r0, #0
 80054b6:	f001 fc3d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD9);
 80054ba:	20d9      	movs	r0, #217	@ 0xd9
 80054bc:	f001 fc3a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054c0:	2000      	movs	r0, #0
 80054c2:	f001 fc37 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xE0);
 80054c6:	20e0      	movs	r0, #224	@ 0xe0
 80054c8:	f001 fc34 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054cc:	2000      	movs	r0, #0
 80054ce:	f001 fc31 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80054d2:	20f3      	movs	r0, #243	@ 0xf3
 80054d4:	f001 fc2e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054d8:	2000      	movs	r0, #0
 80054da:	f001 fc2b 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 80054de:	20e1      	movs	r0, #225	@ 0xe1
 80054e0:	f001 fc3c 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x16);
 80054e4:	2016      	movs	r0, #22
 80054e6:	f001 fc25 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054ea:	2000      	movs	r0, #0
 80054ec:	f001 fc22 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x1C);
 80054f0:	201c      	movs	r0, #28
 80054f2:	f001 fc1f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054f6:	2000      	movs	r0, #0
 80054f8:	f001 fc1c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x22);
 80054fc:	2022      	movs	r0, #34	@ 0x22
 80054fe:	f001 fc19 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005502:	2000      	movs	r0, #0
 8005504:	f001 fc16 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x36);
 8005508:	2036      	movs	r0, #54	@ 0x36
 800550a:	f001 fc13 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800550e:	2000      	movs	r0, #0
 8005510:	f001 fc10 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x45);
 8005514:	2045      	movs	r0, #69	@ 0x45
 8005516:	f001 fc0d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800551a:	2000      	movs	r0, #0
 800551c:	f001 fc0a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x52);
 8005520:	2052      	movs	r0, #82	@ 0x52
 8005522:	f001 fc07 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005526:	2000      	movs	r0, #0
 8005528:	f001 fc04 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x64);
 800552c:	2064      	movs	r0, #100	@ 0x64
 800552e:	f001 fc01 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005532:	2000      	movs	r0, #0
 8005534:	f001 fbfe 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8005538:	207a      	movs	r0, #122	@ 0x7a
 800553a:	f001 fbfb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800553e:	2000      	movs	r0, #0
 8005540:	f001 fbf8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8005544:	208b      	movs	r0, #139	@ 0x8b
 8005546:	f001 fbf5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800554a:	2000      	movs	r0, #0
 800554c:	f001 fbf2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x99);
 8005550:	2099      	movs	r0, #153	@ 0x99
 8005552:	f001 fbef 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005556:	2000      	movs	r0, #0
 8005558:	f001 fbec 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA8);
 800555c:	20a8      	movs	r0, #168	@ 0xa8
 800555e:	f001 fbe9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005562:	2000      	movs	r0, #0
 8005564:	f001 fbe6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xB9);
 8005568:	20b9      	movs	r0, #185	@ 0xb9
 800556a:	f001 fbe3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800556e:	2000      	movs	r0, #0
 8005570:	f001 fbe0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8005574:	20c4      	movs	r0, #196	@ 0xc4
 8005576:	f001 fbdd 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800557a:	2000      	movs	r0, #0
 800557c:	f001 fbda 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xCA);
 8005580:	20ca      	movs	r0, #202	@ 0xca
 8005582:	f001 fbd7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005586:	2000      	movs	r0, #0
 8005588:	f001 fbd4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD2);
 800558c:	20d2      	movs	r0, #210	@ 0xd2
 800558e:	f001 fbd1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005592:	2000      	movs	r0, #0
 8005594:	f001 fbce 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD8);
 8005598:	20d8      	movs	r0, #216	@ 0xd8
 800559a:	f001 fbcb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800559e:	2000      	movs	r0, #0
 80055a0:	f001 fbc8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xE0);
 80055a4:	20e0      	movs	r0, #224	@ 0xe0
 80055a6:	f001 fbc5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055aa:	2000      	movs	r0, #0
 80055ac:	f001 fbc2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80055b0:	20f3      	movs	r0, #243	@ 0xf3
 80055b2:	f001 fbbf 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055b6:	2000      	movs	r0, #0
 80055b8:	f001 fbbc 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xE2);
 80055bc:	20e2      	movs	r0, #226	@ 0xe2
 80055be:	f001 fbcd 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x05);
 80055c2:	2005      	movs	r0, #5
 80055c4:	f001 fbb6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055c8:	2000      	movs	r0, #0
 80055ca:	f001 fbb3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x0B);
 80055ce:	200b      	movs	r0, #11
 80055d0:	f001 fbb0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055d4:	2000      	movs	r0, #0
 80055d6:	f001 fbad 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x1B);
 80055da:	201b      	movs	r0, #27
 80055dc:	f001 fbaa 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055e0:	2000      	movs	r0, #0
 80055e2:	f001 fba7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x34);
 80055e6:	2034      	movs	r0, #52	@ 0x34
 80055e8:	f001 fba4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055ec:	2000      	movs	r0, #0
 80055ee:	f001 fba1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x44);
 80055f2:	2044      	movs	r0, #68	@ 0x44
 80055f4:	f001 fb9e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055f8:	2000      	movs	r0, #0
 80055fa:	f001 fb9b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x4F);
 80055fe:	204f      	movs	r0, #79	@ 0x4f
 8005600:	f001 fb98 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005604:	2000      	movs	r0, #0
 8005606:	f001 fb95 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x61);
 800560a:	2061      	movs	r0, #97	@ 0x61
 800560c:	f001 fb92 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005610:	2000      	movs	r0, #0
 8005612:	f001 fb8f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x79);
 8005616:	2079      	movs	r0, #121	@ 0x79
 8005618:	f001 fb8c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800561c:	2000      	movs	r0, #0
 800561e:	f001 fb89 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x88);
 8005622:	2088      	movs	r0, #136	@ 0x88
 8005624:	f001 fb86 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005628:	2000      	movs	r0, #0
 800562a:	f001 fb83 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x97);
 800562e:	2097      	movs	r0, #151	@ 0x97
 8005630:	f001 fb80 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005634:	2000      	movs	r0, #0
 8005636:	f001 fb7d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA6);
 800563a:	20a6      	movs	r0, #166	@ 0xa6
 800563c:	f001 fb7a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005640:	2000      	movs	r0, #0
 8005642:	f001 fb77 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xB7);
 8005646:	20b7      	movs	r0, #183	@ 0xb7
 8005648:	f001 fb74 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800564c:	2000      	movs	r0, #0
 800564e:	f001 fb71 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xC2);
 8005652:	20c2      	movs	r0, #194	@ 0xc2
 8005654:	f001 fb6e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005658:	2000      	movs	r0, #0
 800565a:	f001 fb6b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xC7);
 800565e:	20c7      	movs	r0, #199	@ 0xc7
 8005660:	f001 fb68 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005664:	2000      	movs	r0, #0
 8005666:	f001 fb65 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD1);
 800566a:	20d1      	movs	r0, #209	@ 0xd1
 800566c:	f001 fb62 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005670:	2000      	movs	r0, #0
 8005672:	f001 fb5f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD6);
 8005676:	20d6      	movs	r0, #214	@ 0xd6
 8005678:	f001 fb5c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800567c:	2000      	movs	r0, #0
 800567e:	f001 fb59 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xDD);
 8005682:	20dd      	movs	r0, #221	@ 0xdd
 8005684:	f001 fb56 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005688:	2000      	movs	r0, #0
 800568a:	f001 fb53 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800568e:	20f3      	movs	r0, #243	@ 0xf3
 8005690:	f001 fb50 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005694:	2000      	movs	r0, #0
 8005696:	f001 fb4d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xE3);
 800569a:	20e3      	movs	r0, #227	@ 0xe3
 800569c:	f001 fb5e 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x05);
 80056a0:	2005      	movs	r0, #5
 80056a2:	f001 fb47 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056a6:	2000      	movs	r0, #0
 80056a8:	f001 fb44 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA);
 80056ac:	200a      	movs	r0, #10
 80056ae:	f001 fb41 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056b2:	2000      	movs	r0, #0
 80056b4:	f001 fb3e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x1C);
 80056b8:	201c      	movs	r0, #28
 80056ba:	f001 fb3b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056be:	2000      	movs	r0, #0
 80056c0:	f001 fb38 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x33);
 80056c4:	2033      	movs	r0, #51	@ 0x33
 80056c6:	f001 fb35 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056ca:	2000      	movs	r0, #0
 80056cc:	f001 fb32 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x44);
 80056d0:	2044      	movs	r0, #68	@ 0x44
 80056d2:	f001 fb2f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056d6:	2000      	movs	r0, #0
 80056d8:	f001 fb2c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x50);
 80056dc:	2050      	movs	r0, #80	@ 0x50
 80056de:	f001 fb29 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056e2:	2000      	movs	r0, #0
 80056e4:	f001 fb26 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x62);
 80056e8:	2062      	movs	r0, #98	@ 0x62
 80056ea:	f001 fb23 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056ee:	2000      	movs	r0, #0
 80056f0:	f001 fb20 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x78);
 80056f4:	2078      	movs	r0, #120	@ 0x78
 80056f6:	f001 fb1d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056fa:	2000      	movs	r0, #0
 80056fc:	f001 fb1a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x88);
 8005700:	2088      	movs	r0, #136	@ 0x88
 8005702:	f001 fb17 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005706:	2000      	movs	r0, #0
 8005708:	f001 fb14 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x97);
 800570c:	2097      	movs	r0, #151	@ 0x97
 800570e:	f001 fb11 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005712:	2000      	movs	r0, #0
 8005714:	f001 fb0e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA6);
 8005718:	20a6      	movs	r0, #166	@ 0xa6
 800571a:	f001 fb0b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800571e:	2000      	movs	r0, #0
 8005720:	f001 fb08 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xB7);
 8005724:	20b7      	movs	r0, #183	@ 0xb7
 8005726:	f001 fb05 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800572a:	2000      	movs	r0, #0
 800572c:	f001 fb02 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xC2);
 8005730:	20c2      	movs	r0, #194	@ 0xc2
 8005732:	f001 faff 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005736:	2000      	movs	r0, #0
 8005738:	f001 fafc 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xC7);
 800573c:	20c7      	movs	r0, #199	@ 0xc7
 800573e:	f001 faf9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005742:	2000      	movs	r0, #0
 8005744:	f001 faf6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD1);
 8005748:	20d1      	movs	r0, #209	@ 0xd1
 800574a:	f001 faf3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800574e:	2000      	movs	r0, #0
 8005750:	f001 faf0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD5);
 8005754:	20d5      	movs	r0, #213	@ 0xd5
 8005756:	f001 faed 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800575a:	2000      	movs	r0, #0
 800575c:	f001 faea 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xDD);
 8005760:	20dd      	movs	r0, #221	@ 0xdd
 8005762:	f001 fae7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005766:	2000      	movs	r0, #0
 8005768:	f001 fae4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800576c:	20f3      	movs	r0, #243	@ 0xf3
 800576e:	f001 fae1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005772:	2000      	movs	r0, #0
 8005774:	f001 fade 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xE4);
 8005778:	20e4      	movs	r0, #228	@ 0xe4
 800577a:	f001 faef 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x01);
 800577e:	2001      	movs	r0, #1
 8005780:	f001 fad8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005784:	2000      	movs	r0, #0
 8005786:	f001 fad5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x01);
 800578a:	2001      	movs	r0, #1
 800578c:	f001 fad2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005790:	2000      	movs	r0, #0
 8005792:	f001 facf 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x02);
 8005796:	2002      	movs	r0, #2
 8005798:	f001 facc 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800579c:	2000      	movs	r0, #0
 800579e:	f001 fac9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x2A);
 80057a2:	202a      	movs	r0, #42	@ 0x2a
 80057a4:	f001 fac6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057a8:	2000      	movs	r0, #0
 80057aa:	f001 fac3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80057ae:	203c      	movs	r0, #60	@ 0x3c
 80057b0:	f001 fac0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057b4:	2000      	movs	r0, #0
 80057b6:	f001 fabd 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x4B);
 80057ba:	204b      	movs	r0, #75	@ 0x4b
 80057bc:	f001 faba 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057c0:	2000      	movs	r0, #0
 80057c2:	f001 fab7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x5D);
 80057c6:	205d      	movs	r0, #93	@ 0x5d
 80057c8:	f001 fab4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057cc:	2000      	movs	r0, #0
 80057ce:	f001 fab1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x74);
 80057d2:	2074      	movs	r0, #116	@ 0x74
 80057d4:	f001 faae 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057d8:	2000      	movs	r0, #0
 80057da:	f001 faab 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x84);
 80057de:	2084      	movs	r0, #132	@ 0x84
 80057e0:	f001 faa8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057e4:	2000      	movs	r0, #0
 80057e6:	f001 faa5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x93);
 80057ea:	2093      	movs	r0, #147	@ 0x93
 80057ec:	f001 faa2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057f0:	2000      	movs	r0, #0
 80057f2:	f001 fa9f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA2);
 80057f6:	20a2      	movs	r0, #162	@ 0xa2
 80057f8:	f001 fa9c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057fc:	2000      	movs	r0, #0
 80057fe:	f001 fa99 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xB3);
 8005802:	20b3      	movs	r0, #179	@ 0xb3
 8005804:	f001 fa96 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005808:	2000      	movs	r0, #0
 800580a:	f001 fa93 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xBE);
 800580e:	20be      	movs	r0, #190	@ 0xbe
 8005810:	f001 fa90 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005814:	2000      	movs	r0, #0
 8005816:	f001 fa8d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xC4);
 800581a:	20c4      	movs	r0, #196	@ 0xc4
 800581c:	f001 fa8a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005820:	2000      	movs	r0, #0
 8005822:	f001 fa87 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xCD);
 8005826:	20cd      	movs	r0, #205	@ 0xcd
 8005828:	f001 fa84 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800582c:	2000      	movs	r0, #0
 800582e:	f001 fa81 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD3);
 8005832:	20d3      	movs	r0, #211	@ 0xd3
 8005834:	f001 fa7e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005838:	2000      	movs	r0, #0
 800583a:	f001 fa7b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xDD);
 800583e:	20dd      	movs	r0, #221	@ 0xdd
 8005840:	f001 fa78 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005844:	2000      	movs	r0, #0
 8005846:	f001 fa75 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800584a:	20f3      	movs	r0, #243	@ 0xf3
 800584c:	f001 fa72 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005850:	2000      	movs	r0, #0
 8005852:	f001 fa6f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xE5);
 8005856:	20e5      	movs	r0, #229	@ 0xe5
 8005858:	f001 fa80 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 800585c:	2000      	movs	r0, #0
 800585e:	f001 fa69 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005862:	2000      	movs	r0, #0
 8005864:	f001 fa66 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005868:	2000      	movs	r0, #0
 800586a:	f001 fa63 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800586e:	2000      	movs	r0, #0
 8005870:	f001 fa60 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x02);
 8005874:	2002      	movs	r0, #2
 8005876:	f001 fa5d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800587a:	2000      	movs	r0, #0
 800587c:	f001 fa5a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x29);
 8005880:	2029      	movs	r0, #41	@ 0x29
 8005882:	f001 fa57 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005886:	2000      	movs	r0, #0
 8005888:	f001 fa54 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x3C);
 800588c:	203c      	movs	r0, #60	@ 0x3c
 800588e:	f001 fa51 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005892:	2000      	movs	r0, #0
 8005894:	f001 fa4e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x4B);
 8005898:	204b      	movs	r0, #75	@ 0x4b
 800589a:	f001 fa4b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800589e:	2000      	movs	r0, #0
 80058a0:	f001 fa48 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x5D);
 80058a4:	205d      	movs	r0, #93	@ 0x5d
 80058a6:	f001 fa45 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058aa:	2000      	movs	r0, #0
 80058ac:	f001 fa42 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x74);
 80058b0:	2074      	movs	r0, #116	@ 0x74
 80058b2:	f001 fa3f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058b6:	2000      	movs	r0, #0
 80058b8:	f001 fa3c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x84);
 80058bc:	2084      	movs	r0, #132	@ 0x84
 80058be:	f001 fa39 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058c2:	2000      	movs	r0, #0
 80058c4:	f001 fa36 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x93);
 80058c8:	2093      	movs	r0, #147	@ 0x93
 80058ca:	f001 fa33 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058ce:	2000      	movs	r0, #0
 80058d0:	f001 fa30 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xA2);
 80058d4:	20a2      	movs	r0, #162	@ 0xa2
 80058d6:	f001 fa2d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058da:	2000      	movs	r0, #0
 80058dc:	f001 fa2a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xB3);
 80058e0:	20b3      	movs	r0, #179	@ 0xb3
 80058e2:	f001 fa27 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058e6:	2000      	movs	r0, #0
 80058e8:	f001 fa24 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xBE);
 80058ec:	20be      	movs	r0, #190	@ 0xbe
 80058ee:	f001 fa21 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058f2:	2000      	movs	r0, #0
 80058f4:	f001 fa1e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xC4);
 80058f8:	20c4      	movs	r0, #196	@ 0xc4
 80058fa:	f001 fa1b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058fe:	2000      	movs	r0, #0
 8005900:	f001 fa18 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xCD);
 8005904:	20cd      	movs	r0, #205	@ 0xcd
 8005906:	f001 fa15 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800590a:	2000      	movs	r0, #0
 800590c:	f001 fa12 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xD3);
 8005910:	20d3      	movs	r0, #211	@ 0xd3
 8005912:	f001 fa0f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005916:	2000      	movs	r0, #0
 8005918:	f001 fa0c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xDC);
 800591c:	20dc      	movs	r0, #220	@ 0xdc
 800591e:	f001 fa09 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005922:	2000      	movs	r0, #0
 8005924:	f001 fa06 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8005928:	20f3      	movs	r0, #243	@ 0xf3
 800592a:	f001 fa03 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800592e:	2000      	movs	r0, #0
 8005930:	f001 fa00 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8005934:	20e6      	movs	r0, #230	@ 0xe6
 8005936:	f001 fa11 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x11);
 800593a:	2011      	movs	r0, #17
 800593c:	f001 f9fa 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005940:	2000      	movs	r0, #0
 8005942:	f001 f9f7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x34);
 8005946:	2034      	movs	r0, #52	@ 0x34
 8005948:	f001 f9f4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800594c:	2000      	movs	r0, #0
 800594e:	f001 f9f1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x56);
 8005952:	2056      	movs	r0, #86	@ 0x56
 8005954:	f001 f9ee 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005958:	2000      	movs	r0, #0
 800595a:	f001 f9eb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x76);
 800595e:	2076      	movs	r0, #118	@ 0x76
 8005960:	f001 f9e8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005964:	2000      	movs	r0, #0
 8005966:	f001 f9e5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x77);
 800596a:	2077      	movs	r0, #119	@ 0x77
 800596c:	f001 f9e2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005970:	2000      	movs	r0, #0
 8005972:	f001 f9df 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x66);
 8005976:	2066      	movs	r0, #102	@ 0x66
 8005978:	f001 f9dc 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 800597c:	2000      	movs	r0, #0
 800597e:	f001 f9d9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x88);
 8005982:	2088      	movs	r0, #136	@ 0x88
 8005984:	f001 f9d6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005988:	2000      	movs	r0, #0
 800598a:	f001 f9d3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x99);
 800598e:	2099      	movs	r0, #153	@ 0x99
 8005990:	f001 f9d0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005994:	2000      	movs	r0, #0
 8005996:	f001 f9cd 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xBB);
 800599a:	20bb      	movs	r0, #187	@ 0xbb
 800599c:	f001 f9ca 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80059a0:	2000      	movs	r0, #0
 80059a2:	f001 f9c7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x99);
 80059a6:	2099      	movs	r0, #153	@ 0x99
 80059a8:	f001 f9c4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80059ac:	2000      	movs	r0, #0
 80059ae:	f001 f9c1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x66);
 80059b2:	2066      	movs	r0, #102	@ 0x66
 80059b4:	f001 f9be 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80059b8:	2000      	movs	r0, #0
 80059ba:	f001 f9bb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x55);
 80059be:	2055      	movs	r0, #85	@ 0x55
 80059c0:	f001 f9b8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80059c4:	2000      	movs	r0, #0
 80059c6:	f001 f9b5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x55);
 80059ca:	2055      	movs	r0, #85	@ 0x55
 80059cc:	f001 f9b2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80059d0:	2000      	movs	r0, #0
 80059d2:	f001 f9af 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x45);
 80059d6:	2045      	movs	r0, #69	@ 0x45
 80059d8:	f001 f9ac 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80059dc:	2000      	movs	r0, #0
 80059de:	f001 f9a9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x43);
 80059e2:	2043      	movs	r0, #67	@ 0x43
 80059e4:	f001 f9a6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80059e8:	2000      	movs	r0, #0
 80059ea:	f001 f9a3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x44);
 80059ee:	2044      	movs	r0, #68	@ 0x44
 80059f0:	f001 f9a0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 80059f4:	2000      	movs	r0, #0
 80059f6:	f001 f99d 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xE7);
 80059fa:	20e7      	movs	r0, #231	@ 0xe7
 80059fc:	f001 f9ae 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x32);
 8005a00:	2032      	movs	r0, #50	@ 0x32
 8005a02:	f001 f997 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a06:	2000      	movs	r0, #0
 8005a08:	f001 f994 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x55);
 8005a0c:	2055      	movs	r0, #85	@ 0x55
 8005a0e:	f001 f991 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a12:	2000      	movs	r0, #0
 8005a14:	f001 f98e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x76);
 8005a18:	2076      	movs	r0, #118	@ 0x76
 8005a1a:	f001 f98b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a1e:	2000      	movs	r0, #0
 8005a20:	f001 f988 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x66);
 8005a24:	2066      	movs	r0, #102	@ 0x66
 8005a26:	f001 f985 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f001 f982 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x67);
 8005a30:	2067      	movs	r0, #103	@ 0x67
 8005a32:	f001 f97f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a36:	2000      	movs	r0, #0
 8005a38:	f001 f97c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x67);
 8005a3c:	2067      	movs	r0, #103	@ 0x67
 8005a3e:	f001 f979 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a42:	2000      	movs	r0, #0
 8005a44:	f001 f976 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x87);
 8005a48:	2087      	movs	r0, #135	@ 0x87
 8005a4a:	f001 f973 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f001 f970 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x99);
 8005a54:	2099      	movs	r0, #153	@ 0x99
 8005a56:	f001 f96d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f001 f96a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8005a60:	20bb      	movs	r0, #187	@ 0xbb
 8005a62:	f001 f967 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a66:	2000      	movs	r0, #0
 8005a68:	f001 f964 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x99);
 8005a6c:	2099      	movs	r0, #153	@ 0x99
 8005a6e:	f001 f961 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a72:	2000      	movs	r0, #0
 8005a74:	f001 f95e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x77);
 8005a78:	2077      	movs	r0, #119	@ 0x77
 8005a7a:	f001 f95b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f001 f958 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x44);
 8005a84:	2044      	movs	r0, #68	@ 0x44
 8005a86:	f001 f955 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f001 f952 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x56);
 8005a90:	2056      	movs	r0, #86	@ 0x56
 8005a92:	f001 f94f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005a96:	2000      	movs	r0, #0
 8005a98:	f001 f94c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x23);
 8005a9c:	2023      	movs	r0, #35	@ 0x23
 8005a9e:	f001 f949 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f001 f946 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x33);
 8005aa8:	2033      	movs	r0, #51	@ 0x33
 8005aaa:	f001 f943 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f001 f940 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x45);
 8005ab4:	2045      	movs	r0, #69	@ 0x45
 8005ab6:	f001 f93d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005aba:	2000      	movs	r0, #0
 8005abc:	f001 f93a 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8005ac0:	20e8      	movs	r0, #232	@ 0xe8
 8005ac2:	f001 f94b 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	f001 f934 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005acc:	2000      	movs	r0, #0
 8005ace:	f001 f931 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x99);
 8005ad2:	2099      	movs	r0, #153	@ 0x99
 8005ad4:	f001 f92e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005ad8:	2000      	movs	r0, #0
 8005ada:	f001 f92b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x87);
 8005ade:	2087      	movs	r0, #135	@ 0x87
 8005ae0:	f001 f928 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f001 f925 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x88);
 8005aea:	2088      	movs	r0, #136	@ 0x88
 8005aec:	f001 f922 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005af0:	2000      	movs	r0, #0
 8005af2:	f001 f91f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x77);
 8005af6:	2077      	movs	r0, #119	@ 0x77
 8005af8:	f001 f91c 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005afc:	2000      	movs	r0, #0
 8005afe:	f001 f919 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x66);
 8005b02:	2066      	movs	r0, #102	@ 0x66
 8005b04:	f001 f916 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b08:	2000      	movs	r0, #0
 8005b0a:	f001 f913 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x88);
 8005b0e:	2088      	movs	r0, #136	@ 0x88
 8005b10:	f001 f910 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b14:	2000      	movs	r0, #0
 8005b16:	f001 f90d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xAA);
 8005b1a:	20aa      	movs	r0, #170	@ 0xaa
 8005b1c:	f001 f90a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b20:	2000      	movs	r0, #0
 8005b22:	f001 f907 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8005b26:	20bb      	movs	r0, #187	@ 0xbb
 8005b28:	f001 f904 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	f001 f901 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x99);
 8005b32:	2099      	movs	r0, #153	@ 0x99
 8005b34:	f001 f8fe 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b38:	2000      	movs	r0, #0
 8005b3a:	f001 f8fb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x66);
 8005b3e:	2066      	movs	r0, #102	@ 0x66
 8005b40:	f001 f8f8 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b44:	2000      	movs	r0, #0
 8005b46:	f001 f8f5 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x55);
 8005b4a:	2055      	movs	r0, #85	@ 0x55
 8005b4c:	f001 f8f2 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b50:	2000      	movs	r0, #0
 8005b52:	f001 f8ef 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x55);
 8005b56:	2055      	movs	r0, #85	@ 0x55
 8005b58:	f001 f8ec 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	f001 f8e9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x44);
 8005b62:	2044      	movs	r0, #68	@ 0x44
 8005b64:	f001 f8e6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f001 f8e3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x44);
 8005b6e:	2044      	movs	r0, #68	@ 0x44
 8005b70:	f001 f8e0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b74:	2000      	movs	r0, #0
 8005b76:	f001 f8dd 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x55);
 8005b7a:	2055      	movs	r0, #85	@ 0x55
 8005b7c:	f001 f8da 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b80:	2000      	movs	r0, #0
 8005b82:	f001 f8d7 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xE9);
 8005b86:	20e9      	movs	r0, #233	@ 0xe9
 8005b88:	f001 f8e8 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8005b8c:	20aa      	movs	r0, #170	@ 0xaa
 8005b8e:	f001 f8d1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b92:	2000      	movs	r0, #0
 8005b94:	f001 f8ce 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f001 f8cb 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	f001 f8c8 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0x00);
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	f001 f8d9 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8005baa:	20aa      	movs	r0, #170	@ 0xaa
 8005bac:	f001 f8c2 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xCF);
 8005bb0:	20cf      	movs	r0, #207	@ 0xcf
 8005bb2:	f001 f8d3 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	f001 f8bc 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f001 f8b9 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	f001 f8b6 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bc8:	2000      	movs	r0, #0
 8005bca:	f001 f8b3 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f001 f8b0 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f001 f8ad 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bda:	2000      	movs	r0, #0
 8005bdc:	f001 f8aa 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005be0:	2000      	movs	r0, #0
 8005be2:	f001 f8a7 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005be6:	2000      	movs	r0, #0
 8005be8:	f001 f8a4 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bec:	2000      	movs	r0, #0
 8005bee:	f001 f8a1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bf2:	2000      	movs	r0, #0
 8005bf4:	f001 f89e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	f001 f89b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f001 f898 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005c04:	2000      	movs	r0, #0
 8005c06:	f001 f895 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f001 f892 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005c10:	2000      	movs	r0, #0
 8005c12:	f001 f88f 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005c16:	2000      	movs	r0, #0
 8005c18:	f001 f88c 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8005c1c:	20f0      	movs	r0, #240	@ 0xf0
 8005c1e:	f001 f89d 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005c22:	2000      	movs	r0, #0
 8005c24:	f001 f886 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x50);
 8005c28:	2050      	movs	r0, #80	@ 0x50
 8005c2a:	f001 f883 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f001 f880 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005c34:	2000      	movs	r0, #0
 8005c36:	f001 f87d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f001 f87a 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xF3);
 8005c40:	20f3      	movs	r0, #243	@ 0xf3
 8005c42:	f001 f88b 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005c46:	2000      	movs	r0, #0
 8005c48:	f001 f874 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xF9);
 8005c4c:	20f9      	movs	r0, #249	@ 0xf9
 8005c4e:	f001 f885 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x06);
 8005c52:	2006      	movs	r0, #6
 8005c54:	f001 f86e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x10);
 8005c58:	2010      	movs	r0, #16
 8005c5a:	f001 f86b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x29);
 8005c5e:	2029      	movs	r0, #41	@ 0x29
 8005c60:	f001 f868 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005c64:	2000      	movs	r0, #0
 8005c66:	f001 f865 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8005c6a:	203a      	movs	r0, #58	@ 0x3a
 8005c6c:	f001 f876 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 8005c70:	2055      	movs	r0, #85	@ 0x55
 8005c72:	f001 f85f 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0x11);
 8005c76:	2011      	movs	r0, #17
 8005c78:	f001 f870 	bl	8006d5c <lcd_wr_regno>
    HAL_Delay(100);
 8005c7c:	2064      	movs	r0, #100	@ 0x64
 8005c7e:	f7fc f90d 	bl	8001e9c <HAL_Delay>
    lcd_wr_regno(0x29);
 8005c82:	2029      	movs	r0, #41	@ 0x29
 8005c84:	f001 f86a 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_regno(0x35);
 8005c88:	2035      	movs	r0, #53	@ 0x35
 8005c8a:	f001 f867 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f001 f850 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0x51);
 8005c94:	2051      	movs	r0, #81	@ 0x51
 8005c96:	f001 f861 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8005c9a:	20ff      	movs	r0, #255	@ 0xff
 8005c9c:	f001 f84a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0x53);
 8005ca0:	2053      	movs	r0, #83	@ 0x53
 8005ca2:	f001 f85b 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x2C);
 8005ca6:	202c      	movs	r0, #44	@ 0x2c
 8005ca8:	f001 f844 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0x55);
 8005cac:	2055      	movs	r0, #85	@ 0x55
 8005cae:	f001 f855 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x82);
 8005cb2:	2082      	movs	r0, #130	@ 0x82
 8005cb4:	f001 f83e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0x2c);
 8005cb8:	202c      	movs	r0, #44	@ 0x2c
 8005cba:	f001 f84f 	bl	8006d5c <lcd_wr_regno>
}
 8005cbe:	bf00      	nop
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <lcd_ex_nt35510_reginit>:
 * @brief       NT35510寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_nt35510_reginit(void)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 8005cc6:	2155      	movs	r1, #85	@ 0x55
 8005cc8:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8005ccc:	f001 f85a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8005cd0:	21aa      	movs	r1, #170	@ 0xaa
 8005cd2:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8005cd6:	f001 f855 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8005cda:	2152      	movs	r1, #82	@ 0x52
 8005cdc:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8005ce0:	f001 f850 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8005ce4:	2108      	movs	r1, #8
 8005ce6:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8005cea:	f001 f84b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 8005cee:	2101      	movs	r1, #1
 8005cf0:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005cf4:	f001 f846 	bl	8006d84 <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 8005cf8:	210d      	movs	r1, #13
 8005cfa:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8005cfe:	f001 f841 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 8005d02:	210d      	movs	r1, #13
 8005d04:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8005d08:	f001 f83c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 8005d0c:	210d      	movs	r1, #13
 8005d0e:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8005d12:	f001 f837 	bl	8006d84 <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 8005d16:	2134      	movs	r1, #52	@ 0x34
 8005d18:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005d1c:	f001 f832 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 8005d20:	2134      	movs	r1, #52	@ 0x34
 8005d22:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8005d26:	f001 f82d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 8005d2a:	2134      	movs	r1, #52	@ 0x34
 8005d2c:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8005d30:	f001 f828 	bl	8006d84 <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 8005d34:	210d      	movs	r1, #13
 8005d36:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005d3a:	f001 f823 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 8005d3e:	210d      	movs	r1, #13
 8005d40:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8005d44:	f001 f81e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 8005d48:	210d      	movs	r1, #13
 8005d4a:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8005d4e:	f001 f819 	bl	8006d84 <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 8005d52:	2134      	movs	r1, #52	@ 0x34
 8005d54:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8005d58:	f001 f814 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 8005d5c:	2134      	movs	r1, #52	@ 0x34
 8005d5e:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8005d62:	f001 f80f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 8005d66:	2134      	movs	r1, #52	@ 0x34
 8005d68:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8005d6c:	f001 f80a 	bl	8006d84 <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 8005d70:	2100      	movs	r1, #0
 8005d72:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8005d76:	f001 f805 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8005d80:	f001 f800 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 8005d84:	2100      	movs	r1, #0
 8005d86:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8005d8a:	f000 fffb 	bl	8006d84 <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 8005d8e:	2124      	movs	r1, #36	@ 0x24
 8005d90:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8005d94:	f000 fff6 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 8005d98:	2124      	movs	r1, #36	@ 0x24
 8005d9a:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005d9e:	f000 fff1 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 8005da2:	2124      	movs	r1, #36	@ 0x24
 8005da4:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8005da8:	f000 ffec 	bl	8006d84 <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 8005dac:	2101      	movs	r1, #1
 8005dae:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8005db2:	f000 ffe7 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 8005db6:	210f      	movs	r1, #15
 8005db8:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8005dbc:	f000 ffe2 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 8005dc0:	210f      	movs	r1, #15
 8005dc2:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8005dc6:	f000 ffdd 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 8005dca:	210f      	movs	r1, #15
 8005dcc:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8005dd0:	f000 ffd8 	bl	8006d84 <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 8005dd4:	2134      	movs	r1, #52	@ 0x34
 8005dd6:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8005dda:	f000 ffd3 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 8005dde:	2134      	movs	r1, #52	@ 0x34
 8005de0:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8005de4:	f000 ffce 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 8005de8:	2134      	movs	r1, #52	@ 0x34
 8005dea:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8005dee:	f000 ffc9 	bl	8006d84 <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 8005df2:	2108      	movs	r1, #8
 8005df4:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8005df8:	f000 ffc4 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 8005dfc:	2108      	movs	r1, #8
 8005dfe:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8005e02:	f000 ffbf 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 8005e06:	2108      	movs	r1, #8
 8005e08:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8005e0c:	f000 ffba 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 8005e10:	2103      	movs	r1, #3
 8005e12:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 8005e16:	f000 ffb5 	bl	8006d84 <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 8005e1a:	2124      	movs	r1, #36	@ 0x24
 8005e1c:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8005e20:	f000 ffb0 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 8005e24:	2124      	movs	r1, #36	@ 0x24
 8005e26:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8005e2a:	f000 ffab 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 8005e2e:	2124      	movs	r1, #36	@ 0x24
 8005e30:	f64b 2002 	movw	r0, #47618	@ 0xba02
 8005e34:	f000 ffa6 	bl	8006d84 <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 8005e38:	2100      	movs	r1, #0
 8005e3a:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005e3e:	f000 ffa1 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 8005e42:	2178      	movs	r1, #120	@ 0x78
 8005e44:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005e48:	f000 ff9c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005e52:	f000 ff97 	bl	8006d84 <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 8005e56:	2100      	movs	r1, #0
 8005e58:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8005e5c:	f000 ff92 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 8005e60:	2178      	movs	r1, #120	@ 0x78
 8005e62:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8005e66:	f000 ff8d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8005e70:	f000 ff88 	bl	8006d84 <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 8005e74:	2100      	movs	r1, #0
 8005e76:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8005e7a:	f000 ff83 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 8005e7e:	2164      	movs	r1, #100	@ 0x64
 8005e80:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 8005e84:	f000 ff7e 	bl	8006d84 <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8005e8e:	f000 ff79 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 8005e92:	2133      	movs	r1, #51	@ 0x33
 8005e94:	f24d 1001 	movw	r0, #53505	@ 0xd101
 8005e98:	f000 ff74 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8005ea2:	f000 ff6f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 8005ea6:	2134      	movs	r1, #52	@ 0x34
 8005ea8:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8005eac:	f000 ff6a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	f24d 1004 	movw	r0, #53508	@ 0xd104
 8005eb6:	f000 ff65 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 8005eba:	213a      	movs	r1, #58	@ 0x3a
 8005ebc:	f24d 1005 	movw	r0, #53509	@ 0xd105
 8005ec0:	f000 ff60 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8005eca:	f000 ff5b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 8005ece:	214a      	movs	r1, #74	@ 0x4a
 8005ed0:	f24d 1007 	movw	r0, #53511	@ 0xd107
 8005ed4:	f000 ff56 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8005ede:	f000 ff51 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 8005ee2:	215c      	movs	r1, #92	@ 0x5c
 8005ee4:	f24d 1009 	movw	r0, #53513	@ 0xd109
 8005ee8:	f000 ff4c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 8005eec:	2100      	movs	r1, #0
 8005eee:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005ef2:	f000 ff47 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 8005ef6:	2181      	movs	r1, #129	@ 0x81
 8005ef8:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005efc:	f000 ff42 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 8005f00:	2100      	movs	r1, #0
 8005f02:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 8005f06:	f000 ff3d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 8005f0a:	21a6      	movs	r1, #166	@ 0xa6
 8005f0c:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8005f10:	f000 ff38 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 8005f14:	2100      	movs	r1, #0
 8005f16:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8005f1a:	f000 ff33 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 8005f1e:	21e5      	movs	r1, #229	@ 0xe5
 8005f20:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 8005f24:	f000 ff2e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 8005f28:	2101      	movs	r1, #1
 8005f2a:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8005f2e:	f000 ff29 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 8005f32:	2113      	movs	r1, #19
 8005f34:	f24d 1011 	movw	r0, #53521	@ 0xd111
 8005f38:	f000 ff24 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8005f42:	f000 ff1f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 8005f46:	2154      	movs	r1, #84	@ 0x54
 8005f48:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8005f4c:	f000 ff1a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 8005f50:	2101      	movs	r1, #1
 8005f52:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8005f56:	f000 ff15 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 8005f5a:	2182      	movs	r1, #130	@ 0x82
 8005f5c:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8005f60:	f000 ff10 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 8005f64:	2101      	movs	r1, #1
 8005f66:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8005f6a:	f000 ff0b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 8005f6e:	21ca      	movs	r1, #202	@ 0xca
 8005f70:	f24d 1017 	movw	r0, #53527	@ 0xd117
 8005f74:	f000 ff06 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 8005f78:	2102      	movs	r1, #2
 8005f7a:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8005f7e:	f000 ff01 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 8005f82:	2100      	movs	r1, #0
 8005f84:	f24d 1019 	movw	r0, #53529	@ 0xd119
 8005f88:	f000 fefc 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8005f92:	f000 fef7 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 8005f96:	2101      	movs	r1, #1
 8005f98:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8005f9c:	f000 fef2 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 8005fa6:	f000 feed 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 8005faa:	2134      	movs	r1, #52	@ 0x34
 8005fac:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8005fb0:	f000 fee8 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8005fba:	f000 fee3 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 8005fbe:	2167      	movs	r1, #103	@ 0x67
 8005fc0:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 8005fc4:	f000 fede 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 8005fc8:	2102      	movs	r1, #2
 8005fca:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8005fce:	f000 fed9 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 8005fd2:	2184      	movs	r1, #132	@ 0x84
 8005fd4:	f24d 1021 	movw	r0, #53537	@ 0xd121
 8005fd8:	f000 fed4 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 8005fdc:	2102      	movs	r1, #2
 8005fde:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8005fe2:	f000 fecf 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 8005fe6:	21a4      	movs	r1, #164	@ 0xa4
 8005fe8:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8005fec:	f000 feca 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	f24d 1024 	movw	r0, #53540	@ 0xd124
 8005ff6:	f000 fec5 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 8005ffa:	21b7      	movs	r1, #183	@ 0xb7
 8005ffc:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8006000:	f000 fec0 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 8006004:	2102      	movs	r1, #2
 8006006:	f24d 1026 	movw	r0, #53542	@ 0xd126
 800600a:	f000 febb 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 800600e:	21cf      	movs	r1, #207	@ 0xcf
 8006010:	f24d 1027 	movw	r0, #53543	@ 0xd127
 8006014:	f000 feb6 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 8006018:	2102      	movs	r1, #2
 800601a:	f24d 1028 	movw	r0, #53544	@ 0xd128
 800601e:	f000 feb1 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 8006022:	21de      	movs	r1, #222	@ 0xde
 8006024:	f24d 1029 	movw	r0, #53545	@ 0xd129
 8006028:	f000 feac 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 800602c:	2102      	movs	r1, #2
 800602e:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8006032:	f000 fea7 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 8006036:	21f2      	movs	r1, #242	@ 0xf2
 8006038:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 800603c:	f000 fea2 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 8006040:	2102      	movs	r1, #2
 8006042:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 8006046:	f000 fe9d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 800604a:	21fe      	movs	r1, #254	@ 0xfe
 800604c:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8006050:	f000 fe98 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 8006054:	2103      	movs	r1, #3
 8006056:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 800605a:	f000 fe93 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 800605e:	2110      	movs	r1, #16
 8006060:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 8006064:	f000 fe8e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 8006068:	2103      	movs	r1, #3
 800606a:	f24d 1030 	movw	r0, #53552	@ 0xd130
 800606e:	f000 fe89 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 8006072:	2133      	movs	r1, #51	@ 0x33
 8006074:	f24d 1031 	movw	r0, #53553	@ 0xd131
 8006078:	f000 fe84 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 800607c:	2103      	movs	r1, #3
 800607e:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8006082:	f000 fe7f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 8006086:	216d      	movs	r1, #109	@ 0x6d
 8006088:	f24d 1033 	movw	r0, #53555	@ 0xd133
 800608c:	f000 fe7a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 8006090:	2100      	movs	r1, #0
 8006092:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 8006096:	f000 fe75 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 800609a:	2133      	movs	r1, #51	@ 0x33
 800609c:	f24d 2001 	movw	r0, #53761	@ 0xd201
 80060a0:	f000 fe70 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 80060a4:	2100      	movs	r1, #0
 80060a6:	f24d 2002 	movw	r0, #53762	@ 0xd202
 80060aa:	f000 fe6b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 80060ae:	2134      	movs	r1, #52	@ 0x34
 80060b0:	f24d 2003 	movw	r0, #53763	@ 0xd203
 80060b4:	f000 fe66 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 80060b8:	2100      	movs	r1, #0
 80060ba:	f24d 2004 	movw	r0, #53764	@ 0xd204
 80060be:	f000 fe61 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 80060c2:	213a      	movs	r1, #58	@ 0x3a
 80060c4:	f24d 2005 	movw	r0, #53765	@ 0xd205
 80060c8:	f000 fe5c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 80060cc:	2100      	movs	r1, #0
 80060ce:	f24d 2006 	movw	r0, #53766	@ 0xd206
 80060d2:	f000 fe57 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 80060d6:	214a      	movs	r1, #74	@ 0x4a
 80060d8:	f24d 2007 	movw	r0, #53767	@ 0xd207
 80060dc:	f000 fe52 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 80060e0:	2100      	movs	r1, #0
 80060e2:	f24d 2008 	movw	r0, #53768	@ 0xd208
 80060e6:	f000 fe4d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 80060ea:	215c      	movs	r1, #92	@ 0x5c
 80060ec:	f24d 2009 	movw	r0, #53769	@ 0xd209
 80060f0:	f000 fe48 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 80060f4:	2100      	movs	r1, #0
 80060f6:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 80060fa:	f000 fe43 	bl	8006d84 <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 80060fe:	2181      	movs	r1, #129	@ 0x81
 8006100:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 8006104:	f000 fe3e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 8006108:	2100      	movs	r1, #0
 800610a:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 800610e:	f000 fe39 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 8006112:	21a6      	movs	r1, #166	@ 0xa6
 8006114:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 8006118:	f000 fe34 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 800611c:	2100      	movs	r1, #0
 800611e:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8006122:	f000 fe2f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 8006126:	21e5      	movs	r1, #229	@ 0xe5
 8006128:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 800612c:	f000 fe2a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 8006130:	2101      	movs	r1, #1
 8006132:	f24d 2010 	movw	r0, #53776	@ 0xd210
 8006136:	f000 fe25 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 800613a:	2113      	movs	r1, #19
 800613c:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8006140:	f000 fe20 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 8006144:	2101      	movs	r1, #1
 8006146:	f24d 2012 	movw	r0, #53778	@ 0xd212
 800614a:	f000 fe1b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 800614e:	2154      	movs	r1, #84	@ 0x54
 8006150:	f24d 2013 	movw	r0, #53779	@ 0xd213
 8006154:	f000 fe16 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 8006158:	2101      	movs	r1, #1
 800615a:	f24d 2014 	movw	r0, #53780	@ 0xd214
 800615e:	f000 fe11 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 8006162:	2182      	movs	r1, #130	@ 0x82
 8006164:	f24d 2015 	movw	r0, #53781	@ 0xd215
 8006168:	f000 fe0c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 800616c:	2101      	movs	r1, #1
 800616e:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8006172:	f000 fe07 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 8006176:	21ca      	movs	r1, #202	@ 0xca
 8006178:	f24d 2017 	movw	r0, #53783	@ 0xd217
 800617c:	f000 fe02 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 8006180:	2102      	movs	r1, #2
 8006182:	f24d 2018 	movw	r0, #53784	@ 0xd218
 8006186:	f000 fdfd 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 800618a:	2100      	movs	r1, #0
 800618c:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8006190:	f000 fdf8 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 8006194:	2102      	movs	r1, #2
 8006196:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 800619a:	f000 fdf3 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 800619e:	2101      	movs	r1, #1
 80061a0:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 80061a4:	f000 fdee 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 80061a8:	2102      	movs	r1, #2
 80061aa:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 80061ae:	f000 fde9 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 80061b2:	2134      	movs	r1, #52	@ 0x34
 80061b4:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 80061b8:	f000 fde4 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 80061bc:	2102      	movs	r1, #2
 80061be:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 80061c2:	f000 fddf 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 80061c6:	2167      	movs	r1, #103	@ 0x67
 80061c8:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 80061cc:	f000 fdda 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 80061d0:	2102      	movs	r1, #2
 80061d2:	f24d 2020 	movw	r0, #53792	@ 0xd220
 80061d6:	f000 fdd5 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 80061da:	2184      	movs	r1, #132	@ 0x84
 80061dc:	f24d 2021 	movw	r0, #53793	@ 0xd221
 80061e0:	f000 fdd0 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 80061e4:	2102      	movs	r1, #2
 80061e6:	f24d 2022 	movw	r0, #53794	@ 0xd222
 80061ea:	f000 fdcb 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 80061ee:	21a4      	movs	r1, #164	@ 0xa4
 80061f0:	f24d 2023 	movw	r0, #53795	@ 0xd223
 80061f4:	f000 fdc6 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 80061f8:	2102      	movs	r1, #2
 80061fa:	f24d 2024 	movw	r0, #53796	@ 0xd224
 80061fe:	f000 fdc1 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 8006202:	21b7      	movs	r1, #183	@ 0xb7
 8006204:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8006208:	f000 fdbc 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 800620c:	2102      	movs	r1, #2
 800620e:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8006212:	f000 fdb7 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 8006216:	21cf      	movs	r1, #207	@ 0xcf
 8006218:	f24d 2027 	movw	r0, #53799	@ 0xd227
 800621c:	f000 fdb2 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 8006220:	2102      	movs	r1, #2
 8006222:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8006226:	f000 fdad 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 800622a:	21de      	movs	r1, #222	@ 0xde
 800622c:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8006230:	f000 fda8 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 8006234:	2102      	movs	r1, #2
 8006236:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 800623a:	f000 fda3 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 800623e:	21f2      	movs	r1, #242	@ 0xf2
 8006240:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 8006244:	f000 fd9e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 8006248:	2102      	movs	r1, #2
 800624a:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 800624e:	f000 fd99 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 8006252:	21fe      	movs	r1, #254	@ 0xfe
 8006254:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 8006258:	f000 fd94 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 800625c:	2103      	movs	r1, #3
 800625e:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8006262:	f000 fd8f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 8006266:	2110      	movs	r1, #16
 8006268:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 800626c:	f000 fd8a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 8006270:	2103      	movs	r1, #3
 8006272:	f24d 2030 	movw	r0, #53808	@ 0xd230
 8006276:	f000 fd85 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 800627a:	2133      	movs	r1, #51	@ 0x33
 800627c:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8006280:	f000 fd80 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 8006284:	2103      	movs	r1, #3
 8006286:	f24d 2032 	movw	r0, #53810	@ 0xd232
 800628a:	f000 fd7b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 800628e:	216d      	movs	r1, #109	@ 0x6d
 8006290:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8006294:	f000 fd76 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 8006298:	2100      	movs	r1, #0
 800629a:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 800629e:	f000 fd71 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 80062a2:	2133      	movs	r1, #51	@ 0x33
 80062a4:	f24d 3001 	movw	r0, #54017	@ 0xd301
 80062a8:	f000 fd6c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 80062ac:	2100      	movs	r1, #0
 80062ae:	f24d 3002 	movw	r0, #54018	@ 0xd302
 80062b2:	f000 fd67 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 80062b6:	2134      	movs	r1, #52	@ 0x34
 80062b8:	f24d 3003 	movw	r0, #54019	@ 0xd303
 80062bc:	f000 fd62 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 80062c0:	2100      	movs	r1, #0
 80062c2:	f24d 3004 	movw	r0, #54020	@ 0xd304
 80062c6:	f000 fd5d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 80062ca:	213a      	movs	r1, #58	@ 0x3a
 80062cc:	f24d 3005 	movw	r0, #54021	@ 0xd305
 80062d0:	f000 fd58 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 80062d4:	2100      	movs	r1, #0
 80062d6:	f24d 3006 	movw	r0, #54022	@ 0xd306
 80062da:	f000 fd53 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 80062de:	214a      	movs	r1, #74	@ 0x4a
 80062e0:	f24d 3007 	movw	r0, #54023	@ 0xd307
 80062e4:	f000 fd4e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 80062e8:	2100      	movs	r1, #0
 80062ea:	f24d 3008 	movw	r0, #54024	@ 0xd308
 80062ee:	f000 fd49 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 80062f2:	215c      	movs	r1, #92	@ 0x5c
 80062f4:	f24d 3009 	movw	r0, #54025	@ 0xd309
 80062f8:	f000 fd44 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 80062fc:	2100      	movs	r1, #0
 80062fe:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8006302:	f000 fd3f 	bl	8006d84 <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 8006306:	2181      	movs	r1, #129	@ 0x81
 8006308:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 800630c:	f000 fd3a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 8006310:	2100      	movs	r1, #0
 8006312:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8006316:	f000 fd35 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 800631a:	21a6      	movs	r1, #166	@ 0xa6
 800631c:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8006320:	f000 fd30 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 8006324:	2100      	movs	r1, #0
 8006326:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 800632a:	f000 fd2b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 800632e:	21e5      	movs	r1, #229	@ 0xe5
 8006330:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8006334:	f000 fd26 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 8006338:	2101      	movs	r1, #1
 800633a:	f24d 3010 	movw	r0, #54032	@ 0xd310
 800633e:	f000 fd21 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 8006342:	2113      	movs	r1, #19
 8006344:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8006348:	f000 fd1c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 800634c:	2101      	movs	r1, #1
 800634e:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8006352:	f000 fd17 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 8006356:	2154      	movs	r1, #84	@ 0x54
 8006358:	f24d 3013 	movw	r0, #54035	@ 0xd313
 800635c:	f000 fd12 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 8006360:	2101      	movs	r1, #1
 8006362:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8006366:	f000 fd0d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 800636a:	2182      	movs	r1, #130	@ 0x82
 800636c:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8006370:	f000 fd08 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 8006374:	2101      	movs	r1, #1
 8006376:	f24d 3016 	movw	r0, #54038	@ 0xd316
 800637a:	f000 fd03 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 800637e:	21ca      	movs	r1, #202	@ 0xca
 8006380:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8006384:	f000 fcfe 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 8006388:	2102      	movs	r1, #2
 800638a:	f24d 3018 	movw	r0, #54040	@ 0xd318
 800638e:	f000 fcf9 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 8006392:	2100      	movs	r1, #0
 8006394:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8006398:	f000 fcf4 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 800639c:	2102      	movs	r1, #2
 800639e:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 80063a2:	f000 fcef 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 80063a6:	2101      	movs	r1, #1
 80063a8:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 80063ac:	f000 fcea 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 80063b0:	2102      	movs	r1, #2
 80063b2:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 80063b6:	f000 fce5 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 80063ba:	2134      	movs	r1, #52	@ 0x34
 80063bc:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 80063c0:	f000 fce0 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 80063c4:	2102      	movs	r1, #2
 80063c6:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 80063ca:	f000 fcdb 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 80063ce:	2167      	movs	r1, #103	@ 0x67
 80063d0:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 80063d4:	f000 fcd6 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 80063d8:	2102      	movs	r1, #2
 80063da:	f24d 3020 	movw	r0, #54048	@ 0xd320
 80063de:	f000 fcd1 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 80063e2:	2184      	movs	r1, #132	@ 0x84
 80063e4:	f24d 3021 	movw	r0, #54049	@ 0xd321
 80063e8:	f000 fccc 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 80063ec:	2102      	movs	r1, #2
 80063ee:	f24d 3022 	movw	r0, #54050	@ 0xd322
 80063f2:	f000 fcc7 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 80063f6:	21a4      	movs	r1, #164	@ 0xa4
 80063f8:	f24d 3023 	movw	r0, #54051	@ 0xd323
 80063fc:	f000 fcc2 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 8006400:	2102      	movs	r1, #2
 8006402:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8006406:	f000 fcbd 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 800640a:	21b7      	movs	r1, #183	@ 0xb7
 800640c:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8006410:	f000 fcb8 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 8006414:	2102      	movs	r1, #2
 8006416:	f24d 3026 	movw	r0, #54054	@ 0xd326
 800641a:	f000 fcb3 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 800641e:	21cf      	movs	r1, #207	@ 0xcf
 8006420:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8006424:	f000 fcae 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 8006428:	2102      	movs	r1, #2
 800642a:	f24d 3028 	movw	r0, #54056	@ 0xd328
 800642e:	f000 fca9 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 8006432:	21de      	movs	r1, #222	@ 0xde
 8006434:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8006438:	f000 fca4 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 800643c:	2102      	movs	r1, #2
 800643e:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8006442:	f000 fc9f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 8006446:	21f2      	movs	r1, #242	@ 0xf2
 8006448:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 800644c:	f000 fc9a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 8006450:	2102      	movs	r1, #2
 8006452:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8006456:	f000 fc95 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 800645a:	21fe      	movs	r1, #254	@ 0xfe
 800645c:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8006460:	f000 fc90 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 8006464:	2103      	movs	r1, #3
 8006466:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 800646a:	f000 fc8b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 800646e:	2110      	movs	r1, #16
 8006470:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8006474:	f000 fc86 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 8006478:	2103      	movs	r1, #3
 800647a:	f24d 3030 	movw	r0, #54064	@ 0xd330
 800647e:	f000 fc81 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 8006482:	2133      	movs	r1, #51	@ 0x33
 8006484:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8006488:	f000 fc7c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 800648c:	2103      	movs	r1, #3
 800648e:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8006492:	f000 fc77 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 8006496:	216d      	movs	r1, #109	@ 0x6d
 8006498:	f24d 3033 	movw	r0, #54067	@ 0xd333
 800649c:	f000 fc72 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 80064a0:	2100      	movs	r1, #0
 80064a2:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 80064a6:	f000 fc6d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 80064aa:	2133      	movs	r1, #51	@ 0x33
 80064ac:	f24d 4001 	movw	r0, #54273	@ 0xd401
 80064b0:	f000 fc68 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 80064b4:	2100      	movs	r1, #0
 80064b6:	f24d 4002 	movw	r0, #54274	@ 0xd402
 80064ba:	f000 fc63 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 80064be:	2134      	movs	r1, #52	@ 0x34
 80064c0:	f24d 4003 	movw	r0, #54275	@ 0xd403
 80064c4:	f000 fc5e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 80064c8:	2100      	movs	r1, #0
 80064ca:	f24d 4004 	movw	r0, #54276	@ 0xd404
 80064ce:	f000 fc59 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 80064d2:	213a      	movs	r1, #58	@ 0x3a
 80064d4:	f24d 4005 	movw	r0, #54277	@ 0xd405
 80064d8:	f000 fc54 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 80064dc:	2100      	movs	r1, #0
 80064de:	f24d 4006 	movw	r0, #54278	@ 0xd406
 80064e2:	f000 fc4f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 80064e6:	214a      	movs	r1, #74	@ 0x4a
 80064e8:	f24d 4007 	movw	r0, #54279	@ 0xd407
 80064ec:	f000 fc4a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 80064f0:	2100      	movs	r1, #0
 80064f2:	f24d 4008 	movw	r0, #54280	@ 0xd408
 80064f6:	f000 fc45 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 80064fa:	215c      	movs	r1, #92	@ 0x5c
 80064fc:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8006500:	f000 fc40 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 8006504:	2100      	movs	r1, #0
 8006506:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 800650a:	f000 fc3b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 800650e:	2181      	movs	r1, #129	@ 0x81
 8006510:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8006514:	f000 fc36 	bl	8006d84 <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 8006518:	2100      	movs	r1, #0
 800651a:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 800651e:	f000 fc31 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 8006522:	21a6      	movs	r1, #166	@ 0xa6
 8006524:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8006528:	f000 fc2c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 800652c:	2100      	movs	r1, #0
 800652e:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8006532:	f000 fc27 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 8006536:	21e5      	movs	r1, #229	@ 0xe5
 8006538:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 800653c:	f000 fc22 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 8006540:	2101      	movs	r1, #1
 8006542:	f24d 4010 	movw	r0, #54288	@ 0xd410
 8006546:	f000 fc1d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 800654a:	2113      	movs	r1, #19
 800654c:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8006550:	f000 fc18 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 8006554:	2101      	movs	r1, #1
 8006556:	f24d 4012 	movw	r0, #54290	@ 0xd412
 800655a:	f000 fc13 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 800655e:	2154      	movs	r1, #84	@ 0x54
 8006560:	f24d 4013 	movw	r0, #54291	@ 0xd413
 8006564:	f000 fc0e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 8006568:	2101      	movs	r1, #1
 800656a:	f24d 4014 	movw	r0, #54292	@ 0xd414
 800656e:	f000 fc09 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 8006572:	2182      	movs	r1, #130	@ 0x82
 8006574:	f24d 4015 	movw	r0, #54293	@ 0xd415
 8006578:	f000 fc04 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 800657c:	2101      	movs	r1, #1
 800657e:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8006582:	f000 fbff 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 8006586:	21ca      	movs	r1, #202	@ 0xca
 8006588:	f24d 4017 	movw	r0, #54295	@ 0xd417
 800658c:	f000 fbfa 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 8006590:	2102      	movs	r1, #2
 8006592:	f24d 4018 	movw	r0, #54296	@ 0xd418
 8006596:	f000 fbf5 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 800659a:	2100      	movs	r1, #0
 800659c:	f24d 4019 	movw	r0, #54297	@ 0xd419
 80065a0:	f000 fbf0 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 80065a4:	2102      	movs	r1, #2
 80065a6:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 80065aa:	f000 fbeb 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 80065ae:	2101      	movs	r1, #1
 80065b0:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 80065b4:	f000 fbe6 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 80065b8:	2102      	movs	r1, #2
 80065ba:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 80065be:	f000 fbe1 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 80065c2:	2134      	movs	r1, #52	@ 0x34
 80065c4:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 80065c8:	f000 fbdc 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 80065cc:	2102      	movs	r1, #2
 80065ce:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 80065d2:	f000 fbd7 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 80065d6:	2167      	movs	r1, #103	@ 0x67
 80065d8:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 80065dc:	f000 fbd2 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 80065e0:	2102      	movs	r1, #2
 80065e2:	f24d 4020 	movw	r0, #54304	@ 0xd420
 80065e6:	f000 fbcd 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 80065ea:	2184      	movs	r1, #132	@ 0x84
 80065ec:	f24d 4021 	movw	r0, #54305	@ 0xd421
 80065f0:	f000 fbc8 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 80065f4:	2102      	movs	r1, #2
 80065f6:	f24d 4022 	movw	r0, #54306	@ 0xd422
 80065fa:	f000 fbc3 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 80065fe:	21a4      	movs	r1, #164	@ 0xa4
 8006600:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8006604:	f000 fbbe 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 8006608:	2102      	movs	r1, #2
 800660a:	f24d 4024 	movw	r0, #54308	@ 0xd424
 800660e:	f000 fbb9 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 8006612:	21b7      	movs	r1, #183	@ 0xb7
 8006614:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8006618:	f000 fbb4 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 800661c:	2102      	movs	r1, #2
 800661e:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8006622:	f000 fbaf 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 8006626:	21cf      	movs	r1, #207	@ 0xcf
 8006628:	f24d 4027 	movw	r0, #54311	@ 0xd427
 800662c:	f000 fbaa 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 8006630:	2102      	movs	r1, #2
 8006632:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8006636:	f000 fba5 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 800663a:	21de      	movs	r1, #222	@ 0xde
 800663c:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8006640:	f000 fba0 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 8006644:	2102      	movs	r1, #2
 8006646:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 800664a:	f000 fb9b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 800664e:	21f2      	movs	r1, #242	@ 0xf2
 8006650:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 8006654:	f000 fb96 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 8006658:	2102      	movs	r1, #2
 800665a:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 800665e:	f000 fb91 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 8006662:	21fe      	movs	r1, #254	@ 0xfe
 8006664:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 8006668:	f000 fb8c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 800666c:	2103      	movs	r1, #3
 800666e:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8006672:	f000 fb87 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 8006676:	2110      	movs	r1, #16
 8006678:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 800667c:	f000 fb82 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 8006680:	2103      	movs	r1, #3
 8006682:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8006686:	f000 fb7d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 800668a:	2133      	movs	r1, #51	@ 0x33
 800668c:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8006690:	f000 fb78 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 8006694:	2103      	movs	r1, #3
 8006696:	f24d 4032 	movw	r0, #54322	@ 0xd432
 800669a:	f000 fb73 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 800669e:	216d      	movs	r1, #109	@ 0x6d
 80066a0:	f24d 4033 	movw	r0, #54323	@ 0xd433
 80066a4:	f000 fb6e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 80066a8:	2100      	movs	r1, #0
 80066aa:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 80066ae:	f000 fb69 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 80066b2:	2133      	movs	r1, #51	@ 0x33
 80066b4:	f24d 5001 	movw	r0, #54529	@ 0xd501
 80066b8:	f000 fb64 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 80066bc:	2100      	movs	r1, #0
 80066be:	f24d 5002 	movw	r0, #54530	@ 0xd502
 80066c2:	f000 fb5f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 80066c6:	2134      	movs	r1, #52	@ 0x34
 80066c8:	f24d 5003 	movw	r0, #54531	@ 0xd503
 80066cc:	f000 fb5a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 80066d0:	2100      	movs	r1, #0
 80066d2:	f24d 5004 	movw	r0, #54532	@ 0xd504
 80066d6:	f000 fb55 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 80066da:	213a      	movs	r1, #58	@ 0x3a
 80066dc:	f24d 5005 	movw	r0, #54533	@ 0xd505
 80066e0:	f000 fb50 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 80066e4:	2100      	movs	r1, #0
 80066e6:	f24d 5006 	movw	r0, #54534	@ 0xd506
 80066ea:	f000 fb4b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 80066ee:	214a      	movs	r1, #74	@ 0x4a
 80066f0:	f24d 5007 	movw	r0, #54535	@ 0xd507
 80066f4:	f000 fb46 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 80066f8:	2100      	movs	r1, #0
 80066fa:	f24d 5008 	movw	r0, #54536	@ 0xd508
 80066fe:	f000 fb41 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 8006702:	215c      	movs	r1, #92	@ 0x5c
 8006704:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8006708:	f000 fb3c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 800670c:	2100      	movs	r1, #0
 800670e:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8006712:	f000 fb37 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 8006716:	2181      	movs	r1, #129	@ 0x81
 8006718:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 800671c:	f000 fb32 	bl	8006d84 <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 8006720:	2100      	movs	r1, #0
 8006722:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8006726:	f000 fb2d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 800672a:	21a6      	movs	r1, #166	@ 0xa6
 800672c:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8006730:	f000 fb28 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 8006734:	2100      	movs	r1, #0
 8006736:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 800673a:	f000 fb23 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 800673e:	21e5      	movs	r1, #229	@ 0xe5
 8006740:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 8006744:	f000 fb1e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 8006748:	2101      	movs	r1, #1
 800674a:	f24d 5010 	movw	r0, #54544	@ 0xd510
 800674e:	f000 fb19 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 8006752:	2113      	movs	r1, #19
 8006754:	f24d 5011 	movw	r0, #54545	@ 0xd511
 8006758:	f000 fb14 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 800675c:	2101      	movs	r1, #1
 800675e:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8006762:	f000 fb0f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 8006766:	2154      	movs	r1, #84	@ 0x54
 8006768:	f24d 5013 	movw	r0, #54547	@ 0xd513
 800676c:	f000 fb0a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 8006770:	2101      	movs	r1, #1
 8006772:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8006776:	f000 fb05 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 800677a:	2182      	movs	r1, #130	@ 0x82
 800677c:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8006780:	f000 fb00 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 8006784:	2101      	movs	r1, #1
 8006786:	f24d 5016 	movw	r0, #54550	@ 0xd516
 800678a:	f000 fafb 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 800678e:	21ca      	movs	r1, #202	@ 0xca
 8006790:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8006794:	f000 faf6 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 8006798:	2102      	movs	r1, #2
 800679a:	f24d 5018 	movw	r0, #54552	@ 0xd518
 800679e:	f000 faf1 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 80067a2:	2100      	movs	r1, #0
 80067a4:	f24d 5019 	movw	r0, #54553	@ 0xd519
 80067a8:	f000 faec 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 80067ac:	2102      	movs	r1, #2
 80067ae:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 80067b2:	f000 fae7 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 80067b6:	2101      	movs	r1, #1
 80067b8:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 80067bc:	f000 fae2 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 80067c0:	2102      	movs	r1, #2
 80067c2:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 80067c6:	f000 fadd 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 80067ca:	2134      	movs	r1, #52	@ 0x34
 80067cc:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 80067d0:	f000 fad8 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 80067d4:	2102      	movs	r1, #2
 80067d6:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 80067da:	f000 fad3 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 80067de:	2167      	movs	r1, #103	@ 0x67
 80067e0:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 80067e4:	f000 face 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 80067e8:	2102      	movs	r1, #2
 80067ea:	f24d 5020 	movw	r0, #54560	@ 0xd520
 80067ee:	f000 fac9 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 80067f2:	2184      	movs	r1, #132	@ 0x84
 80067f4:	f24d 5021 	movw	r0, #54561	@ 0xd521
 80067f8:	f000 fac4 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 80067fc:	2102      	movs	r1, #2
 80067fe:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8006802:	f000 fabf 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 8006806:	21a4      	movs	r1, #164	@ 0xa4
 8006808:	f24d 5023 	movw	r0, #54563	@ 0xd523
 800680c:	f000 faba 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 8006810:	2102      	movs	r1, #2
 8006812:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8006816:	f000 fab5 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 800681a:	21b7      	movs	r1, #183	@ 0xb7
 800681c:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8006820:	f000 fab0 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8006824:	2102      	movs	r1, #2
 8006826:	f24d 5026 	movw	r0, #54566	@ 0xd526
 800682a:	f000 faab 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 800682e:	21cf      	movs	r1, #207	@ 0xcf
 8006830:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8006834:	f000 faa6 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 8006838:	2102      	movs	r1, #2
 800683a:	f24d 5028 	movw	r0, #54568	@ 0xd528
 800683e:	f000 faa1 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 8006842:	21de      	movs	r1, #222	@ 0xde
 8006844:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8006848:	f000 fa9c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 800684c:	2102      	movs	r1, #2
 800684e:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8006852:	f000 fa97 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 8006856:	21f2      	movs	r1, #242	@ 0xf2
 8006858:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 800685c:	f000 fa92 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 8006860:	2102      	movs	r1, #2
 8006862:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8006866:	f000 fa8d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 800686a:	21fe      	movs	r1, #254	@ 0xfe
 800686c:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8006870:	f000 fa88 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 8006874:	2103      	movs	r1, #3
 8006876:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 800687a:	f000 fa83 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 800687e:	2110      	movs	r1, #16
 8006880:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8006884:	f000 fa7e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 8006888:	2103      	movs	r1, #3
 800688a:	f24d 5030 	movw	r0, #54576	@ 0xd530
 800688e:	f000 fa79 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 8006892:	2133      	movs	r1, #51	@ 0x33
 8006894:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8006898:	f000 fa74 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 800689c:	2103      	movs	r1, #3
 800689e:	f24d 5032 	movw	r0, #54578	@ 0xd532
 80068a2:	f000 fa6f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 80068a6:	216d      	movs	r1, #109	@ 0x6d
 80068a8:	f24d 5033 	movw	r0, #54579	@ 0xd533
 80068ac:	f000 fa6a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 80068b0:	2100      	movs	r1, #0
 80068b2:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 80068b6:	f000 fa65 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 80068ba:	2133      	movs	r1, #51	@ 0x33
 80068bc:	f24d 6001 	movw	r0, #54785	@ 0xd601
 80068c0:	f000 fa60 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 80068c4:	2100      	movs	r1, #0
 80068c6:	f24d 6002 	movw	r0, #54786	@ 0xd602
 80068ca:	f000 fa5b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 80068ce:	2134      	movs	r1, #52	@ 0x34
 80068d0:	f24d 6003 	movw	r0, #54787	@ 0xd603
 80068d4:	f000 fa56 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 80068d8:	2100      	movs	r1, #0
 80068da:	f24d 6004 	movw	r0, #54788	@ 0xd604
 80068de:	f000 fa51 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 80068e2:	213a      	movs	r1, #58	@ 0x3a
 80068e4:	f24d 6005 	movw	r0, #54789	@ 0xd605
 80068e8:	f000 fa4c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 80068ec:	2100      	movs	r1, #0
 80068ee:	f24d 6006 	movw	r0, #54790	@ 0xd606
 80068f2:	f000 fa47 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 80068f6:	214a      	movs	r1, #74	@ 0x4a
 80068f8:	f24d 6007 	movw	r0, #54791	@ 0xd607
 80068fc:	f000 fa42 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 8006900:	2100      	movs	r1, #0
 8006902:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8006906:	f000 fa3d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 800690a:	215c      	movs	r1, #92	@ 0x5c
 800690c:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8006910:	f000 fa38 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8006914:	2100      	movs	r1, #0
 8006916:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 800691a:	f000 fa33 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 800691e:	2181      	movs	r1, #129	@ 0x81
 8006920:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8006924:	f000 fa2e 	bl	8006d84 <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 8006928:	2100      	movs	r1, #0
 800692a:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 800692e:	f000 fa29 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 8006932:	21a6      	movs	r1, #166	@ 0xa6
 8006934:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8006938:	f000 fa24 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 800693c:	2100      	movs	r1, #0
 800693e:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8006942:	f000 fa1f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 8006946:	21e5      	movs	r1, #229	@ 0xe5
 8006948:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 800694c:	f000 fa1a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 8006950:	2101      	movs	r1, #1
 8006952:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8006956:	f000 fa15 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 800695a:	2113      	movs	r1, #19
 800695c:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8006960:	f000 fa10 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8006964:	2101      	movs	r1, #1
 8006966:	f24d 6012 	movw	r0, #54802	@ 0xd612
 800696a:	f000 fa0b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 800696e:	2154      	movs	r1, #84	@ 0x54
 8006970:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8006974:	f000 fa06 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 8006978:	2101      	movs	r1, #1
 800697a:	f24d 6014 	movw	r0, #54804	@ 0xd614
 800697e:	f000 fa01 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 8006982:	2182      	movs	r1, #130	@ 0x82
 8006984:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8006988:	f000 f9fc 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 800698c:	2101      	movs	r1, #1
 800698e:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8006992:	f000 f9f7 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 8006996:	21ca      	movs	r1, #202	@ 0xca
 8006998:	f24d 6017 	movw	r0, #54807	@ 0xd617
 800699c:	f000 f9f2 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 80069a0:	2102      	movs	r1, #2
 80069a2:	f24d 6018 	movw	r0, #54808	@ 0xd618
 80069a6:	f000 f9ed 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 80069aa:	2100      	movs	r1, #0
 80069ac:	f24d 6019 	movw	r0, #54809	@ 0xd619
 80069b0:	f000 f9e8 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 80069b4:	2102      	movs	r1, #2
 80069b6:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 80069ba:	f000 f9e3 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 80069be:	2101      	movs	r1, #1
 80069c0:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 80069c4:	f000 f9de 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 80069c8:	2102      	movs	r1, #2
 80069ca:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 80069ce:	f000 f9d9 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 80069d2:	2134      	movs	r1, #52	@ 0x34
 80069d4:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 80069d8:	f000 f9d4 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 80069dc:	2102      	movs	r1, #2
 80069de:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 80069e2:	f000 f9cf 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 80069e6:	2167      	movs	r1, #103	@ 0x67
 80069e8:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 80069ec:	f000 f9ca 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 80069f0:	2102      	movs	r1, #2
 80069f2:	f24d 6020 	movw	r0, #54816	@ 0xd620
 80069f6:	f000 f9c5 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 80069fa:	2184      	movs	r1, #132	@ 0x84
 80069fc:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8006a00:	f000 f9c0 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 8006a04:	2102      	movs	r1, #2
 8006a06:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8006a0a:	f000 f9bb 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 8006a0e:	21a4      	movs	r1, #164	@ 0xa4
 8006a10:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8006a14:	f000 f9b6 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 8006a18:	2102      	movs	r1, #2
 8006a1a:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8006a1e:	f000 f9b1 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 8006a22:	21b7      	movs	r1, #183	@ 0xb7
 8006a24:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8006a28:	f000 f9ac 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 8006a2c:	2102      	movs	r1, #2
 8006a2e:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8006a32:	f000 f9a7 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 8006a36:	21cf      	movs	r1, #207	@ 0xcf
 8006a38:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8006a3c:	f000 f9a2 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 8006a40:	2102      	movs	r1, #2
 8006a42:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8006a46:	f000 f99d 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 8006a4a:	21de      	movs	r1, #222	@ 0xde
 8006a4c:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8006a50:	f000 f998 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8006a54:	2102      	movs	r1, #2
 8006a56:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8006a5a:	f000 f993 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 8006a5e:	21f2      	movs	r1, #242	@ 0xf2
 8006a60:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8006a64:	f000 f98e 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 8006a68:	2102      	movs	r1, #2
 8006a6a:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8006a6e:	f000 f989 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 8006a72:	21fe      	movs	r1, #254	@ 0xfe
 8006a74:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8006a78:	f000 f984 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 8006a7c:	2103      	movs	r1, #3
 8006a7e:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8006a82:	f000 f97f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 8006a86:	2110      	movs	r1, #16
 8006a88:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8006a8c:	f000 f97a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 8006a90:	2103      	movs	r1, #3
 8006a92:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8006a96:	f000 f975 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 8006a9a:	2133      	movs	r1, #51	@ 0x33
 8006a9c:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8006aa0:	f000 f970 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 8006aa4:	2103      	movs	r1, #3
 8006aa6:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8006aaa:	f000 f96b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 8006aae:	216d      	movs	r1, #109	@ 0x6d
 8006ab0:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8006ab4:	f000 f966 	bl	8006d84 <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 8006ab8:	2155      	movs	r1, #85	@ 0x55
 8006aba:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8006abe:	f000 f961 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8006ac2:	21aa      	movs	r1, #170	@ 0xaa
 8006ac4:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8006ac8:	f000 f95c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8006acc:	2152      	movs	r1, #82	@ 0x52
 8006ace:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8006ad2:	f000 f957 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8006ad6:	2108      	movs	r1, #8
 8006ad8:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8006adc:	f000 f952 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8006ae6:	f000 f94d 	bl	8006d84 <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 8006aea:	21cc      	movs	r1, #204	@ 0xcc
 8006aec:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8006af0:	f000 f948 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 8006af4:	2100      	movs	r1, #0
 8006af6:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8006afa:	f000 f943 	bl	8006d84 <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 8006afe:	2105      	movs	r1, #5
 8006b00:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8006b04:	f000 f93e 	bl	8006d84 <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 8006b08:	2170      	movs	r1, #112	@ 0x70
 8006b0a:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8006b0e:	f000 f939 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 8006b12:	2170      	movs	r1, #112	@ 0x70
 8006b14:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8006b18:	f000 f934 	bl	8006d84 <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8006b22:	f000 f92f 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 8006b26:	2103      	movs	r1, #3
 8006b28:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8006b2c:	f000 f92a 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 8006b30:	2103      	movs	r1, #3
 8006b32:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8006b36:	f000 f925 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 8006b3a:	2103      	movs	r1, #3
 8006b3c:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8006b40:	f000 f920 	bl	8006d84 <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8006b44:	2102      	movs	r1, #2
 8006b46:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8006b4a:	f000 f91b 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 8006b4e:	2100      	movs	r1, #0
 8006b50:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8006b54:	f000 f916 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8006b58:	2100      	movs	r1, #0
 8006b5a:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8006b5e:	f000 f911 	bl	8006d84 <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 8006b62:	21d0      	movs	r1, #208	@ 0xd0
 8006b64:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8006b68:	f000 f90c 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 8006b6c:	2102      	movs	r1, #2
 8006b6e:	f64c 1001 	movw	r0, #51457	@ 0xc901
 8006b72:	f000 f907 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 8006b76:	2150      	movs	r1, #80	@ 0x50
 8006b78:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8006b7c:	f000 f902 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 8006b80:	2150      	movs	r1, #80	@ 0x50
 8006b82:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8006b86:	f000 f8fd 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 8006b8a:	2150      	movs	r1, #80	@ 0x50
 8006b8c:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8006b90:	f000 f8f8 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 8006b94:	2100      	movs	r1, #0
 8006b96:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8006b9a:	f000 f8f3 	bl	8006d84 <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8006b9e:	2155      	movs	r1, #85	@ 0x55
 8006ba0:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8006ba4:	f000 f8ee 	bl	8006d84 <lcd_write_reg>
    lcd_wr_regno(0x1100);
 8006ba8:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 8006bac:	f000 f8d6 	bl	8006d5c <lcd_wr_regno>
    HAL_Delay(1);
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	f7fb f973 	bl	8001e9c <HAL_Delay>
    lcd_wr_regno(0x2900);
 8006bb6:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 8006bba:	f000 f8cf 	bl	8006d5c <lcd_wr_regno>
}
 8006bbe:	bf00      	nop
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <lcd_ex_ssd1963_reginit>:
 * @brief       SSD1963寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ssd1963_reginit(void)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 8006bc6:	20e2      	movs	r0, #226	@ 0xe2
 8006bc8:	f000 f8c8 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* 参数1 */
 8006bcc:	201d      	movs	r0, #29
 8006bce:	f000 f8b1 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x02);  /* 参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 8006bd2:	2002      	movs	r0, #2
 8006bd4:	f000 f8ae 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x04);  /* 参数3 Validate M and N values */
 8006bd8:	2004      	movs	r0, #4
 8006bda:	f000 f8ab 	bl	8006d34 <lcd_wr_data>
    HAL_Delay(1);
 8006bde:	2001      	movs	r0, #1
 8006be0:	f7fb f95c 	bl	8001e9c <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 8006be4:	20e0      	movs	r0, #224	@ 0xe0
 8006be6:	f000 f8b9 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 8006bea:	2001      	movs	r0, #1
 8006bec:	f000 f8a2 	bl	8006d34 <lcd_wr_data>
    HAL_Delay(10);
 8006bf0:	200a      	movs	r0, #10
 8006bf2:	f7fb f953 	bl	8001e9c <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 8006bf6:	20e0      	movs	r0, #224	@ 0xe0
 8006bf8:	f000 f8b0 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 8006bfc:	2003      	movs	r0, #3
 8006bfe:	f000 f899 	bl	8006d34 <lcd_wr_data>
    HAL_Delay(12);
 8006c02:	200c      	movs	r0, #12
 8006c04:	f7fb f94a 	bl	8001e9c <HAL_Delay>
    lcd_wr_regno(0x01); /* 软复位 */
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f000 f8a7 	bl	8006d5c <lcd_wr_regno>
    HAL_Delay(10);
 8006c0e:	200a      	movs	r0, #10
 8006c10:	f7fb f944 	bl	8001e9c <HAL_Delay>

    lcd_wr_regno(0xE6); /* 设置像素频率,33Mhz */
 8006c14:	20e6      	movs	r0, #230	@ 0xe6
 8006c16:	f000 f8a1 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x2F);
 8006c1a:	202f      	movs	r0, #47	@ 0x2f
 8006c1c:	f000 f88a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8006c20:	20ff      	movs	r0, #255	@ 0xff
 8006c22:	f000 f887 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8006c26:	20ff      	movs	r0, #255	@ 0xff
 8006c28:	f000 f884 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB0); /* 设置LCD模式 */
 8006c2c:	20b0      	movs	r0, #176	@ 0xb0
 8006c2e:	f000 f895 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24位模式 */
 8006c32:	2020      	movs	r0, #32
 8006c34:	f000 f87e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT 模式 */
 8006c38:	2000      	movs	r0, #0
 8006c3a:	f000 f87b 	bl	8006d34 <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* 设置LCD水平像素 */
 8006c3e:	2003      	movs	r0, #3
 8006c40:	f000 f878 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 8006c44:	f240 301f 	movw	r0, #799	@ 0x31f
 8006c48:	f000 f874 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* 设置LCD垂直像素 */
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	f000 f871 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 8006c52:	f240 10df 	movw	r0, #479	@ 0x1df
 8006c56:	f000 f86d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB序列 */
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f000 f86a 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 8006c60:	20b4      	movs	r0, #180	@ 0xb4
 8006c62:	f000 f87b 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 8006c66:	2004      	movs	r0, #4
 8006c68:	f000 f864 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 8006c6c:	f240 401f 	movw	r0, #1055	@ 0x41f
 8006c70:	f000 f860 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 8006c74:	2000      	movs	r0, #0
 8006c76:	f000 f85d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 8006c7a:	202e      	movs	r0, #46	@ 0x2e
 8006c7c:	f000 f85a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 8006c80:	2000      	movs	r0, #0
 8006c82:	f000 f857 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8006c86:	2000      	movs	r0, #0
 8006c88:	f000 f854 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f000 f851 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8006c92:	2000      	movs	r0, #0
 8006c94:	f000 f84e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 8006c98:	20b6      	movs	r0, #182	@ 0xb6
 8006c9a:	f000 f85f 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 8006c9e:	2002      	movs	r0, #2
 8006ca0:	f000 f848 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 8006ca4:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 8006ca8:	f000 f844 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 8006cac:	2000      	movs	r0, #0
 8006cae:	f000 f841 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 8006cb2:	2017      	movs	r0, #23
 8006cb4:	f000 f83e 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 8006cb8:	2015      	movs	r0, #21
 8006cba:	f000 f83b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f000 f838 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	f000 f835 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xF0); /* 设置SSD1963与CPU接口为16bit */
 8006cca:	20f0      	movs	r0, #240	@ 0xf0
 8006ccc:	f000 f846 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 8006cd0:	2003      	movs	r0, #3
 8006cd2:	f000 f82f 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0x29); /* 开启显示 */
 8006cd6:	2029      	movs	r0, #41	@ 0x29
 8006cd8:	f000 f840 	bl	8006d5c <lcd_wr_regno>
    /* 设置PWM输出  背光通过占空比可调 */
    lcd_wr_regno(0xD0); /* 设置自动白平衡DBC */
 8006cdc:	20d0      	movs	r0, #208	@ 0xd0
 8006cde:	f000 f83d 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	f000 f826 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* 配置PWM输出 */
 8006ce8:	20be      	movs	r0, #190	@ 0xbe
 8006cea:	f000 f837 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1设置PWM频率 */
 8006cee:	2005      	movs	r0, #5
 8006cf0:	f000 f820 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2设置PWM占空比 */
 8006cf4:	20fe      	movs	r0, #254	@ 0xfe
 8006cf6:	f000 f81d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3设置C */
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	f000 f81a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4设置D */
 8006d00:	2000      	movs	r0, #0
 8006d02:	f000 f817 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5设置E */
 8006d06:	2000      	movs	r0, #0
 8006d08:	f000 f814 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6设置F */
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	f000 f811 	bl	8006d34 <lcd_wr_data>

    lcd_wr_regno(0xB8); /* 设置GPIO配置 */
 8006d12:	20b8      	movs	r0, #184	@ 0xb8
 8006d14:	f000 f822 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 2个IO口设置成输出 */
 8006d18:	2003      	movs	r0, #3
 8006d1a:	f000 f80b 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO使用正常的IO功能 */
 8006d1e:	2001      	movs	r0, #1
 8006d20:	f000 f808 	bl	8006d34 <lcd_wr_data>
    lcd_wr_regno(0xBA);
 8006d24:	20ba      	movs	r0, #186	@ 0xba
 8006d26:	f000 f819 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x01);  /* GPIO[1:0]=01,控制LCD方向 */
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	f000 f802 	bl	8006d34 <lcd_wr_data>
}
 8006d30:	bf00      	nop
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <lcd_wr_data>:
 * @brief       LCD写数据
 * @param       data: 要写入的数据
 * @retval      无
 */
void lcd_wr_data(volatile uint16_t data)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	80fb      	strh	r3, [r7, #6]
    data = data;            /* 使用-O2优化的时候,必须插入的延时 */
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 8006d44:	4b04      	ldr	r3, [pc, #16]	@ (8006d58 <lcd_wr_data+0x24>)
 8006d46:	88fa      	ldrh	r2, [r7, #6]
 8006d48:	b292      	uxth	r2, r2
 8006d4a:	805a      	strh	r2, [r3, #2]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	6c00007e 	.word	0x6c00007e

08006d5c <lcd_wr_regno>:
 * @brief       LCD写寄存器编号/地址函数
 * @param       regno: 寄存器编号/地址
 * @retval      无
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	80fb      	strh	r3, [r7, #6]
    regno = regno;          /* 使用-O2优化的时候,必须插入的延时 */
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* 写入要写的寄存器序号 */
 8006d6c:	4b04      	ldr	r3, [pc, #16]	@ (8006d80 <lcd_wr_regno+0x24>)
 8006d6e:	88fa      	ldrh	r2, [r7, #6]
 8006d70:	b292      	uxth	r2, r2
 8006d72:	801a      	strh	r2, [r3, #0]
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	6c00007e 	.word	0x6c00007e

08006d84 <lcd_write_reg>:
 * @param       regno:寄存器编号/地址
 * @param       data:要写入的数据
 * @retval      无
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	80fb      	strh	r3, [r7, #6]
 8006d90:	4613      	mov	r3, r2
 8006d92:	80bb      	strh	r3, [r7, #4]
    LCD->LCD_REG = regno;   /* 写入要写的寄存器序号 */
 8006d94:	4a05      	ldr	r2, [pc, #20]	@ (8006dac <lcd_write_reg+0x28>)
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	8013      	strh	r3, [r2, #0]
    LCD->LCD_RAM = data;    /* 写入数据 */
 8006d9a:	4a04      	ldr	r2, [pc, #16]	@ (8006dac <lcd_write_reg+0x28>)
 8006d9c:	88bb      	ldrh	r3, [r7, #4]
 8006d9e:	8053      	strh	r3, [r2, #2]
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	6c00007e 	.word	0x6c00007e

08006db0 <lcd_rd_data>:
 * @brief       LCD读数据
 * @param       无
 * @retval      读取到的数据
 */
static uint16_t lcd_rd_data(void)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* 防止被优化 */
    ram = LCD->LCD_RAM;
 8006db6:	4b06      	ldr	r3, [pc, #24]	@ (8006dd0 <lcd_rd_data+0x20>)
 8006db8:	885b      	ldrh	r3, [r3, #2]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	80fb      	strh	r3, [r7, #6]
    return ram;
 8006dbe:	88fb      	ldrh	r3, [r7, #6]
 8006dc0:	b29b      	uxth	r3, r3
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	6c00007e 	.word	0x6c00007e

08006dd4 <lcd_write_ram_prepare>:
 * @brief       准备写GRAM
 * @param       无
 * @retval      无
 */
void lcd_write_ram_prepare(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <lcd_write_ram_prepare+0x18>)
 8006dda:	4a05      	ldr	r2, [pc, #20]	@ (8006df0 <lcd_write_ram_prepare+0x1c>)
 8006ddc:	8912      	ldrh	r2, [r2, #8]
 8006dde:	801a      	strh	r2, [r3, #0]
}
 8006de0:	bf00      	nop
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	6c00007e 	.word	0x6c00007e
 8006df0:	20000404 	.word	0x20000404

08006df4 <lcd_set_cursor>:
 * @brief       设置光标位置(对RGB屏无效)
 * @param       x,y: 坐标
 * @retval      无
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	460a      	mov	r2, r1
 8006dfe:	80fb      	strh	r3, [r7, #6]
 8006e00:	4613      	mov	r3, r2
 8006e02:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0x1963)
 8006e04:	4b65      	ldr	r3, [pc, #404]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006e06:	889b      	ldrh	r3, [r3, #4]
 8006e08:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d167      	bne.n	8006ee0 <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* 竖屏模式, x坐标需要变换 */
 8006e10:	4b62      	ldr	r3, [pc, #392]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006e12:	799b      	ldrb	r3, [r3, #6]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11e      	bne.n	8006e56 <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 8006e18:	4b60      	ldr	r3, [pc, #384]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006e1a:	881a      	ldrh	r2, [r3, #0]
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8006e26:	4b5d      	ldr	r3, [pc, #372]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006e28:	895b      	ldrh	r3, [r3, #10]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff ff96 	bl	8006d5c <lcd_wr_regno>
            lcd_wr_data(0);
 8006e30:	2000      	movs	r0, #0
 8006e32:	f7ff ff7f 	bl	8006d34 <lcd_wr_data>
            lcd_wr_data(0);
 8006e36:	2000      	movs	r0, #0
 8006e38:	f7ff ff7c 	bl	8006d34 <lcd_wr_data>
            lcd_wr_data(x >> 8);
 8006e3c:	88fb      	ldrh	r3, [r7, #6]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff ff76 	bl	8006d34 <lcd_wr_data>
            lcd_wr_data(x & 0xFF);
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff ff70 	bl	8006d34 <lcd_wr_data>
 8006e54:	e021      	b.n	8006e9a <lcd_set_cursor+0xa6>
        }
        else                    /* 横屏模式 */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8006e56:	4b51      	ldr	r3, [pc, #324]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006e58:	895b      	ldrh	r3, [r3, #10]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff ff7e 	bl	8006d5c <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	0a1b      	lsrs	r3, r3, #8
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff ff64 	bl	8006d34 <lcd_wr_data>
            lcd_wr_data(x & 0xFF);
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff ff5e 	bl	8006d34 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 8006e78:	4b48      	ldr	r3, [pc, #288]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	121b      	asrs	r3, r3, #8
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff ff56 	bl	8006d34 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0xFF);
 8006e88:	4b44      	ldr	r3, [pc, #272]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ff4d 	bl	8006d34 <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 8006e9a:	4b40      	ldr	r3, [pc, #256]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006e9c:	899b      	ldrh	r3, [r3, #12]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff ff5c 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8006ea4:	88bb      	ldrh	r3, [r7, #4]
 8006ea6:	0a1b      	lsrs	r3, r3, #8
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ff42 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data(y & 0xFF);
 8006eb0:	88bb      	ldrh	r3, [r7, #4]
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff ff3c 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8006ebc:	4b37      	ldr	r3, [pc, #220]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006ebe:	885b      	ldrh	r3, [r3, #2]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	121b      	asrs	r3, r3, #8
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7ff ff34 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0xFF);
 8006ecc:	4b33      	ldr	r3, [pc, #204]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006ece:	885b      	ldrh	r3, [r3, #2]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff ff2b 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data(x & 0xFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0xFF);
    }
}
 8006ede:	e058      	b.n	8006f92 <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0x5510)
 8006ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006ee2:	889b      	ldrh	r3, [r3, #4]
 8006ee4:	f245 5210 	movw	r2, #21776	@ 0x5510
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d130      	bne.n	8006f4e <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 8006eec:	4b2b      	ldr	r3, [pc, #172]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006eee:	895b      	ldrh	r3, [r3, #10]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff ff33 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff ff19 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 8006f02:	4b26      	ldr	r3, [pc, #152]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006f04:	895b      	ldrh	r3, [r3, #10]
 8006f06:	3301      	adds	r3, #1
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff ff26 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(x & 0xFF);
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff ff0c 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8006f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006f1e:	899b      	ldrh	r3, [r3, #12]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff ff1b 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8006f26:	88bb      	ldrh	r3, [r7, #4]
 8006f28:	0a1b      	lsrs	r3, r3, #8
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff ff01 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 8006f32:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006f34:	899b      	ldrh	r3, [r3, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff ff0e 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(y & 0xFF);
 8006f40:	88bb      	ldrh	r3, [r7, #4]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff fef4 	bl	8006d34 <lcd_wr_data>
}
 8006f4c:	e021      	b.n	8006f92 <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 8006f4e:	4b13      	ldr	r3, [pc, #76]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006f50:	895b      	ldrh	r3, [r3, #10]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff ff02 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff fee8 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data(x & 0xFF);
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff fee2 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8006f70:	4b0a      	ldr	r3, [pc, #40]	@ (8006f9c <lcd_set_cursor+0x1a8>)
 8006f72:	899b      	ldrh	r3, [r3, #12]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff fef1 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8006f7a:	88bb      	ldrh	r3, [r7, #4]
 8006f7c:	0a1b      	lsrs	r3, r3, #8
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fed7 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data(y & 0xFF);
 8006f86:	88bb      	ldrh	r3, [r7, #4]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff fed1 	bl	8006d34 <lcd_wr_data>
}
 8006f92:	bf00      	nop
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000404 	.word	0x20000404

08006fa0 <lcd_scan_dir>:
 *
 * @param       dir:0~7,代表8个方向(具体定义见lcd.h)
 * @retval      无
 */
void lcd_scan_dir(uint8_t dir)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;

    /* 横屏时，对1963不改变扫描方向！竖屏时1963改变方向(这里仅用于1963的特殊处理,对其他驱动IC无效) */
    if ((lcddev.dir == 1 && lcddev.id != 0x1963) || (lcddev.dir == 0 && lcddev.id == 0x1963))
 8006fb2:	4b99      	ldr	r3, [pc, #612]	@ (8007218 <lcd_scan_dir+0x278>)
 8006fb4:	799b      	ldrb	r3, [r3, #6]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d105      	bne.n	8006fc6 <lcd_scan_dir+0x26>
 8006fba:	4b97      	ldr	r3, [pc, #604]	@ (8007218 <lcd_scan_dir+0x278>)
 8006fbc:	889b      	ldrh	r3, [r3, #4]
 8006fbe:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d109      	bne.n	8006fda <lcd_scan_dir+0x3a>
 8006fc6:	4b94      	ldr	r3, [pc, #592]	@ (8007218 <lcd_scan_dir+0x278>)
 8006fc8:	799b      	ldrb	r3, [r3, #6]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d134      	bne.n	8007038 <lcd_scan_dir+0x98>
 8006fce:	4b92      	ldr	r3, [pc, #584]	@ (8007218 <lcd_scan_dir+0x278>)
 8006fd0:	889b      	ldrh	r3, [r3, #4]
 8006fd2:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d12e      	bne.n	8007038 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* 方向转换 */
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	2b07      	cmp	r3, #7
 8006fde:	d82b      	bhi.n	8007038 <lcd_scan_dir+0x98>
 8006fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe8 <lcd_scan_dir+0x48>)
 8006fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	08007009 	.word	0x08007009
 8006fec:	0800700f 	.word	0x0800700f
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	0800701b 	.word	0x0800701b
 8006ff8:	08007021 	.word	0x08007021
 8006ffc:	08007027 	.word	0x08007027
 8007000:	0800702d 	.word	0x0800702d
 8007004:	08007033 	.word	0x08007033
        {
            case 0:
                dir = 6;
 8007008:	2306      	movs	r3, #6
 800700a:	71fb      	strb	r3, [r7, #7]
                break;
 800700c:	e014      	b.n	8007038 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 800700e:	2307      	movs	r3, #7
 8007010:	71fb      	strb	r3, [r7, #7]
                break;
 8007012:	e011      	b.n	8007038 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 8007014:	2304      	movs	r3, #4
 8007016:	71fb      	strb	r3, [r7, #7]
                break;
 8007018:	e00e      	b.n	8007038 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 800701a:	2305      	movs	r3, #5
 800701c:	71fb      	strb	r3, [r7, #7]
                break;
 800701e:	e00b      	b.n	8007038 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 8007020:	2301      	movs	r3, #1
 8007022:	71fb      	strb	r3, [r7, #7]
                break;
 8007024:	e008      	b.n	8007038 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	71fb      	strb	r3, [r7, #7]
                break;
 800702a:	e005      	b.n	8007038 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 800702c:	2303      	movs	r3, #3
 800702e:	71fb      	strb	r3, [r7, #7]
                break;
 8007030:	e002      	b.n	8007038 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 8007032:	2302      	movs	r3, #2
 8007034:	71fb      	strb	r3, [r7, #7]
                break;
 8007036:	bf00      	nop
        }
    }


    /* 根据扫描方式 设置 0x36/0x3600 寄存器 bit 5,6,7 位的值 */
    switch (dir)
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	2b07      	cmp	r3, #7
 800703c:	d835      	bhi.n	80070aa <lcd_scan_dir+0x10a>
 800703e:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <lcd_scan_dir+0xa4>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	080070ab 	.word	0x080070ab
 8007048:	08007065 	.word	0x08007065
 800704c:	0800706f 	.word	0x0800706f
 8007050:	08007079 	.word	0x08007079
 8007054:	08007083 	.word	0x08007083
 8007058:	0800708d 	.word	0x0800708d
 800705c:	08007097 	.word	0x08007097
 8007060:	080070a1 	.word	0x080070a1
        case L2R_U2D:/* 从左到右,从上到下 */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* 从左到右,从下到上 */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8007064:	89fb      	ldrh	r3, [r7, #14]
 8007066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706a:	81fb      	strh	r3, [r7, #14]
            break;
 800706c:	e01d      	b.n	80070aa <lcd_scan_dir+0x10a>

        case R2L_U2D:/* 从右到左,从上到下 */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800706e:	89fb      	ldrh	r3, [r7, #14]
 8007070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007074:	81fb      	strh	r3, [r7, #14]
            break;
 8007076:	e018      	b.n	80070aa <lcd_scan_dir+0x10a>

        case R2L_D2U:/* 从右到左,从下到上 */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8007078:	89fb      	ldrh	r3, [r7, #14]
 800707a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800707e:	81fb      	strh	r3, [r7, #14]
            break;
 8007080:	e013      	b.n	80070aa <lcd_scan_dir+0x10a>

        case U2D_L2R:/* 从上到下,从左到右 */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8007082:	89fb      	ldrh	r3, [r7, #14]
 8007084:	f043 0320 	orr.w	r3, r3, #32
 8007088:	81fb      	strh	r3, [r7, #14]
            break;
 800708a:	e00e      	b.n	80070aa <lcd_scan_dir+0x10a>

        case U2D_R2L:/* 从上到下,从右到左 */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007092:	81fb      	strh	r3, [r7, #14]
            break;
 8007094:	e009      	b.n	80070aa <lcd_scan_dir+0x10a>

        case D2U_L2R:/* 从下到上,从左到右 */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8007096:	89fb      	ldrh	r3, [r7, #14]
 8007098:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800709c:	81fb      	strh	r3, [r7, #14]
            break;
 800709e:	e004      	b.n	80070aa <lcd_scan_dir+0x10a>

        case D2U_R2L:/* 从下到上,从右到左 */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80070a6:	81fb      	strh	r3, [r7, #14]
            break;
 80070a8:	bf00      	nop
    }

    dirreg = 0x36;  /* 对绝大部分驱动IC, 由0x36寄存器控制 */
 80070aa:	2336      	movs	r3, #54	@ 0x36
 80070ac:	81bb      	strh	r3, [r7, #12]

    if (lcddev.id == 0x5510)
 80070ae:	4b5a      	ldr	r3, [pc, #360]	@ (8007218 <lcd_scan_dir+0x278>)
 80070b0:	889b      	ldrh	r3, [r3, #4]
 80070b2:	f245 5210 	movw	r2, #21776	@ 0x5510
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d102      	bne.n	80070c0 <lcd_scan_dir+0x120>
    {
        dirreg = 0x3600;    /* 对于5510, 和其他驱动ic的寄存器有差异 */
 80070ba:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 80070be:	81bb      	strh	r3, [r7, #12]
    }

     /* 9341 & 7789 要设置BGR位 */
    if (lcddev.id == 0x9341 || lcddev.id == 0x7789)
 80070c0:	4b55      	ldr	r3, [pc, #340]	@ (8007218 <lcd_scan_dir+0x278>)
 80070c2:	889b      	ldrh	r3, [r3, #4]
 80070c4:	f249 3241 	movw	r2, #37697	@ 0x9341
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d005      	beq.n	80070d8 <lcd_scan_dir+0x138>
 80070cc:	4b52      	ldr	r3, [pc, #328]	@ (8007218 <lcd_scan_dir+0x278>)
 80070ce:	889b      	ldrh	r3, [r3, #4]
 80070d0:	f247 7289 	movw	r2, #30601	@ 0x7789
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d103      	bne.n	80070e0 <lcd_scan_dir+0x140>
    {
        regval |= 0x08;
 80070d8:	89fb      	ldrh	r3, [r7, #14]
 80070da:	f043 0308 	orr.w	r3, r3, #8
 80070de:	81fb      	strh	r3, [r7, #14]
    }

    lcd_write_reg(dirreg, regval);
 80070e0:	89fa      	ldrh	r2, [r7, #14]
 80070e2:	89bb      	ldrh	r3, [r7, #12]
 80070e4:	4611      	mov	r1, r2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff fe4c 	bl	8006d84 <lcd_write_reg>

    if (lcddev.id != 0x1963)                    /* 1963不做坐标处理 */
 80070ec:	4b4a      	ldr	r3, [pc, #296]	@ (8007218 <lcd_scan_dir+0x278>)
 80070ee:	889b      	ldrh	r3, [r3, #4]
 80070f0:	f641 1263 	movw	r2, #6499	@ 0x1963
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d025      	beq.n	8007144 <lcd_scan_dir+0x1a4>
    {
        if (regval & 0x20)
 80070f8:	89fb      	ldrh	r3, [r7, #14]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d010      	beq.n	8007124 <lcd_scan_dir+0x184>
        {
            if (lcddev.width < lcddev.height)   /* 交换X,Y */
 8007102:	4b45      	ldr	r3, [pc, #276]	@ (8007218 <lcd_scan_dir+0x278>)
 8007104:	881a      	ldrh	r2, [r3, #0]
 8007106:	4b44      	ldr	r3, [pc, #272]	@ (8007218 <lcd_scan_dir+0x278>)
 8007108:	885b      	ldrh	r3, [r3, #2]
 800710a:	429a      	cmp	r2, r3
 800710c:	d21a      	bcs.n	8007144 <lcd_scan_dir+0x1a4>
            {
                temp = lcddev.width;
 800710e:	4b42      	ldr	r3, [pc, #264]	@ (8007218 <lcd_scan_dir+0x278>)
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8007114:	4b40      	ldr	r3, [pc, #256]	@ (8007218 <lcd_scan_dir+0x278>)
 8007116:	885a      	ldrh	r2, [r3, #2]
 8007118:	4b3f      	ldr	r3, [pc, #252]	@ (8007218 <lcd_scan_dir+0x278>)
 800711a:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 800711c:	4a3e      	ldr	r2, [pc, #248]	@ (8007218 <lcd_scan_dir+0x278>)
 800711e:	897b      	ldrh	r3, [r7, #10]
 8007120:	8053      	strh	r3, [r2, #2]
 8007122:	e00f      	b.n	8007144 <lcd_scan_dir+0x1a4>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* 交换X,Y */
 8007124:	4b3c      	ldr	r3, [pc, #240]	@ (8007218 <lcd_scan_dir+0x278>)
 8007126:	881a      	ldrh	r2, [r3, #0]
 8007128:	4b3b      	ldr	r3, [pc, #236]	@ (8007218 <lcd_scan_dir+0x278>)
 800712a:	885b      	ldrh	r3, [r3, #2]
 800712c:	429a      	cmp	r2, r3
 800712e:	d909      	bls.n	8007144 <lcd_scan_dir+0x1a4>
            {
                temp = lcddev.width;
 8007130:	4b39      	ldr	r3, [pc, #228]	@ (8007218 <lcd_scan_dir+0x278>)
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8007136:	4b38      	ldr	r3, [pc, #224]	@ (8007218 <lcd_scan_dir+0x278>)
 8007138:	885a      	ldrh	r2, [r3, #2]
 800713a:	4b37      	ldr	r3, [pc, #220]	@ (8007218 <lcd_scan_dir+0x278>)
 800713c:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 800713e:	4a36      	ldr	r2, [pc, #216]	@ (8007218 <lcd_scan_dir+0x278>)
 8007140:	897b      	ldrh	r3, [r7, #10]
 8007142:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* 设置显示区域(开窗)大小 */
    if (lcddev.id == 0x5510)
 8007144:	4b34      	ldr	r3, [pc, #208]	@ (8007218 <lcd_scan_dir+0x278>)
 8007146:	889b      	ldrh	r3, [r3, #4]
 8007148:	f245 5210 	movw	r2, #21776	@ 0x5510
 800714c:	4293      	cmp	r3, r2
 800714e:	d165      	bne.n	800721c <lcd_scan_dir+0x27c>
    {
        lcd_wr_regno(lcddev.setxcmd);
 8007150:	4b31      	ldr	r3, [pc, #196]	@ (8007218 <lcd_scan_dir+0x278>)
 8007152:	895b      	ldrh	r3, [r3, #10]
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff fe01 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(0);
 800715a:	2000      	movs	r0, #0
 800715c:	f7ff fdea 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 8007160:	4b2d      	ldr	r3, [pc, #180]	@ (8007218 <lcd_scan_dir+0x278>)
 8007162:	895b      	ldrh	r3, [r3, #10]
 8007164:	3301      	adds	r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff fdf7 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(0);
 800716e:	2000      	movs	r0, #0
 8007170:	f7ff fde0 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 2);
 8007174:	4b28      	ldr	r3, [pc, #160]	@ (8007218 <lcd_scan_dir+0x278>)
 8007176:	895b      	ldrh	r3, [r3, #10]
 8007178:	3302      	adds	r3, #2
 800717a:	b29b      	uxth	r3, r3
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff fded 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8007182:	4b25      	ldr	r3, [pc, #148]	@ (8007218 <lcd_scan_dir+0x278>)
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	3b01      	subs	r3, #1
 8007188:	121b      	asrs	r3, r3, #8
 800718a:	b29b      	uxth	r3, r3
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fdd1 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 3);
 8007192:	4b21      	ldr	r3, [pc, #132]	@ (8007218 <lcd_scan_dir+0x278>)
 8007194:	895b      	ldrh	r3, [r3, #10]
 8007196:	3303      	adds	r3, #3
 8007198:	b29b      	uxth	r3, r3
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fdde 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) & 0xFF);
 80071a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007218 <lcd_scan_dir+0x278>)
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fdc1 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80071b2:	4b19      	ldr	r3, [pc, #100]	@ (8007218 <lcd_scan_dir+0x278>)
 80071b4:	899b      	ldrh	r3, [r3, #12]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff fdd0 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(0);
 80071bc:	2000      	movs	r0, #0
 80071be:	f7ff fdb9 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 80071c2:	4b15      	ldr	r3, [pc, #84]	@ (8007218 <lcd_scan_dir+0x278>)
 80071c4:	899b      	ldrh	r3, [r3, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff fdc6 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(0);
 80071d0:	2000      	movs	r0, #0
 80071d2:	f7ff fdaf 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 2);
 80071d6:	4b10      	ldr	r3, [pc, #64]	@ (8007218 <lcd_scan_dir+0x278>)
 80071d8:	899b      	ldrh	r3, [r3, #12]
 80071da:	3302      	adds	r3, #2
 80071dc:	b29b      	uxth	r3, r3
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fdbc 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) >> 8);
 80071e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007218 <lcd_scan_dir+0x278>)
 80071e6:	885b      	ldrh	r3, [r3, #2]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	121b      	asrs	r3, r3, #8
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fda0 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 3);
 80071f4:	4b08      	ldr	r3, [pc, #32]	@ (8007218 <lcd_scan_dir+0x278>)
 80071f6:	899b      	ldrh	r3, [r3, #12]
 80071f8:	3303      	adds	r3, #3
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fdad 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) & 0xFF);
 8007202:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <lcd_scan_dir+0x278>)
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	3b01      	subs	r3, #1
 8007208:	b29b      	uxth	r3, r3
 800720a:	b2db      	uxtb	r3, r3
 800720c:	b29b      	uxth	r3, r3
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff fd90 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0xFF);
    }
}
 8007214:	e03a      	b.n	800728c <lcd_scan_dir+0x2ec>
 8007216:	bf00      	nop
 8007218:	20000404 	.word	0x20000404
        lcd_wr_regno(lcddev.setxcmd);
 800721c:	4b1d      	ldr	r3, [pc, #116]	@ (8007294 <lcd_scan_dir+0x2f4>)
 800721e:	895b      	ldrh	r3, [r3, #10]
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff fd9b 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(0);
 8007226:	2000      	movs	r0, #0
 8007228:	f7ff fd84 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data(0);
 800722c:	2000      	movs	r0, #0
 800722e:	f7ff fd81 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8007232:	4b18      	ldr	r3, [pc, #96]	@ (8007294 <lcd_scan_dir+0x2f4>)
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	3b01      	subs	r3, #1
 8007238:	121b      	asrs	r3, r3, #8
 800723a:	b29b      	uxth	r3, r3
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fd79 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) & 0xFF);
 8007242:	4b14      	ldr	r3, [pc, #80]	@ (8007294 <lcd_scan_dir+0x2f4>)
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	3b01      	subs	r3, #1
 8007248:	b29b      	uxth	r3, r3
 800724a:	b2db      	uxtb	r3, r3
 800724c:	b29b      	uxth	r3, r3
 800724e:	4618      	mov	r0, r3
 8007250:	f7ff fd70 	bl	8006d34 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8007254:	4b0f      	ldr	r3, [pc, #60]	@ (8007294 <lcd_scan_dir+0x2f4>)
 8007256:	899b      	ldrh	r3, [r3, #12]
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff fd7f 	bl	8006d5c <lcd_wr_regno>
        lcd_wr_data(0);
 800725e:	2000      	movs	r0, #0
 8007260:	f7ff fd68 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data(0);
 8007264:	2000      	movs	r0, #0
 8007266:	f7ff fd65 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 800726a:	4b0a      	ldr	r3, [pc, #40]	@ (8007294 <lcd_scan_dir+0x2f4>)
 800726c:	885b      	ldrh	r3, [r3, #2]
 800726e:	3b01      	subs	r3, #1
 8007270:	121b      	asrs	r3, r3, #8
 8007272:	b29b      	uxth	r3, r3
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff fd5d 	bl	8006d34 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0xFF);
 800727a:	4b06      	ldr	r3, [pc, #24]	@ (8007294 <lcd_scan_dir+0x2f4>)
 800727c:	885b      	ldrh	r3, [r3, #2]
 800727e:	3b01      	subs	r3, #1
 8007280:	b29b      	uxth	r3, r3
 8007282:	b2db      	uxtb	r3, r3
 8007284:	b29b      	uxth	r3, r3
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff fd54 	bl	8006d34 <lcd_wr_data>
}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000404 	.word	0x20000404

08007298 <lcd_draw_point>:
 * @param       x,y: 坐标
 * @param       color: 点的颜色(32位颜色,方便兼容LTDC)
 * @retval      无
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	603a      	str	r2, [r7, #0]
 80072a2:	80fb      	strh	r3, [r7, #6]
 80072a4:	460b      	mov	r3, r1
 80072a6:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* 设置光标位置 */
 80072a8:	88ba      	ldrh	r2, [r7, #4]
 80072aa:	88fb      	ldrh	r3, [r7, #6]
 80072ac:	4611      	mov	r1, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7ff fda0 	bl	8006df4 <lcd_set_cursor>
    lcd_write_ram_prepare();    /* 开始写入GRAM */
 80072b4:	f7ff fd8e 	bl	8006dd4 <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 80072b8:	4b03      	ldr	r3, [pc, #12]	@ (80072c8 <lcd_draw_point+0x30>)
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	b292      	uxth	r2, r2
 80072be:	805a      	strh	r2, [r3, #2]
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	6c00007e 	.word	0x6c00007e
 80072cc:	00000000 	.word	0x00000000

080072d0 <lcd_ssd_backlight_set>:
 * @brief       SSD1963背光亮度设置函数
 * @param       pwm: 背光等级,0~100.越大越亮.
 * @retval      无
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	71fb      	strb	r3, [r7, #7]
    lcd_wr_regno(0xBE);         /* 配置PWM输出 */
 80072da:	20be      	movs	r0, #190	@ 0xbe
 80072dc:	f7ff fd3e 	bl	8006d5c <lcd_wr_regno>
    lcd_wr_data(0x05);          /* 1设置PWM频率 */
 80072e0:	2005      	movs	r0, #5
 80072e2:	f7ff fd27 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(pwm * 2.55);    /* 2设置PWM占空比 */
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7f9 f91b 	bl	8000524 <__aeabi_i2d>
 80072ee:	a310      	add	r3, pc, #64	@ (adr r3, 8007330 <lcd_ssd_backlight_set+0x60>)
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f7f9 f980 	bl	80005f8 <__aeabi_dmul>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4610      	mov	r0, r2
 80072fe:	4619      	mov	r1, r3
 8007300:	f7f9 fb8c 	bl	8000a1c <__aeabi_d2uiz>
 8007304:	4603      	mov	r3, r0
 8007306:	b29b      	uxth	r3, r3
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fd13 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x01);          /* 3设置C */
 800730e:	2001      	movs	r0, #1
 8007310:	f7ff fd10 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0xFF);          /* 4设置D */
 8007314:	20ff      	movs	r0, #255	@ 0xff
 8007316:	f7ff fd0d 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 5设置E */
 800731a:	2000      	movs	r0, #0
 800731c:	f7ff fd0a 	bl	8006d34 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 6设置F */
 8007320:	2000      	movs	r0, #0
 8007322:	f7ff fd07 	bl	8006d34 <lcd_wr_data>
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	66666666 	.word	0x66666666
 8007334:	40046666 	.word	0x40046666

08007338 <lcd_display_dir>:
 * @brief       设置LCD显示方向
 * @param       dir:0,竖屏; 1,横屏
 * @retval      无
 */
void lcd_display_dir(uint8_t dir)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* 竖屏/横屏 */
 8007342:	4a58      	ldr	r2, [pc, #352]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* 竖屏 */
 8007348:	79fb      	ldrb	r3, [r7, #7]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d151      	bne.n	80073f2 <lcd_display_dir+0xba>
    {
        lcddev.width = 240;
 800734e:	4b55      	ldr	r3, [pc, #340]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007350:	22f0      	movs	r2, #240	@ 0xf0
 8007352:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8007354:	4b53      	ldr	r3, [pc, #332]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007356:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800735a:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 800735c:	4b51      	ldr	r3, [pc, #324]	@ (80074a4 <lcd_display_dir+0x16c>)
 800735e:	889b      	ldrh	r3, [r3, #4]
 8007360:	f245 5210 	movw	r2, #21776	@ 0x5510
 8007364:	4293      	cmp	r3, r2
 8007366:	d114      	bne.n	8007392 <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0x2C00;
 8007368:	4b4e      	ldr	r3, [pc, #312]	@ (80074a4 <lcd_display_dir+0x16c>)
 800736a:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 800736e:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A00;
 8007370:	4b4c      	ldr	r3, [pc, #304]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007372:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8007376:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B00;
 8007378:	4b4a      	ldr	r3, [pc, #296]	@ (80074a4 <lcd_display_dir+0x16c>)
 800737a:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 800737e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8007380:	4b48      	ldr	r3, [pc, #288]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007382:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007386:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8007388:	4b46      	ldr	r3, [pc, #280]	@ (80074a4 <lcd_display_dir+0x16c>)
 800738a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800738e:	805a      	strh	r2, [r3, #2]
 8007390:	e020      	b.n	80073d4 <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0x1963)
 8007392:	4b44      	ldr	r3, [pc, #272]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007394:	889b      	ldrh	r3, [r3, #4]
 8007396:	f641 1263 	movw	r2, #6499	@ 0x1963
 800739a:	4293      	cmp	r3, r2
 800739c:	d111      	bne.n	80073c2 <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0x2C;  /* 设置写入GRAM的指令 */
 800739e:	4b41      	ldr	r3, [pc, #260]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073a0:	222c      	movs	r2, #44	@ 0x2c
 80073a2:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2B;  /* 设置写X坐标指令 */
 80073a4:	4b3f      	ldr	r3, [pc, #252]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073a6:	222b      	movs	r2, #43	@ 0x2b
 80073a8:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2A;  /* 设置写Y坐标指令 */
 80073aa:	4b3e      	ldr	r3, [pc, #248]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073ac:	222a      	movs	r2, #42	@ 0x2a
 80073ae:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* 设置宽度480 */
 80073b0:	4b3c      	ldr	r3, [pc, #240]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073b2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80073b6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* 设置高度800 */
 80073b8:	4b3a      	ldr	r3, [pc, #232]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073ba:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80073be:	805a      	strh	r2, [r3, #2]
 80073c0:	e008      	b.n	80073d4 <lcd_display_dir+0x9c>
        }
        else   /* 其他IC, 包括: 9341 / 5310 / 7789等IC */
        {
            lcddev.wramcmd = 0x2C;
 80073c2:	4b38      	ldr	r3, [pc, #224]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073c4:	222c      	movs	r2, #44	@ 0x2c
 80073c6:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A;
 80073c8:	4b36      	ldr	r3, [pc, #216]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073ca:	222a      	movs	r2, #42	@ 0x2a
 80073cc:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B;
 80073ce:	4b35      	ldr	r3, [pc, #212]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073d0:	222b      	movs	r2, #43	@ 0x2b
 80073d2:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0x5310)    /* 如果是5310 则表示是 320*480分辨率 */
 80073d4:	4b33      	ldr	r3, [pc, #204]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073d6:	889b      	ldrh	r3, [r3, #4]
 80073d8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80073dc:	4293      	cmp	r3, r2
 80073de:	d159      	bne.n	8007494 <lcd_display_dir+0x15c>
        {
            lcddev.width = 320;
 80073e0:	4b30      	ldr	r3, [pc, #192]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80073e6:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 80073e8:	4b2e      	ldr	r3, [pc, #184]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073ea:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80073ee:	805a      	strh	r2, [r3, #2]
 80073f0:	e050      	b.n	8007494 <lcd_display_dir+0x15c>
        }         
    }/*dir = 0*/
    else        /* 横屏 */
    {
        lcddev.width = 320;         /* 默认宽度 */
 80073f2:	4b2c      	ldr	r3, [pc, #176]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073f4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80073f8:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* 默认高度 */
 80073fa:	4b2a      	ldr	r3, [pc, #168]	@ (80074a4 <lcd_display_dir+0x16c>)
 80073fc:	22f0      	movs	r2, #240	@ 0xf0
 80073fe:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8007400:	4b28      	ldr	r3, [pc, #160]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007402:	889b      	ldrh	r3, [r3, #4]
 8007404:	f245 5210 	movw	r2, #21776	@ 0x5510
 8007408:	4293      	cmp	r3, r2
 800740a:	d114      	bne.n	8007436 <lcd_display_dir+0xfe>
        {
            lcddev.wramcmd = 0x2C00;
 800740c:	4b25      	ldr	r3, [pc, #148]	@ (80074a4 <lcd_display_dir+0x16c>)
 800740e:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8007412:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A00;
 8007414:	4b23      	ldr	r3, [pc, #140]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007416:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 800741a:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B00;
 800741c:	4b21      	ldr	r3, [pc, #132]	@ (80074a4 <lcd_display_dir+0x16c>)
 800741e:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8007422:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8007424:	4b1f      	ldr	r3, [pc, #124]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007426:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800742a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 800742c:	4b1d      	ldr	r3, [pc, #116]	@ (80074a4 <lcd_display_dir+0x16c>)
 800742e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007432:	805a      	strh	r2, [r3, #2]
 8007434:	e020      	b.n	8007478 <lcd_display_dir+0x140>
        }
        else if (lcddev.id == 0x1963)
 8007436:	4b1b      	ldr	r3, [pc, #108]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007438:	889b      	ldrh	r3, [r3, #4]
 800743a:	f641 1263 	movw	r2, #6499	@ 0x1963
 800743e:	4293      	cmp	r3, r2
 8007440:	d111      	bne.n	8007466 <lcd_display_dir+0x12e>
        {
            lcddev.wramcmd = 0x2C;  /* 设置写入GRAM的指令 */
 8007442:	4b18      	ldr	r3, [pc, #96]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007444:	222c      	movs	r2, #44	@ 0x2c
 8007446:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A;  /* 设置写X坐标指令 */
 8007448:	4b16      	ldr	r3, [pc, #88]	@ (80074a4 <lcd_display_dir+0x16c>)
 800744a:	222a      	movs	r2, #42	@ 0x2a
 800744c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B;  /* 设置写Y坐标指令 */
 800744e:	4b15      	ldr	r3, [pc, #84]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007450:	222b      	movs	r2, #43	@ 0x2b
 8007452:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* 设置宽度800 */
 8007454:	4b13      	ldr	r3, [pc, #76]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007456:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800745a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* 设置高度480 */
 800745c:	4b11      	ldr	r3, [pc, #68]	@ (80074a4 <lcd_display_dir+0x16c>)
 800745e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007462:	805a      	strh	r2, [r3, #2]
 8007464:	e008      	b.n	8007478 <lcd_display_dir+0x140>
        }
        else   /* 其他IC, 包括:9341/5310/7789等IC */
        {
            lcddev.wramcmd = 0x2C;
 8007466:	4b0f      	ldr	r3, [pc, #60]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007468:	222c      	movs	r2, #44	@ 0x2c
 800746a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0x2A;
 800746c:	4b0d      	ldr	r3, [pc, #52]	@ (80074a4 <lcd_display_dir+0x16c>)
 800746e:	222a      	movs	r2, #42	@ 0x2a
 8007470:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0x2B;
 8007472:	4b0c      	ldr	r3, [pc, #48]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007474:	222b      	movs	r2, #43	@ 0x2b
 8007476:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0x5310)
 8007478:	4b0a      	ldr	r3, [pc, #40]	@ (80074a4 <lcd_display_dir+0x16c>)
 800747a:	889b      	ldrh	r3, [r3, #4]
 800747c:	f245 3210 	movw	r2, #21264	@ 0x5310
 8007480:	4293      	cmp	r3, r2
 8007482:	d107      	bne.n	8007494 <lcd_display_dir+0x15c>
        {
            lcddev.width = 480;
 8007484:	4b07      	ldr	r3, [pc, #28]	@ (80074a4 <lcd_display_dir+0x16c>)
 8007486:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800748a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 800748c:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <lcd_display_dir+0x16c>)
 800748e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007492:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* 默认扫描方向 */
 8007494:	2000      	movs	r0, #0
 8007496:	f7ff fd83 	bl	8006fa0 <lcd_scan_dir>
}
 800749a:	bf00      	nop
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000404 	.word	0x20000404

080074a8 <lcd_init>:
 *
 * @param       无
 * @retval      无
 */
void lcd_init(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af00      	add	r7, sp, #0
    FSMC_NORSRAM_TimingTypeDef fsmc_write_handle;


    /* 尝试9341 ID的读取 */
    lcd_wr_regno(0xD3);
 80074ae:	20d3      	movs	r0, #211	@ 0xd3
 80074b0:	f7ff fc54 	bl	8006d5c <lcd_wr_regno>
    lcddev.id = lcd_rd_data();  /* dummy read */
 80074b4:	f7ff fc7c 	bl	8006db0 <lcd_rd_data>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	4b89      	ldr	r3, [pc, #548]	@ (80076e4 <lcd_init+0x23c>)
 80074be:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* 读到0x00 */
 80074c0:	f7ff fc76 	bl	8006db0 <lcd_rd_data>
 80074c4:	4603      	mov	r3, r0
 80074c6:	461a      	mov	r2, r3
 80074c8:	4b86      	ldr	r3, [pc, #536]	@ (80076e4 <lcd_init+0x23c>)
 80074ca:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* 读取93 */
 80074cc:	f7ff fc70 	bl	8006db0 <lcd_rd_data>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	4b83      	ldr	r3, [pc, #524]	@ (80076e4 <lcd_init+0x23c>)
 80074d6:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 80074d8:	4b82      	ldr	r3, [pc, #520]	@ (80076e4 <lcd_init+0x23c>)
 80074da:	889b      	ldrh	r3, [r3, #4]
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	b29a      	uxth	r2, r3
 80074e0:	4b80      	ldr	r3, [pc, #512]	@ (80076e4 <lcd_init+0x23c>)
 80074e2:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* 读取41 */
 80074e4:	f7ff fc64 	bl	8006db0 <lcd_rd_data>
 80074e8:	4603      	mov	r3, r0
 80074ea:	461a      	mov	r2, r3
 80074ec:	4b7d      	ldr	r3, [pc, #500]	@ (80076e4 <lcd_init+0x23c>)
 80074ee:	889b      	ldrh	r3, [r3, #4]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	4b7b      	ldr	r3, [pc, #492]	@ (80076e4 <lcd_init+0x23c>)
 80074f6:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0x9341)    /* 不是 9341 , 尝试看看是不是 ST7789 */
 80074f8:	4b7a      	ldr	r3, [pc, #488]	@ (80076e4 <lcd_init+0x23c>)
 80074fa:	889b      	ldrh	r3, [r3, #4]
 80074fc:	f249 3241 	movw	r2, #37697	@ 0x9341
 8007500:	4293      	cmp	r3, r2
 8007502:	f000 80ca 	beq.w	800769a <lcd_init+0x1f2>
    {
        lcd_wr_regno(0x04);
 8007506:	2004      	movs	r0, #4
 8007508:	f7ff fc28 	bl	8006d5c <lcd_wr_regno>
        lcddev.id = lcd_rd_data();      /* dummy read */
 800750c:	f7ff fc50 	bl	8006db0 <lcd_rd_data>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	4b73      	ldr	r3, [pc, #460]	@ (80076e4 <lcd_init+0x23c>)
 8007516:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* 读到0x85 */
 8007518:	f7ff fc4a 	bl	8006db0 <lcd_rd_data>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	4b70      	ldr	r3, [pc, #448]	@ (80076e4 <lcd_init+0x23c>)
 8007522:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* 读取0x85 */
 8007524:	f7ff fc44 	bl	8006db0 <lcd_rd_data>
 8007528:	4603      	mov	r3, r0
 800752a:	461a      	mov	r2, r3
 800752c:	4b6d      	ldr	r3, [pc, #436]	@ (80076e4 <lcd_init+0x23c>)
 800752e:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 8007530:	4b6c      	ldr	r3, [pc, #432]	@ (80076e4 <lcd_init+0x23c>)
 8007532:	889b      	ldrh	r3, [r3, #4]
 8007534:	021b      	lsls	r3, r3, #8
 8007536:	b29a      	uxth	r2, r3
 8007538:	4b6a      	ldr	r3, [pc, #424]	@ (80076e4 <lcd_init+0x23c>)
 800753a:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* 读取0x52 */
 800753c:	f7ff fc38 	bl	8006db0 <lcd_rd_data>
 8007540:	4603      	mov	r3, r0
 8007542:	461a      	mov	r2, r3
 8007544:	4b67      	ldr	r3, [pc, #412]	@ (80076e4 <lcd_init+0x23c>)
 8007546:	889b      	ldrh	r3, [r3, #4]
 8007548:	4313      	orrs	r3, r2
 800754a:	b29a      	uxth	r2, r3
 800754c:	4b65      	ldr	r3, [pc, #404]	@ (80076e4 <lcd_init+0x23c>)
 800754e:	809a      	strh	r2, [r3, #4]
        
        if (lcddev.id == 0x8552)        /* 将8552的ID转换成7789 */
 8007550:	4b64      	ldr	r3, [pc, #400]	@ (80076e4 <lcd_init+0x23c>)
 8007552:	889b      	ldrh	r3, [r3, #4]
 8007554:	f248 5252 	movw	r2, #34130	@ 0x8552
 8007558:	4293      	cmp	r3, r2
 800755a:	d103      	bne.n	8007564 <lcd_init+0xbc>
        {
            lcddev.id = 0x7789;
 800755c:	4b61      	ldr	r3, [pc, #388]	@ (80076e4 <lcd_init+0x23c>)
 800755e:	f247 7289 	movw	r2, #30601	@ 0x7789
 8007562:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* 也不是ST7789, 尝试是不是 NT35310 */
 8007564:	4b5f      	ldr	r3, [pc, #380]	@ (80076e4 <lcd_init+0x23c>)
 8007566:	889b      	ldrh	r3, [r3, #4]
 8007568:	f247 7289 	movw	r2, #30601	@ 0x7789
 800756c:	4293      	cmp	r3, r2
 800756e:	f000 8094 	beq.w	800769a <lcd_init+0x1f2>
        {
            lcd_wr_regno(0xD4);
 8007572:	20d4      	movs	r0, #212	@ 0xd4
 8007574:	f7ff fbf2 	bl	8006d5c <lcd_wr_regno>
            lcddev.id = lcd_rd_data();  /* dummy read */
 8007578:	f7ff fc1a 	bl	8006db0 <lcd_rd_data>
 800757c:	4603      	mov	r3, r0
 800757e:	461a      	mov	r2, r3
 8007580:	4b58      	ldr	r3, [pc, #352]	@ (80076e4 <lcd_init+0x23c>)
 8007582:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* 读回0x01 */
 8007584:	f7ff fc14 	bl	8006db0 <lcd_rd_data>
 8007588:	4603      	mov	r3, r0
 800758a:	461a      	mov	r2, r3
 800758c:	4b55      	ldr	r3, [pc, #340]	@ (80076e4 <lcd_init+0x23c>)
 800758e:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* 读回0x53 */
 8007590:	f7ff fc0e 	bl	8006db0 <lcd_rd_data>
 8007594:	4603      	mov	r3, r0
 8007596:	461a      	mov	r2, r3
 8007598:	4b52      	ldr	r3, [pc, #328]	@ (80076e4 <lcd_init+0x23c>)
 800759a:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 800759c:	4b51      	ldr	r3, [pc, #324]	@ (80076e4 <lcd_init+0x23c>)
 800759e:	889b      	ldrh	r3, [r3, #4]
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	4b4f      	ldr	r3, [pc, #316]	@ (80076e4 <lcd_init+0x23c>)
 80075a6:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* 这里读回0x10 */
 80075a8:	f7ff fc02 	bl	8006db0 <lcd_rd_data>
 80075ac:	4603      	mov	r3, r0
 80075ae:	461a      	mov	r2, r3
 80075b0:	4b4c      	ldr	r3, [pc, #304]	@ (80076e4 <lcd_init+0x23c>)
 80075b2:	889b      	ldrh	r3, [r3, #4]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	4b4a      	ldr	r3, [pc, #296]	@ (80076e4 <lcd_init+0x23c>)
 80075ba:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* 也不是NT35310,尝试看看是不是NT35510 */
 80075bc:	4b49      	ldr	r3, [pc, #292]	@ (80076e4 <lcd_init+0x23c>)
 80075be:	889b      	ldrh	r3, [r3, #4]
 80075c0:	f245 3210 	movw	r2, #21264	@ 0x5310
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d068      	beq.n	800769a <lcd_init+0x1f2>
            {
                /* 发送密钥（厂家提供） */
                lcd_write_reg(0xF000, 0x0055);
 80075c8:	2155      	movs	r1, #85	@ 0x55
 80075ca:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80075ce:	f7ff fbd9 	bl	8006d84 <lcd_write_reg>
                lcd_write_reg(0xF001, 0x00AA);
 80075d2:	21aa      	movs	r1, #170	@ 0xaa
 80075d4:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80075d8:	f7ff fbd4 	bl	8006d84 <lcd_write_reg>
                lcd_write_reg(0xF002, 0x0052);
 80075dc:	2152      	movs	r1, #82	@ 0x52
 80075de:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80075e2:	f7ff fbcf 	bl	8006d84 <lcd_write_reg>
                lcd_write_reg(0xF003, 0x0008);
 80075e6:	2108      	movs	r1, #8
 80075e8:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80075ec:	f7ff fbca 	bl	8006d84 <lcd_write_reg>
                lcd_write_reg(0xF004, 0x0001);
 80075f0:	2101      	movs	r1, #1
 80075f2:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80075f6:	f7ff fbc5 	bl	8006d84 <lcd_write_reg>
                
                lcd_wr_regno(0xC500);       /* 读取ID低八位 */
 80075fa:	f44f 4045 	mov.w	r0, #50432	@ 0xc500
 80075fe:	f7ff fbad 	bl	8006d5c <lcd_wr_regno>
                lcddev.id = lcd_rd_data();  /* 读回0x80 */
 8007602:	f7ff fbd5 	bl	8006db0 <lcd_rd_data>
 8007606:	4603      	mov	r3, r0
 8007608:	461a      	mov	r2, r3
 800760a:	4b36      	ldr	r3, [pc, #216]	@ (80076e4 <lcd_init+0x23c>)
 800760c:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 800760e:	4b35      	ldr	r3, [pc, #212]	@ (80076e4 <lcd_init+0x23c>)
 8007610:	889b      	ldrh	r3, [r3, #4]
 8007612:	021b      	lsls	r3, r3, #8
 8007614:	b29a      	uxth	r2, r3
 8007616:	4b33      	ldr	r3, [pc, #204]	@ (80076e4 <lcd_init+0x23c>)
 8007618:	809a      	strh	r2, [r3, #4]

                lcd_wr_regno(0xC501);       /* 读取ID高八位 */
 800761a:	f24c 5001 	movw	r0, #50433	@ 0xc501
 800761e:	f7ff fb9d 	bl	8006d5c <lcd_wr_regno>
                lcddev.id |= lcd_rd_data(); /* 读回0x00 */
 8007622:	f7ff fbc5 	bl	8006db0 <lcd_rd_data>
 8007626:	4603      	mov	r3, r0
 8007628:	461a      	mov	r2, r3
 800762a:	4b2e      	ldr	r3, [pc, #184]	@ (80076e4 <lcd_init+0x23c>)
 800762c:	889b      	ldrh	r3, [r3, #4]
 800762e:	4313      	orrs	r3, r2
 8007630:	b29a      	uxth	r2, r3
 8007632:	4b2c      	ldr	r3, [pc, #176]	@ (80076e4 <lcd_init+0x23c>)
 8007634:	809a      	strh	r2, [r3, #4]
                HAL_Delay(5);                /* 等待5ms, 因为0XC501指令对1963来说就是软件复位指令, 等待5ms让1963复位完成再操作 */
 8007636:	2005      	movs	r0, #5
 8007638:	f7fa fc30 	bl	8001e9c <HAL_Delay>

                if (lcddev.id != 0x5510)        /* 也不是NT5510,尝试看看是不是SSD1963 */
 800763c:	4b29      	ldr	r3, [pc, #164]	@ (80076e4 <lcd_init+0x23c>)
 800763e:	889b      	ldrh	r3, [r3, #4]
 8007640:	f245 5210 	movw	r2, #21776	@ 0x5510
 8007644:	4293      	cmp	r3, r2
 8007646:	d028      	beq.n	800769a <lcd_init+0x1f2>
                {
                    lcd_wr_regno(0xA1);
 8007648:	20a1      	movs	r0, #161	@ 0xa1
 800764a:	f7ff fb87 	bl	8006d5c <lcd_wr_regno>
                    lcddev.id = lcd_rd_data();
 800764e:	f7ff fbaf 	bl	8006db0 <lcd_rd_data>
 8007652:	4603      	mov	r3, r0
 8007654:	461a      	mov	r2, r3
 8007656:	4b23      	ldr	r3, [pc, #140]	@ (80076e4 <lcd_init+0x23c>)
 8007658:	809a      	strh	r2, [r3, #4]
                    lcddev.id = lcd_rd_data();  /* 读回0x57 */
 800765a:	f7ff fba9 	bl	8006db0 <lcd_rd_data>
 800765e:	4603      	mov	r3, r0
 8007660:	461a      	mov	r2, r3
 8007662:	4b20      	ldr	r3, [pc, #128]	@ (80076e4 <lcd_init+0x23c>)
 8007664:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 8007666:	4b1f      	ldr	r3, [pc, #124]	@ (80076e4 <lcd_init+0x23c>)
 8007668:	889b      	ldrh	r3, [r3, #4]
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	b29a      	uxth	r2, r3
 800766e:	4b1d      	ldr	r3, [pc, #116]	@ (80076e4 <lcd_init+0x23c>)
 8007670:	809a      	strh	r2, [r3, #4]
                    lcddev.id |= lcd_rd_data(); /* 读回0x61 */
 8007672:	f7ff fb9d 	bl	8006db0 <lcd_rd_data>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	4b1a      	ldr	r3, [pc, #104]	@ (80076e4 <lcd_init+0x23c>)
 800767c:	889b      	ldrh	r3, [r3, #4]
 800767e:	4313      	orrs	r3, r2
 8007680:	b29a      	uxth	r2, r3
 8007682:	4b18      	ldr	r3, [pc, #96]	@ (80076e4 <lcd_init+0x23c>)
 8007684:	809a      	strh	r2, [r3, #4]

                    if (lcddev.id == 0x5761)lcddev.id = 0x1963; /* SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963 */
 8007686:	4b17      	ldr	r3, [pc, #92]	@ (80076e4 <lcd_init+0x23c>)
 8007688:	889b      	ldrh	r3, [r3, #4]
 800768a:	f245 7261 	movw	r2, #22369	@ 0x5761
 800768e:	4293      	cmp	r3, r2
 8007690:	d103      	bne.n	800769a <lcd_init+0x1f2>
 8007692:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <lcd_init+0x23c>)
 8007694:	f641 1263 	movw	r2, #6499	@ 0x1963
 8007698:	809a      	strh	r2, [r3, #4]
     * 里面(卡死在f_putc函数), 所以, 必须初始化串口1, 或者屏蔽掉下面
     * 这行 printf 语句 !!!!!!!
     */
    //printf("LCD ID:%x\r\n", lcddev.id); /* 打印LCD ID */

    if (lcddev.id == 0x7789)
 800769a:	4b12      	ldr	r3, [pc, #72]	@ (80076e4 <lcd_init+0x23c>)
 800769c:	889b      	ldrh	r3, [r3, #4]
 800769e:	f247 7289 	movw	r2, #30601	@ 0x7789
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d102      	bne.n	80076ac <lcd_init+0x204>
    {
        lcd_ex_st7789_reginit();        /* 执行ST7789初始化 */
 80076a6:	f7fd f9a3 	bl	80049f0 <lcd_ex_st7789_reginit>
 80076aa:	e028      	b.n	80076fe <lcd_init+0x256>
    }
    else if (lcddev.id == 0x9341)
 80076ac:	4b0d      	ldr	r3, [pc, #52]	@ (80076e4 <lcd_init+0x23c>)
 80076ae:	889b      	ldrh	r3, [r3, #4]
 80076b0:	f249 3241 	movw	r2, #37697	@ 0x9341
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d102      	bne.n	80076be <lcd_init+0x216>
    {
        lcd_ex_ili9341_reginit();       /* 执行ILI9341初始化 */
 80076b8:	f7fd fa70 	bl	8004b9c <lcd_ex_ili9341_reginit>
 80076bc:	e01f      	b.n	80076fe <lcd_init+0x256>
    }
    else if (lcddev.id == 0x5310)
 80076be:	4b09      	ldr	r3, [pc, #36]	@ (80076e4 <lcd_init+0x23c>)
 80076c0:	889b      	ldrh	r3, [r3, #4]
 80076c2:	f245 3210 	movw	r2, #21264	@ 0x5310
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d102      	bne.n	80076d0 <lcd_init+0x228>
    {
        lcd_ex_nt35310_reginit();       /* 执行NT35310初始化 */
 80076ca:	f7fd fb7f 	bl	8004dcc <lcd_ex_nt35310_reginit>
 80076ce:	e016      	b.n	80076fe <lcd_init+0x256>
    }
    else if (lcddev.id == 0x5510)
 80076d0:	4b04      	ldr	r3, [pc, #16]	@ (80076e4 <lcd_init+0x23c>)
 80076d2:	889b      	ldrh	r3, [r3, #4]
 80076d4:	f245 5210 	movw	r2, #21776	@ 0x5510
 80076d8:	4293      	cmp	r3, r2
 80076da:	d105      	bne.n	80076e8 <lcd_init+0x240>
    {
        lcd_ex_nt35510_reginit();       /* 执行NT35510初始化 */
 80076dc:	f7fe faf1 	bl	8005cc2 <lcd_ex_nt35510_reginit>
 80076e0:	e00d      	b.n	80076fe <lcd_init+0x256>
 80076e2:	bf00      	nop
 80076e4:	20000404 	.word	0x20000404
    }
    else if (lcddev.id == 0x1963)
 80076e8:	4b29      	ldr	r3, [pc, #164]	@ (8007790 <lcd_init+0x2e8>)
 80076ea:	889b      	ldrh	r3, [r3, #4]
 80076ec:	f641 1263 	movw	r2, #6499	@ 0x1963
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d104      	bne.n	80076fe <lcd_init+0x256>
    {
        lcd_ex_ssd1963_reginit();       /* 执行SSD1963初始化 */
 80076f4:	f7ff fa65 	bl	8006bc2 <lcd_ex_ssd1963_reginit>
        lcd_ssd_backlight_set(100);     /* 背光设置为最亮 */
 80076f8:	2064      	movs	r0, #100	@ 0x64
 80076fa:	f7ff fde9 	bl	80072d0 <lcd_ssd_backlight_set>
    }

    /* 初始化完成以后,提速 */
    if (lcddev.id == 0x9341 || lcddev.id == 0x1963 || lcddev.id == 0x7789)  /* 如果是这几个IC, 则设置WR时序为最快 */
 80076fe:	4b24      	ldr	r3, [pc, #144]	@ (8007790 <lcd_init+0x2e8>)
 8007700:	889b      	ldrh	r3, [r3, #4]
 8007702:	f249 3241 	movw	r2, #37697	@ 0x9341
 8007706:	4293      	cmp	r3, r2
 8007708:	d00b      	beq.n	8007722 <lcd_init+0x27a>
 800770a:	4b21      	ldr	r3, [pc, #132]	@ (8007790 <lcd_init+0x2e8>)
 800770c:	889b      	ldrh	r3, [r3, #4]
 800770e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8007712:	4293      	cmp	r3, r2
 8007714:	d005      	beq.n	8007722 <lcd_init+0x27a>
 8007716:	4b1e      	ldr	r3, [pc, #120]	@ (8007790 <lcd_init+0x2e8>)
 8007718:	889b      	ldrh	r3, [r3, #4]
 800771a:	f247 7289 	movw	r2, #30601	@ 0x7789
 800771e:	4293      	cmp	r3, r2
 8007720:	d10c      	bne.n	800773c <lcd_init+0x294>
    {
        /* 重新配置写时序控制寄存器的时序 */
        fsmc_write_handle.AddressSetupTime = 3;
 8007722:	2303      	movs	r3, #3
 8007724:	607b      	str	r3, [r7, #4]
        fsmc_write_handle.DataSetupTime = 3;         
 8007726:	2303      	movs	r3, #3
 8007728:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended, &fsmc_write_handle, g_sram_handle.Init.NSBank, g_sram_handle.Init.ExtendedMode);
 800772a:	4b1a      	ldr	r3, [pc, #104]	@ (8007794 <lcd_init+0x2ec>)
 800772c:	6858      	ldr	r0, [r3, #4]
 800772e:	4b19      	ldr	r3, [pc, #100]	@ (8007794 <lcd_init+0x2ec>)
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	4b18      	ldr	r3, [pc, #96]	@ (8007794 <lcd_init+0x2ec>)
 8007734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007736:	1d39      	adds	r1, r7, #4
 8007738:	f7fd f922 	bl	8004980 <FSMC_NORSRAM_Extended_Timing_Init>
    }

    if (lcddev.id == 0x5310 || lcddev.id == 0x5510)  /* 如果是这几个IC, 则设置WR时序为最快 */
 800773c:	4b14      	ldr	r3, [pc, #80]	@ (8007790 <lcd_init+0x2e8>)
 800773e:	889b      	ldrh	r3, [r3, #4]
 8007740:	f245 3210 	movw	r2, #21264	@ 0x5310
 8007744:	4293      	cmp	r3, r2
 8007746:	d005      	beq.n	8007754 <lcd_init+0x2ac>
 8007748:	4b11      	ldr	r3, [pc, #68]	@ (8007790 <lcd_init+0x2e8>)
 800774a:	889b      	ldrh	r3, [r3, #4]
 800774c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8007750:	4293      	cmp	r3, r2
 8007752:	d10c      	bne.n	800776e <lcd_init+0x2c6>
    {
        /* 重新配置写时序控制寄存器的时序 */
        fsmc_write_handle.AddressSetupTime = 2;
 8007754:	2302      	movs	r3, #2
 8007756:	607b      	str	r3, [r7, #4]
        fsmc_write_handle.DataSetupTime = 2;
 8007758:	2302      	movs	r3, #2
 800775a:	60fb      	str	r3, [r7, #12]
        FSMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended, &fsmc_write_handle, g_sram_handle.Init.NSBank, g_sram_handle.Init.ExtendedMode);
 800775c:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <lcd_init+0x2ec>)
 800775e:	6858      	ldr	r0, [r3, #4]
 8007760:	4b0c      	ldr	r3, [pc, #48]	@ (8007794 <lcd_init+0x2ec>)
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	4b0b      	ldr	r3, [pc, #44]	@ (8007794 <lcd_init+0x2ec>)
 8007766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007768:	1d39      	adds	r1, r7, #4
 800776a:	f7fd f909 	bl	8004980 <FSMC_NORSRAM_Extended_Timing_Init>
    }

    lcd_display_dir(0); /* 默认为竖屏 */
 800776e:	2000      	movs	r0, #0
 8007770:	f7ff fde2 	bl	8007338 <lcd_display_dir>
    LCD_BL(1);          /* 点亮背光 */
 8007774:	2201      	movs	r2, #1
 8007776:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800777a:	4807      	ldr	r0, [pc, #28]	@ (8007798 <lcd_init+0x2f0>)
 800777c:	f7fb f990 	bl	8002aa0 <HAL_GPIO_WritePin>
    lcd_clear(WHITE);
 8007780:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007784:	f000 f80a 	bl	800779c <lcd_clear>
}
 8007788:	bf00      	nop
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20000404 	.word	0x20000404
 8007794:	200003b4 	.word	0x200003b4
 8007798:	40020400 	.word	0x40020400

0800779c <lcd_clear>:
 * @brief       清屏函数
 * @param       color: 要清屏的颜色
 * @retval      无
 */
void lcd_clear(uint16_t color)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = lcddev.width;
 80077aa:	4b11      	ldr	r3, [pc, #68]	@ (80077f0 <lcd_clear+0x54>)
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	60bb      	str	r3, [r7, #8]

    totalpoint *= lcddev.height;    /* 得到总点数 */
 80077b0:	4b0f      	ldr	r3, [pc, #60]	@ (80077f0 <lcd_clear+0x54>)
 80077b2:	885b      	ldrh	r3, [r3, #2]
 80077b4:	461a      	mov	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	60bb      	str	r3, [r7, #8]
    lcd_set_cursor(0x00, 0x0000);   /* 设置光标位置 */
 80077be:	2100      	movs	r1, #0
 80077c0:	2000      	movs	r0, #0
 80077c2:	f7ff fb17 	bl	8006df4 <lcd_set_cursor>
    lcd_write_ram_prepare();        /* 开始写入GRAM */
 80077c6:	f7ff fb05 	bl	8006dd4 <lcd_write_ram_prepare>

    for (index = 0; index < totalpoint; index++)
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	e005      	b.n	80077dc <lcd_clear+0x40>
    {
        LCD->LCD_RAM = color;
 80077d0:	4a08      	ldr	r2, [pc, #32]	@ (80077f4 <lcd_clear+0x58>)
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3301      	adds	r3, #1
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d3f5      	bcc.n	80077d0 <lcd_clear+0x34>
    }
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	20000404 	.word	0x20000404
 80077f4:	6c00007e 	.word	0x6c00007e

080077f8 <lcd_show_char>:
 * @param       size : 字体大小 12/16/24/32
 * @param       mode : 叠加方式(1); 非叠加方式(0);
 * @retval      无
 */
void lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color)
{
 80077f8:	b590      	push	{r4, r7, lr}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4604      	mov	r4, r0
 8007800:	4608      	mov	r0, r1
 8007802:	4611      	mov	r1, r2
 8007804:	461a      	mov	r2, r3
 8007806:	4623      	mov	r3, r4
 8007808:	80fb      	strh	r3, [r7, #6]
 800780a:	4603      	mov	r3, r0
 800780c:	80bb      	strh	r3, [r7, #4]
 800780e:	460b      	mov	r3, r1
 8007810:	70fb      	strb	r3, [r7, #3]
 8007812:	4613      	mov	r3, r2
 8007814:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 8007816:	88bb      	ldrh	r3, [r7, #4]
 8007818:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* 得到字体一个字符对应点阵集所占的字节数 */
 8007822:	78bb      	ldrb	r3, [r7, #2]
 8007824:	08db      	lsrs	r3, r3, #3
 8007826:	b2db      	uxtb	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	78bb      	ldrb	r3, [r7, #2]
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	bf14      	ite	ne
 8007836:	2301      	movne	r3, #1
 8007838:	2300      	moveq	r3, #0
 800783a:	b2db      	uxtb	r3, r3
 800783c:	4413      	add	r3, r2
 800783e:	b2da      	uxtb	r2, r3
 8007840:	78bb      	ldrb	r3, [r7, #2]
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	b2db      	uxtb	r3, r3
 8007846:	fb12 f303 	smulbb	r3, r2, r3
 800784a:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* 得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库） */
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	3b20      	subs	r3, #32
 8007850:	70fb      	strb	r3, [r7, #3]

    switch (size)
 8007852:	78bb      	ldrb	r3, [r7, #2]
 8007854:	3b0c      	subs	r3, #12
 8007856:	2b14      	cmp	r3, #20
 8007858:	f200 8099 	bhi.w	800798e <lcd_show_char+0x196>
 800785c:	a201      	add	r2, pc, #4	@ (adr r2, 8007864 <lcd_show_char+0x6c>)
 800785e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007862:	bf00      	nop
 8007864:	080078b9 	.word	0x080078b9
 8007868:	0800798f 	.word	0x0800798f
 800786c:	0800798f 	.word	0x0800798f
 8007870:	0800798f 	.word	0x0800798f
 8007874:	080078cb 	.word	0x080078cb
 8007878:	0800798f 	.word	0x0800798f
 800787c:	0800798f 	.word	0x0800798f
 8007880:	0800798f 	.word	0x0800798f
 8007884:	0800798f 	.word	0x0800798f
 8007888:	0800798f 	.word	0x0800798f
 800788c:	0800798f 	.word	0x0800798f
 8007890:	0800798f 	.word	0x0800798f
 8007894:	080078d7 	.word	0x080078d7
 8007898:	0800798f 	.word	0x0800798f
 800789c:	0800798f 	.word	0x0800798f
 80078a0:	0800798f 	.word	0x0800798f
 80078a4:	0800798f 	.word	0x0800798f
 80078a8:	0800798f 	.word	0x0800798f
 80078ac:	0800798f 	.word	0x0800798f
 80078b0:	0800798f 	.word	0x0800798f
 80078b4:	080078e9 	.word	0x080078e9
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* 调用1206字体 */
 80078b8:	78fa      	ldrb	r2, [r7, #3]
 80078ba:	4613      	mov	r3, r2
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4a36      	ldr	r2, [pc, #216]	@ (800799c <lcd_show_char+0x1a4>)
 80078c4:	4413      	add	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]
            break;
 80078c8:	e014      	b.n	80078f4 <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* 调用1608字体 */
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	4a34      	ldr	r2, [pc, #208]	@ (80079a0 <lcd_show_char+0x1a8>)
 80078d0:	4413      	add	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
            break;
 80078d4:	e00e      	b.n	80078f4 <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* 调用2412字体 */
 80078d6:	78fa      	ldrb	r2, [r7, #3]
 80078d8:	4613      	mov	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	4413      	add	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4a30      	ldr	r2, [pc, #192]	@ (80079a4 <lcd_show_char+0x1ac>)
 80078e2:	4413      	add	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
            break;
 80078e6:	e005      	b.n	80078f4 <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* 调用3216字体 */
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	019b      	lsls	r3, r3, #6
 80078ec:	4a2e      	ldr	r2, [pc, #184]	@ (80079a8 <lcd_show_char+0x1b0>)
 80078ee:	4413      	add	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
            break;
 80078f2:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 80078f4:	2300      	movs	r3, #0
 80078f6:	757b      	strb	r3, [r7, #21]
 80078f8:	e044      	b.n	8007984 <lcd_show_char+0x18c>
    {
        temp = pfont[t];                            /* 获取字符的点阵数据 */
 80078fa:	7d7b      	ldrb	r3, [r7, #21]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4413      	add	r3, r2
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)                  /* 一个字节8个点 */
 8007904:	2300      	movs	r3, #0
 8007906:	75bb      	strb	r3, [r7, #22]
 8007908:	e034      	b.n	8007974 <lcd_show_char+0x17c>
        {
            if (temp & 0x80)                        /* 有效点,需要显示 */
 800790a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800790e:	2b00      	cmp	r3, #0
 8007910:	da06      	bge.n	8007920 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* 画点出来,要显示这个点 */
 8007912:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007914:	88b9      	ldrh	r1, [r7, #4]
 8007916:	88fb      	ldrh	r3, [r7, #6]
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff fcbd 	bl	8007298 <lcd_draw_point>
 800791e:	e00a      	b.n	8007936 <lcd_show_char+0x13e>
            }
            else if (mode == 0)                     /* 无效点,不显示 */
 8007920:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007924:	2b00      	cmp	r3, #0
 8007926:	d106      	bne.n	8007936 <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* 画背景色,相当于这个点不显示(注意背景色由全局变量控制) */
 8007928:	4b20      	ldr	r3, [pc, #128]	@ (80079ac <lcd_show_char+0x1b4>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	88b9      	ldrh	r1, [r7, #4]
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff fcb1 	bl	8007298 <lcd_draw_point>
            }

            temp <<= 1;                             /* 移位, 以便获取下一个位的状态 */
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	75fb      	strb	r3, [r7, #23]
            y++;
 800793c:	88bb      	ldrh	r3, [r7, #4]
 800793e:	3301      	adds	r3, #1
 8007940:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;          /* 超区域了 */
 8007942:	4b1b      	ldr	r3, [pc, #108]	@ (80079b0 <lcd_show_char+0x1b8>)
 8007944:	885b      	ldrh	r3, [r3, #2]
 8007946:	88ba      	ldrh	r2, [r7, #4]
 8007948:	429a      	cmp	r2, r3
 800794a:	d222      	bcs.n	8007992 <lcd_show_char+0x19a>

            if ((y - y0) == size)                   /* 显示完一列了? */
 800794c:	88ba      	ldrh	r2, [r7, #4]
 800794e:	89fb      	ldrh	r3, [r7, #14]
 8007950:	1ad2      	subs	r2, r2, r3
 8007952:	78bb      	ldrb	r3, [r7, #2]
 8007954:	429a      	cmp	r2, r3
 8007956:	d10a      	bne.n	800796e <lcd_show_char+0x176>
            {
                y = y0; /* y坐标复位 */
 8007958:	89fb      	ldrh	r3, [r7, #14]
 800795a:	80bb      	strh	r3, [r7, #4]
                x++;    /* x坐标递增 */
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	3301      	adds	r3, #1
 8007960:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)
 8007962:	4b13      	ldr	r3, [pc, #76]	@ (80079b0 <lcd_show_char+0x1b8>)
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	88fa      	ldrh	r2, [r7, #6]
 8007968:	429a      	cmp	r2, r3
 800796a:	d307      	bcc.n	800797c <lcd_show_char+0x184>
                {
                    return;       /* x坐标超区域了 */
 800796c:	e012      	b.n	8007994 <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)                  /* 一个字节8个点 */
 800796e:	7dbb      	ldrb	r3, [r7, #22]
 8007970:	3301      	adds	r3, #1
 8007972:	75bb      	strb	r3, [r7, #22]
 8007974:	7dbb      	ldrb	r3, [r7, #22]
 8007976:	2b07      	cmp	r3, #7
 8007978:	d9c7      	bls.n	800790a <lcd_show_char+0x112>
 800797a:	e000      	b.n	800797e <lcd_show_char+0x186>
                }

                break;
 800797c:	bf00      	nop
    for (t = 0; t < csize; t++)
 800797e:	7d7b      	ldrb	r3, [r7, #21]
 8007980:	3301      	adds	r3, #1
 8007982:	757b      	strb	r3, [r7, #21]
 8007984:	7d7a      	ldrb	r2, [r7, #21]
 8007986:	7b7b      	ldrb	r3, [r7, #13]
 8007988:	429a      	cmp	r2, r3
 800798a:	d3b6      	bcc.n	80078fa <lcd_show_char+0x102>
 800798c:	e002      	b.n	8007994 <lcd_show_char+0x19c>
            return ;
 800798e:	bf00      	nop
 8007990:	e000      	b.n	8007994 <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;          /* 超区域了 */
 8007992:	bf00      	nop
            }
        }
    }
}
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	bd90      	pop	{r4, r7, pc}
 800799a:	bf00      	nop
 800799c:	08008a18 	.word	0x08008a18
 80079a0:	08008e8c 	.word	0x08008e8c
 80079a4:	0800947c 	.word	0x0800947c
 80079a8:	0800a1d8 	.word	0x0800a1d8
 80079ac:	2000000c 	.word	0x2000000c
 80079b0:	20000404 	.word	0x20000404

080079b4 <lcd_show_str>:
 * @param       size        : 选择字体 12/16/24/32
 * @param       p           : 字符串首地址
 * @retval      无
 */
void lcd_show_str(uint16_t x, uint16_t y, uint8_t size, char *p, uint16_t color)
{
 80079b4:	b590      	push	{r4, r7, lr}
 80079b6:	b089      	sub	sp, #36	@ 0x24
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	607b      	str	r3, [r7, #4]
 80079bc:	4603      	mov	r3, r0
 80079be:	81fb      	strh	r3, [r7, #14]
 80079c0:	460b      	mov	r3, r1
 80079c2:	81bb      	strh	r3, [r7, #12]
 80079c4:	4613      	mov	r3, r2
 80079c6:	72fb      	strb	r3, [r7, #11]
    uint8_t x0 = x;
 80079c8:	89fb      	ldrh	r3, [r7, #14]
 80079ca:	75fb      	strb	r3, [r7, #23]

    uint16_t width = x + size / 2 * strlen(p);
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	085b      	lsrs	r3, r3, #1
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	461c      	mov	r4, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7f8 fbfb 	bl	80001d0 <strlen>
 80079da:	4603      	mov	r3, r0
 80079dc:	b29b      	uxth	r3, r3
 80079de:	fb14 f303 	smulbb	r3, r4, r3
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	89fb      	ldrh	r3, [r7, #14]
 80079e6:	4413      	add	r3, r2
 80079e8:	82bb      	strh	r3, [r7, #20]
    uint16_t height = y + size;
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	89bb      	ldrh	r3, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	827b      	strh	r3, [r7, #18]

    while ((*p <= '~') && (*p >= ' '))   /* 判断是不是非法字符! */
 80079f4:	e024      	b.n	8007a40 <lcd_show_str+0x8c>
    {
        if (x >= width)
 80079f6:	89fa      	ldrh	r2, [r7, #14]
 80079f8:	8abb      	ldrh	r3, [r7, #20]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d306      	bcc.n	8007a0c <lcd_show_str+0x58>
        {
            x = x0;
 80079fe:	7dfb      	ldrb	r3, [r7, #23]
 8007a00:	81fb      	strh	r3, [r7, #14]
            y += size;
 8007a02:	7afb      	ldrb	r3, [r7, #11]
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	89bb      	ldrh	r3, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	81bb      	strh	r3, [r7, #12]
        }

        if (y >= height)
 8007a0c:	89ba      	ldrh	r2, [r7, #12]
 8007a0e:	8a7b      	ldrh	r3, [r7, #18]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d21e      	bcs.n	8007a52 <lcd_show_str+0x9e>
        {
            break;      /* 退出 */
        }

        lcd_show_char(x, y, *p, size, 0, color);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	781a      	ldrb	r2, [r3, #0]
 8007a18:	7afc      	ldrb	r4, [r7, #11]
 8007a1a:	89b9      	ldrh	r1, [r7, #12]
 8007a1c:	89f8      	ldrh	r0, [r7, #14]
 8007a1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a20:	9301      	str	r3, [sp, #4]
 8007a22:	2300      	movs	r3, #0
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	4623      	mov	r3, r4
 8007a28:	f7ff fee6 	bl	80077f8 <lcd_show_char>
        x += size / 2;
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	085b      	lsrs	r3, r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	89fb      	ldrh	r3, [r7, #14]
 8007a36:	4413      	add	r3, r2
 8007a38:	81fb      	strh	r3, [r7, #14]
        p++;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	607b      	str	r3, [r7, #4]
    while ((*p <= '~') && (*p >= ' '))   /* 判断是不是非法字符! */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	2b7e      	cmp	r3, #126	@ 0x7e
 8007a46:	d805      	bhi.n	8007a54 <lcd_show_str+0xa0>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b1f      	cmp	r3, #31
 8007a4e:	d8d2      	bhi.n	80079f6 <lcd_show_str+0x42>
    }
}
 8007a50:	e000      	b.n	8007a54 <lcd_show_str+0xa0>
            break;      /* 退出 */
 8007a52:	bf00      	nop
}
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd90      	pop	{r4, r7, pc}

08007a5c <HAL_UART_MspInit>:
  * 返 回 值: 无
  * 说    明: 该函数被HAL库内部调用
  */

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==DEBUG_USARTx)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a17      	ldr	r2, [pc, #92]	@ (8007ac8 <HAL_UART_MspInit+0x6c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d127      	bne.n	8007abe <HAL_UART_MspInit+0x62>
  {
    /* 串口外设时钟使能 */
    DEBUG_USART_RCC_CLK_ENABLE();
 8007a6e:	2300      	movs	r3, #0
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	4b16      	ldr	r3, [pc, #88]	@ (8007acc <HAL_UART_MspInit+0x70>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a76:	4a15      	ldr	r2, [pc, #84]	@ (8007acc <HAL_UART_MspInit+0x70>)
 8007a78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a7e:	4b13      	ldr	r3, [pc, #76]	@ (8007acc <HAL_UART_MspInit+0x70>)
 8007a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a86:	60bb      	str	r3, [r7, #8]
 8007a88:	68bb      	ldr	r3, [r7, #8]
  
    /* 串口外设功能GPIO配置 */
    GPIO_InitStruct.Pin = DEBUG_USARTx_Tx_GPIO_PIN;
 8007a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a90:	2302      	movs	r3, #2
 8007a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a94:	2301      	movs	r3, #1
 8007a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = DEBUG_USARTx_AFx;
 8007a9c:	2308      	movs	r3, #8
 8007a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DEBUG_USARTx_Tx_GPIO, &GPIO_InitStruct);
 8007aa0:	f107 030c 	add.w	r3, r7, #12
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	480a      	ldr	r0, [pc, #40]	@ (8007ad0 <HAL_UART_MspInit+0x74>)
 8007aa8:	f7fa fe5e 	bl	8002768 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Pin = DEBUG_USARTx_Rx_GPIO_PIN;  
 8007aac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ab0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DEBUG_USARTx_Rx_GPIO, &GPIO_InitStruct);       
 8007ab2:	f107 030c 	add.w	r3, r7, #12
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4805      	ldr	r0, [pc, #20]	@ (8007ad0 <HAL_UART_MspInit+0x74>)
 8007aba:	f7fa fe55 	bl	8002768 <HAL_GPIO_Init>
  }  
}
 8007abe:	bf00      	nop
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40004c00 	.word	0x40004c00
 8007acc:	40023800 	.word	0x40023800
 8007ad0:	40020800 	.word	0x40020800

08007ad4 <MX_DEBUG_USART_Init>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明：无
  */
void MX_DEBUG_USART_Init(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
  /* 使能串口功能引脚GPIO时钟 */
  DEBUG_USARTx_GPIO_ClK_ENABLE();
 8007ada:	2300      	movs	r3, #0
 8007adc:	607b      	str	r3, [r7, #4]
 8007ade:	4b16      	ldr	r3, [pc, #88]	@ (8007b38 <MX_DEBUG_USART_Init+0x64>)
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae2:	4a15      	ldr	r2, [pc, #84]	@ (8007b38 <MX_DEBUG_USART_Init+0x64>)
 8007ae4:	f043 0304 	orr.w	r3, r3, #4
 8007ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007aea:	4b13      	ldr	r3, [pc, #76]	@ (8007b38 <MX_DEBUG_USART_Init+0x64>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
  
  husart_debug.Instance = DEBUG_USARTx;
 8007af6:	4b11      	ldr	r3, [pc, #68]	@ (8007b3c <MX_DEBUG_USART_Init+0x68>)
 8007af8:	4a11      	ldr	r2, [pc, #68]	@ (8007b40 <MX_DEBUG_USART_Init+0x6c>)
 8007afa:	601a      	str	r2, [r3, #0]
  husart_debug.Init.BaudRate = DEBUG_USARTx_BAUDRATE;
 8007afc:	4b0f      	ldr	r3, [pc, #60]	@ (8007b3c <MX_DEBUG_USART_Init+0x68>)
 8007afe:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007b02:	605a      	str	r2, [r3, #4]
  husart_debug.Init.WordLength = UART_WORDLENGTH_8B;
 8007b04:	4b0d      	ldr	r3, [pc, #52]	@ (8007b3c <MX_DEBUG_USART_Init+0x68>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	609a      	str	r2, [r3, #8]
  husart_debug.Init.StopBits = UART_STOPBITS_1;
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b3c <MX_DEBUG_USART_Init+0x68>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	60da      	str	r2, [r3, #12]
  husart_debug.Init.Parity = UART_PARITY_NONE;
 8007b10:	4b0a      	ldr	r3, [pc, #40]	@ (8007b3c <MX_DEBUG_USART_Init+0x68>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	611a      	str	r2, [r3, #16]
  husart_debug.Init.Mode = UART_MODE_TX_RX;
 8007b16:	4b09      	ldr	r3, [pc, #36]	@ (8007b3c <MX_DEBUG_USART_Init+0x68>)
 8007b18:	220c      	movs	r2, #12
 8007b1a:	615a      	str	r2, [r3, #20]
  husart_debug.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007b1c:	4b07      	ldr	r3, [pc, #28]	@ (8007b3c <MX_DEBUG_USART_Init+0x68>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	619a      	str	r2, [r3, #24]
  husart_debug.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b22:	4b06      	ldr	r3, [pc, #24]	@ (8007b3c <MX_DEBUG_USART_Init+0x68>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&husart_debug);
 8007b28:	4804      	ldr	r0, [pc, #16]	@ (8007b3c <MX_DEBUG_USART_Init+0x68>)
 8007b2a:	f7fc fbcd 	bl	80042c8 <HAL_UART_Init>
  
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	20000414 	.word	0x20000414
 8007b40:	40004c00 	.word	0x40004c00

08007b44 <std>:
 8007b44:	2300      	movs	r3, #0
 8007b46:	b510      	push	{r4, lr}
 8007b48:	4604      	mov	r4, r0
 8007b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b52:	6083      	str	r3, [r0, #8]
 8007b54:	8181      	strh	r1, [r0, #12]
 8007b56:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b58:	81c2      	strh	r2, [r0, #14]
 8007b5a:	6183      	str	r3, [r0, #24]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	2208      	movs	r2, #8
 8007b60:	305c      	adds	r0, #92	@ 0x5c
 8007b62:	f000 f906 	bl	8007d72 <memset>
 8007b66:	4b0d      	ldr	r3, [pc, #52]	@ (8007b9c <std+0x58>)
 8007b68:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba0 <std+0x5c>)
 8007b6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba4 <std+0x60>)
 8007b70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba8 <std+0x64>)
 8007b74:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b76:	4b0d      	ldr	r3, [pc, #52]	@ (8007bac <std+0x68>)
 8007b78:	6224      	str	r4, [r4, #32]
 8007b7a:	429c      	cmp	r4, r3
 8007b7c:	d006      	beq.n	8007b8c <std+0x48>
 8007b7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b82:	4294      	cmp	r4, r2
 8007b84:	d002      	beq.n	8007b8c <std+0x48>
 8007b86:	33d0      	adds	r3, #208	@ 0xd0
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	d105      	bne.n	8007b98 <std+0x54>
 8007b8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b94:	f000 b966 	b.w	8007e64 <__retarget_lock_init_recursive>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	bf00      	nop
 8007b9c:	08007ced 	.word	0x08007ced
 8007ba0:	08007d0f 	.word	0x08007d0f
 8007ba4:	08007d47 	.word	0x08007d47
 8007ba8:	08007d6b 	.word	0x08007d6b
 8007bac:	2000045c 	.word	0x2000045c

08007bb0 <stdio_exit_handler>:
 8007bb0:	4a02      	ldr	r2, [pc, #8]	@ (8007bbc <stdio_exit_handler+0xc>)
 8007bb2:	4903      	ldr	r1, [pc, #12]	@ (8007bc0 <stdio_exit_handler+0x10>)
 8007bb4:	4803      	ldr	r0, [pc, #12]	@ (8007bc4 <stdio_exit_handler+0x14>)
 8007bb6:	f000 b869 	b.w	8007c8c <_fwalk_sglue>
 8007bba:	bf00      	nop
 8007bbc:	20000010 	.word	0x20000010
 8007bc0:	08008701 	.word	0x08008701
 8007bc4:	20000020 	.word	0x20000020

08007bc8 <cleanup_stdio>:
 8007bc8:	6841      	ldr	r1, [r0, #4]
 8007bca:	4b0c      	ldr	r3, [pc, #48]	@ (8007bfc <cleanup_stdio+0x34>)
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	b510      	push	{r4, lr}
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	d001      	beq.n	8007bd8 <cleanup_stdio+0x10>
 8007bd4:	f000 fd94 	bl	8008700 <_fflush_r>
 8007bd8:	68a1      	ldr	r1, [r4, #8]
 8007bda:	4b09      	ldr	r3, [pc, #36]	@ (8007c00 <cleanup_stdio+0x38>)
 8007bdc:	4299      	cmp	r1, r3
 8007bde:	d002      	beq.n	8007be6 <cleanup_stdio+0x1e>
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 fd8d 	bl	8008700 <_fflush_r>
 8007be6:	68e1      	ldr	r1, [r4, #12]
 8007be8:	4b06      	ldr	r3, [pc, #24]	@ (8007c04 <cleanup_stdio+0x3c>)
 8007bea:	4299      	cmp	r1, r3
 8007bec:	d004      	beq.n	8007bf8 <cleanup_stdio+0x30>
 8007bee:	4620      	mov	r0, r4
 8007bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf4:	f000 bd84 	b.w	8008700 <_fflush_r>
 8007bf8:	bd10      	pop	{r4, pc}
 8007bfa:	bf00      	nop
 8007bfc:	2000045c 	.word	0x2000045c
 8007c00:	200004c4 	.word	0x200004c4
 8007c04:	2000052c 	.word	0x2000052c

08007c08 <global_stdio_init.part.0>:
 8007c08:	b510      	push	{r4, lr}
 8007c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c38 <global_stdio_init.part.0+0x30>)
 8007c0c:	4c0b      	ldr	r4, [pc, #44]	@ (8007c3c <global_stdio_init.part.0+0x34>)
 8007c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8007c40 <global_stdio_init.part.0+0x38>)
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	4620      	mov	r0, r4
 8007c14:	2200      	movs	r2, #0
 8007c16:	2104      	movs	r1, #4
 8007c18:	f7ff ff94 	bl	8007b44 <std>
 8007c1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c20:	2201      	movs	r2, #1
 8007c22:	2109      	movs	r1, #9
 8007c24:	f7ff ff8e 	bl	8007b44 <std>
 8007c28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c32:	2112      	movs	r1, #18
 8007c34:	f7ff bf86 	b.w	8007b44 <std>
 8007c38:	20000594 	.word	0x20000594
 8007c3c:	2000045c 	.word	0x2000045c
 8007c40:	08007bb1 	.word	0x08007bb1

08007c44 <__sfp_lock_acquire>:
 8007c44:	4801      	ldr	r0, [pc, #4]	@ (8007c4c <__sfp_lock_acquire+0x8>)
 8007c46:	f000 b90e 	b.w	8007e66 <__retarget_lock_acquire_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	2000059d 	.word	0x2000059d

08007c50 <__sfp_lock_release>:
 8007c50:	4801      	ldr	r0, [pc, #4]	@ (8007c58 <__sfp_lock_release+0x8>)
 8007c52:	f000 b909 	b.w	8007e68 <__retarget_lock_release_recursive>
 8007c56:	bf00      	nop
 8007c58:	2000059d 	.word	0x2000059d

08007c5c <__sinit>:
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	4604      	mov	r4, r0
 8007c60:	f7ff fff0 	bl	8007c44 <__sfp_lock_acquire>
 8007c64:	6a23      	ldr	r3, [r4, #32]
 8007c66:	b11b      	cbz	r3, 8007c70 <__sinit+0x14>
 8007c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c6c:	f7ff bff0 	b.w	8007c50 <__sfp_lock_release>
 8007c70:	4b04      	ldr	r3, [pc, #16]	@ (8007c84 <__sinit+0x28>)
 8007c72:	6223      	str	r3, [r4, #32]
 8007c74:	4b04      	ldr	r3, [pc, #16]	@ (8007c88 <__sinit+0x2c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1f5      	bne.n	8007c68 <__sinit+0xc>
 8007c7c:	f7ff ffc4 	bl	8007c08 <global_stdio_init.part.0>
 8007c80:	e7f2      	b.n	8007c68 <__sinit+0xc>
 8007c82:	bf00      	nop
 8007c84:	08007bc9 	.word	0x08007bc9
 8007c88:	20000594 	.word	0x20000594

08007c8c <_fwalk_sglue>:
 8007c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c90:	4607      	mov	r7, r0
 8007c92:	4688      	mov	r8, r1
 8007c94:	4614      	mov	r4, r2
 8007c96:	2600      	movs	r6, #0
 8007c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8007ca0:	d505      	bpl.n	8007cae <_fwalk_sglue+0x22>
 8007ca2:	6824      	ldr	r4, [r4, #0]
 8007ca4:	2c00      	cmp	r4, #0
 8007ca6:	d1f7      	bne.n	8007c98 <_fwalk_sglue+0xc>
 8007ca8:	4630      	mov	r0, r6
 8007caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cae:	89ab      	ldrh	r3, [r5, #12]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d907      	bls.n	8007cc4 <_fwalk_sglue+0x38>
 8007cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	d003      	beq.n	8007cc4 <_fwalk_sglue+0x38>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	47c0      	blx	r8
 8007cc2:	4306      	orrs	r6, r0
 8007cc4:	3568      	adds	r5, #104	@ 0x68
 8007cc6:	e7e9      	b.n	8007c9c <_fwalk_sglue+0x10>

08007cc8 <iprintf>:
 8007cc8:	b40f      	push	{r0, r1, r2, r3}
 8007cca:	b507      	push	{r0, r1, r2, lr}
 8007ccc:	4906      	ldr	r1, [pc, #24]	@ (8007ce8 <iprintf+0x20>)
 8007cce:	ab04      	add	r3, sp, #16
 8007cd0:	6808      	ldr	r0, [r1, #0]
 8007cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cd6:	6881      	ldr	r1, [r0, #8]
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	f000 f9e9 	bl	80080b0 <_vfiprintf_r>
 8007cde:	b003      	add	sp, #12
 8007ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ce4:	b004      	add	sp, #16
 8007ce6:	4770      	bx	lr
 8007ce8:	2000001c 	.word	0x2000001c

08007cec <__sread>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	460c      	mov	r4, r1
 8007cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf4:	f000 f868 	bl	8007dc8 <_read_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	bfab      	itete	ge
 8007cfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8007d00:	181b      	addge	r3, r3, r0
 8007d02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d06:	bfac      	ite	ge
 8007d08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d0a:	81a3      	strhlt	r3, [r4, #12]
 8007d0c:	bd10      	pop	{r4, pc}

08007d0e <__swrite>:
 8007d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d12:	461f      	mov	r7, r3
 8007d14:	898b      	ldrh	r3, [r1, #12]
 8007d16:	05db      	lsls	r3, r3, #23
 8007d18:	4605      	mov	r5, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	d505      	bpl.n	8007d2c <__swrite+0x1e>
 8007d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d24:	2302      	movs	r3, #2
 8007d26:	2200      	movs	r2, #0
 8007d28:	f000 f83c 	bl	8007da4 <_lseek_r>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	4632      	mov	r2, r6
 8007d3a:	463b      	mov	r3, r7
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d42:	f000 b853 	b.w	8007dec <_write_r>

08007d46 <__sseek>:
 8007d46:	b510      	push	{r4, lr}
 8007d48:	460c      	mov	r4, r1
 8007d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d4e:	f000 f829 	bl	8007da4 <_lseek_r>
 8007d52:	1c43      	adds	r3, r0, #1
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	bf15      	itete	ne
 8007d58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d62:	81a3      	strheq	r3, [r4, #12]
 8007d64:	bf18      	it	ne
 8007d66:	81a3      	strhne	r3, [r4, #12]
 8007d68:	bd10      	pop	{r4, pc}

08007d6a <__sclose>:
 8007d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d6e:	f000 b809 	b.w	8007d84 <_close_r>

08007d72 <memset>:
 8007d72:	4402      	add	r2, r0
 8007d74:	4603      	mov	r3, r0
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d100      	bne.n	8007d7c <memset+0xa>
 8007d7a:	4770      	bx	lr
 8007d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8007d80:	e7f9      	b.n	8007d76 <memset+0x4>
	...

08007d84 <_close_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d06      	ldr	r5, [pc, #24]	@ (8007da0 <_close_r+0x1c>)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	602b      	str	r3, [r5, #0]
 8007d90:	f7f9 ff6c 	bl	8001c6c <_close>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_close_r+0x1a>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_close_r+0x1a>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20000598 	.word	0x20000598

08007da4 <_lseek_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d07      	ldr	r5, [pc, #28]	@ (8007dc4 <_lseek_r+0x20>)
 8007da8:	4604      	mov	r4, r0
 8007daa:	4608      	mov	r0, r1
 8007dac:	4611      	mov	r1, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	602a      	str	r2, [r5, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f7f9 ff81 	bl	8001cba <_lseek>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_lseek_r+0x1e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_lseek_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20000598 	.word	0x20000598

08007dc8 <_read_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d07      	ldr	r5, [pc, #28]	@ (8007de8 <_read_r+0x20>)
 8007dcc:	4604      	mov	r4, r0
 8007dce:	4608      	mov	r0, r1
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	602a      	str	r2, [r5, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f7f9 ff0f 	bl	8001bfa <_read>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_read_r+0x1e>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_read_r+0x1e>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	20000598 	.word	0x20000598

08007dec <_write_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	@ (8007e0c <_write_r+0x20>)
 8007df0:	4604      	mov	r4, r0
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	2200      	movs	r2, #0
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f7f9 ff1a 	bl	8001c34 <_write>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_write_r+0x1e>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_write_r+0x1e>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	20000598 	.word	0x20000598

08007e10 <__errno>:
 8007e10:	4b01      	ldr	r3, [pc, #4]	@ (8007e18 <__errno+0x8>)
 8007e12:	6818      	ldr	r0, [r3, #0]
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	2000001c 	.word	0x2000001c

08007e1c <__libc_init_array>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e54 <__libc_init_array+0x38>)
 8007e20:	4c0d      	ldr	r4, [pc, #52]	@ (8007e58 <__libc_init_array+0x3c>)
 8007e22:	1b64      	subs	r4, r4, r5
 8007e24:	10a4      	asrs	r4, r4, #2
 8007e26:	2600      	movs	r6, #0
 8007e28:	42a6      	cmp	r6, r4
 8007e2a:	d109      	bne.n	8007e40 <__libc_init_array+0x24>
 8007e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e5c <__libc_init_array+0x40>)
 8007e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e60 <__libc_init_array+0x44>)
 8007e30:	f000 fdb6 	bl	80089a0 <_init>
 8007e34:	1b64      	subs	r4, r4, r5
 8007e36:	10a4      	asrs	r4, r4, #2
 8007e38:	2600      	movs	r6, #0
 8007e3a:	42a6      	cmp	r6, r4
 8007e3c:	d105      	bne.n	8007e4a <__libc_init_array+0x2e>
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e44:	4798      	blx	r3
 8007e46:	3601      	adds	r6, #1
 8007e48:	e7ee      	b.n	8007e28 <__libc_init_array+0xc>
 8007e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4e:	4798      	blx	r3
 8007e50:	3601      	adds	r6, #1
 8007e52:	e7f2      	b.n	8007e3a <__libc_init_array+0x1e>
 8007e54:	0800b9d4 	.word	0x0800b9d4
 8007e58:	0800b9d4 	.word	0x0800b9d4
 8007e5c:	0800b9d4 	.word	0x0800b9d4
 8007e60:	0800b9d8 	.word	0x0800b9d8

08007e64 <__retarget_lock_init_recursive>:
 8007e64:	4770      	bx	lr

08007e66 <__retarget_lock_acquire_recursive>:
 8007e66:	4770      	bx	lr

08007e68 <__retarget_lock_release_recursive>:
 8007e68:	4770      	bx	lr
	...

08007e6c <_free_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4605      	mov	r5, r0
 8007e70:	2900      	cmp	r1, #0
 8007e72:	d041      	beq.n	8007ef8 <_free_r+0x8c>
 8007e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e78:	1f0c      	subs	r4, r1, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	bfb8      	it	lt
 8007e7e:	18e4      	addlt	r4, r4, r3
 8007e80:	f000 f8e0 	bl	8008044 <__malloc_lock>
 8007e84:	4a1d      	ldr	r2, [pc, #116]	@ (8007efc <_free_r+0x90>)
 8007e86:	6813      	ldr	r3, [r2, #0]
 8007e88:	b933      	cbnz	r3, 8007e98 <_free_r+0x2c>
 8007e8a:	6063      	str	r3, [r4, #4]
 8007e8c:	6014      	str	r4, [r2, #0]
 8007e8e:	4628      	mov	r0, r5
 8007e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e94:	f000 b8dc 	b.w	8008050 <__malloc_unlock>
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d908      	bls.n	8007eae <_free_r+0x42>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	1821      	adds	r1, r4, r0
 8007ea0:	428b      	cmp	r3, r1
 8007ea2:	bf01      	itttt	eq
 8007ea4:	6819      	ldreq	r1, [r3, #0]
 8007ea6:	685b      	ldreq	r3, [r3, #4]
 8007ea8:	1809      	addeq	r1, r1, r0
 8007eaa:	6021      	streq	r1, [r4, #0]
 8007eac:	e7ed      	b.n	8007e8a <_free_r+0x1e>
 8007eae:	461a      	mov	r2, r3
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	b10b      	cbz	r3, 8007eb8 <_free_r+0x4c>
 8007eb4:	42a3      	cmp	r3, r4
 8007eb6:	d9fa      	bls.n	8007eae <_free_r+0x42>
 8007eb8:	6811      	ldr	r1, [r2, #0]
 8007eba:	1850      	adds	r0, r2, r1
 8007ebc:	42a0      	cmp	r0, r4
 8007ebe:	d10b      	bne.n	8007ed8 <_free_r+0x6c>
 8007ec0:	6820      	ldr	r0, [r4, #0]
 8007ec2:	4401      	add	r1, r0
 8007ec4:	1850      	adds	r0, r2, r1
 8007ec6:	4283      	cmp	r3, r0
 8007ec8:	6011      	str	r1, [r2, #0]
 8007eca:	d1e0      	bne.n	8007e8e <_free_r+0x22>
 8007ecc:	6818      	ldr	r0, [r3, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	6053      	str	r3, [r2, #4]
 8007ed2:	4408      	add	r0, r1
 8007ed4:	6010      	str	r0, [r2, #0]
 8007ed6:	e7da      	b.n	8007e8e <_free_r+0x22>
 8007ed8:	d902      	bls.n	8007ee0 <_free_r+0x74>
 8007eda:	230c      	movs	r3, #12
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	e7d6      	b.n	8007e8e <_free_r+0x22>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	1821      	adds	r1, r4, r0
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf04      	itt	eq
 8007ee8:	6819      	ldreq	r1, [r3, #0]
 8007eea:	685b      	ldreq	r3, [r3, #4]
 8007eec:	6063      	str	r3, [r4, #4]
 8007eee:	bf04      	itt	eq
 8007ef0:	1809      	addeq	r1, r1, r0
 8007ef2:	6021      	streq	r1, [r4, #0]
 8007ef4:	6054      	str	r4, [r2, #4]
 8007ef6:	e7ca      	b.n	8007e8e <_free_r+0x22>
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	bf00      	nop
 8007efc:	200005a4 	.word	0x200005a4

08007f00 <sbrk_aligned>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	4e0f      	ldr	r6, [pc, #60]	@ (8007f40 <sbrk_aligned+0x40>)
 8007f04:	460c      	mov	r4, r1
 8007f06:	6831      	ldr	r1, [r6, #0]
 8007f08:	4605      	mov	r5, r0
 8007f0a:	b911      	cbnz	r1, 8007f12 <sbrk_aligned+0x12>
 8007f0c:	f000 fcb4 	bl	8008878 <_sbrk_r>
 8007f10:	6030      	str	r0, [r6, #0]
 8007f12:	4621      	mov	r1, r4
 8007f14:	4628      	mov	r0, r5
 8007f16:	f000 fcaf 	bl	8008878 <_sbrk_r>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	d103      	bne.n	8007f26 <sbrk_aligned+0x26>
 8007f1e:	f04f 34ff 	mov.w	r4, #4294967295
 8007f22:	4620      	mov	r0, r4
 8007f24:	bd70      	pop	{r4, r5, r6, pc}
 8007f26:	1cc4      	adds	r4, r0, #3
 8007f28:	f024 0403 	bic.w	r4, r4, #3
 8007f2c:	42a0      	cmp	r0, r4
 8007f2e:	d0f8      	beq.n	8007f22 <sbrk_aligned+0x22>
 8007f30:	1a21      	subs	r1, r4, r0
 8007f32:	4628      	mov	r0, r5
 8007f34:	f000 fca0 	bl	8008878 <_sbrk_r>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d1f2      	bne.n	8007f22 <sbrk_aligned+0x22>
 8007f3c:	e7ef      	b.n	8007f1e <sbrk_aligned+0x1e>
 8007f3e:	bf00      	nop
 8007f40:	200005a0 	.word	0x200005a0

08007f44 <_malloc_r>:
 8007f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f48:	1ccd      	adds	r5, r1, #3
 8007f4a:	f025 0503 	bic.w	r5, r5, #3
 8007f4e:	3508      	adds	r5, #8
 8007f50:	2d0c      	cmp	r5, #12
 8007f52:	bf38      	it	cc
 8007f54:	250c      	movcc	r5, #12
 8007f56:	2d00      	cmp	r5, #0
 8007f58:	4606      	mov	r6, r0
 8007f5a:	db01      	blt.n	8007f60 <_malloc_r+0x1c>
 8007f5c:	42a9      	cmp	r1, r5
 8007f5e:	d904      	bls.n	8007f6a <_malloc_r+0x26>
 8007f60:	230c      	movs	r3, #12
 8007f62:	6033      	str	r3, [r6, #0]
 8007f64:	2000      	movs	r0, #0
 8007f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008040 <_malloc_r+0xfc>
 8007f6e:	f000 f869 	bl	8008044 <__malloc_lock>
 8007f72:	f8d8 3000 	ldr.w	r3, [r8]
 8007f76:	461c      	mov	r4, r3
 8007f78:	bb44      	cbnz	r4, 8007fcc <_malloc_r+0x88>
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	f7ff ffbf 	bl	8007f00 <sbrk_aligned>
 8007f82:	1c43      	adds	r3, r0, #1
 8007f84:	4604      	mov	r4, r0
 8007f86:	d158      	bne.n	800803a <_malloc_r+0xf6>
 8007f88:	f8d8 4000 	ldr.w	r4, [r8]
 8007f8c:	4627      	mov	r7, r4
 8007f8e:	2f00      	cmp	r7, #0
 8007f90:	d143      	bne.n	800801a <_malloc_r+0xd6>
 8007f92:	2c00      	cmp	r4, #0
 8007f94:	d04b      	beq.n	800802e <_malloc_r+0xea>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	4639      	mov	r1, r7
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	eb04 0903 	add.w	r9, r4, r3
 8007fa0:	f000 fc6a 	bl	8008878 <_sbrk_r>
 8007fa4:	4581      	cmp	r9, r0
 8007fa6:	d142      	bne.n	800802e <_malloc_r+0xea>
 8007fa8:	6821      	ldr	r1, [r4, #0]
 8007faa:	1a6d      	subs	r5, r5, r1
 8007fac:	4629      	mov	r1, r5
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ffa6 	bl	8007f00 <sbrk_aligned>
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d03a      	beq.n	800802e <_malloc_r+0xea>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	442b      	add	r3, r5
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc2:	685a      	ldr	r2, [r3, #4]
 8007fc4:	bb62      	cbnz	r2, 8008020 <_malloc_r+0xdc>
 8007fc6:	f8c8 7000 	str.w	r7, [r8]
 8007fca:	e00f      	b.n	8007fec <_malloc_r+0xa8>
 8007fcc:	6822      	ldr	r2, [r4, #0]
 8007fce:	1b52      	subs	r2, r2, r5
 8007fd0:	d420      	bmi.n	8008014 <_malloc_r+0xd0>
 8007fd2:	2a0b      	cmp	r2, #11
 8007fd4:	d917      	bls.n	8008006 <_malloc_r+0xc2>
 8007fd6:	1961      	adds	r1, r4, r5
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	6025      	str	r5, [r4, #0]
 8007fdc:	bf18      	it	ne
 8007fde:	6059      	strne	r1, [r3, #4]
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	bf08      	it	eq
 8007fe4:	f8c8 1000 	streq.w	r1, [r8]
 8007fe8:	5162      	str	r2, [r4, r5]
 8007fea:	604b      	str	r3, [r1, #4]
 8007fec:	4630      	mov	r0, r6
 8007fee:	f000 f82f 	bl	8008050 <__malloc_unlock>
 8007ff2:	f104 000b 	add.w	r0, r4, #11
 8007ff6:	1d23      	adds	r3, r4, #4
 8007ff8:	f020 0007 	bic.w	r0, r0, #7
 8007ffc:	1ac2      	subs	r2, r0, r3
 8007ffe:	bf1c      	itt	ne
 8008000:	1a1b      	subne	r3, r3, r0
 8008002:	50a3      	strne	r3, [r4, r2]
 8008004:	e7af      	b.n	8007f66 <_malloc_r+0x22>
 8008006:	6862      	ldr	r2, [r4, #4]
 8008008:	42a3      	cmp	r3, r4
 800800a:	bf0c      	ite	eq
 800800c:	f8c8 2000 	streq.w	r2, [r8]
 8008010:	605a      	strne	r2, [r3, #4]
 8008012:	e7eb      	b.n	8007fec <_malloc_r+0xa8>
 8008014:	4623      	mov	r3, r4
 8008016:	6864      	ldr	r4, [r4, #4]
 8008018:	e7ae      	b.n	8007f78 <_malloc_r+0x34>
 800801a:	463c      	mov	r4, r7
 800801c:	687f      	ldr	r7, [r7, #4]
 800801e:	e7b6      	b.n	8007f8e <_malloc_r+0x4a>
 8008020:	461a      	mov	r2, r3
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	42a3      	cmp	r3, r4
 8008026:	d1fb      	bne.n	8008020 <_malloc_r+0xdc>
 8008028:	2300      	movs	r3, #0
 800802a:	6053      	str	r3, [r2, #4]
 800802c:	e7de      	b.n	8007fec <_malloc_r+0xa8>
 800802e:	230c      	movs	r3, #12
 8008030:	6033      	str	r3, [r6, #0]
 8008032:	4630      	mov	r0, r6
 8008034:	f000 f80c 	bl	8008050 <__malloc_unlock>
 8008038:	e794      	b.n	8007f64 <_malloc_r+0x20>
 800803a:	6005      	str	r5, [r0, #0]
 800803c:	e7d6      	b.n	8007fec <_malloc_r+0xa8>
 800803e:	bf00      	nop
 8008040:	200005a4 	.word	0x200005a4

08008044 <__malloc_lock>:
 8008044:	4801      	ldr	r0, [pc, #4]	@ (800804c <__malloc_lock+0x8>)
 8008046:	f7ff bf0e 	b.w	8007e66 <__retarget_lock_acquire_recursive>
 800804a:	bf00      	nop
 800804c:	2000059c 	.word	0x2000059c

08008050 <__malloc_unlock>:
 8008050:	4801      	ldr	r0, [pc, #4]	@ (8008058 <__malloc_unlock+0x8>)
 8008052:	f7ff bf09 	b.w	8007e68 <__retarget_lock_release_recursive>
 8008056:	bf00      	nop
 8008058:	2000059c 	.word	0x2000059c

0800805c <__sfputc_r>:
 800805c:	6893      	ldr	r3, [r2, #8]
 800805e:	3b01      	subs	r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	b410      	push	{r4}
 8008064:	6093      	str	r3, [r2, #8]
 8008066:	da08      	bge.n	800807a <__sfputc_r+0x1e>
 8008068:	6994      	ldr	r4, [r2, #24]
 800806a:	42a3      	cmp	r3, r4
 800806c:	db01      	blt.n	8008072 <__sfputc_r+0x16>
 800806e:	290a      	cmp	r1, #10
 8008070:	d103      	bne.n	800807a <__sfputc_r+0x1e>
 8008072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008076:	f000 bb6b 	b.w	8008750 <__swbuf_r>
 800807a:	6813      	ldr	r3, [r2, #0]
 800807c:	1c58      	adds	r0, r3, #1
 800807e:	6010      	str	r0, [r2, #0]
 8008080:	7019      	strb	r1, [r3, #0]
 8008082:	4608      	mov	r0, r1
 8008084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008088:	4770      	bx	lr

0800808a <__sfputs_r>:
 800808a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808c:	4606      	mov	r6, r0
 800808e:	460f      	mov	r7, r1
 8008090:	4614      	mov	r4, r2
 8008092:	18d5      	adds	r5, r2, r3
 8008094:	42ac      	cmp	r4, r5
 8008096:	d101      	bne.n	800809c <__sfputs_r+0x12>
 8008098:	2000      	movs	r0, #0
 800809a:	e007      	b.n	80080ac <__sfputs_r+0x22>
 800809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a0:	463a      	mov	r2, r7
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff ffda 	bl	800805c <__sfputc_r>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d1f3      	bne.n	8008094 <__sfputs_r+0xa>
 80080ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080b0 <_vfiprintf_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	460d      	mov	r5, r1
 80080b6:	b09d      	sub	sp, #116	@ 0x74
 80080b8:	4614      	mov	r4, r2
 80080ba:	4698      	mov	r8, r3
 80080bc:	4606      	mov	r6, r0
 80080be:	b118      	cbz	r0, 80080c8 <_vfiprintf_r+0x18>
 80080c0:	6a03      	ldr	r3, [r0, #32]
 80080c2:	b90b      	cbnz	r3, 80080c8 <_vfiprintf_r+0x18>
 80080c4:	f7ff fdca 	bl	8007c5c <__sinit>
 80080c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ca:	07d9      	lsls	r1, r3, #31
 80080cc:	d405      	bmi.n	80080da <_vfiprintf_r+0x2a>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	059a      	lsls	r2, r3, #22
 80080d2:	d402      	bmi.n	80080da <_vfiprintf_r+0x2a>
 80080d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080d6:	f7ff fec6 	bl	8007e66 <__retarget_lock_acquire_recursive>
 80080da:	89ab      	ldrh	r3, [r5, #12]
 80080dc:	071b      	lsls	r3, r3, #28
 80080de:	d501      	bpl.n	80080e4 <_vfiprintf_r+0x34>
 80080e0:	692b      	ldr	r3, [r5, #16]
 80080e2:	b99b      	cbnz	r3, 800810c <_vfiprintf_r+0x5c>
 80080e4:	4629      	mov	r1, r5
 80080e6:	4630      	mov	r0, r6
 80080e8:	f000 fb70 	bl	80087cc <__swsetup_r>
 80080ec:	b170      	cbz	r0, 800810c <_vfiprintf_r+0x5c>
 80080ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080f0:	07dc      	lsls	r4, r3, #31
 80080f2:	d504      	bpl.n	80080fe <_vfiprintf_r+0x4e>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b01d      	add	sp, #116	@ 0x74
 80080fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fe:	89ab      	ldrh	r3, [r5, #12]
 8008100:	0598      	lsls	r0, r3, #22
 8008102:	d4f7      	bmi.n	80080f4 <_vfiprintf_r+0x44>
 8008104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008106:	f7ff feaf 	bl	8007e68 <__retarget_lock_release_recursive>
 800810a:	e7f3      	b.n	80080f4 <_vfiprintf_r+0x44>
 800810c:	2300      	movs	r3, #0
 800810e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008110:	2320      	movs	r3, #32
 8008112:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008116:	f8cd 800c 	str.w	r8, [sp, #12]
 800811a:	2330      	movs	r3, #48	@ 0x30
 800811c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082cc <_vfiprintf_r+0x21c>
 8008120:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008124:	f04f 0901 	mov.w	r9, #1
 8008128:	4623      	mov	r3, r4
 800812a:	469a      	mov	sl, r3
 800812c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008130:	b10a      	cbz	r2, 8008136 <_vfiprintf_r+0x86>
 8008132:	2a25      	cmp	r2, #37	@ 0x25
 8008134:	d1f9      	bne.n	800812a <_vfiprintf_r+0x7a>
 8008136:	ebba 0b04 	subs.w	fp, sl, r4
 800813a:	d00b      	beq.n	8008154 <_vfiprintf_r+0xa4>
 800813c:	465b      	mov	r3, fp
 800813e:	4622      	mov	r2, r4
 8008140:	4629      	mov	r1, r5
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff ffa1 	bl	800808a <__sfputs_r>
 8008148:	3001      	adds	r0, #1
 800814a:	f000 80a7 	beq.w	800829c <_vfiprintf_r+0x1ec>
 800814e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008150:	445a      	add	r2, fp
 8008152:	9209      	str	r2, [sp, #36]	@ 0x24
 8008154:	f89a 3000 	ldrb.w	r3, [sl]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 809f 	beq.w	800829c <_vfiprintf_r+0x1ec>
 800815e:	2300      	movs	r3, #0
 8008160:	f04f 32ff 	mov.w	r2, #4294967295
 8008164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008168:	f10a 0a01 	add.w	sl, sl, #1
 800816c:	9304      	str	r3, [sp, #16]
 800816e:	9307      	str	r3, [sp, #28]
 8008170:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008174:	931a      	str	r3, [sp, #104]	@ 0x68
 8008176:	4654      	mov	r4, sl
 8008178:	2205      	movs	r2, #5
 800817a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817e:	4853      	ldr	r0, [pc, #332]	@ (80082cc <_vfiprintf_r+0x21c>)
 8008180:	f7f8 f82e 	bl	80001e0 <memchr>
 8008184:	9a04      	ldr	r2, [sp, #16]
 8008186:	b9d8      	cbnz	r0, 80081c0 <_vfiprintf_r+0x110>
 8008188:	06d1      	lsls	r1, r2, #27
 800818a:	bf44      	itt	mi
 800818c:	2320      	movmi	r3, #32
 800818e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008192:	0713      	lsls	r3, r2, #28
 8008194:	bf44      	itt	mi
 8008196:	232b      	movmi	r3, #43	@ 0x2b
 8008198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800819c:	f89a 3000 	ldrb.w	r3, [sl]
 80081a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80081a2:	d015      	beq.n	80081d0 <_vfiprintf_r+0x120>
 80081a4:	9a07      	ldr	r2, [sp, #28]
 80081a6:	4654      	mov	r4, sl
 80081a8:	2000      	movs	r0, #0
 80081aa:	f04f 0c0a 	mov.w	ip, #10
 80081ae:	4621      	mov	r1, r4
 80081b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b4:	3b30      	subs	r3, #48	@ 0x30
 80081b6:	2b09      	cmp	r3, #9
 80081b8:	d94b      	bls.n	8008252 <_vfiprintf_r+0x1a2>
 80081ba:	b1b0      	cbz	r0, 80081ea <_vfiprintf_r+0x13a>
 80081bc:	9207      	str	r2, [sp, #28]
 80081be:	e014      	b.n	80081ea <_vfiprintf_r+0x13a>
 80081c0:	eba0 0308 	sub.w	r3, r0, r8
 80081c4:	fa09 f303 	lsl.w	r3, r9, r3
 80081c8:	4313      	orrs	r3, r2
 80081ca:	9304      	str	r3, [sp, #16]
 80081cc:	46a2      	mov	sl, r4
 80081ce:	e7d2      	b.n	8008176 <_vfiprintf_r+0xc6>
 80081d0:	9b03      	ldr	r3, [sp, #12]
 80081d2:	1d19      	adds	r1, r3, #4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	9103      	str	r1, [sp, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bfbb      	ittet	lt
 80081dc:	425b      	neglt	r3, r3
 80081de:	f042 0202 	orrlt.w	r2, r2, #2
 80081e2:	9307      	strge	r3, [sp, #28]
 80081e4:	9307      	strlt	r3, [sp, #28]
 80081e6:	bfb8      	it	lt
 80081e8:	9204      	strlt	r2, [sp, #16]
 80081ea:	7823      	ldrb	r3, [r4, #0]
 80081ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80081ee:	d10a      	bne.n	8008206 <_vfiprintf_r+0x156>
 80081f0:	7863      	ldrb	r3, [r4, #1]
 80081f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80081f4:	d132      	bne.n	800825c <_vfiprintf_r+0x1ac>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9203      	str	r2, [sp, #12]
 80081fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008202:	3402      	adds	r4, #2
 8008204:	9305      	str	r3, [sp, #20]
 8008206:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082dc <_vfiprintf_r+0x22c>
 800820a:	7821      	ldrb	r1, [r4, #0]
 800820c:	2203      	movs	r2, #3
 800820e:	4650      	mov	r0, sl
 8008210:	f7f7 ffe6 	bl	80001e0 <memchr>
 8008214:	b138      	cbz	r0, 8008226 <_vfiprintf_r+0x176>
 8008216:	9b04      	ldr	r3, [sp, #16]
 8008218:	eba0 000a 	sub.w	r0, r0, sl
 800821c:	2240      	movs	r2, #64	@ 0x40
 800821e:	4082      	lsls	r2, r0
 8008220:	4313      	orrs	r3, r2
 8008222:	3401      	adds	r4, #1
 8008224:	9304      	str	r3, [sp, #16]
 8008226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822a:	4829      	ldr	r0, [pc, #164]	@ (80082d0 <_vfiprintf_r+0x220>)
 800822c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008230:	2206      	movs	r2, #6
 8008232:	f7f7 ffd5 	bl	80001e0 <memchr>
 8008236:	2800      	cmp	r0, #0
 8008238:	d03f      	beq.n	80082ba <_vfiprintf_r+0x20a>
 800823a:	4b26      	ldr	r3, [pc, #152]	@ (80082d4 <_vfiprintf_r+0x224>)
 800823c:	bb1b      	cbnz	r3, 8008286 <_vfiprintf_r+0x1d6>
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	3307      	adds	r3, #7
 8008242:	f023 0307 	bic.w	r3, r3, #7
 8008246:	3308      	adds	r3, #8
 8008248:	9303      	str	r3, [sp, #12]
 800824a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800824c:	443b      	add	r3, r7
 800824e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008250:	e76a      	b.n	8008128 <_vfiprintf_r+0x78>
 8008252:	fb0c 3202 	mla	r2, ip, r2, r3
 8008256:	460c      	mov	r4, r1
 8008258:	2001      	movs	r0, #1
 800825a:	e7a8      	b.n	80081ae <_vfiprintf_r+0xfe>
 800825c:	2300      	movs	r3, #0
 800825e:	3401      	adds	r4, #1
 8008260:	9305      	str	r3, [sp, #20]
 8008262:	4619      	mov	r1, r3
 8008264:	f04f 0c0a 	mov.w	ip, #10
 8008268:	4620      	mov	r0, r4
 800826a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800826e:	3a30      	subs	r2, #48	@ 0x30
 8008270:	2a09      	cmp	r2, #9
 8008272:	d903      	bls.n	800827c <_vfiprintf_r+0x1cc>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0c6      	beq.n	8008206 <_vfiprintf_r+0x156>
 8008278:	9105      	str	r1, [sp, #20]
 800827a:	e7c4      	b.n	8008206 <_vfiprintf_r+0x156>
 800827c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008280:	4604      	mov	r4, r0
 8008282:	2301      	movs	r3, #1
 8008284:	e7f0      	b.n	8008268 <_vfiprintf_r+0x1b8>
 8008286:	ab03      	add	r3, sp, #12
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	462a      	mov	r2, r5
 800828c:	4b12      	ldr	r3, [pc, #72]	@ (80082d8 <_vfiprintf_r+0x228>)
 800828e:	a904      	add	r1, sp, #16
 8008290:	4630      	mov	r0, r6
 8008292:	f3af 8000 	nop.w
 8008296:	4607      	mov	r7, r0
 8008298:	1c78      	adds	r0, r7, #1
 800829a:	d1d6      	bne.n	800824a <_vfiprintf_r+0x19a>
 800829c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800829e:	07d9      	lsls	r1, r3, #31
 80082a0:	d405      	bmi.n	80082ae <_vfiprintf_r+0x1fe>
 80082a2:	89ab      	ldrh	r3, [r5, #12]
 80082a4:	059a      	lsls	r2, r3, #22
 80082a6:	d402      	bmi.n	80082ae <_vfiprintf_r+0x1fe>
 80082a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082aa:	f7ff fddd 	bl	8007e68 <__retarget_lock_release_recursive>
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	065b      	lsls	r3, r3, #25
 80082b2:	f53f af1f 	bmi.w	80080f4 <_vfiprintf_r+0x44>
 80082b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082b8:	e71e      	b.n	80080f8 <_vfiprintf_r+0x48>
 80082ba:	ab03      	add	r3, sp, #12
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	462a      	mov	r2, r5
 80082c0:	4b05      	ldr	r3, [pc, #20]	@ (80082d8 <_vfiprintf_r+0x228>)
 80082c2:	a904      	add	r1, sp, #16
 80082c4:	4630      	mov	r0, r6
 80082c6:	f000 f879 	bl	80083bc <_printf_i>
 80082ca:	e7e4      	b.n	8008296 <_vfiprintf_r+0x1e6>
 80082cc:	0800b998 	.word	0x0800b998
 80082d0:	0800b9a2 	.word	0x0800b9a2
 80082d4:	00000000 	.word	0x00000000
 80082d8:	0800808b 	.word	0x0800808b
 80082dc:	0800b99e 	.word	0x0800b99e

080082e0 <_printf_common>:
 80082e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e4:	4616      	mov	r6, r2
 80082e6:	4698      	mov	r8, r3
 80082e8:	688a      	ldr	r2, [r1, #8]
 80082ea:	690b      	ldr	r3, [r1, #16]
 80082ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082f0:	4293      	cmp	r3, r2
 80082f2:	bfb8      	it	lt
 80082f4:	4613      	movlt	r3, r2
 80082f6:	6033      	str	r3, [r6, #0]
 80082f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082fc:	4607      	mov	r7, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	b10a      	cbz	r2, 8008306 <_printf_common+0x26>
 8008302:	3301      	adds	r3, #1
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	0699      	lsls	r1, r3, #26
 800830a:	bf42      	ittt	mi
 800830c:	6833      	ldrmi	r3, [r6, #0]
 800830e:	3302      	addmi	r3, #2
 8008310:	6033      	strmi	r3, [r6, #0]
 8008312:	6825      	ldr	r5, [r4, #0]
 8008314:	f015 0506 	ands.w	r5, r5, #6
 8008318:	d106      	bne.n	8008328 <_printf_common+0x48>
 800831a:	f104 0a19 	add.w	sl, r4, #25
 800831e:	68e3      	ldr	r3, [r4, #12]
 8008320:	6832      	ldr	r2, [r6, #0]
 8008322:	1a9b      	subs	r3, r3, r2
 8008324:	42ab      	cmp	r3, r5
 8008326:	dc26      	bgt.n	8008376 <_printf_common+0x96>
 8008328:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800832c:	6822      	ldr	r2, [r4, #0]
 800832e:	3b00      	subs	r3, #0
 8008330:	bf18      	it	ne
 8008332:	2301      	movne	r3, #1
 8008334:	0692      	lsls	r2, r2, #26
 8008336:	d42b      	bmi.n	8008390 <_printf_common+0xb0>
 8008338:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800833c:	4641      	mov	r1, r8
 800833e:	4638      	mov	r0, r7
 8008340:	47c8      	blx	r9
 8008342:	3001      	adds	r0, #1
 8008344:	d01e      	beq.n	8008384 <_printf_common+0xa4>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	6922      	ldr	r2, [r4, #16]
 800834a:	f003 0306 	and.w	r3, r3, #6
 800834e:	2b04      	cmp	r3, #4
 8008350:	bf02      	ittt	eq
 8008352:	68e5      	ldreq	r5, [r4, #12]
 8008354:	6833      	ldreq	r3, [r6, #0]
 8008356:	1aed      	subeq	r5, r5, r3
 8008358:	68a3      	ldr	r3, [r4, #8]
 800835a:	bf0c      	ite	eq
 800835c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008360:	2500      	movne	r5, #0
 8008362:	4293      	cmp	r3, r2
 8008364:	bfc4      	itt	gt
 8008366:	1a9b      	subgt	r3, r3, r2
 8008368:	18ed      	addgt	r5, r5, r3
 800836a:	2600      	movs	r6, #0
 800836c:	341a      	adds	r4, #26
 800836e:	42b5      	cmp	r5, r6
 8008370:	d11a      	bne.n	80083a8 <_printf_common+0xc8>
 8008372:	2000      	movs	r0, #0
 8008374:	e008      	b.n	8008388 <_printf_common+0xa8>
 8008376:	2301      	movs	r3, #1
 8008378:	4652      	mov	r2, sl
 800837a:	4641      	mov	r1, r8
 800837c:	4638      	mov	r0, r7
 800837e:	47c8      	blx	r9
 8008380:	3001      	adds	r0, #1
 8008382:	d103      	bne.n	800838c <_printf_common+0xac>
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838c:	3501      	adds	r5, #1
 800838e:	e7c6      	b.n	800831e <_printf_common+0x3e>
 8008390:	18e1      	adds	r1, r4, r3
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	2030      	movs	r0, #48	@ 0x30
 8008396:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800839a:	4422      	add	r2, r4
 800839c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083a4:	3302      	adds	r3, #2
 80083a6:	e7c7      	b.n	8008338 <_printf_common+0x58>
 80083a8:	2301      	movs	r3, #1
 80083aa:	4622      	mov	r2, r4
 80083ac:	4641      	mov	r1, r8
 80083ae:	4638      	mov	r0, r7
 80083b0:	47c8      	blx	r9
 80083b2:	3001      	adds	r0, #1
 80083b4:	d0e6      	beq.n	8008384 <_printf_common+0xa4>
 80083b6:	3601      	adds	r6, #1
 80083b8:	e7d9      	b.n	800836e <_printf_common+0x8e>
	...

080083bc <_printf_i>:
 80083bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	7e0f      	ldrb	r7, [r1, #24]
 80083c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083c4:	2f78      	cmp	r7, #120	@ 0x78
 80083c6:	4691      	mov	r9, r2
 80083c8:	4680      	mov	r8, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	469a      	mov	sl, r3
 80083ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083d2:	d807      	bhi.n	80083e4 <_printf_i+0x28>
 80083d4:	2f62      	cmp	r7, #98	@ 0x62
 80083d6:	d80a      	bhi.n	80083ee <_printf_i+0x32>
 80083d8:	2f00      	cmp	r7, #0
 80083da:	f000 80d1 	beq.w	8008580 <_printf_i+0x1c4>
 80083de:	2f58      	cmp	r7, #88	@ 0x58
 80083e0:	f000 80b8 	beq.w	8008554 <_printf_i+0x198>
 80083e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083ec:	e03a      	b.n	8008464 <_printf_i+0xa8>
 80083ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083f2:	2b15      	cmp	r3, #21
 80083f4:	d8f6      	bhi.n	80083e4 <_printf_i+0x28>
 80083f6:	a101      	add	r1, pc, #4	@ (adr r1, 80083fc <_printf_i+0x40>)
 80083f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083fc:	08008455 	.word	0x08008455
 8008400:	08008469 	.word	0x08008469
 8008404:	080083e5 	.word	0x080083e5
 8008408:	080083e5 	.word	0x080083e5
 800840c:	080083e5 	.word	0x080083e5
 8008410:	080083e5 	.word	0x080083e5
 8008414:	08008469 	.word	0x08008469
 8008418:	080083e5 	.word	0x080083e5
 800841c:	080083e5 	.word	0x080083e5
 8008420:	080083e5 	.word	0x080083e5
 8008424:	080083e5 	.word	0x080083e5
 8008428:	08008567 	.word	0x08008567
 800842c:	08008493 	.word	0x08008493
 8008430:	08008521 	.word	0x08008521
 8008434:	080083e5 	.word	0x080083e5
 8008438:	080083e5 	.word	0x080083e5
 800843c:	08008589 	.word	0x08008589
 8008440:	080083e5 	.word	0x080083e5
 8008444:	08008493 	.word	0x08008493
 8008448:	080083e5 	.word	0x080083e5
 800844c:	080083e5 	.word	0x080083e5
 8008450:	08008529 	.word	0x08008529
 8008454:	6833      	ldr	r3, [r6, #0]
 8008456:	1d1a      	adds	r2, r3, #4
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6032      	str	r2, [r6, #0]
 800845c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008460:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008464:	2301      	movs	r3, #1
 8008466:	e09c      	b.n	80085a2 <_printf_i+0x1e6>
 8008468:	6833      	ldr	r3, [r6, #0]
 800846a:	6820      	ldr	r0, [r4, #0]
 800846c:	1d19      	adds	r1, r3, #4
 800846e:	6031      	str	r1, [r6, #0]
 8008470:	0606      	lsls	r6, r0, #24
 8008472:	d501      	bpl.n	8008478 <_printf_i+0xbc>
 8008474:	681d      	ldr	r5, [r3, #0]
 8008476:	e003      	b.n	8008480 <_printf_i+0xc4>
 8008478:	0645      	lsls	r5, r0, #25
 800847a:	d5fb      	bpl.n	8008474 <_printf_i+0xb8>
 800847c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008480:	2d00      	cmp	r5, #0
 8008482:	da03      	bge.n	800848c <_printf_i+0xd0>
 8008484:	232d      	movs	r3, #45	@ 0x2d
 8008486:	426d      	negs	r5, r5
 8008488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800848c:	4858      	ldr	r0, [pc, #352]	@ (80085f0 <_printf_i+0x234>)
 800848e:	230a      	movs	r3, #10
 8008490:	e011      	b.n	80084b6 <_printf_i+0xfa>
 8008492:	6821      	ldr	r1, [r4, #0]
 8008494:	6833      	ldr	r3, [r6, #0]
 8008496:	0608      	lsls	r0, r1, #24
 8008498:	f853 5b04 	ldr.w	r5, [r3], #4
 800849c:	d402      	bmi.n	80084a4 <_printf_i+0xe8>
 800849e:	0649      	lsls	r1, r1, #25
 80084a0:	bf48      	it	mi
 80084a2:	b2ad      	uxthmi	r5, r5
 80084a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80084a6:	4852      	ldr	r0, [pc, #328]	@ (80085f0 <_printf_i+0x234>)
 80084a8:	6033      	str	r3, [r6, #0]
 80084aa:	bf14      	ite	ne
 80084ac:	230a      	movne	r3, #10
 80084ae:	2308      	moveq	r3, #8
 80084b0:	2100      	movs	r1, #0
 80084b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084b6:	6866      	ldr	r6, [r4, #4]
 80084b8:	60a6      	str	r6, [r4, #8]
 80084ba:	2e00      	cmp	r6, #0
 80084bc:	db05      	blt.n	80084ca <_printf_i+0x10e>
 80084be:	6821      	ldr	r1, [r4, #0]
 80084c0:	432e      	orrs	r6, r5
 80084c2:	f021 0104 	bic.w	r1, r1, #4
 80084c6:	6021      	str	r1, [r4, #0]
 80084c8:	d04b      	beq.n	8008562 <_printf_i+0x1a6>
 80084ca:	4616      	mov	r6, r2
 80084cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80084d0:	fb03 5711 	mls	r7, r3, r1, r5
 80084d4:	5dc7      	ldrb	r7, [r0, r7]
 80084d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084da:	462f      	mov	r7, r5
 80084dc:	42bb      	cmp	r3, r7
 80084de:	460d      	mov	r5, r1
 80084e0:	d9f4      	bls.n	80084cc <_printf_i+0x110>
 80084e2:	2b08      	cmp	r3, #8
 80084e4:	d10b      	bne.n	80084fe <_printf_i+0x142>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	07df      	lsls	r7, r3, #31
 80084ea:	d508      	bpl.n	80084fe <_printf_i+0x142>
 80084ec:	6923      	ldr	r3, [r4, #16]
 80084ee:	6861      	ldr	r1, [r4, #4]
 80084f0:	4299      	cmp	r1, r3
 80084f2:	bfde      	ittt	le
 80084f4:	2330      	movle	r3, #48	@ 0x30
 80084f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084fe:	1b92      	subs	r2, r2, r6
 8008500:	6122      	str	r2, [r4, #16]
 8008502:	f8cd a000 	str.w	sl, [sp]
 8008506:	464b      	mov	r3, r9
 8008508:	aa03      	add	r2, sp, #12
 800850a:	4621      	mov	r1, r4
 800850c:	4640      	mov	r0, r8
 800850e:	f7ff fee7 	bl	80082e0 <_printf_common>
 8008512:	3001      	adds	r0, #1
 8008514:	d14a      	bne.n	80085ac <_printf_i+0x1f0>
 8008516:	f04f 30ff 	mov.w	r0, #4294967295
 800851a:	b004      	add	sp, #16
 800851c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	f043 0320 	orr.w	r3, r3, #32
 8008526:	6023      	str	r3, [r4, #0]
 8008528:	4832      	ldr	r0, [pc, #200]	@ (80085f4 <_printf_i+0x238>)
 800852a:	2778      	movs	r7, #120	@ 0x78
 800852c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	6831      	ldr	r1, [r6, #0]
 8008534:	061f      	lsls	r7, r3, #24
 8008536:	f851 5b04 	ldr.w	r5, [r1], #4
 800853a:	d402      	bmi.n	8008542 <_printf_i+0x186>
 800853c:	065f      	lsls	r7, r3, #25
 800853e:	bf48      	it	mi
 8008540:	b2ad      	uxthmi	r5, r5
 8008542:	6031      	str	r1, [r6, #0]
 8008544:	07d9      	lsls	r1, r3, #31
 8008546:	bf44      	itt	mi
 8008548:	f043 0320 	orrmi.w	r3, r3, #32
 800854c:	6023      	strmi	r3, [r4, #0]
 800854e:	b11d      	cbz	r5, 8008558 <_printf_i+0x19c>
 8008550:	2310      	movs	r3, #16
 8008552:	e7ad      	b.n	80084b0 <_printf_i+0xf4>
 8008554:	4826      	ldr	r0, [pc, #152]	@ (80085f0 <_printf_i+0x234>)
 8008556:	e7e9      	b.n	800852c <_printf_i+0x170>
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	f023 0320 	bic.w	r3, r3, #32
 800855e:	6023      	str	r3, [r4, #0]
 8008560:	e7f6      	b.n	8008550 <_printf_i+0x194>
 8008562:	4616      	mov	r6, r2
 8008564:	e7bd      	b.n	80084e2 <_printf_i+0x126>
 8008566:	6833      	ldr	r3, [r6, #0]
 8008568:	6825      	ldr	r5, [r4, #0]
 800856a:	6961      	ldr	r1, [r4, #20]
 800856c:	1d18      	adds	r0, r3, #4
 800856e:	6030      	str	r0, [r6, #0]
 8008570:	062e      	lsls	r6, r5, #24
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	d501      	bpl.n	800857a <_printf_i+0x1be>
 8008576:	6019      	str	r1, [r3, #0]
 8008578:	e002      	b.n	8008580 <_printf_i+0x1c4>
 800857a:	0668      	lsls	r0, r5, #25
 800857c:	d5fb      	bpl.n	8008576 <_printf_i+0x1ba>
 800857e:	8019      	strh	r1, [r3, #0]
 8008580:	2300      	movs	r3, #0
 8008582:	6123      	str	r3, [r4, #16]
 8008584:	4616      	mov	r6, r2
 8008586:	e7bc      	b.n	8008502 <_printf_i+0x146>
 8008588:	6833      	ldr	r3, [r6, #0]
 800858a:	1d1a      	adds	r2, r3, #4
 800858c:	6032      	str	r2, [r6, #0]
 800858e:	681e      	ldr	r6, [r3, #0]
 8008590:	6862      	ldr	r2, [r4, #4]
 8008592:	2100      	movs	r1, #0
 8008594:	4630      	mov	r0, r6
 8008596:	f7f7 fe23 	bl	80001e0 <memchr>
 800859a:	b108      	cbz	r0, 80085a0 <_printf_i+0x1e4>
 800859c:	1b80      	subs	r0, r0, r6
 800859e:	6060      	str	r0, [r4, #4]
 80085a0:	6863      	ldr	r3, [r4, #4]
 80085a2:	6123      	str	r3, [r4, #16]
 80085a4:	2300      	movs	r3, #0
 80085a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085aa:	e7aa      	b.n	8008502 <_printf_i+0x146>
 80085ac:	6923      	ldr	r3, [r4, #16]
 80085ae:	4632      	mov	r2, r6
 80085b0:	4649      	mov	r1, r9
 80085b2:	4640      	mov	r0, r8
 80085b4:	47d0      	blx	sl
 80085b6:	3001      	adds	r0, #1
 80085b8:	d0ad      	beq.n	8008516 <_printf_i+0x15a>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	079b      	lsls	r3, r3, #30
 80085be:	d413      	bmi.n	80085e8 <_printf_i+0x22c>
 80085c0:	68e0      	ldr	r0, [r4, #12]
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	4298      	cmp	r0, r3
 80085c6:	bfb8      	it	lt
 80085c8:	4618      	movlt	r0, r3
 80085ca:	e7a6      	b.n	800851a <_printf_i+0x15e>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4632      	mov	r2, r6
 80085d0:	4649      	mov	r1, r9
 80085d2:	4640      	mov	r0, r8
 80085d4:	47d0      	blx	sl
 80085d6:	3001      	adds	r0, #1
 80085d8:	d09d      	beq.n	8008516 <_printf_i+0x15a>
 80085da:	3501      	adds	r5, #1
 80085dc:	68e3      	ldr	r3, [r4, #12]
 80085de:	9903      	ldr	r1, [sp, #12]
 80085e0:	1a5b      	subs	r3, r3, r1
 80085e2:	42ab      	cmp	r3, r5
 80085e4:	dcf2      	bgt.n	80085cc <_printf_i+0x210>
 80085e6:	e7eb      	b.n	80085c0 <_printf_i+0x204>
 80085e8:	2500      	movs	r5, #0
 80085ea:	f104 0619 	add.w	r6, r4, #25
 80085ee:	e7f5      	b.n	80085dc <_printf_i+0x220>
 80085f0:	0800b9a9 	.word	0x0800b9a9
 80085f4:	0800b9ba 	.word	0x0800b9ba

080085f8 <__sflush_r>:
 80085f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	0716      	lsls	r6, r2, #28
 8008602:	4605      	mov	r5, r0
 8008604:	460c      	mov	r4, r1
 8008606:	d454      	bmi.n	80086b2 <__sflush_r+0xba>
 8008608:	684b      	ldr	r3, [r1, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	dc02      	bgt.n	8008614 <__sflush_r+0x1c>
 800860e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	dd48      	ble.n	80086a6 <__sflush_r+0xae>
 8008614:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008616:	2e00      	cmp	r6, #0
 8008618:	d045      	beq.n	80086a6 <__sflush_r+0xae>
 800861a:	2300      	movs	r3, #0
 800861c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008620:	682f      	ldr	r7, [r5, #0]
 8008622:	6a21      	ldr	r1, [r4, #32]
 8008624:	602b      	str	r3, [r5, #0]
 8008626:	d030      	beq.n	800868a <__sflush_r+0x92>
 8008628:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	0759      	lsls	r1, r3, #29
 800862e:	d505      	bpl.n	800863c <__sflush_r+0x44>
 8008630:	6863      	ldr	r3, [r4, #4]
 8008632:	1ad2      	subs	r2, r2, r3
 8008634:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008636:	b10b      	cbz	r3, 800863c <__sflush_r+0x44>
 8008638:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800863a:	1ad2      	subs	r2, r2, r3
 800863c:	2300      	movs	r3, #0
 800863e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008640:	6a21      	ldr	r1, [r4, #32]
 8008642:	4628      	mov	r0, r5
 8008644:	47b0      	blx	r6
 8008646:	1c43      	adds	r3, r0, #1
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	d106      	bne.n	800865a <__sflush_r+0x62>
 800864c:	6829      	ldr	r1, [r5, #0]
 800864e:	291d      	cmp	r1, #29
 8008650:	d82b      	bhi.n	80086aa <__sflush_r+0xb2>
 8008652:	4a2a      	ldr	r2, [pc, #168]	@ (80086fc <__sflush_r+0x104>)
 8008654:	40ca      	lsrs	r2, r1
 8008656:	07d6      	lsls	r6, r2, #31
 8008658:	d527      	bpl.n	80086aa <__sflush_r+0xb2>
 800865a:	2200      	movs	r2, #0
 800865c:	6062      	str	r2, [r4, #4]
 800865e:	04d9      	lsls	r1, r3, #19
 8008660:	6922      	ldr	r2, [r4, #16]
 8008662:	6022      	str	r2, [r4, #0]
 8008664:	d504      	bpl.n	8008670 <__sflush_r+0x78>
 8008666:	1c42      	adds	r2, r0, #1
 8008668:	d101      	bne.n	800866e <__sflush_r+0x76>
 800866a:	682b      	ldr	r3, [r5, #0]
 800866c:	b903      	cbnz	r3, 8008670 <__sflush_r+0x78>
 800866e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008672:	602f      	str	r7, [r5, #0]
 8008674:	b1b9      	cbz	r1, 80086a6 <__sflush_r+0xae>
 8008676:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800867a:	4299      	cmp	r1, r3
 800867c:	d002      	beq.n	8008684 <__sflush_r+0x8c>
 800867e:	4628      	mov	r0, r5
 8008680:	f7ff fbf4 	bl	8007e6c <_free_r>
 8008684:	2300      	movs	r3, #0
 8008686:	6363      	str	r3, [r4, #52]	@ 0x34
 8008688:	e00d      	b.n	80086a6 <__sflush_r+0xae>
 800868a:	2301      	movs	r3, #1
 800868c:	4628      	mov	r0, r5
 800868e:	47b0      	blx	r6
 8008690:	4602      	mov	r2, r0
 8008692:	1c50      	adds	r0, r2, #1
 8008694:	d1c9      	bne.n	800862a <__sflush_r+0x32>
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0c6      	beq.n	800862a <__sflush_r+0x32>
 800869c:	2b1d      	cmp	r3, #29
 800869e:	d001      	beq.n	80086a4 <__sflush_r+0xac>
 80086a0:	2b16      	cmp	r3, #22
 80086a2:	d11e      	bne.n	80086e2 <__sflush_r+0xea>
 80086a4:	602f      	str	r7, [r5, #0]
 80086a6:	2000      	movs	r0, #0
 80086a8:	e022      	b.n	80086f0 <__sflush_r+0xf8>
 80086aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ae:	b21b      	sxth	r3, r3
 80086b0:	e01b      	b.n	80086ea <__sflush_r+0xf2>
 80086b2:	690f      	ldr	r7, [r1, #16]
 80086b4:	2f00      	cmp	r7, #0
 80086b6:	d0f6      	beq.n	80086a6 <__sflush_r+0xae>
 80086b8:	0793      	lsls	r3, r2, #30
 80086ba:	680e      	ldr	r6, [r1, #0]
 80086bc:	bf08      	it	eq
 80086be:	694b      	ldreq	r3, [r1, #20]
 80086c0:	600f      	str	r7, [r1, #0]
 80086c2:	bf18      	it	ne
 80086c4:	2300      	movne	r3, #0
 80086c6:	eba6 0807 	sub.w	r8, r6, r7
 80086ca:	608b      	str	r3, [r1, #8]
 80086cc:	f1b8 0f00 	cmp.w	r8, #0
 80086d0:	dde9      	ble.n	80086a6 <__sflush_r+0xae>
 80086d2:	6a21      	ldr	r1, [r4, #32]
 80086d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086d6:	4643      	mov	r3, r8
 80086d8:	463a      	mov	r2, r7
 80086da:	4628      	mov	r0, r5
 80086dc:	47b0      	blx	r6
 80086de:	2800      	cmp	r0, #0
 80086e0:	dc08      	bgt.n	80086f4 <__sflush_r+0xfc>
 80086e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086ea:	81a3      	strh	r3, [r4, #12]
 80086ec:	f04f 30ff 	mov.w	r0, #4294967295
 80086f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f4:	4407      	add	r7, r0
 80086f6:	eba8 0800 	sub.w	r8, r8, r0
 80086fa:	e7e7      	b.n	80086cc <__sflush_r+0xd4>
 80086fc:	20400001 	.word	0x20400001

08008700 <_fflush_r>:
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	690b      	ldr	r3, [r1, #16]
 8008704:	4605      	mov	r5, r0
 8008706:	460c      	mov	r4, r1
 8008708:	b913      	cbnz	r3, 8008710 <_fflush_r+0x10>
 800870a:	2500      	movs	r5, #0
 800870c:	4628      	mov	r0, r5
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	b118      	cbz	r0, 800871a <_fflush_r+0x1a>
 8008712:	6a03      	ldr	r3, [r0, #32]
 8008714:	b90b      	cbnz	r3, 800871a <_fflush_r+0x1a>
 8008716:	f7ff faa1 	bl	8007c5c <__sinit>
 800871a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0f3      	beq.n	800870a <_fflush_r+0xa>
 8008722:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008724:	07d0      	lsls	r0, r2, #31
 8008726:	d404      	bmi.n	8008732 <_fflush_r+0x32>
 8008728:	0599      	lsls	r1, r3, #22
 800872a:	d402      	bmi.n	8008732 <_fflush_r+0x32>
 800872c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800872e:	f7ff fb9a 	bl	8007e66 <__retarget_lock_acquire_recursive>
 8008732:	4628      	mov	r0, r5
 8008734:	4621      	mov	r1, r4
 8008736:	f7ff ff5f 	bl	80085f8 <__sflush_r>
 800873a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800873c:	07da      	lsls	r2, r3, #31
 800873e:	4605      	mov	r5, r0
 8008740:	d4e4      	bmi.n	800870c <_fflush_r+0xc>
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	059b      	lsls	r3, r3, #22
 8008746:	d4e1      	bmi.n	800870c <_fflush_r+0xc>
 8008748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800874a:	f7ff fb8d 	bl	8007e68 <__retarget_lock_release_recursive>
 800874e:	e7dd      	b.n	800870c <_fflush_r+0xc>

08008750 <__swbuf_r>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	460e      	mov	r6, r1
 8008754:	4614      	mov	r4, r2
 8008756:	4605      	mov	r5, r0
 8008758:	b118      	cbz	r0, 8008762 <__swbuf_r+0x12>
 800875a:	6a03      	ldr	r3, [r0, #32]
 800875c:	b90b      	cbnz	r3, 8008762 <__swbuf_r+0x12>
 800875e:	f7ff fa7d 	bl	8007c5c <__sinit>
 8008762:	69a3      	ldr	r3, [r4, #24]
 8008764:	60a3      	str	r3, [r4, #8]
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	071a      	lsls	r2, r3, #28
 800876a:	d501      	bpl.n	8008770 <__swbuf_r+0x20>
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	b943      	cbnz	r3, 8008782 <__swbuf_r+0x32>
 8008770:	4621      	mov	r1, r4
 8008772:	4628      	mov	r0, r5
 8008774:	f000 f82a 	bl	80087cc <__swsetup_r>
 8008778:	b118      	cbz	r0, 8008782 <__swbuf_r+0x32>
 800877a:	f04f 37ff 	mov.w	r7, #4294967295
 800877e:	4638      	mov	r0, r7
 8008780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	6922      	ldr	r2, [r4, #16]
 8008786:	1a98      	subs	r0, r3, r2
 8008788:	6963      	ldr	r3, [r4, #20]
 800878a:	b2f6      	uxtb	r6, r6
 800878c:	4283      	cmp	r3, r0
 800878e:	4637      	mov	r7, r6
 8008790:	dc05      	bgt.n	800879e <__swbuf_r+0x4e>
 8008792:	4621      	mov	r1, r4
 8008794:	4628      	mov	r0, r5
 8008796:	f7ff ffb3 	bl	8008700 <_fflush_r>
 800879a:	2800      	cmp	r0, #0
 800879c:	d1ed      	bne.n	800877a <__swbuf_r+0x2a>
 800879e:	68a3      	ldr	r3, [r4, #8]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	60a3      	str	r3, [r4, #8]
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	6022      	str	r2, [r4, #0]
 80087aa:	701e      	strb	r6, [r3, #0]
 80087ac:	6962      	ldr	r2, [r4, #20]
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d004      	beq.n	80087be <__swbuf_r+0x6e>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	07db      	lsls	r3, r3, #31
 80087b8:	d5e1      	bpl.n	800877e <__swbuf_r+0x2e>
 80087ba:	2e0a      	cmp	r6, #10
 80087bc:	d1df      	bne.n	800877e <__swbuf_r+0x2e>
 80087be:	4621      	mov	r1, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	f7ff ff9d 	bl	8008700 <_fflush_r>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d0d9      	beq.n	800877e <__swbuf_r+0x2e>
 80087ca:	e7d6      	b.n	800877a <__swbuf_r+0x2a>

080087cc <__swsetup_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4b29      	ldr	r3, [pc, #164]	@ (8008874 <__swsetup_r+0xa8>)
 80087d0:	4605      	mov	r5, r0
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	460c      	mov	r4, r1
 80087d6:	b118      	cbz	r0, 80087e0 <__swsetup_r+0x14>
 80087d8:	6a03      	ldr	r3, [r0, #32]
 80087da:	b90b      	cbnz	r3, 80087e0 <__swsetup_r+0x14>
 80087dc:	f7ff fa3e 	bl	8007c5c <__sinit>
 80087e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e4:	0719      	lsls	r1, r3, #28
 80087e6:	d422      	bmi.n	800882e <__swsetup_r+0x62>
 80087e8:	06da      	lsls	r2, r3, #27
 80087ea:	d407      	bmi.n	80087fc <__swsetup_r+0x30>
 80087ec:	2209      	movs	r2, #9
 80087ee:	602a      	str	r2, [r5, #0]
 80087f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295
 80087fa:	e033      	b.n	8008864 <__swsetup_r+0x98>
 80087fc:	0758      	lsls	r0, r3, #29
 80087fe:	d512      	bpl.n	8008826 <__swsetup_r+0x5a>
 8008800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008802:	b141      	cbz	r1, 8008816 <__swsetup_r+0x4a>
 8008804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008808:	4299      	cmp	r1, r3
 800880a:	d002      	beq.n	8008812 <__swsetup_r+0x46>
 800880c:	4628      	mov	r0, r5
 800880e:	f7ff fb2d 	bl	8007e6c <_free_r>
 8008812:	2300      	movs	r3, #0
 8008814:	6363      	str	r3, [r4, #52]	@ 0x34
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	2300      	movs	r3, #0
 8008820:	6063      	str	r3, [r4, #4]
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	f043 0308 	orr.w	r3, r3, #8
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	6923      	ldr	r3, [r4, #16]
 8008830:	b94b      	cbnz	r3, 8008846 <__swsetup_r+0x7a>
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800883c:	d003      	beq.n	8008846 <__swsetup_r+0x7a>
 800883e:	4621      	mov	r1, r4
 8008840:	4628      	mov	r0, r5
 8008842:	f000 f84f 	bl	80088e4 <__smakebuf_r>
 8008846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884a:	f013 0201 	ands.w	r2, r3, #1
 800884e:	d00a      	beq.n	8008866 <__swsetup_r+0x9a>
 8008850:	2200      	movs	r2, #0
 8008852:	60a2      	str	r2, [r4, #8]
 8008854:	6962      	ldr	r2, [r4, #20]
 8008856:	4252      	negs	r2, r2
 8008858:	61a2      	str	r2, [r4, #24]
 800885a:	6922      	ldr	r2, [r4, #16]
 800885c:	b942      	cbnz	r2, 8008870 <__swsetup_r+0xa4>
 800885e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008862:	d1c5      	bne.n	80087f0 <__swsetup_r+0x24>
 8008864:	bd38      	pop	{r3, r4, r5, pc}
 8008866:	0799      	lsls	r1, r3, #30
 8008868:	bf58      	it	pl
 800886a:	6962      	ldrpl	r2, [r4, #20]
 800886c:	60a2      	str	r2, [r4, #8]
 800886e:	e7f4      	b.n	800885a <__swsetup_r+0x8e>
 8008870:	2000      	movs	r0, #0
 8008872:	e7f7      	b.n	8008864 <__swsetup_r+0x98>
 8008874:	2000001c 	.word	0x2000001c

08008878 <_sbrk_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d06      	ldr	r5, [pc, #24]	@ (8008894 <_sbrk_r+0x1c>)
 800887c:	2300      	movs	r3, #0
 800887e:	4604      	mov	r4, r0
 8008880:	4608      	mov	r0, r1
 8008882:	602b      	str	r3, [r5, #0]
 8008884:	f7f9 fa26 	bl	8001cd4 <_sbrk>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_sbrk_r+0x1a>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_sbrk_r+0x1a>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	20000598 	.word	0x20000598

08008898 <__swhatbuf_r>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	460c      	mov	r4, r1
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	2900      	cmp	r1, #0
 80088a2:	b096      	sub	sp, #88	@ 0x58
 80088a4:	4615      	mov	r5, r2
 80088a6:	461e      	mov	r6, r3
 80088a8:	da0d      	bge.n	80088c6 <__swhatbuf_r+0x2e>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088b0:	f04f 0100 	mov.w	r1, #0
 80088b4:	bf14      	ite	ne
 80088b6:	2340      	movne	r3, #64	@ 0x40
 80088b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088bc:	2000      	movs	r0, #0
 80088be:	6031      	str	r1, [r6, #0]
 80088c0:	602b      	str	r3, [r5, #0]
 80088c2:	b016      	add	sp, #88	@ 0x58
 80088c4:	bd70      	pop	{r4, r5, r6, pc}
 80088c6:	466a      	mov	r2, sp
 80088c8:	f000 f848 	bl	800895c <_fstat_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	dbec      	blt.n	80088aa <__swhatbuf_r+0x12>
 80088d0:	9901      	ldr	r1, [sp, #4]
 80088d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088da:	4259      	negs	r1, r3
 80088dc:	4159      	adcs	r1, r3
 80088de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088e2:	e7eb      	b.n	80088bc <__swhatbuf_r+0x24>

080088e4 <__smakebuf_r>:
 80088e4:	898b      	ldrh	r3, [r1, #12]
 80088e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088e8:	079d      	lsls	r5, r3, #30
 80088ea:	4606      	mov	r6, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	d507      	bpl.n	8008900 <__smakebuf_r+0x1c>
 80088f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	2301      	movs	r3, #1
 80088fa:	6163      	str	r3, [r4, #20]
 80088fc:	b003      	add	sp, #12
 80088fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008900:	ab01      	add	r3, sp, #4
 8008902:	466a      	mov	r2, sp
 8008904:	f7ff ffc8 	bl	8008898 <__swhatbuf_r>
 8008908:	9f00      	ldr	r7, [sp, #0]
 800890a:	4605      	mov	r5, r0
 800890c:	4639      	mov	r1, r7
 800890e:	4630      	mov	r0, r6
 8008910:	f7ff fb18 	bl	8007f44 <_malloc_r>
 8008914:	b948      	cbnz	r0, 800892a <__smakebuf_r+0x46>
 8008916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891a:	059a      	lsls	r2, r3, #22
 800891c:	d4ee      	bmi.n	80088fc <__smakebuf_r+0x18>
 800891e:	f023 0303 	bic.w	r3, r3, #3
 8008922:	f043 0302 	orr.w	r3, r3, #2
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	e7e2      	b.n	80088f0 <__smakebuf_r+0xc>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	6020      	str	r0, [r4, #0]
 800892e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008932:	81a3      	strh	r3, [r4, #12]
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800893a:	b15b      	cbz	r3, 8008954 <__smakebuf_r+0x70>
 800893c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008940:	4630      	mov	r0, r6
 8008942:	f000 f81d 	bl	8008980 <_isatty_r>
 8008946:	b128      	cbz	r0, 8008954 <__smakebuf_r+0x70>
 8008948:	89a3      	ldrh	r3, [r4, #12]
 800894a:	f023 0303 	bic.w	r3, r3, #3
 800894e:	f043 0301 	orr.w	r3, r3, #1
 8008952:	81a3      	strh	r3, [r4, #12]
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	431d      	orrs	r5, r3
 8008958:	81a5      	strh	r5, [r4, #12]
 800895a:	e7cf      	b.n	80088fc <__smakebuf_r+0x18>

0800895c <_fstat_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	@ (800897c <_fstat_r+0x20>)
 8008960:	2300      	movs	r3, #0
 8008962:	4604      	mov	r4, r0
 8008964:	4608      	mov	r0, r1
 8008966:	4611      	mov	r1, r2
 8008968:	602b      	str	r3, [r5, #0]
 800896a:	f7f9 f98b 	bl	8001c84 <_fstat>
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d102      	bne.n	8008978 <_fstat_r+0x1c>
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	b103      	cbz	r3, 8008978 <_fstat_r+0x1c>
 8008976:	6023      	str	r3, [r4, #0]
 8008978:	bd38      	pop	{r3, r4, r5, pc}
 800897a:	bf00      	nop
 800897c:	20000598 	.word	0x20000598

08008980 <_isatty_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d06      	ldr	r5, [pc, #24]	@ (800899c <_isatty_r+0x1c>)
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	602b      	str	r3, [r5, #0]
 800898c:	f7f9 f98a 	bl	8001ca4 <_isatty>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_isatty_r+0x1a>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_isatty_r+0x1a>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	20000598 	.word	0x20000598

080089a0 <_init>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	bf00      	nop
 80089a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a6:	bc08      	pop	{r3}
 80089a8:	469e      	mov	lr, r3
 80089aa:	4770      	bx	lr

080089ac <_fini>:
 80089ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ae:	bf00      	nop
 80089b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b2:	bc08      	pop	{r3}
 80089b4:	469e      	mov	lr, r3
 80089b6:	4770      	bx	lr
