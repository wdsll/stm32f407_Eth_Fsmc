
DMM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003354  08008460  08008460  00009460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7b4  0800b7b4  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b7b4  0800b7b4  0000c7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7bc  0800b7bc  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7bc  0800b7bc  0000c7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7c0  0800b7c0  0000c7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b7c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          000005d4  200001d8  200001d8  0000d1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131a2  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003172  00000000  00000000  000203aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00023520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b98  00000000  00000000  00024458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247d3  00000000  00000000  00024ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013654  00000000  00000000  000497c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1702  00000000  00000000  0005ce17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e519  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fa8  00000000  00000000  0012e55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00133504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008444 	.word	0x08008444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008444 	.word	0x08008444

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_AD7190_SPI_Init>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 该函数被HAL库内部调用
*/
void MX_AD7190_SPI_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
  
  GPIO_InitTypeDef GPIO_InitStruct;
  /* 使能SPI外设以及SPI引脚时钟 */
  AD7190_SPIx_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd4 <MX_AD7190_SPI_Init+0x100>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	4a3c      	ldr	r2, [pc, #240]	@ (8000fd4 <MX_AD7190_SPI_Init+0x100>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eea:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd4 <MX_AD7190_SPI_Init+0x100>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  AD7190_GPIO_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b36      	ldr	r3, [pc, #216]	@ (8000fd4 <MX_AD7190_SPI_Init+0x100>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a35      	ldr	r2, [pc, #212]	@ (8000fd4 <MX_AD7190_SPI_Init+0x100>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b33      	ldr	r3, [pc, #204]	@ (8000fd4 <MX_AD7190_SPI_Init+0x100>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  /**SPI2 GPIO Configuration    
  PB13     ------> SPI2_SCK
  PB14     ------> SPI2_MISO
  PB15     ------> SPI2_MOSI 
  */    
  GPIO_InitStruct.Pin = AD7190_SCK_Pin;
 8000f12:	2308      	movs	r3, #8
 8000f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f22:	2305      	movs	r3, #5
 8000f24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD7190_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	482a      	ldr	r0, [pc, #168]	@ (8000fd8 <MX_AD7190_SPI_Init+0x104>)
 8000f2e:	f001 ff91 	bl	8002e54 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = AD7190_MISO_Pin|AD7190_MOSI_Pin;
 8000f32:	2330      	movs	r3, #48	@ 0x30
 8000f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f42:	2305      	movs	r3, #5
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD7190_MISO_GPIO_Port, &GPIO_InitStruct);
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4822      	ldr	r0, [pc, #136]	@ (8000fd8 <MX_AD7190_SPI_Init+0x104>)
 8000f4e:	f001 ff81 	bl	8002e54 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = AD7190_CS_Pin;
 8000f52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AD7190_CS_GPIO_Port, &GPIO_InitStruct);  
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	481c      	ldr	r0, [pc, #112]	@ (8000fd8 <MX_AD7190_SPI_Init+0x104>)
 8000f68:	f001 ff74 	bl	8002e54 <HAL_GPIO_Init>

  /* SPI外设配置 */
  hspi_AD7190.Instance = AD7190_SPIx;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <MX_AD7190_SPI_Init+0x10c>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi_AD7190.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000f74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f78:	605a      	str	r2, [r3, #4]
  hspi_AD7190.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hspi_AD7190.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hspi_AD7190.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	611a      	str	r2, [r3, #16]
  hspi_AD7190.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	615a      	str	r2, [r3, #20]
  hspi_AD7190.Init.NSS = SPI_NSS_SOFT;
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f98:	619a      	str	r2, [r3, #24]
  hspi_AD7190.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	61da      	str	r2, [r3, #28]
  hspi_AD7190.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  hspi_AD7190.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi_AD7190.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi_AD7190.Init.CRCPolynomial = 7;
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_SPI_Init(&hspi_AD7190);
 8000fb8:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <MX_AD7190_SPI_Init+0x108>)
 8000fba:	f002 ff0b 	bl	8003dd4 <HAL_SPI_Init>
  /* 片选使能 */
  AD7190_CS_ENABLE();
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fc4:	4804      	ldr	r0, [pc, #16]	@ (8000fd8 <MX_AD7190_SPI_Init+0x104>)
 8000fc6:	f002 f8e1 	bl	800318c <HAL_GPIO_WritePin>
}
 8000fca:	bf00      	nop
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	200001f4 	.word	0x200001f4
 8000fe0:	40013000 	.word	0x40013000

08000fe4 <AD7190_SetRegisterValue>:
 * @param bytesNumber - Number of bytes to be written.
 *
 * @return none.
*******************************************************************************/
void AD7190_SetRegisterValue(unsigned char registerAddress,unsigned int  registerValue,unsigned char bytesNumber)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
  unsigned char writeCommand[5] = {0, 0, 0, 0, 0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	711a      	strb	r2, [r3, #4]
  unsigned char* dataPointer    = (unsigned char*)&registerValue;
 8000ffe:	463b      	mov	r3, r7
 8001000:	617b      	str	r3, [r7, #20]
  unsigned char bytesNr         = bytesNumber;
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	74fb      	strb	r3, [r7, #19]
  
  writeCommand[0] = AD7190_COMM_WRITE | AD7190_COMM_ADDR(registerAddress);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001010:	b2db      	uxtb	r3, r3
 8001012:	733b      	strb	r3, [r7, #12]
  while(bytesNr > 0)
 8001014:	e00c      	b.n	8001030 <AD7190_SetRegisterValue+0x4c>
  {
      writeCommand[bytesNr] = *dataPointer;
 8001016:	7cfb      	ldrb	r3, [r7, #19]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	3318      	adds	r3, #24
 800101e:	443b      	add	r3, r7
 8001020:	f803 2c0c 	strb.w	r2, [r3, #-12]
      dataPointer ++;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
      bytesNr --;
 800102a:	7cfb      	ldrb	r3, [r7, #19]
 800102c:	3b01      	subs	r3, #1
 800102e:	74fb      	strb	r3, [r7, #19]
  while(bytesNr > 0)
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1ef      	bne.n	8001016 <AD7190_SetRegisterValue+0x32>
  }
  HAL_SPI_Transmit(&hspi_AD7190,writeCommand, bytesNumber+1,0xFFFFFF);
 8001036:	79bb      	ldrb	r3, [r7, #6]
 8001038:	b29b      	uxth	r3, r3
 800103a:	3301      	adds	r3, #1
 800103c:	b29a      	uxth	r2, r3
 800103e:	f107 010c 	add.w	r1, r7, #12
 8001042:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8001046:	4803      	ldr	r0, [pc, #12]	@ (8001054 <AD7190_SetRegisterValue+0x70>)
 8001048:	f002 ff4d 	bl	8003ee6 <HAL_SPI_Transmit>
}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200001f4 	.word	0x200001f4

08001058 <AD7190_GetRegisterValue>:
 * @param bytesNumber - Number of bytes that will be read.
 *
 * @return buffer - Value of the register.
*******************************************************************************/
unsigned int AD7190_GetRegisterValue(unsigned char registerAddress,unsigned char bytesNumber)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
  unsigned char registerWord[4] = {0, 0, 0, 0}; 
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  unsigned char address         = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	72fb      	strb	r3, [r7, #11]
  unsigned int  buffer          = 0x0;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  unsigned char i               = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	74fb      	strb	r3, [r7, #19]
  
  address = AD7190_COMM_READ | AD7190_COMM_ADDR(registerAddress);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	b25b      	sxtb	r3, r3
 8001080:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001084:	b25b      	sxtb	r3, r3
 8001086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800108a:	b25b      	sxtb	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	72fb      	strb	r3, [r7, #11]
  
  HAL_SPI_Transmit(&hspi_AD7190,&address, 1,0xFFFFFF);    
 8001090:	f107 010b 	add.w	r1, r7, #11
 8001094:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8001098:	2201      	movs	r2, #1
 800109a:	4812      	ldr	r0, [pc, #72]	@ (80010e4 <AD7190_GetRegisterValue+0x8c>)
 800109c:	f002 ff23 	bl	8003ee6 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi_AD7190,registerWord,bytesNumber,0xFFFFFF);
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	f107 010c 	add.w	r1, r7, #12
 80010a8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <AD7190_GetRegisterValue+0x8c>)
 80010ae:	f003 f85e 	bl	800416e <HAL_SPI_Receive>
  for(i = 0; i < bytesNumber; i++) 
 80010b2:	2300      	movs	r3, #0
 80010b4:	74fb      	strb	r3, [r7, #19]
 80010b6:	e00b      	b.n	80010d0 <AD7190_GetRegisterValue+0x78>
  {
    buffer = (buffer << 8) + registerWord[i];
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	7cfa      	ldrb	r2, [r7, #19]
 80010be:	3218      	adds	r2, #24
 80010c0:	443a      	add	r2, r7
 80010c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80010c6:	4413      	add	r3, r2
 80010c8:	617b      	str	r3, [r7, #20]
  for(i = 0; i < bytesNumber; i++) 
 80010ca:	7cfb      	ldrb	r3, [r7, #19]
 80010cc:	3301      	adds	r3, #1
 80010ce:	74fb      	strb	r3, [r7, #19]
 80010d0:	7cfa      	ldrb	r2, [r7, #19]
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3ef      	bcc.n	80010b8 <AD7190_GetRegisterValue+0x60>
  }
  return buffer;
 80010d8:	697b      	ldr	r3, [r7, #20]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200001f4 	.word	0x200001f4

080010e8 <AD7190_Reset>:
 * @brief Resets the device.
 *
 * @return none.
*******************************************************************************/
void AD7190_Reset(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  unsigned char registerWord[7];
  
  registerWord[0] = 0x01;
 80010ee:	2301      	movs	r3, #1
 80010f0:	703b      	strb	r3, [r7, #0]
  registerWord[1] = 0xFF;
 80010f2:	23ff      	movs	r3, #255	@ 0xff
 80010f4:	707b      	strb	r3, [r7, #1]
  registerWord[2] = 0xFF;
 80010f6:	23ff      	movs	r3, #255	@ 0xff
 80010f8:	70bb      	strb	r3, [r7, #2]
  registerWord[3] = 0xFF;
 80010fa:	23ff      	movs	r3, #255	@ 0xff
 80010fc:	70fb      	strb	r3, [r7, #3]
  registerWord[4] = 0xFF;
 80010fe:	23ff      	movs	r3, #255	@ 0xff
 8001100:	713b      	strb	r3, [r7, #4]
  registerWord[5] = 0xFF;
 8001102:	23ff      	movs	r3, #255	@ 0xff
 8001104:	717b      	strb	r3, [r7, #5]
  registerWord[6] = 0xFF;
 8001106:	23ff      	movs	r3, #255	@ 0xff
 8001108:	71bb      	strb	r3, [r7, #6]
  HAL_SPI_Transmit(&hspi_AD7190,registerWord, 7,0xFFFFFF);
 800110a:	4639      	mov	r1, r7
 800110c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8001110:	2207      	movs	r2, #7
 8001112:	4803      	ldr	r0, [pc, #12]	@ (8001120 <AD7190_Reset+0x38>)
 8001114:	f002 fee7 	bl	8003ee6 <HAL_SPI_Transmit>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200001f4 	.word	0x200001f4

08001124 <AD7190_WaitRdyGoLow>:
 * @brief Waits for RDY pin to go low.
 *
 * @return none.
*******************************************************************************/
void AD7190_WaitRdyGoLow(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  unsigned int timeOutCnt = 0xFFFFF;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <AD7190_WaitRdyGoLow+0x30>)
 800112c:	607b      	str	r3, [r7, #4]

  while(AD7190_RDY_STATE() && timeOutCnt--)
 800112e:	bf00      	nop
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <AD7190_WaitRdyGoLow+0x34>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <AD7190_WaitRdyGoLow+0x22>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f4      	bne.n	8001130 <AD7190_WaitRdyGoLow+0xc>
  {
      ;
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	000fffff 	.word	0x000fffff
 8001158:	40020400 	.word	0x40020400

0800115c <AD7190_Continuous_ReadData>:
 *                          1 - enable
 *
 * @return none.
*******************************************************************************/
void AD7190_Continuous_ReadData(unsigned char cread)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
  unsigned char registerWord=0;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
  
  if(cread==1)
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d102      	bne.n	8001176 <AD7190_Continuous_ReadData+0x1a>
  {
    registerWord=0x5C;
 8001170:	235c      	movs	r3, #92	@ 0x5c
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e003      	b.n	800117e <AD7190_Continuous_ReadData+0x22>
  }
  else
  {
    AD7190_WaitRdyGoLow();
 8001176:	f7ff ffd5 	bl	8001124 <AD7190_WaitRdyGoLow>
    registerWord=0x5e;
 800117a:	235e      	movs	r3, #94	@ 0x5e
 800117c:	73fb      	strb	r3, [r7, #15]
  }
  HAL_SPI_Transmit(&hspi_AD7190,&registerWord,1,0xFFFFFF);
 800117e:	f107 010f 	add.w	r1, r7, #15
 8001182:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8001186:	2201      	movs	r2, #1
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <AD7190_Continuous_ReadData+0x3c>)
 800118a:	f002 feac 	bl	8003ee6 <HAL_SPI_Transmit>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200001f4 	.word	0x200001f4

0800119c <AD7190_Calibrate>:
 * @param channel - Channel to be calibrated.
 *
 * @return none.
*******************************************************************************/
void AD7190_Calibrate(unsigned char mode, unsigned char channel)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	460a      	mov	r2, r1
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	4613      	mov	r3, r2
 80011aa:	71bb      	strb	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  
  AD7190_ChannelSelect(channel);
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f83e 	bl	800123a <AD7190_ChannelSelect>
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_MODE, 3);
 80011be:	2103      	movs	r1, #3
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ff49 	bl	8001058 <AD7190_GetRegisterValue>
 80011c6:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~AD7190_MODE_SEL(0x7);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 80011ce:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | AD7190_MODE_SEL(mode);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	055b      	lsls	r3, r3, #21
 80011d4:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60bb      	str	r3, [r7, #8]
//    AD7190_CS_ENABLE(); 
  AD7190_SetRegisterValue(AD7190_REG_MODE, newRegValue, 3);
 80011de:	2203      	movs	r2, #3
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	2001      	movs	r0, #1
 80011e4:	f7ff fefe 	bl	8000fe4 <AD7190_SetRegisterValue>
  AD7190_WaitRdyGoLow();
 80011e8:	f7ff ff9c 	bl	8001124 <AD7190_WaitRdyGoLow>
//    AD7190_CS_DISABLE();
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <AD7190_ChopSetting>:
 *                        1 - enable
 *  
 * @return none.
*******************************************************************************/
void AD7190_ChopSetting(unsigned char chop)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  unsigned int oldRegValue = 0x0;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  unsigned int newRegValue = 0x0;   
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
   
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3);
 8001206:	2103      	movs	r1, #3
 8001208:	2002      	movs	r0, #2
 800120a:	f7ff ff25 	bl	8001058 <AD7190_GetRegisterValue>
 800120e:	60b8      	str	r0, [r7, #8]
  if(chop==1)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d104      	bne.n	8001220 <AD7190_ChopSetting+0x2c>
  {
    newRegValue = oldRegValue | AD7190_CONF_CHOP;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e003      	b.n	8001228 <AD7190_ChopSetting+0x34>
  }
  else
  {
    newRegValue = oldRegValue & (~AD7190_CONF_CHOP); 
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001226:	60fb      	str	r3, [r7, #12]
  }
  
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 8001228:	2203      	movs	r2, #3
 800122a:	68f9      	ldr	r1, [r7, #12]
 800122c:	2002      	movs	r0, #2
 800122e:	f7ff fed9 	bl	8000fe4 <AD7190_SetRegisterValue>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <AD7190_ChannelSelect>:
 * @param channel - Selects a channel.
 *  
 * @return none.
*******************************************************************************/
void AD7190_ChannelSelect(unsigned short channel)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	80fb      	strh	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;   
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
   
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3);
 800124c:	2103      	movs	r1, #3
 800124e:	2002      	movs	r0, #2
 8001250:	f7ff ff02 	bl	8001058 <AD7190_GetRegisterValue>
 8001254:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~(AD7190_CONF_CHAN(0xFF));
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800125c:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | AD7190_CONF_CHAN(1 << channel);   
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	2201      	movs	r2, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b29b      	uxth	r3, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 8001270:	2203      	movs	r2, #3
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	2002      	movs	r0, #2
 8001276:	f7ff feb5 	bl	8000fe4 <AD7190_SetRegisterValue>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <AD7190_MultiChannelSelect>:

void AD7190_MultiChannelSelect(unsigned short channel)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	80fb      	strh	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;   
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
   
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3);
 8001294:	2103      	movs	r1, #3
 8001296:	2002      	movs	r0, #2
 8001298:	f7ff fede 	bl	8001058 <AD7190_GetRegisterValue>
 800129c:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~(AD7190_CONF_CHAN(0xFF));
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80012a4:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | AD7190_CONF_CHAN(channel);   
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60bb      	str	r3, [r7, #8]
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 80012b2:	2203      	movs	r2, #3
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	2002      	movs	r0, #2
 80012b8:	f7ff fe94 	bl	8000fe4 <AD7190_SetRegisterValue>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <AD7190_RangeSetup>:
                 the ADC input range.     
 *
 * @return none.
*******************************************************************************/
void AD7190_RangeSetup(unsigned char polarity, unsigned char range)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF,3);
 80012dc:	2103      	movs	r1, #3
 80012de:	2002      	movs	r0, #2
 80012e0:	f7ff feba 	bl	8001058 <AD7190_GetRegisterValue>
 80012e4:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~(AD7190_CONF_UNIPOLAR | AD7190_CONF_GAIN(0x7));
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f023 030f 	bic.w	r3, r3, #15
 80012ec:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | (polarity * AD7190_CONF_UNIPOLAR) | AD7190_CONF_GAIN(range) | AD7190_CONF_BUF; 
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	4313      	orrs	r3, r2
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	60bb      	str	r3, [r7, #8]
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 8001306:	2203      	movs	r2, #3
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	2002      	movs	r0, #2
 800130c:	f7ff fe6a 	bl	8000fe4 <AD7190_SetRegisterValue>
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <ad7190_unipolar_multichannel_conf>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 无
  */
void ad7190_unipolar_multichannel_conf(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  unsigned int command = 0x0;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  
  // chop enable
  AD7190_ChopSetting(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff ff66 	bl	80011f4 <AD7190_ChopSetting>
  
  /* Calibrates channel AIN1(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN1P_AINCOM);
 8001328:	2104      	movs	r1, #4
 800132a:	2004      	movs	r0, #4
 800132c:	f7ff ff36 	bl	800119c <AD7190_Calibrate>
  /* Calibrates channel AIN2(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN2P_AINCOM);
 8001330:	2105      	movs	r1, #5
 8001332:	2004      	movs	r0, #4
 8001334:	f7ff ff32 	bl	800119c <AD7190_Calibrate>
  /* Calibrates channel AIN3(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN3P_AINCOM);
 8001338:	2106      	movs	r1, #6
 800133a:	2004      	movs	r0, #4
 800133c:	f7ff ff2e 	bl	800119c <AD7190_Calibrate>
  /* Calibrates channel AIN4(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN4P_AINCOM);
 8001340:	2107      	movs	r1, #7
 8001342:	2004      	movs	r0, #4
 8001344:	f7ff ff2a 	bl	800119c <AD7190_Calibrate>
  
  /* Selects unipolar operation and ADC's input range to +-Vref/1. */
  AD7190_RangeSetup(1, AD7190_CONF_GAIN_1);  
 8001348:	2100      	movs	r1, #0
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff ffba 	bl	80012c4 <AD7190_RangeSetup>
  /* Calibrates channel AIN1(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN1P_AINCOM);
 8001350:	2104      	movs	r1, #4
 8001352:	2005      	movs	r0, #5
 8001354:	f7ff ff22 	bl	800119c <AD7190_Calibrate>
  /* Calibrates channel AIN2(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN2P_AINCOM);
 8001358:	2105      	movs	r1, #5
 800135a:	2005      	movs	r0, #5
 800135c:	f7ff ff1e 	bl	800119c <AD7190_Calibrate>
  /* Calibrates channel AIN3(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN3P_AINCOM);
 8001360:	2106      	movs	r1, #6
 8001362:	2005      	movs	r0, #5
 8001364:	f7ff ff1a 	bl	800119c <AD7190_Calibrate>
  /* Calibrates channel AIN4(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN4P_AINCOM);
 8001368:	2107      	movs	r1, #7
 800136a:	2005      	movs	r0, #5
 800136c:	f7ff ff16 	bl	800119c <AD7190_Calibrate>
     
  // 使能：AD7190_CH_AIN1P_AINCOM
  //       AD7190_CH_AIN2P_AINCOM
  //       AD7190_CH_AIN3P_AINCOM
  //       AD7190_CH_AIN4P_AINCOM
  AD7190_MultiChannelSelect(0xF0);
 8001370:	20f0      	movs	r0, #240	@ 0xf0
 8001372:	f7ff ff86 	bl	8001282 <AD7190_MultiChannelSelect>
  
  /* Performs a conversion. */ 
  command = AD7190_MODE_SEL(AD7190_MODE_CONT) | AD7190_MODE_DAT_STA| \
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <ad7190_unipolar_multichannel_conf+0x7c>)
 8001378:	607b      	str	r3, [r7, #4]
                            AD7190_MODE_CLKSRC(AD7190_CLK_EXT_MCLK1_2) | AD7190_MODE_RATE(Get_Speed);
  AD7190_SetRegisterValue(AD7190_REG_MODE, command, 3);  
 800137a:	2203      	movs	r2, #3
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff fe30 	bl	8000fe4 <AD7190_SetRegisterValue>
  
  AD7190_Continuous_ReadData(1);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff fee9 	bl	800115c <AD7190_Continuous_ReadData>

}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	00100064 	.word	0x00100064

08001398 <AD7190_Init>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 检测AD7190模块连接是否正常
*/
uint8_t AD7190_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	uint8_t reg_data;
  MX_AD7190_SPI_Init();
 800139e:	f7ff fd99 	bl	8000ed4 <MX_AD7190_SPI_Init>
	AD7190_Reset();
 80013a2:	f7ff fea1 	bl	80010e8 <AD7190_Reset>
	/* Allow at least 500 us before accessing any of the on-chip registers. */
	HAL_Delay(10);  
 80013a6:	200a      	movs	r0, #10
 80013a8:	f000 ffc8 	bl	800233c <HAL_Delay>
  reg_data=AD7190_COMM_READ | AD7190_COMM_ADDR(AD7190_REG_ID);
 80013ac:	2360      	movs	r3, #96	@ 0x60
 80013ae:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi_AD7190,&reg_data,1,0xFFFF);
 80013b0:	1df9      	adds	r1, r7, #7
 80013b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013b6:	2201      	movs	r2, #1
 80013b8:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <AD7190_Init+0x58>)
 80013ba:	f002 fd94 	bl	8003ee6 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi_AD7190,&reg_data,1,0xFFFF);
 80013be:	1df9      	adds	r1, r7, #7
 80013c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013c4:	2201      	movs	r2, #1
 80013c6:	480a      	ldr	r0, [pc, #40]	@ (80013f0 <AD7190_Init+0x58>)
 80013c8:	f002 fed1 	bl	800416e <HAL_SPI_Receive>
  printf("AD7190 AD:0x%02X\n",reg_data);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4808      	ldr	r0, [pc, #32]	@ (80013f4 <AD7190_Init+0x5c>)
 80013d2:	f004 fe93 	bl	80060fc <iprintf>
	if((reg_data & AD7190_ID_MASK) == ID_AD7190)
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d101      	bne.n	80013e4 <AD7190_Init+0x4c>
  {
//    printf("conf:0x%06X  ",AD7190_Get_REG_Data(AD7190_REG_CONF));
//    printf("mode:0x%06X\n",AD7190_Get_REG_Data(AD7190_REG_MODE));  
    return ID_AD7190;
 80013e0:	2304      	movs	r3, #4
 80013e2:	e000      	b.n	80013e6 <AD7190_Init+0x4e>
  }
	return 0 ;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200001f4 	.word	0x200001f4
 80013f4:	08008460 	.word	0x08008460

080013f8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <MX_ETH_Init+0x84>)
 80013fe:	4a20      	ldr	r2, [pc, #128]	@ (8001480 <MX_ETH_Init+0x88>)
 8001400:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <MX_ETH_Init+0x8c>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001408:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <MX_ETH_Init+0x8c>)
 800140a:	2280      	movs	r2, #128	@ 0x80
 800140c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_ETH_Init+0x8c>)
 8001410:	22e1      	movs	r2, #225	@ 0xe1
 8001412:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <MX_ETH_Init+0x8c>)
 8001416:	2200      	movs	r2, #0
 8001418:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_ETH_Init+0x8c>)
 800141c:	2200      	movs	r2, #0
 800141e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <MX_ETH_Init+0x8c>)
 8001422:	2200      	movs	r2, #0
 8001424:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <MX_ETH_Init+0x84>)
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <MX_ETH_Init+0x8c>)
 800142a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_ETH_Init+0x84>)
 800142e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001432:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_ETH_Init+0x84>)
 8001436:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <MX_ETH_Init+0x90>)
 8001438:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <MX_ETH_Init+0x84>)
 800143c:	4a13      	ldr	r2, [pc, #76]	@ (800148c <MX_ETH_Init+0x94>)
 800143e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8001440:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_ETH_Init+0x84>)
 8001442:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001446:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <MX_ETH_Init+0x84>)
 800144a:	f001 f8cf 	bl	80025ec <HAL_ETH_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001454:	f000 fd14 	bl	8001e80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001458:	2238      	movs	r2, #56	@ 0x38
 800145a:	2100      	movs	r1, #0
 800145c:	480c      	ldr	r0, [pc, #48]	@ (8001490 <MX_ETH_Init+0x98>)
 800145e:	f004 ffb7 	bl	80063d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <MX_ETH_Init+0x98>)
 8001464:	2221      	movs	r2, #33	@ 0x21
 8001466:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_ETH_Init+0x98>)
 800146a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800146e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001470:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <MX_ETH_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003c4 	.word	0x200003c4
 8001480:	40028000 	.word	0x40028000
 8001484:	20000474 	.word	0x20000474
 8001488:	200002ec 	.word	0x200002ec
 800148c:	2000024c 	.word	0x2000024c
 8001490:	2000038c 	.word	0x2000038c

08001494 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	@ 0x38
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a4a      	ldr	r2, [pc, #296]	@ (80015dc <HAL_ETH_MspInit+0x148>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	f040 808d 	bne.w	80015d2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
 80014bc:	4b48      	ldr	r3, [pc, #288]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c0:	4a47      	ldr	r2, [pc, #284]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 80014c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c8:	4b45      	ldr	r3, [pc, #276]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d0:	623b      	str	r3, [r7, #32]
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	4b41      	ldr	r3, [pc, #260]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014dc:	4a40      	ldr	r2, [pc, #256]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 80014de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e4:	4b3e      	ldr	r3, [pc, #248]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	4b3a      	ldr	r3, [pc, #232]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	4a39      	ldr	r2, [pc, #228]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 80014fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001500:	4b37      	ldr	r3, [pc, #220]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a32      	ldr	r2, [pc, #200]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	4b2c      	ldr	r3, [pc, #176]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	4a2b      	ldr	r2, [pc, #172]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6313      	str	r3, [r2, #48]	@ 0x30
 8001538:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	4a24      	ldr	r2, [pc, #144]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	6313      	str	r3, [r2, #48]	@ 0x30
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_ETH_MspInit+0x14c>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001560:	2332      	movs	r3, #50	@ 0x32
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001570:	230b      	movs	r3, #11
 8001572:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	481a      	ldr	r0, [pc, #104]	@ (80015e4 <HAL_ETH_MspInit+0x150>)
 800157c:	f001 fc6a 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001580:	2386      	movs	r3, #134	@ 0x86
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001590:	230b      	movs	r3, #11
 8001592:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	4813      	ldr	r0, [pc, #76]	@ (80015e8 <HAL_ETH_MspInit+0x154>)
 800159c:	f001 fc5a 	bl	8002e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80015a0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b2:	230b      	movs	r3, #11
 80015b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	480b      	ldr	r0, [pc, #44]	@ (80015ec <HAL_ETH_MspInit+0x158>)
 80015be:	f001 fc49 	bl	8002e54 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	203d      	movs	r0, #61	@ 0x3d
 80015c8:	f000 ffb7 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80015cc:	203d      	movs	r0, #61	@ 0x3d
 80015ce:	f000 ffd0 	bl	8002572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80015d2:	bf00      	nop
 80015d4:	3738      	adds	r7, #56	@ 0x38
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40028000 	.word	0x40028000
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400

080015f0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	@ 0x38
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
 8001618:	615a      	str	r2, [r3, #20]
 800161a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 800161c:	4b2f      	ldr	r3, [pc, #188]	@ (80016dc <MX_FSMC_Init+0xec>)
 800161e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001622:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001624:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <MX_FSMC_Init+0xec>)
 8001626:	4a2e      	ldr	r2, [pc, #184]	@ (80016e0 <MX_FSMC_Init+0xf0>)
 8001628:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 800162a:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <MX_FSMC_Init+0xec>)
 800162c:	2206      	movs	r2, #6
 800162e:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <MX_FSMC_Init+0xec>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001636:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <MX_FSMC_Init+0xec>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800163c:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <MX_FSMC_Init+0xec>)
 800163e:	2210      	movs	r2, #16
 8001640:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001642:	4b26      	ldr	r3, [pc, #152]	@ (80016dc <MX_FSMC_Init+0xec>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <MX_FSMC_Init+0xec>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800164e:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <MX_FSMC_Init+0xec>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <MX_FSMC_Init+0xec>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800165a:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <MX_FSMC_Init+0xec>)
 800165c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001660:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <MX_FSMC_Init+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <MX_FSMC_Init+0xec>)
 800166a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800166e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001670:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_FSMC_Init+0xec>)
 8001672:	2200      	movs	r2, #0
 8001674:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001676:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <MX_FSMC_Init+0xec>)
 8001678:	2200      	movs	r2, #0
 800167a:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <MX_FSMC_Init+0xec>)
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001686:	230f      	movs	r3, #15
 8001688:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 16;
 800168a:	2310      	movs	r3, #16
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 15;
 800168e:	230f      	movs	r3, #15
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8001692:	2310      	movs	r3, #16
 8001694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8001696:	2311      	movs	r3, #17
 8001698:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800169a:	2300      	movs	r3, #0
 800169c:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 4;
 800169e:	2304      	movs	r3, #4
 80016a0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80016a2:	230f      	movs	r3, #15
 80016a4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80016a6:	2309      	movs	r3, #9
 80016a8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80016ae:	2310      	movs	r3, #16
 80016b0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80016b2:	2311      	movs	r3, #17
 80016b4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 80016ba:	463a      	mov	r2, r7
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4806      	ldr	r0, [pc, #24]	@ (80016dc <MX_FSMC_Init+0xec>)
 80016c4:	f003 f958 	bl	8004978 <HAL_SRAM_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80016ce:	f000 fbd7 	bl	8001e80 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80016d2:	bf00      	nop
 80016d4:	3738      	adds	r7, #56	@ 0x38
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000047c 	.word	0x2000047c
 80016e0:	a0000104 	.word	0xa0000104

080016e4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80016f8:	4b2c      	ldr	r3, [pc, #176]	@ (80017ac <HAL_FSMC_MspInit+0xc8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d151      	bne.n	80017a4 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001700:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <HAL_FSMC_MspInit+0xc8>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <HAL_FSMC_MspInit+0xcc>)
 800170c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170e:	4a28      	ldr	r2, [pc, #160]	@ (80017b0 <HAL_FSMC_MspInit+0xcc>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6393      	str	r3, [r2, #56]	@ 0x38
 8001716:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <HAL_FSMC_MspInit+0xcc>)
 8001718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001726:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001734:	230c      	movs	r3, #12
 8001736:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	481d      	ldr	r0, [pc, #116]	@ (80017b4 <HAL_FSMC_MspInit+0xd0>)
 800173e:	f001 fb89 	bl	8002e54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001742:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001746:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001754:	230c      	movs	r3, #12
 8001756:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4816      	ldr	r0, [pc, #88]	@ (80017b8 <HAL_FSMC_MspInit+0xd4>)
 800175e:	f001 fb79 	bl	8002e54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001762:	f24c 7333 	movw	r3, #50995	@ 0xc733
 8001766:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001774:	230c      	movs	r3, #12
 8001776:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	4619      	mov	r1, r3
 800177c:	480f      	ldr	r0, [pc, #60]	@ (80017bc <HAL_FSMC_MspInit+0xd8>)
 800177e:	f001 fb69 	bl	8002e54 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001786:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001794:	230c      	movs	r3, #12
 8001796:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <HAL_FSMC_MspInit+0xdc>)
 800179e:	f001 fb59 	bl	8002e54 <HAL_GPIO_Init>
 80017a2:	e000      	b.n	80017a6 <HAL_FSMC_MspInit+0xc2>
    return;
 80017a4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200004cc 	.word	0x200004cc
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40021400 	.word	0x40021400
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	40021800 	.word	0x40021800

080017c4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80017cc:	f7ff ff8a 	bl	80016e4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08e      	sub	sp, #56	@ 0x38
 80017dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001964 <MX_GPIO_Init+0x18c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001964 <MX_GPIO_Init+0x18c>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	4b55      	ldr	r3, [pc, #340]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a54      	ldr	r2, [pc, #336]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b52      	ldr	r3, [pc, #328]	@ (8001964 <MX_GPIO_Init+0x18c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	4b4e      	ldr	r3, [pc, #312]	@ (8001964 <MX_GPIO_Init+0x18c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a4d      	ldr	r2, [pc, #308]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b4b      	ldr	r3, [pc, #300]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	61bb      	str	r3, [r7, #24]
 8001840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a46      	ldr	r2, [pc, #280]	@ (8001964 <MX_GPIO_Init+0x18c>)
 800184c:	f043 0320 	orr.w	r3, r3, #32
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b44      	ldr	r3, [pc, #272]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a3f      	ldr	r2, [pc, #252]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b39      	ldr	r3, [pc, #228]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a38      	ldr	r2, [pc, #224]	@ (8001964 <MX_GPIO_Init+0x18c>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <MX_GPIO_Init+0x18c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <MX_GPIO_Init+0x18c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a31      	ldr	r2, [pc, #196]	@ (8001964 <MX_GPIO_Init+0x18c>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <MX_GPIO_Init+0x18c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <MX_GPIO_Init+0x18c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001964 <MX_GPIO_Init+0x18c>)
 80018bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b28      	ldr	r3, [pc, #160]	@ (8001964 <MX_GPIO_Init+0x18c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2108      	movs	r1, #8
 80018d2:	4825      	ldr	r0, [pc, #148]	@ (8001968 <MX_GPIO_Init+0x190>)
 80018d4:	f001 fc5a 	bl	800318c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80018de:	4823      	ldr	r0, [pc, #140]	@ (800196c <MX_GPIO_Init+0x194>)
 80018e0:	f001 fc54 	bl	800318c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KeyUp_Pin */
  GPIO_InitStruct.Pin = KeyUp_Pin;
 80018e4:	2301      	movs	r3, #1
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ee:	2302      	movs	r3, #2
 80018f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(KeyUp_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f6:	4619      	mov	r1, r3
 80018f8:	481b      	ldr	r0, [pc, #108]	@ (8001968 <MX_GPIO_Init+0x190>)
 80018fa:	f001 faab 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_RESET_Pin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin;
 80018fe:	2308      	movs	r3, #8
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	4814      	ldr	r0, [pc, #80]	@ (8001968 <MX_GPIO_Init+0x190>)
 8001916:	f001 fa9d 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LCD_BL_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LCD_BL_Pin;
 800191a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	480e      	ldr	r0, [pc, #56]	@ (800196c <MX_GPIO_Init+0x194>)
 8001934:	f001 fa8e 	bl	8002e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001938:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001952:	4619      	mov	r1, r3
 8001954:	4806      	ldr	r0, [pc, #24]	@ (8001970 <MX_GPIO_Init+0x198>)
 8001956:	f001 fa7d 	bl	8002e54 <HAL_GPIO_Init>

}
 800195a:	bf00      	nop
 800195c:	3738      	adds	r7, #56	@ 0x38
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400
 8001970:	40020800 	.word	0x40020800

08001974 <AD7190_Filter>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t AD7190_Filter(int channel, int32_t sample)
{
 8001974:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001978:	b087      	sub	sp, #28
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
    if(channel < 0 || channel >= 4)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db02      	blt.n	800198c <AD7190_Filter+0x18>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b03      	cmp	r3, #3
 800198a:	dd01      	ble.n	8001990 <AD7190_Filter+0x1c>
    {
        return sample;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	e053      	b.n	8001a38 <AD7190_Filter+0xc4>
    }

    filter_buf[channel][filter_index[channel]] = sample;
 8001990:	4a2c      	ldr	r2, [pc, #176]	@ (8001a44 <AD7190_Filter+0xd0>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	492b      	ldr	r1, [pc, #172]	@ (8001a48 <AD7190_Filter+0xd4>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    filter_index[channel] = (filter_index[channel] + 1) % AD7190_FILTER_DEPTH;
 80019a8:	4a26      	ldr	r2, [pc, #152]	@ (8001a44 <AD7190_Filter+0xd0>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	425a      	negs	r2, r3
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	f002 0207 	and.w	r2, r2, #7
 80019bc:	bf58      	it	pl
 80019be:	4253      	negpl	r3, r2
 80019c0:	b2d9      	uxtb	r1, r3
 80019c2:	4a20      	ldr	r2, [pc, #128]	@ (8001a44 <AD7190_Filter+0xd0>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	460a      	mov	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]

    int64_t sum = 0;
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for(int i = 0; i < AD7190_FILTER_DEPTH; ++i)
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e014      	b.n	8001a08 <AD7190_Filter+0x94>
    {
        sum += filter_buf[channel][i];
 80019de:	491a      	ldr	r1, [pc, #104]	@ (8001a48 <AD7190_Filter+0xd4>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	00da      	lsls	r2, r3, #3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	461c      	mov	r4, r3
 80019f0:	4615      	mov	r5, r2
 80019f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019f6:	eb12 0804 	adds.w	r8, r2, r4
 80019fa:	eb43 0905 	adc.w	r9, r3, r5
 80019fe:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for(int i = 0; i < AD7190_FILTER_DEPTH; ++i)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3301      	adds	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	dde7      	ble.n	80019de <AD7190_Filter+0x6a>
    }

    return (int32_t)(sum / AD7190_FILTER_DEPTH);
 8001a0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da05      	bge.n	8001a22 <AD7190_Filter+0xae>
 8001a16:	f112 0a07 	adds.w	sl, r2, #7
 8001a1a:	f143 0b00 	adc.w	fp, r3, #0
 8001a1e:	4652      	mov	r2, sl
 8001a20:	465b      	mov	r3, fp
 8001a22:	f04f 0000 	mov.w	r0, #0
 8001a26:	f04f 0100 	mov.w	r1, #0
 8001a2a:	08d0      	lsrs	r0, r2, #3
 8001a2c:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8001a30:	10d9      	asrs	r1, r3, #3
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4613      	mov	r3, r2
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001a42:	4770      	bx	lr
 8001a44:	200005a4 	.word	0x200005a4
 8001a48:	20000524 	.word	0x20000524
 8001a4c:	00000000 	.word	0x00000000

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a56:	f000 fbff 	bl	8002258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5a:	f000 f96d 	bl	8001d38 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a5e:	f000 f9f3 	bl	8001e48 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a62:	f7ff feb9 	bl	80017d8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001a66:	f7ff fdc3 	bl	80015f0 <MX_FSMC_Init>
  MX_ETH_Init();
 8001a6a:	f7ff fcc5 	bl	80013f8 <MX_ETH_Init>
  //MX_UART4_Init();
  MX_DEBUG_USART_Init();
 8001a6e:	f003 fdf5 	bl	800565c <MX_DEBUG_USART_Init>
  MX_SPI1_Init();
 8001a72:	f000 fa0b 	bl	8001e8c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(AD7190_Init()==0)
 8001a76:	f7ff fc8f 	bl	8001398 <AD7190_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d113      	bne.n	8001aa8 <main+0x58>
  {
   // printf("获取不到 AD7190 !\n");
   lcd_show_str(10, 0*20 + 10, 16, "AD7190 Init fail", RED);
 8001a80:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	4b6e      	ldr	r3, [pc, #440]	@ (8001c40 <main+0x1f0>)
 8001a88:	2210      	movs	r2, #16
 8001a8a:	210a      	movs	r1, #10
 8001a8c:	200a      	movs	r0, #10
 8001a8e:	f003 fd55 	bl	800553c <lcd_show_str>
    while(1)
    {
      HAL_Delay(1000);
 8001a92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a96:	f000 fc51 	bl	800233c <HAL_Delay>
      if(AD7190_Init())
 8001a9a:	f7ff fc7d 	bl	8001398 <AD7190_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d100      	bne.n	8001aa6 <main+0x56>
      HAL_Delay(1000);
 8001aa4:	e7f5      	b.n	8001a92 <main+0x42>
        break;
 8001aa6:	bf00      	nop
    }
  }
  ad7190_unipolar_multichannel_conf();
 8001aa8:	f7ff fc36 	bl	8001318 <ad7190_unipolar_multichannel_conf>
  bias_data[0]=BIAS_VOLTAGE_IN1;
 8001aac:	4b65      	ldr	r3, [pc, #404]	@ (8001c44 <main+0x1f4>)
 8001aae:	4a66      	ldr	r2, [pc, #408]	@ (8001c48 <main+0x1f8>)
 8001ab0:	601a      	str	r2, [r3, #0]
  bias_data[1]=BIAS_VOLTAGE_IN2;
 8001ab2:	4b64      	ldr	r3, [pc, #400]	@ (8001c44 <main+0x1f4>)
 8001ab4:	4a65      	ldr	r2, [pc, #404]	@ (8001c4c <main+0x1fc>)
 8001ab6:	605a      	str	r2, [r3, #4]
  bias_data[2]=BIAS_VOLTAGE_IN3;
 8001ab8:	4b62      	ldr	r3, [pc, #392]	@ (8001c44 <main+0x1f4>)
 8001aba:	4a65      	ldr	r2, [pc, #404]	@ (8001c50 <main+0x200>)
 8001abc:	609a      	str	r2, [r3, #8]
  bias_data[3]=BIAS_VOLTAGE_IN4;
 8001abe:	4b61      	ldr	r3, [pc, #388]	@ (8001c44 <main+0x1f4>)
 8001ac0:	4a64      	ldr	r2, [pc, #400]	@ (8001c54 <main+0x204>)
 8001ac2:	60da      	str	r2, [r3, #12]
  flag=1;
 8001ac4:	4b64      	ldr	r3, [pc, #400]	@ (8001c58 <main+0x208>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 2)
 8001aca:	4b63      	ldr	r3, [pc, #396]	@ (8001c58 <main+0x208>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 809e 	bne.w	8001c12 <main+0x1c2>
	  {
#if ZERO_MODE==1
		  // printf("IN%d. 0x%05X\n",number,bias_data[number]);
#else
		if(number >= 0 && number < 4)
 8001ad6:	4b61      	ldr	r3, [pc, #388]	@ (8001c5c <main+0x20c>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f2c0 8095 	blt.w	8001c0c <main+0x1bc>
 8001ae2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c5c <main+0x20c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	f300 808f 	bgt.w	8001c0c <main+0x1bc>
		{
			int32_t raw = ad7190_data[number]>>4;
 8001aee:	4b5b      	ldr	r3, [pc, #364]	@ (8001c5c <main+0x20c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b25b      	sxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <main+0x210>)
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	111b      	asrs	r3, r3, #4
 8001afe:	617b      	str	r3, [r7, #20]
			filtered_data[number] = AD7190_Filter(number, raw);
 8001b00:	4b56      	ldr	r3, [pc, #344]	@ (8001c5c <main+0x20c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b54      	ldr	r3, [pc, #336]	@ (8001c5c <main+0x20c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b25b      	sxtb	r3, r3
 8001b0e:	461c      	mov	r4, r3
 8001b10:	6979      	ldr	r1, [r7, #20]
 8001b12:	4610      	mov	r0, r2
 8001b14:	f7ff ff2e 	bl	8001974 <AD7190_Filter>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a52      	ldr	r2, [pc, #328]	@ (8001c64 <main+0x214>)
 8001b1c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			voltage_data[number]=filtered_data[number];
 8001b20:	4b4e      	ldr	r3, [pc, #312]	@ (8001c5c <main+0x20c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b4e      	ldr	r3, [pc, #312]	@ (8001c64 <main+0x214>)
 8001b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001c5c <main+0x20c>)
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	b252      	sxtb	r2, r2
 8001b34:	4614      	mov	r4, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcf4 	bl	8000524 <__aeabi_i2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4849      	ldr	r0, [pc, #292]	@ (8001c68 <main+0x218>)
 8001b42:	00e1      	lsls	r1, r4, #3
 8001b44:	4401      	add	r1, r0
 8001b46:	e9c1 2300 	strd	r2, r3, [r1]
			voltage_data[number]=voltage_data[number]*REFERENCE_VOLTAGE/OPA_RES_R2*OPA_RES_R1/0xFFFFF;
 8001b4a:	4b44      	ldr	r3, [pc, #272]	@ (8001c5c <main+0x20c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	4a45      	ldr	r2, [pc, #276]	@ (8001c68 <main+0x218>)
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b5a:	a331      	add	r3, pc, #196	@ (adr r3, 8001c20 <main+0x1d0>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fd4a 	bl	80005f8 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001c28 <main+0x1d8>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fe6b 	bl	800084c <__aeabi_ddiv>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	a32c      	add	r3, pc, #176	@ (adr r3, 8001c30 <main+0x1e0>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd38 	bl	80005f8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4b32      	ldr	r3, [pc, #200]	@ (8001c5c <main+0x20c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	461c      	mov	r4, r3
 8001b98:	a327      	add	r3, pc, #156	@ (adr r3, 8001c38 <main+0x1e8>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fe55 	bl	800084c <__aeabi_ddiv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4830      	ldr	r0, [pc, #192]	@ (8001c68 <main+0x218>)
 8001ba8:	00e1      	lsls	r1, r4, #3
 8001baa:	4401      	add	r1, r0
 8001bac:	e9c1 2300 	strd	r2, r3, [r1]

			char disp[20];
			sprintf(disp, "CH%d:%6.3fV", number+1, voltage_data[number]/1000.0);
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <main+0x20c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	1c5c      	adds	r4, r3, #1
 8001bb8:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <main+0x20c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001c68 <main+0x218>)
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <main+0x21c>)
 8001bce:	f7fe fe3d 	bl	800084c <__aeabi_ddiv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4638      	mov	r0, r7
 8001bd8:	e9cd 2300 	strd	r2, r3, [sp]
 8001bdc:	4622      	mov	r2, r4
 8001bde:	4924      	ldr	r1, [pc, #144]	@ (8001c70 <main+0x220>)
 8001be0:	f004 fafc 	bl	80061dc <siprintf>
			lcd_show_str(10, (number + 1) * 20 + 10, 16, disp, RED);
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <main+0x20c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	3301      	adds	r3, #1
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	330a      	adds	r3, #10
 8001bfa:	b299      	uxth	r1, r3
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c02:	9200      	str	r2, [sp, #0]
 8001c04:	2210      	movs	r2, #16
 8001c06:	200a      	movs	r0, #10
 8001c08:	f003 fc98 	bl	800553c <lcd_show_str>
		}
#endif
		flag = 1;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <main+0x208>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(10);
 8001c12:	200a      	movs	r0, #10
 8001c14:	f000 fb92 	bl	800233c <HAL_Delay>
	  if(flag == 2)
 8001c18:	e757      	b.n	8001aca <main+0x7a>
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	00000000 	.word	0x00000000
 8001c24:	40a9c200 	.word	0x40a9c200
 8001c28:	00000000 	.word	0x00000000
 8001c2c:	40977000 	.word	0x40977000
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40e3a100 	.word	0x40e3a100
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	412ffffe 	.word	0x412ffffe
 8001c40:	08008474 	.word	0x08008474
 8001c44:	200004e0 	.word	0x200004e0
 8001c48:	0039cf8c 	.word	0x0039cf8c
 8001c4c:	0039cf52 	.word	0x0039cf52
 8001c50:	0039cf4d 	.word	0x0039cf4d
 8001c54:	0039d027 	.word	0x0039d027
 8001c58:	20000510 	.word	0x20000510
 8001c5c:	20000511 	.word	0x20000511
 8001c60:	200004d0 	.word	0x200004d0
 8001c64:	20000514 	.word	0x20000514
 8001c68:	200004f0 	.word	0x200004f0
 8001c6c:	408f4000 	.word	0x408f4000
 8001c70:	08008488 	.word	0x08008488

08001c74 <HAL_SYSTICK_Callback>:
  /* USER CODE END 3 */
}


void HAL_SYSTICK_Callback(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
  uint8_t sample[4];
  int8_t temp;

  if((flag)&&(AD7190_RDY_STATE()==0))
 8001c7a:	4b28      	ldr	r3, [pc, #160]	@ (8001d1c <HAL_SYSTICK_Callback+0xa8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d046      	beq.n	8001d12 <HAL_SYSTICK_Callback+0x9e>
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <HAL_SYSTICK_Callback+0xac>)
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d140      	bne.n	8001d12 <HAL_SYSTICK_Callback+0x9e>
  {
    HAL_SPI_Receive(&hspi_AD7190,sample,4,0xFF);
 8001c90:	4639      	mov	r1, r7
 8001c92:	23ff      	movs	r3, #255	@ 0xff
 8001c94:	2204      	movs	r2, #4
 8001c96:	4823      	ldr	r0, [pc, #140]	@ (8001d24 <HAL_SYSTICK_Callback+0xb0>)
 8001c98:	f002 fa69 	bl	800416e <HAL_SPI_Receive>
    if((sample[3]&0x80)==0)
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db36      	blt.n	8001d12 <HAL_SYSTICK_Callback+0x9e>
    {
      temp=(sample[3]&0x07)-4;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	3b04      	subs	r3, #4
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	71fb      	strb	r3, [r7, #7]
      if(temp>=0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db19      	blt.n	8001cee <HAL_SYSTICK_Callback+0x7a>
      {
#if ZERO_MODE==1
        bias_data[temp]=((sample[0]<<16)|(sample[1]<<8)|sample[2]);
#else
        ad7190_data[temp]=((sample[0]<<16) | (sample[1]<<8) | sample[2])-bias_data[temp];
 8001cba:	783b      	ldrb	r3, [r7, #0]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	787b      	ldrb	r3, [r7, #1]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	78ba      	ldrb	r2, [r7, #2]
 8001cc6:	ea43 0102 	orr.w	r1, r3, r2
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	4a16      	ldr	r2, [pc, #88]	@ (8001d28 <HAL_SYSTICK_Callback+0xb4>)
 8001cd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	1a8a      	subs	r2, r1, r2
 8001cda:	4914      	ldr	r1, [pc, #80]	@ (8001d2c <HAL_SYSTICK_Callback+0xb8>)
 8001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
        number=temp;
 8001ce0:	4a13      	ldr	r2, [pc, #76]	@ (8001d30 <HAL_SYSTICK_Callback+0xbc>)
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	7013      	strb	r3, [r2, #0]
        flag=2;
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_SYSTICK_Callback+0xa8>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	701a      	strb	r2, [r3, #0]
          printf("失败！！！\n");
        }
      }
    }
  }
}
 8001cec:	e011      	b.n	8001d12 <HAL_SYSTICK_Callback+0x9e>
        flag++;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <HAL_SYSTICK_Callback+0xa8>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b08      	ldr	r3, [pc, #32]	@ (8001d1c <HAL_SYSTICK_Callback+0xa8>)
 8001cfa:	701a      	strb	r2, [r3, #0]
        if(flag>=10)
 8001cfc:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <HAL_SYSTICK_Callback+0xa8>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b09      	cmp	r3, #9
 8001d04:	d905      	bls.n	8001d12 <HAL_SYSTICK_Callback+0x9e>
          flag=0;
 8001d06:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_SYSTICK_Callback+0xa8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
          printf("失败！！！\n");
 8001d0c:	4809      	ldr	r0, [pc, #36]	@ (8001d34 <HAL_SYSTICK_Callback+0xc0>)
 8001d0e:	f004 fa5d 	bl	80061cc <puts>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000510 	.word	0x20000510
 8001d20:	40020400 	.word	0x40020400
 8001d24:	200001f4 	.word	0x200001f4
 8001d28:	200004e0 	.word	0x200004e0
 8001d2c:	200004d0 	.word	0x200004d0
 8001d30:	20000511 	.word	0x20000511
 8001d34:	08008494 	.word	0x08008494

08001d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b094      	sub	sp, #80	@ 0x50
 8001d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3e:	f107 0320 	add.w	r3, r7, #32
 8001d42:	2230      	movs	r2, #48	@ 0x30
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 fb42 	bl	80063d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <SystemClock_Config+0x104>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	4a35      	ldr	r2, [pc, #212]	@ (8001e3c <SystemClock_Config+0x104>)
 8001d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6c:	4b33      	ldr	r3, [pc, #204]	@ (8001e3c <SystemClock_Config+0x104>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	4b30      	ldr	r3, [pc, #192]	@ (8001e40 <SystemClock_Config+0x108>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2f      	ldr	r2, [pc, #188]	@ (8001e40 <SystemClock_Config+0x108>)
 8001d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <SystemClock_Config+0x108>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d94:	2301      	movs	r3, #1
 8001d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001da2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001da8:	2308      	movs	r3, #8
 8001daa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001dac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001db0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db2:	2302      	movs	r3, #2
 8001db4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001db6:	2304      	movs	r3, #4
 8001db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dba:	f107 0320 	add.w	r3, r7, #32
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 f9fe 	bl	80031c0 <HAL_RCC_OscConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001dca:	f000 f859 	bl	8001e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dce:	230f      	movs	r3, #15
 8001dd0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dda:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001dde:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	2105      	movs	r1, #5
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 fc5f 	bl	80036b0 <HAL_RCC_ClockConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001df8:	f000 f842 	bl	8001e80 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLI2SCLK, RCC_MCODIV_2);
 8001dfc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e00:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e04:	2001      	movs	r0, #1
 8001e06:	f001 fd39 	bl	800387c <HAL_RCC_MCOConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);                // 配置并启动系统滴答定时器
 8001e0a:	f001 feb1 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a0c      	ldr	r2, [pc, #48]	@ (8001e44 <SystemClock_Config+0x10c>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	099b      	lsrs	r3, r3, #6
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fbb8 	bl	800258e <HAL_SYSTICK_Config>
  /* 系统滴答定时器时钟源 */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e1e:	2004      	movs	r0, #4
 8001e20:	f000 fbc2 	bl	80025a8 <HAL_SYSTICK_CLKSourceConfig>

  /* 系统滴答定时器中断优先级配置 */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f000 fb85 	bl	800253a <HAL_NVIC_SetPriority>
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001e30:	f001 fd8c 	bl	800394c <HAL_RCC_EnableCSS>
}
 8001e34:	bf00      	nop
 8001e36:	3750      	adds	r7, #80	@ 0x50
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000
 8001e44:	10624dd3 	.word	0x10624dd3

08001e48 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S;
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001e5e:	23c8      	movs	r3, #200	@ 0xc8
 8001e60:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e62:	2302      	movs	r3, #2
 8001e64:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e66:	463b      	mov	r3, r7
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f001 fed1 	bl	8003c10 <HAL_RCCEx_PeriphCLKConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8001e74:	f000 f804 	bl	8001e80 <Error_Handler>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e84:	b672      	cpsid	i
}
 8001e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <Error_Handler+0x8>

08001e8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001e92:	4a18      	ldr	r2, [pc, #96]	@ (8001ef4 <MX_SPI1_Init+0x68>)
 8001e94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001e98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001eac:	2202      	movs	r2, #2
 8001eae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ebc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001ed8:	220a      	movs	r2, #10
 8001eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	@ (8001ef0 <MX_SPI1_Init+0x64>)
 8001ede:	f001 ff79 	bl	8003dd4 <HAL_SPI_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ee8:	f7ff ffca 	bl	8001e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200005a8 	.word	0x200005a8
 8001ef4:	40013000 	.word	0x40013000

08001ef8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a19      	ldr	r2, [pc, #100]	@ (8001f7c <HAL_SPI_MspInit+0x84>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12b      	bne.n	8001f72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_SPI_MspInit+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f52:	2338      	movs	r3, #56	@ 0x38
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f62:	2305      	movs	r3, #5
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <HAL_SPI_MspInit+0x8c>)
 8001f6e:	f000 ff71 	bl	8002e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40013000 	.word	0x40013000
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020400 	.word	0x40020400

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	4a08      	ldr	r2, [pc, #32]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001fdc:	f001 fdfc 	bl	8003bd8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <NMI_Handler+0x8>

08001fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe8:	bf00      	nop
 8001fea:	e7fd      	b.n	8001fe8 <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <BusFault_Handler+0x4>

08001ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <UsageFault_Handler+0x4>

08002004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */

	  HAL_IncTick();
 8002032:	f000 f963 	bl	80022fc <HAL_IncTick>
	  HAL_SYSTICK_IRQHandler();
 8002036:	f000 fad3 	bl	80025e0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <ETH_IRQHandler+0x10>)
 8002046:	f000 fb6d 	bl	8002724 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200003c4 	.word	0x200003c4

08002054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_kill>:

int _kill(int pid, int sig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206e:	f004 fa01 	bl	8006474 <__errno>
 8002072:	4603      	mov	r3, r0
 8002074:	2216      	movs	r2, #22
 8002076:	601a      	str	r2, [r3, #0]
  return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_exit>:

void _exit (int status)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffe7 	bl	8002064 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002096:	bf00      	nop
 8002098:	e7fd      	b.n	8002096 <_exit+0x12>

0800209a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e00a      	b.n	80020c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ac:	f3af 8000 	nop.w
 80020b0:	4601      	mov	r1, r0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	60ba      	str	r2, [r7, #8]
 80020b8:	b2ca      	uxtb	r2, r1
 80020ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	dbf0      	blt.n	80020ac <_read+0x12>
  }

  return len;
 80020ca:	687b      	ldr	r3, [r7, #4]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	e009      	b.n	80020fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	60ba      	str	r2, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	429a      	cmp	r2, r3
 8002100:	dbf1      	blt.n	80020e6 <_write+0x12>
  }
  return len;
 8002102:	687b      	ldr	r3, [r7, #4]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <_close>:

int _close(int file)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002134:	605a      	str	r2, [r3, #4]
  return 0;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_isatty>:

int _isatty(int file)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800214c:	2301      	movs	r3, #1
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800217c:	4a14      	ldr	r2, [pc, #80]	@ (80021d0 <_sbrk+0x5c>)
 800217e:	4b15      	ldr	r3, [pc, #84]	@ (80021d4 <_sbrk+0x60>)
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <_sbrk+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <_sbrk+0x64>)
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <_sbrk+0x68>)
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002196:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d207      	bcs.n	80021b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a4:	f004 f966 	bl	8006474 <__errno>
 80021a8:	4603      	mov	r3, r0
 80021aa:	220c      	movs	r2, #12
 80021ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	e009      	b.n	80021c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ba:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <_sbrk+0x64>)
 80021c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20020000 	.word	0x20020000
 80021d4:	00000400 	.word	0x00000400
 80021d8:	20000600 	.word	0x20000600
 80021dc:	200007b0 	.word	0x200007b0

080021e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <SystemInit+0x20>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ea:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <SystemInit+0x20>)
 80021ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800223c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002208:	f7ff ffea 	bl	80021e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800220c:	480c      	ldr	r0, [pc, #48]	@ (8002240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800220e:	490d      	ldr	r1, [pc, #52]	@ (8002244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002210:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002222:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002224:	4c0a      	ldr	r4, [pc, #40]	@ (8002250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002232:	f004 f925 	bl	8006480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002236:	f7ff fc0b 	bl	8001a50 <main>
  bx  lr    
 800223a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800223c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002244:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002248:	0800b7c4 	.word	0x0800b7c4
  ldr r2, =_sbss
 800224c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002250:	200007ac 	.word	0x200007ac

08002254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC_IRQHandler>
	...

08002258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <HAL_Init+0x40>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0d      	ldr	r2, [pc, #52]	@ (8002298 <HAL_Init+0x40>)
 8002262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <HAL_Init+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	@ (8002298 <HAL_Init+0x40>)
 800226e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a07      	ldr	r2, [pc, #28]	@ (8002298 <HAL_Init+0x40>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002280:	2003      	movs	r0, #3
 8002282:	f000 f94f 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002286:	2000      	movs	r0, #0
 8002288:	f000 f808 	bl	800229c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800228c:	f7ff fe7c 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023c00 	.word	0x40023c00

0800229c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_InitTick+0x54>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_InitTick+0x58>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4619      	mov	r1, r3
 80022ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f967 	bl	800258e <HAL_SYSTICK_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00e      	b.n	80022e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d80a      	bhi.n	80022e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d0:	2200      	movs	r2, #0
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	f000 f92f 	bl	800253a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022dc:	4a06      	ldr	r2, [pc, #24]	@ (80022f8 <HAL_InitTick+0x5c>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000000 	.word	0x20000000
 80022f4:	20000008 	.word	0x20000008
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_IncTick+0x20>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_IncTick+0x24>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4413      	add	r3, r2
 800230c:	4a04      	ldr	r2, [pc, #16]	@ (8002320 <HAL_IncTick+0x24>)
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000008 	.word	0x20000008
 8002320:	20000604 	.word	0x20000604

08002324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  return uwTick;
 8002328:	4b03      	ldr	r3, [pc, #12]	@ (8002338 <HAL_GetTick+0x14>)
 800232a:	681b      	ldr	r3, [r3, #0]
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000604 	.word	0x20000604

0800233c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff ffee 	bl	8002324 <HAL_GetTick>
 8002348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d005      	beq.n	8002362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002356:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <HAL_Delay+0x44>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002362:	bf00      	nop
 8002364:	f7ff ffde 	bl	8002324 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d8f7      	bhi.n	8002364 <HAL_Delay+0x28>
  {
  }
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000008 	.word	0x20000008

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	@ (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	@ (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	@ (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	@ 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	@ (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff29 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff3e 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff8e 	bl	8002478 <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5d 	bl	8002424 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff31 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffa2 	bl	80024e0 <SysTick_Config>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d106      	bne.n	80025c4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80025b6:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a08      	ldr	r2, [pc, #32]	@ (80025dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80025bc:	f043 0304 	orr.w	r3, r3, #4
 80025c0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80025c2:	e005      	b.n	80025d0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80025c4:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80025ca:	f023 0304 	bic.w	r3, r3, #4
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80025e4:	f7ff fb46 	bl	8001c74 <HAL_SYSTICK_Callback>
}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e08a      	b.n	8002714 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002604:	2b00      	cmp	r3, #0
 8002606:	d106      	bne.n	8002616 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe ff3f 	bl	8001494 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b40      	ldr	r3, [pc, #256]	@ (800271c <HAL_ETH_Init+0x130>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a3f      	ldr	r2, [pc, #252]	@ (800271c <HAL_ETH_Init+0x130>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b3d      	ldr	r3, [pc, #244]	@ (800271c <HAL_ETH_Init+0x130>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002632:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_ETH_Init+0x134>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4a3a      	ldr	r2, [pc, #232]	@ (8002720 <HAL_ETH_Init+0x134>)
 8002638:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800263c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800263e:	4b38      	ldr	r3, [pc, #224]	@ (8002720 <HAL_ETH_Init+0x134>)
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4936      	ldr	r1, [pc, #216]	@ (8002720 <HAL_ETH_Init+0x134>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800264c:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <HAL_ETH_Init+0x134>)
 800264e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002666:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002668:	f7ff fe5c 	bl	8002324 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800266e:	e011      	b.n	8002694 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002670:	f7ff fe58 	bl	8002324 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800267e:	d909      	bls.n	8002694 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2204      	movs	r2, #4
 8002684:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	22e0      	movs	r2, #224	@ 0xe0
 800268c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e03f      	b.n	8002714 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1e4      	bne.n	8002670 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fa5e 	bl	8002b68 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fb09 	bl	8002cc4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fb5f 	bl	8002d76 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	461a      	mov	r2, r3
 80026be:	2100      	movs	r1, #0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fac7 	bl	8002c54 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80026d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026ea:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80026fe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2210      	movs	r2, #16
 800270e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800

08002724 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002732:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_ETH_IRQHandler+0x158>)
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00e      	beq.n	800277a <HAL_ETH_IRQHandler+0x56>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276e:	461a      	mov	r2, r3
 8002770:	4b43      	ldr	r3, [pc, #268]	@ (8002880 <HAL_ETH_IRQHandler+0x15c>)
 8002772:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f891 	bl	800289c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00f      	beq.n	80027a4 <HAL_ETH_IRQHandler+0x80>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002796:	461a      	mov	r2, r3
 8002798:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800279c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f872 	bl	8002888 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d042      	beq.n	8002834 <HAL_ETH_IRQHandler+0x110>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d03d      	beq.n	8002834 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027be:	f043 0208 	orr.w	r2, r3, #8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01a      	beq.n	8002808 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	4b29      	ldr	r3, [pc, #164]	@ (8002884 <HAL_ETH_IRQHandler+0x160>)
 80027de:	4013      	ands	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80027f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027fc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	22e0      	movs	r2, #224	@ 0xe0
 8002802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002806:	e012      	b.n	800282e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002816:	4013      	ands	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002826:	461a      	mov	r2, r3
 8002828:	f248 6380 	movw	r3, #34432	@ 0x8680
 800282c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f83e 	bl	80028b0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00e      	beq.n	800285c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f838 	bl	80028c4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002866:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_ETH_IRQHandler+0x158>)
 8002868:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800286c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f832 	bl	80028d8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002874:	bf00      	nop
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40013c00 	.word	0x40013c00
 8002880:	00010040 	.word	0x00010040
 8002884:	007e2000 	.word	0x007e2000

08002888 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4b53      	ldr	r3, [pc, #332]	@ (8002a50 <ETH_SetMACConfig+0x164>)
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	7b9b      	ldrb	r3, [r3, #14]
 800290a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	7c12      	ldrb	r2, [r2, #16]
 8002910:	2a00      	cmp	r2, #0
 8002912:	d102      	bne.n	800291a <ETH_SetMACConfig+0x2e>
 8002914:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002918:	e000      	b.n	800291c <ETH_SetMACConfig+0x30>
 800291a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800291c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	7c52      	ldrb	r2, [r2, #17]
 8002922:	2a00      	cmp	r2, #0
 8002924:	d102      	bne.n	800292c <ETH_SetMACConfig+0x40>
 8002926:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800292a:	e000      	b.n	800292e <ETH_SetMACConfig+0x42>
 800292c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800292e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002934:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	7fdb      	ldrb	r3, [r3, #31]
 800293a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800293c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002942:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	7f92      	ldrb	r2, [r2, #30]
 8002948:	2a00      	cmp	r2, #0
 800294a:	d102      	bne.n	8002952 <ETH_SetMACConfig+0x66>
 800294c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002950:	e000      	b.n	8002954 <ETH_SetMACConfig+0x68>
 8002952:	2200      	movs	r2, #0
                        macconf->Speed |
 8002954:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	7f1b      	ldrb	r3, [r3, #28]
 800295a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800295c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002962:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	791b      	ldrb	r3, [r3, #4]
 8002968:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800296a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002972:	2a00      	cmp	r2, #0
 8002974:	d102      	bne.n	800297c <ETH_SetMACConfig+0x90>
 8002976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800297a:	e000      	b.n	800297e <ETH_SetMACConfig+0x92>
 800297c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800297e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	7bdb      	ldrb	r3, [r3, #15]
 8002984:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002986:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800298c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002994:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002996:	4313      	orrs	r3, r2
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7ff fcc4 	bl	800233c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80029ca:	4013      	ands	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80029da:	2a00      	cmp	r2, #0
 80029dc:	d101      	bne.n	80029e2 <ETH_SetMACConfig+0xf6>
 80029de:	2280      	movs	r2, #128	@ 0x80
 80029e0:	e000      	b.n	80029e4 <ETH_SetMACConfig+0xf8>
 80029e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80029f2:	2a01      	cmp	r2, #1
 80029f4:	d101      	bne.n	80029fa <ETH_SetMACConfig+0x10e>
 80029f6:	2208      	movs	r2, #8
 80029f8:	e000      	b.n	80029fc <ETH_SetMACConfig+0x110>
 80029fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80029fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002a04:	2a01      	cmp	r2, #1
 8002a06:	d101      	bne.n	8002a0c <ETH_SetMACConfig+0x120>
 8002a08:	2204      	movs	r2, #4
 8002a0a:	e000      	b.n	8002a0e <ETH_SetMACConfig+0x122>
 8002a0c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a0e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002a16:	2a01      	cmp	r2, #1
 8002a18:	d101      	bne.n	8002a1e <ETH_SetMACConfig+0x132>
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	e000      	b.n	8002a20 <ETH_SetMACConfig+0x134>
 8002a1e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a20:	4313      	orrs	r3, r2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff fc7f 	bl	800233c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	fd20810f 	.word	0xfd20810f

08002a54 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b64 <ETH_SetDMAConfig+0x110>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	7b1b      	ldrb	r3, [r3, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <ETH_SetDMAConfig+0x2c>
 8002a7a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a7e:	e000      	b.n	8002a82 <ETH_SetDMAConfig+0x2e>
 8002a80:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	7b5b      	ldrb	r3, [r3, #13]
 8002a86:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a88:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	7f52      	ldrb	r2, [r2, #29]
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	d102      	bne.n	8002a98 <ETH_SetDMAConfig+0x44>
 8002a92:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a96:	e000      	b.n	8002a9a <ETH_SetDMAConfig+0x46>
 8002a98:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a9a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	7b9b      	ldrb	r3, [r3, #14]
 8002aa0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002aa2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002aa8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	7f1b      	ldrb	r3, [r3, #28]
 8002aae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002ab0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	7f9b      	ldrb	r3, [r3, #30]
 8002ab6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ab8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002abe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ac6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f7ff fc26 	bl	800233c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af8:	461a      	mov	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	791b      	ldrb	r3, [r3, #4]
 8002b02:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b08:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b0e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b14:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b1c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b1e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b26:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b2c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b3a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f7ff fbf7 	bl	800233c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	f8de3f23 	.word	0xf8de3f23

08002b68 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0a6      	sub	sp, #152	@ 0x98
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002baa:	2300      	movs	r3, #0
 8002bac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bd0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002bd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002be2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002be6:	4619      	mov	r1, r3
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fe7f 	bl	80028ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c22:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c28:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c2e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff05 	bl	8002a54 <ETH_SetDMAConfig>
}
 8002c4a:	bf00      	nop
 8002c4c:	3798      	adds	r7, #152	@ 0x98
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3305      	adds	r3, #5
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3204      	adds	r2, #4
 8002c6c:	7812      	ldrb	r2, [r2, #0]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <ETH_MACAddressConfig+0x68>)
 8002c76:	4413      	add	r3, r2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3303      	adds	r3, #3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	061a      	lsls	r2, r3, #24
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3302      	adds	r3, #2
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3301      	adds	r3, #1
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <ETH_MACAddressConfig+0x6c>)
 8002ca6:	4413      	add	r3, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	6013      	str	r3, [r2, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40028040 	.word	0x40028040
 8002cc0:	40028044 	.word	0x40028044

08002cc4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e03e      	b.n	8002d50 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68d9      	ldr	r1, [r3, #12]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	3206      	adds	r2, #6
 8002d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d80c      	bhi.n	8002d34 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68d9      	ldr	r1, [r3, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	e004      	b.n	8002d3e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d9bd      	bls.n	8002cd2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d68:	611a      	str	r2, [r3, #16]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	e048      	b.n	8002e16 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6919      	ldr	r1, [r3, #16]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2200      	movs	r2, #0
 8002db2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2200      	movs	r2, #0
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002dc0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	3212      	adds	r2, #18
 8002de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d80c      	bhi.n	8002e06 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6919      	ldr	r1, [r3, #16]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	60da      	str	r2, [r3, #12]
 8002e04:	e004      	b.n	8002e10 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3301      	adds	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d9b3      	bls.n	8002d84 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e46:	60da      	str	r2, [r3, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	@ 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e16b      	b.n	8003148 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e70:	2201      	movs	r2, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	f040 815a 	bne.w	8003142 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d005      	beq.n	8002ea6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d130      	bne.n	8002f08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002edc:	2201      	movs	r2, #1
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	091b      	lsrs	r3, r3, #4
 8002ef2:	f003 0201 	and.w	r2, r3, #1
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d017      	beq.n	8002f44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d123      	bne.n	8002f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	08da      	lsrs	r2, r3, #3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3208      	adds	r2, #8
 8002f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	220f      	movs	r2, #15
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	69b9      	ldr	r1, [r7, #24]
 8002f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0203 	and.w	r2, r3, #3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80b4 	beq.w	8003142 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b60      	ldr	r3, [pc, #384]	@ (8003160 <HAL_GPIO_Init+0x30c>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	4a5f      	ldr	r2, [pc, #380]	@ (8003160 <HAL_GPIO_Init+0x30c>)
 8002fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fea:	4b5d      	ldr	r3, [pc, #372]	@ (8003160 <HAL_GPIO_Init+0x30c>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8003164 <HAL_GPIO_Init+0x310>)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	089b      	lsrs	r3, r3, #2
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	220f      	movs	r2, #15
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a52      	ldr	r2, [pc, #328]	@ (8003168 <HAL_GPIO_Init+0x314>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d02b      	beq.n	800307a <HAL_GPIO_Init+0x226>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a51      	ldr	r2, [pc, #324]	@ (800316c <HAL_GPIO_Init+0x318>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d025      	beq.n	8003076 <HAL_GPIO_Init+0x222>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a50      	ldr	r2, [pc, #320]	@ (8003170 <HAL_GPIO_Init+0x31c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01f      	beq.n	8003072 <HAL_GPIO_Init+0x21e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a4f      	ldr	r2, [pc, #316]	@ (8003174 <HAL_GPIO_Init+0x320>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d019      	beq.n	800306e <HAL_GPIO_Init+0x21a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a4e      	ldr	r2, [pc, #312]	@ (8003178 <HAL_GPIO_Init+0x324>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_GPIO_Init+0x216>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a4d      	ldr	r2, [pc, #308]	@ (800317c <HAL_GPIO_Init+0x328>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00d      	beq.n	8003066 <HAL_GPIO_Init+0x212>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4c      	ldr	r2, [pc, #304]	@ (8003180 <HAL_GPIO_Init+0x32c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d007      	beq.n	8003062 <HAL_GPIO_Init+0x20e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4b      	ldr	r2, [pc, #300]	@ (8003184 <HAL_GPIO_Init+0x330>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_GPIO_Init+0x20a>
 800305a:	2307      	movs	r3, #7
 800305c:	e00e      	b.n	800307c <HAL_GPIO_Init+0x228>
 800305e:	2308      	movs	r3, #8
 8003060:	e00c      	b.n	800307c <HAL_GPIO_Init+0x228>
 8003062:	2306      	movs	r3, #6
 8003064:	e00a      	b.n	800307c <HAL_GPIO_Init+0x228>
 8003066:	2305      	movs	r3, #5
 8003068:	e008      	b.n	800307c <HAL_GPIO_Init+0x228>
 800306a:	2304      	movs	r3, #4
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x228>
 800306e:	2303      	movs	r3, #3
 8003070:	e004      	b.n	800307c <HAL_GPIO_Init+0x228>
 8003072:	2302      	movs	r3, #2
 8003074:	e002      	b.n	800307c <HAL_GPIO_Init+0x228>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_GPIO_Init+0x228>
 800307a:	2300      	movs	r3, #0
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f002 0203 	and.w	r2, r2, #3
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	4093      	lsls	r3, r2
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800308c:	4935      	ldr	r1, [pc, #212]	@ (8003164 <HAL_GPIO_Init+0x310>)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800309a:	4b3b      	ldr	r3, [pc, #236]	@ (8003188 <HAL_GPIO_Init+0x334>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030be:	4a32      	ldr	r2, [pc, #200]	@ (8003188 <HAL_GPIO_Init+0x334>)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c4:	4b30      	ldr	r3, [pc, #192]	@ (8003188 <HAL_GPIO_Init+0x334>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e8:	4a27      	ldr	r2, [pc, #156]	@ (8003188 <HAL_GPIO_Init+0x334>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ee:	4b26      	ldr	r3, [pc, #152]	@ (8003188 <HAL_GPIO_Init+0x334>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003112:	4a1d      	ldr	r2, [pc, #116]	@ (8003188 <HAL_GPIO_Init+0x334>)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003118:	4b1b      	ldr	r3, [pc, #108]	@ (8003188 <HAL_GPIO_Init+0x334>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800313c:	4a12      	ldr	r2, [pc, #72]	@ (8003188 <HAL_GPIO_Init+0x334>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	f67f ae90 	bls.w	8002e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3724      	adds	r7, #36	@ 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	40013800 	.word	0x40013800
 8003168:	40020000 	.word	0x40020000
 800316c:	40020400 	.word	0x40020400
 8003170:	40020800 	.word	0x40020800
 8003174:	40020c00 	.word	0x40020c00
 8003178:	40021000 	.word	0x40021000
 800317c:	40021400 	.word	0x40021400
 8003180:	40021800 	.word	0x40021800
 8003184:	40021c00 	.word	0x40021c00
 8003188:	40013c00 	.word	0x40013c00

0800318c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
 8003198:	4613      	mov	r3, r2
 800319a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800319c:	787b      	ldrb	r3, [r7, #1]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031a8:	e003      	b.n	80031b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	041a      	lsls	r2, r3, #16
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	619a      	str	r2, [r3, #24]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e267      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d075      	beq.n	80032ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031de:	4b88      	ldr	r3, [pc, #544]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d00c      	beq.n	8003204 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b85      	ldr	r3, [pc, #532]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d112      	bne.n	800321c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b82      	ldr	r3, [pc, #520]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003202:	d10b      	bne.n	800321c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	4b7e      	ldr	r3, [pc, #504]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d05b      	beq.n	80032c8 <HAL_RCC_OscConfig+0x108>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d157      	bne.n	80032c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e242      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x74>
 8003226:	4b76      	ldr	r3, [pc, #472]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a75      	ldr	r2, [pc, #468]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e01d      	b.n	8003270 <HAL_RCC_OscConfig+0xb0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x98>
 800323e:	4b70      	ldr	r3, [pc, #448]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6f      	ldr	r2, [pc, #444]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b6d      	ldr	r3, [pc, #436]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6c      	ldr	r2, [pc, #432]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0xb0>
 8003258:	4b69      	ldr	r3, [pc, #420]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a68      	ldr	r2, [pc, #416]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b66      	ldr	r3, [pc, #408]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a65      	ldr	r2, [pc, #404]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800326e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7ff f854 	bl	8002324 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7ff f850 	bl	8002324 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	@ 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e207      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b5b      	ldr	r3, [pc, #364]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xc0>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7ff f840 	bl	8002324 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a8:	f7ff f83c 	bl	8002324 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	@ 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e1f3      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	4b51      	ldr	r3, [pc, #324]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0xe8>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d063      	beq.n	800339e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b47      	ldr	r3, [pc, #284]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d11c      	bne.n	8003328 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b44      	ldr	r3, [pc, #272]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d116      	bne.n	8003328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	4b41      	ldr	r3, [pc, #260]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_RCC_OscConfig+0x152>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1c7      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4937      	ldr	r1, [pc, #220]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	e03a      	b.n	800339e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003330:	4b34      	ldr	r3, [pc, #208]	@ (8003404 <HAL_RCC_OscConfig+0x244>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fe fff5 	bl	8002324 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333e:	f7fe fff1 	bl	8002324 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1a8      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b28      	ldr	r3, [pc, #160]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4925      	ldr	r1, [pc, #148]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003372:	4b24      	ldr	r3, [pc, #144]	@ (8003404 <HAL_RCC_OscConfig+0x244>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe ffd4 	bl	8002324 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003380:	f7fe ffd0 	bl	8002324 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e187      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	4b1b      	ldr	r3, [pc, #108]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d036      	beq.n	8003418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b2:	4b15      	ldr	r3, [pc, #84]	@ (8003408 <HAL_RCC_OscConfig+0x248>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fe ffb4 	bl	8002324 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fe ffb0 	bl	8002324 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e167      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_OscConfig+0x240>)
 80033d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x200>
 80033de:	e01b      	b.n	8003418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <HAL_RCC_OscConfig+0x248>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e6:	f7fe ff9d 	bl	8002324 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	e00e      	b.n	800340c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ee:	f7fe ff99 	bl	8002324 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d907      	bls.n	800340c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e150      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
 8003400:	40023800 	.word	0x40023800
 8003404:	42470000 	.word	0x42470000
 8003408:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	4b88      	ldr	r3, [pc, #544]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 800340e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ea      	bne.n	80033ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8097 	beq.w	8003554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4b81      	ldr	r3, [pc, #516]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	4b7d      	ldr	r3, [pc, #500]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	4a7c      	ldr	r2, [pc, #496]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003444:	6413      	str	r3, [r2, #64]	@ 0x40
 8003446:	4b7a      	ldr	r3, [pc, #488]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b77      	ldr	r3, [pc, #476]	@ (8003634 <HAL_RCC_OscConfig+0x474>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d118      	bne.n	8003494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b74      	ldr	r3, [pc, #464]	@ (8003634 <HAL_RCC_OscConfig+0x474>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a73      	ldr	r2, [pc, #460]	@ (8003634 <HAL_RCC_OscConfig+0x474>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fe ff59 	bl	8002324 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003476:	f7fe ff55 	bl	8002324 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e10c      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	4b6a      	ldr	r3, [pc, #424]	@ (8003634 <HAL_RCC_OscConfig+0x474>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x2ea>
 800349c:	4b64      	ldr	r3, [pc, #400]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a0:	4a63      	ldr	r2, [pc, #396]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a8:	e01c      	b.n	80034e4 <HAL_RCC_OscConfig+0x324>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x30c>
 80034b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034be:	4b5c      	ldr	r3, [pc, #368]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0x324>
 80034cc:	4b58      	ldr	r3, [pc, #352]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d0:	4a57      	ldr	r2, [pc, #348]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d8:	4b55      	ldr	r3, [pc, #340]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034dc:	4a54      	ldr	r2, [pc, #336]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d015      	beq.n	8003518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ec:	f7fe ff1a 	bl	8002324 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	e00a      	b.n	800350a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f4:	f7fe ff16 	bl	8002324 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e0cb      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350a:	4b49      	ldr	r3, [pc, #292]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0ee      	beq.n	80034f4 <HAL_RCC_OscConfig+0x334>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7fe ff04 	bl	8002324 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351e:	e00a      	b.n	8003536 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003520:	f7fe ff00 	bl	8002324 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0b5      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003536:	4b3e      	ldr	r3, [pc, #248]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ee      	bne.n	8003520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003548:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	4a38      	ldr	r2, [pc, #224]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 800354e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003552:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a1 	beq.w	80036a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800355e:	4b34      	ldr	r3, [pc, #208]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b08      	cmp	r3, #8
 8003568:	d05c      	beq.n	8003624 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d141      	bne.n	80035f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b31      	ldr	r3, [pc, #196]	@ (8003638 <HAL_RCC_OscConfig+0x478>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe fed4 	bl	8002324 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fe fed0 	bl	8002324 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e087      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69da      	ldr	r2, [r3, #28]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	085b      	lsrs	r3, r3, #1
 80035b6:	3b01      	subs	r3, #1
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	491b      	ldr	r1, [pc, #108]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_RCC_OscConfig+0x478>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fe fea9 	bl	8002324 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe fea5 	bl	8002324 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e05c      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x416>
 80035f4:	e054      	b.n	80036a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <HAL_RCC_OscConfig+0x478>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fe fe92 	bl	8002324 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fe fe8e 	bl	8002324 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e045      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <HAL_RCC_OscConfig+0x470>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x444>
 8003622:	e03d      	b.n	80036a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d107      	bne.n	800363c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e038      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
 8003630:	40023800 	.word	0x40023800
 8003634:	40007000 	.word	0x40007000
 8003638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800363c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ac <HAL_RCC_OscConfig+0x4ec>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d028      	beq.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d121      	bne.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d11a      	bne.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800366c:	4013      	ands	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003674:	4293      	cmp	r3, r2
 8003676:	d111      	bne.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	3b01      	subs	r3, #1
 8003686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d107      	bne.n	800369c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40023800 	.word	0x40023800

080036b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0cc      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b68      	ldr	r3, [pc, #416]	@ (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d90c      	bls.n	80036ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b65      	ldr	r3, [pc, #404]	@ (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b63      	ldr	r3, [pc, #396]	@ (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0b8      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d020      	beq.n	800373a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003704:	4b59      	ldr	r3, [pc, #356]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a58      	ldr	r2, [pc, #352]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800370e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800371c:	4b53      	ldr	r3, [pc, #332]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a52      	ldr	r2, [pc, #328]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b50      	ldr	r3, [pc, #320]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	494d      	ldr	r1, [pc, #308]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d044      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b47      	ldr	r3, [pc, #284]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d119      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e07f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d003      	beq.n	800376e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800376a:	2b03      	cmp	r3, #3
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	4b3f      	ldr	r3, [pc, #252]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e06f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b3b      	ldr	r3, [pc, #236]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e067      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b37      	ldr	r3, [pc, #220]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4934      	ldr	r1, [pc, #208]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a0:	f7fe fdc0 	bl	8002324 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fe fdbc 	bl	8002324 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e04f      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b2b      	ldr	r3, [pc, #172]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b25      	ldr	r3, [pc, #148]	@ (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d20c      	bcs.n	80037f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b22      	ldr	r3, [pc, #136]	@ (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e032      	b.n	800385e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003804:	4b19      	ldr	r3, [pc, #100]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4916      	ldr	r1, [pc, #88]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	490e      	ldr	r1, [pc, #56]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003836:	f000 f895 	bl	8003964 <HAL_RCC_GetSysClockFreq>
 800383a:	4602      	mov	r2, r0
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	490a      	ldr	r1, [pc, #40]	@ (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	5ccb      	ldrb	r3, [r1, r3]
 800384a:	fa22 f303 	lsr.w	r3, r2, r3
 800384e:	4a09      	ldr	r2, [pc, #36]	@ (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003852:	4b09      	ldr	r3, [pc, #36]	@ (8003878 <HAL_RCC_ClockConfig+0x1c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fd20 	bl	800229c <HAL_InitTick>

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023c00 	.word	0x40023c00
 800386c:	40023800 	.word	0x40023800
 8003870:	080084a4 	.word	0x080084a4
 8003874:	20000000 	.word	0x20000000
 8003878:	20000004 	.word	0x20000004

0800387c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08c      	sub	sp, #48	@ 0x30
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d129      	bne.n	80038e2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	4b2b      	ldr	r3, [pc, #172]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	4a2a      	ldr	r2, [pc, #168]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6313      	str	r3, [r2, #48]	@ 0x30
 800389e:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80038aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b4:	2303      	movs	r3, #3
 80038b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80038bc:	2300      	movs	r3, #0
 80038be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80038c0:	f107 031c 	add.w	r3, r7, #28
 80038c4:	4619      	mov	r1, r3
 80038c6:	481f      	ldr	r0, [pc, #124]	@ (8003944 <HAL_RCC_MCOConfig+0xc8>)
 80038c8:	f7ff fac4 	bl	8002e54 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80038cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 80038d4:	68b9      	ldr	r1, [r7, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	430b      	orrs	r3, r1
 80038da:	4919      	ldr	r1, [pc, #100]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80038e0:	e029      	b.n	8003936 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	4a15      	ldr	r2, [pc, #84]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 80038ec:	f043 0304 	orr.w	r3, r3, #4
 80038f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f2:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80038fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003904:	2302      	movs	r3, #2
 8003906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003908:	2303      	movs	r3, #3
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003914:	f107 031c 	add.w	r3, r7, #28
 8003918:	4619      	mov	r1, r3
 800391a:	480b      	ldr	r0, [pc, #44]	@ (8003948 <HAL_RCC_MCOConfig+0xcc>)
 800391c:	f7ff fa9a 	bl	8002e54 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003920:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	00d9      	lsls	r1, r3, #3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	430b      	orrs	r3, r1
 8003930:	4903      	ldr	r1, [pc, #12]	@ (8003940 <HAL_RCC_MCOConfig+0xc4>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
}
 8003936:	bf00      	nop
 8003938:	3730      	adds	r7, #48	@ 0x30
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40023800 	.word	0x40023800
 8003944:	40020000 	.word	0x40020000
 8003948:	40020800 	.word	0x40020800

0800394c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <HAL_RCC_EnableCSS+0x14>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	4247004c 	.word	0x4247004c

08003964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b094      	sub	sp, #80	@ 0x50
 800396a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800397c:	4b79      	ldr	r3, [pc, #484]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d00d      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003988:	2b08      	cmp	r3, #8
 800398a:	f200 80e1 	bhi.w	8003b50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x34>
 8003992:	2b04      	cmp	r3, #4
 8003994:	d003      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x3a>
 8003996:	e0db      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003998:	4b73      	ldr	r3, [pc, #460]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x204>)
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800399c:	e0db      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800399e:	4b73      	ldr	r3, [pc, #460]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x208>)
 80039a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039a2:	e0d8      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d063      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	2200      	movs	r2, #0
 80039c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ce:	2300      	movs	r3, #0
 80039d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039d6:	4622      	mov	r2, r4
 80039d8:	462b      	mov	r3, r5
 80039da:	f04f 0000 	mov.w	r0, #0
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	0159      	lsls	r1, r3, #5
 80039e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e8:	0150      	lsls	r0, r2, #5
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4621      	mov	r1, r4
 80039f0:	1a51      	subs	r1, r2, r1
 80039f2:	6139      	str	r1, [r7, #16]
 80039f4:	4629      	mov	r1, r5
 80039f6:	eb63 0301 	sbc.w	r3, r3, r1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a08:	4659      	mov	r1, fp
 8003a0a:	018b      	lsls	r3, r1, #6
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a12:	4651      	mov	r1, sl
 8003a14:	018a      	lsls	r2, r1, #6
 8003a16:	4651      	mov	r1, sl
 8003a18:	ebb2 0801 	subs.w	r8, r2, r1
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a36:	4690      	mov	r8, r2
 8003a38:	4699      	mov	r9, r3
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	eb18 0303 	adds.w	r3, r8, r3
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	462b      	mov	r3, r5
 8003a44:	eb49 0303 	adc.w	r3, r9, r3
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a56:	4629      	mov	r1, r5
 8003a58:	024b      	lsls	r3, r1, #9
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a60:	4621      	mov	r1, r4
 8003a62:	024a      	lsls	r2, r1, #9
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a74:	f7fd f898 	bl	8000ba8 <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a80:	e058      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a82:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a92:	623b      	str	r3, [r7, #32]
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	f04f 0000 	mov.w	r0, #0
 8003aa4:	f04f 0100 	mov.w	r1, #0
 8003aa8:	0159      	lsls	r1, r3, #5
 8003aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aae:	0150      	lsls	r0, r2, #5
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aba:	4649      	mov	r1, r9
 8003abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	00eb      	lsls	r3, r5, #3
 8003ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aea:	00e2      	lsls	r2, r4, #3
 8003aec:	4614      	mov	r4, r2
 8003aee:	461d      	mov	r5, r3
 8003af0:	4643      	mov	r3, r8
 8003af2:	18e3      	adds	r3, r4, r3
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	464b      	mov	r3, r9
 8003af8:	eb45 0303 	adc.w	r3, r5, r3
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	028b      	lsls	r3, r1, #10
 8003b0e:	4621      	mov	r1, r4
 8003b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b14:	4621      	mov	r1, r4
 8003b16:	028a      	lsls	r2, r1, #10
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b1e:	2200      	movs	r2, #0
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	61fa      	str	r2, [r7, #28]
 8003b24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b28:	f7fd f83e 	bl	8000ba8 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4613      	mov	r3, r2
 8003b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3750      	adds	r7, #80	@ 0x50
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	007a1200 	.word	0x007a1200

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b03      	ldr	r3, [pc, #12]	@ (8003b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000000 	.word	0x20000000

08003b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b8c:	f7ff fff0 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0a9b      	lsrs	r3, r3, #10
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4903      	ldr	r1, [pc, #12]	@ (8003bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	080084b4 	.word	0x080084b4

08003bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb4:	f7ff ffdc 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0b5b      	lsrs	r3, r3, #13
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	@ (8003bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	080084b4 	.word	0x080084b4

08003bd8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003bdc:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	d104      	bne.n	8003bf2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003be8:	f000 f80a 	bl	8003c00 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003bec:	4b03      	ldr	r3, [pc, #12]	@ (8003bfc <HAL_RCC_NMI_IRQHandler+0x24>)
 8003bee:	2280      	movs	r2, #128	@ 0x80
 8003bf0:	701a      	strb	r2, [r3, #0]
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	4002380e 	.word	0x4002380e

08003c00 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d035      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c38:	4b62      	ldr	r3, [pc, #392]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c3e:	f7fe fb71 	bl	8002324 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c46:	f7fe fb6d 	bl	8002324 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e0b0      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c58:	4b5b      	ldr	r3, [pc, #364]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	019a      	lsls	r2, r3, #6
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	071b      	lsls	r3, r3, #28
 8003c70:	4955      	ldr	r1, [pc, #340]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c78:	4b52      	ldr	r3, [pc, #328]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c7e:	f7fe fb51 	bl	8002324 <HAL_GetTick>
 8003c82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c86:	f7fe fb4d 	bl	8002324 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e090      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c98:	4b4b      	ldr	r3, [pc, #300]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8083 	beq.w	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	4b44      	ldr	r3, [pc, #272]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	4a43      	ldr	r2, [pc, #268]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc2:	4b41      	ldr	r3, [pc, #260]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003cce:	4b3f      	ldr	r3, [pc, #252]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cda:	f7fe fb23 	bl	8002324 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fe fb1f 	bl	8002324 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e062      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003cf4:	4b35      	ldr	r3, [pc, #212]	@ (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d00:	4b31      	ldr	r3, [pc, #196]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d08:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d02f      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d028      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d28:	4b29      	ldr	r3, [pc, #164]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d2e:	4b28      	ldr	r3, [pc, #160]	@ (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d34:	4a24      	ldr	r2, [pc, #144]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d3a:	4b23      	ldr	r3, [pc, #140]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d114      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d46:	f7fe faed 	bl	8002324 <HAL_GetTick>
 8003d4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4c:	e00a      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d4e:	f7fe fae9 	bl	8002324 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e02a      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d64:	4b18      	ldr	r3, [pc, #96]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ee      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d7c:	d10d      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003d7e:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d92:	490d      	ldr	r1, [pc, #52]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
 8003d98:	e005      	b.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003da4:	6093      	str	r3, [r2, #8]
 8003da6:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db2:	4905      	ldr	r1, [pc, #20]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	42470068 	.word	0x42470068
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	42470e40 	.word	0x42470e40

08003dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07b      	b.n	8003ede <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003df6:	d009      	beq.n	8003e0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	61da      	str	r2, [r3, #28]
 8003dfe:	e005      	b.n	8003e0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fe f866 	bl	8001ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e90:	ea42 0103 	orr.w	r1, r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	f003 0104 	and.w	r1, r3, #4
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	f003 0210 	and.w	r2, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ecc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b088      	sub	sp, #32
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef6:	f7fe fa15 	bl	8002324 <HAL_GetTick>
 8003efa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d001      	beq.n	8003f10 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e12a      	b.n	8004166 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_Transmit+0x36>
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e122      	b.n	8004166 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_SPI_Transmit+0x48>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e11b      	b.n	8004166 <HAL_SPI_Transmit+0x280>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	88fa      	ldrh	r2, [r7, #6]
 8003f4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f7c:	d10f      	bne.n	8003f9e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa8:	2b40      	cmp	r3, #64	@ 0x40
 8003faa:	d007      	beq.n	8003fbc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc4:	d152      	bne.n	800406c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_Transmit+0xee>
 8003fce:	8b7b      	ldrh	r3, [r7, #26]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d145      	bne.n	8004060 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	881a      	ldrh	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe4:	1c9a      	adds	r2, r3, #2
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ff8:	e032      	b.n	8004060 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d112      	bne.n	800402e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	1c9a      	adds	r2, r3, #2
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800402c:	e018      	b.n	8004060 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800402e:	f7fe f979 	bl	8002324 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d803      	bhi.n	8004046 <HAL_SPI_Transmit+0x160>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d102      	bne.n	800404c <HAL_SPI_Transmit+0x166>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d109      	bne.n	8004060 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e082      	b.n	8004166 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1c7      	bne.n	8003ffa <HAL_SPI_Transmit+0x114>
 800406a:	e053      	b.n	8004114 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_SPI_Transmit+0x194>
 8004074:	8b7b      	ldrh	r3, [r7, #26]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d147      	bne.n	800410a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	7812      	ldrb	r2, [r2, #0]
 8004086:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040a0:	e033      	b.n	800410a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d113      	bne.n	80040d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	7812      	ldrb	r2, [r2, #0]
 80040bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80040d6:	e018      	b.n	800410a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040d8:	f7fe f924 	bl	8002324 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d803      	bhi.n	80040f0 <HAL_SPI_Transmit+0x20a>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d102      	bne.n	80040f6 <HAL_SPI_Transmit+0x210>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e02d      	b.n	8004166 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1c6      	bne.n	80040a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	6839      	ldr	r1, [r7, #0]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fbd9 	bl	80048d0 <SPI_EndRxTxTransaction>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004164:	2300      	movs	r3, #0
  }
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b088      	sub	sp, #32
 8004172:	af02      	add	r7, sp, #8
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d001      	beq.n	800418e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
 800418c:	e104      	b.n	8004398 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SPI_Receive+0x2c>
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0fc      	b.n	8004398 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041a6:	d112      	bne.n	80041ce <HAL_SPI_Receive+0x60>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10e      	bne.n	80041ce <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2204      	movs	r2, #4
 80041b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041b8:	88fa      	ldrh	r2, [r7, #6]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f8eb 	bl	80043a0 <HAL_SPI_TransmitReceive>
 80041ca:	4603      	mov	r3, r0
 80041cc:	e0e4      	b.n	8004398 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041ce:	f7fe f8a9 	bl	8002324 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_SPI_Receive+0x74>
 80041de:	2302      	movs	r3, #2
 80041e0:	e0da      	b.n	8004398 <HAL_SPI_Receive+0x22a>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2204      	movs	r2, #4
 80041ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004230:	d10f      	bne.n	8004252 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004240:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004250:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425c:	2b40      	cmp	r3, #64	@ 0x40
 800425e:	d007      	beq.n	8004270 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800426e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d170      	bne.n	800435a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004278:	e035      	b.n	80042e6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b01      	cmp	r3, #1
 8004286:	d115      	bne.n	80042b4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f103 020c 	add.w	r2, r3, #12
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	7812      	ldrb	r2, [r2, #0]
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042b2:	e018      	b.n	80042e6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042b4:	f7fe f836 	bl	8002324 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d803      	bhi.n	80042cc <HAL_SPI_Receive+0x15e>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d102      	bne.n	80042d2 <HAL_SPI_Receive+0x164>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e058      	b.n	8004398 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1c4      	bne.n	800427a <HAL_SPI_Receive+0x10c>
 80042f0:	e038      	b.n	8004364 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d113      	bne.n	8004328 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430a:	b292      	uxth	r2, r2
 800430c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	1c9a      	adds	r2, r3, #2
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004326:	e018      	b.n	800435a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004328:	f7fd fffc 	bl	8002324 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d803      	bhi.n	8004340 <HAL_SPI_Receive+0x1d2>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d102      	bne.n	8004346 <HAL_SPI_Receive+0x1d8>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e01e      	b.n	8004398 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1c6      	bne.n	80042f2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	6839      	ldr	r1, [r7, #0]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fa4b 	bl	8004804 <SPI_EndRxTransaction>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004396:	2300      	movs	r3, #0
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	@ 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043ae:	2301      	movs	r3, #1
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043b2:	f7fd ffb7 	bl	8002324 <HAL_GetTick>
 80043b6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043be:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043ca:	7ffb      	ldrb	r3, [r7, #31]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d00c      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x4a>
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043d6:	d106      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x46>
 80043e0:	7ffb      	ldrb	r3, [r7, #31]
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d001      	beq.n	80043ea <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80043e6:	2302      	movs	r3, #2
 80043e8:	e17f      	b.n	80046ea <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_SPI_TransmitReceive+0x5c>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_SPI_TransmitReceive+0x5c>
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e174      	b.n	80046ea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_SPI_TransmitReceive+0x6e>
 800440a:	2302      	movs	r3, #2
 800440c:	e16d      	b.n	80046ea <HAL_SPI_TransmitReceive+0x34a>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b04      	cmp	r3, #4
 8004420:	d003      	beq.n	800442a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2205      	movs	r2, #5
 8004426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	887a      	ldrh	r2, [r7, #2]
 800443a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	887a      	ldrh	r2, [r7, #2]
 800444c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	887a      	ldrh	r2, [r7, #2]
 8004452:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446a:	2b40      	cmp	r3, #64	@ 0x40
 800446c:	d007      	beq.n	800447e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800447c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004486:	d17e      	bne.n	8004586 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_TransmitReceive+0xf6>
 8004490:	8afb      	ldrh	r3, [r7, #22]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d16c      	bne.n	8004570 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	881a      	ldrh	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	1c9a      	adds	r2, r3, #2
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044ba:	e059      	b.n	8004570 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d11b      	bne.n	8004502 <HAL_SPI_TransmitReceive+0x162>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d016      	beq.n	8004502 <HAL_SPI_TransmitReceive+0x162>
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d113      	bne.n	8004502 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	881a      	ldrh	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	1c9a      	adds	r2, r3, #2
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d119      	bne.n	8004544 <HAL_SPI_TransmitReceive+0x1a4>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d014      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	b292      	uxth	r2, r2
 8004526:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452c:	1c9a      	adds	r2, r3, #2
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004540:	2301      	movs	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004544:	f7fd feee 	bl	8002324 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004550:	429a      	cmp	r2, r3
 8004552:	d80d      	bhi.n	8004570 <HAL_SPI_TransmitReceive+0x1d0>
 8004554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d009      	beq.n	8004570 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e0bc      	b.n	80046ea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1a0      	bne.n	80044bc <HAL_SPI_TransmitReceive+0x11c>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d19b      	bne.n	80044bc <HAL_SPI_TransmitReceive+0x11c>
 8004584:	e082      	b.n	800468c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x1f4>
 800458e:	8afb      	ldrh	r3, [r7, #22]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d171      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ba:	e05d      	b.n	8004678 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d11c      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x264>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <HAL_SPI_TransmitReceive+0x264>
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d114      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	7812      	ldrb	r2, [r2, #0]
 80045e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d119      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x2a6>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	d014      	beq.n	8004646 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004642:	2301      	movs	r3, #1
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004646:	f7fd fe6d 	bl	8002324 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004652:	429a      	cmp	r2, r3
 8004654:	d803      	bhi.n	800465e <HAL_SPI_TransmitReceive+0x2be>
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d102      	bne.n	8004664 <HAL_SPI_TransmitReceive+0x2c4>
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e038      	b.n	80046ea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d19c      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x21c>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d197      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800468c:	6a3a      	ldr	r2, [r7, #32]
 800468e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f91d 	bl	80048d0 <SPI_EndRxTxTransaction>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e01d      	b.n	80046ea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80046e8:	2300      	movs	r3, #0
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3728      	adds	r7, #40	@ 0x28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004704:	f7fd fe0e 	bl	8002324 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4413      	add	r3, r2
 8004712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004714:	f7fd fe06 	bl	8002324 <HAL_GetTick>
 8004718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800471a:	4b39      	ldr	r3, [pc, #228]	@ (8004800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	015b      	lsls	r3, r3, #5
 8004720:	0d1b      	lsrs	r3, r3, #20
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472a:	e055      	b.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d051      	beq.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004734:	f7fd fdf6 	bl	8002324 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	429a      	cmp	r2, r3
 8004742:	d902      	bls.n	800474a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13d      	bne.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004762:	d111      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800476c:	d004      	beq.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004776:	d107      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004790:	d10f      	bne.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e018      	b.n	80047f8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e002      	b.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4013      	ands	r3, r2
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d19a      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000000 	.word	0x20000000

08004804 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004818:	d111      	bne.n	800483e <SPI_EndRxTransaction+0x3a>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004822:	d004      	beq.n	800482e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800482c:	d107      	bne.n	800483e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004846:	d12a      	bne.n	800489e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004850:	d012      	beq.n	8004878 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2200      	movs	r2, #0
 800485a:	2180      	movs	r1, #128	@ 0x80
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7ff ff49 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d02d      	beq.n	80048c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e026      	b.n	80048c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2200      	movs	r2, #0
 8004880:	2101      	movs	r1, #1
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff ff36 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01a      	beq.n	80048c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004892:	f043 0220 	orr.w	r2, r3, #32
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e013      	b.n	80048c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2200      	movs	r2, #0
 80048a6:	2101      	movs	r1, #1
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff ff23 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e000      	b.n	80048c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2201      	movs	r2, #1
 80048e4:	2102      	movs	r1, #2
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff ff04 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e032      	b.n	8004968 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004902:	4b1b      	ldr	r3, [pc, #108]	@ (8004970 <SPI_EndRxTxTransaction+0xa0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <SPI_EndRxTxTransaction+0xa4>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	0d5b      	lsrs	r3, r3, #21
 800490e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004920:	d112      	bne.n	8004948 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2200      	movs	r2, #0
 800492a:	2180      	movs	r1, #128	@ 0x80
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7ff fee1 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d016      	beq.n	8004966 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e00f      	b.n	8004968 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	3b01      	subs	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495e:	2b80      	cmp	r3, #128	@ 0x80
 8004960:	d0f2      	beq.n	8004948 <SPI_EndRxTxTransaction+0x78>
 8004962:	e000      	b.n	8004966 <SPI_EndRxTxTransaction+0x96>
        break;
 8004964:	bf00      	nop
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20000000 	.word	0x20000000
 8004974:	165e9f81 	.word	0x165e9f81

08004978 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e038      	b.n	8004a00 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7fc ff0e 	bl	80017c4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3308      	adds	r3, #8
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f000 faec 	bl	8004f90 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	461a      	mov	r2, r3
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	f000 fb4e 	bl	8005064 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6858      	ldr	r0, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	f000 fb73 	bl	80050c0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	6892      	ldr	r2, [r2, #8]
 80049e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	f041 0101 	orr.w	r1, r1, #1
 80049f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e042      	b.n	8004aa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fdd8 	bl	80055e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	@ 0x24
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f82b 	bl	8004aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aac:	b0c0      	sub	sp, #256	@ 0x100
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac4:	68d9      	ldr	r1, [r3, #12]
 8004ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	ea40 0301 	orr.w	r3, r0, r1
 8004ad0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b00:	f021 010c 	bic.w	r1, r1, #12
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b22:	6999      	ldr	r1, [r3, #24]
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	ea40 0301 	orr.w	r3, r0, r1
 8004b2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4b8f      	ldr	r3, [pc, #572]	@ (8004d74 <UART_SetConfig+0x2cc>)
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d005      	beq.n	8004b48 <UART_SetConfig+0xa0>
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b8d      	ldr	r3, [pc, #564]	@ (8004d78 <UART_SetConfig+0x2d0>)
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d104      	bne.n	8004b52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b48:	f7ff f832 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 8004b4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b50:	e003      	b.n	8004b5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b52:	f7ff f819 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8004b56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b64:	f040 810c 	bne.w	8004d80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	1891      	adds	r1, r2, r2
 8004b80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004b82:	415b      	adcs	r3, r3
 8004b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	eb12 0801 	adds.w	r8, r2, r1
 8004b90:	4629      	mov	r1, r5
 8004b92:	eb43 0901 	adc.w	r9, r3, r1
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004baa:	4690      	mov	r8, r2
 8004bac:	4699      	mov	r9, r3
 8004bae:	4623      	mov	r3, r4
 8004bb0:	eb18 0303 	adds.w	r3, r8, r3
 8004bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bb8:	462b      	mov	r3, r5
 8004bba:	eb49 0303 	adc.w	r3, r9, r3
 8004bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	18db      	adds	r3, r3, r3
 8004bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bdc:	4613      	mov	r3, r2
 8004bde:	eb42 0303 	adc.w	r3, r2, r3
 8004be2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004be4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004be8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004bec:	f7fb ffdc 	bl	8000ba8 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4b61      	ldr	r3, [pc, #388]	@ (8004d7c <UART_SetConfig+0x2d4>)
 8004bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	011c      	lsls	r4, r3, #4
 8004bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c10:	4642      	mov	r2, r8
 8004c12:	464b      	mov	r3, r9
 8004c14:	1891      	adds	r1, r2, r2
 8004c16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c18:	415b      	adcs	r3, r3
 8004c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c20:	4641      	mov	r1, r8
 8004c22:	eb12 0a01 	adds.w	sl, r2, r1
 8004c26:	4649      	mov	r1, r9
 8004c28:	eb43 0b01 	adc.w	fp, r3, r1
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c40:	4692      	mov	sl, r2
 8004c42:	469b      	mov	fp, r3
 8004c44:	4643      	mov	r3, r8
 8004c46:	eb1a 0303 	adds.w	r3, sl, r3
 8004c4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c4e:	464b      	mov	r3, r9
 8004c50:	eb4b 0303 	adc.w	r3, fp, r3
 8004c54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	18db      	adds	r3, r3, r3
 8004c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c72:	4613      	mov	r3, r2
 8004c74:	eb42 0303 	adc.w	r3, r2, r3
 8004c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004c82:	f7fb ff91 	bl	8000ba8 <__aeabi_uldivmod>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d7c <UART_SetConfig+0x2d4>)
 8004c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2264      	movs	r2, #100	@ 0x64
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	1acb      	subs	r3, r1, r3
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ca2:	4b36      	ldr	r3, [pc, #216]	@ (8004d7c <UART_SetConfig+0x2d4>)
 8004ca4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cb0:	441c      	add	r4, r3
 8004cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	1891      	adds	r1, r2, r2
 8004cca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ccc:	415b      	adcs	r3, r3
 8004cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	1851      	adds	r1, r2, r1
 8004cd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cda:	4649      	mov	r1, r9
 8004cdc:	414b      	adcs	r3, r1
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004cec:	4659      	mov	r1, fp
 8004cee:	00cb      	lsls	r3, r1, #3
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf6:	4651      	mov	r1, sl
 8004cf8:	00ca      	lsls	r2, r1, #3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4642      	mov	r2, r8
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d08:	464b      	mov	r3, r9
 8004d0a:	460a      	mov	r2, r1
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d28:	460b      	mov	r3, r1
 8004d2a:	18db      	adds	r3, r3, r3
 8004d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d2e:	4613      	mov	r3, r2
 8004d30:	eb42 0303 	adc.w	r3, r2, r3
 8004d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d3e:	f7fb ff33 	bl	8000ba8 <__aeabi_uldivmod>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4b0d      	ldr	r3, [pc, #52]	@ (8004d7c <UART_SetConfig+0x2d4>)
 8004d48:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	2164      	movs	r1, #100	@ 0x64
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	3332      	adds	r3, #50	@ 0x32
 8004d5a:	4a08      	ldr	r2, [pc, #32]	@ (8004d7c <UART_SetConfig+0x2d4>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	f003 0207 	and.w	r2, r3, #7
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4422      	add	r2, r4
 8004d6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d70:	e106      	b.n	8004f80 <UART_SetConfig+0x4d8>
 8004d72:	bf00      	nop
 8004d74:	40011000 	.word	0x40011000
 8004d78:	40011400 	.word	0x40011400
 8004d7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004d8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004d92:	4642      	mov	r2, r8
 8004d94:	464b      	mov	r3, r9
 8004d96:	1891      	adds	r1, r2, r2
 8004d98:	6239      	str	r1, [r7, #32]
 8004d9a:	415b      	adcs	r3, r3
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004da2:	4641      	mov	r1, r8
 8004da4:	1854      	adds	r4, r2, r1
 8004da6:	4649      	mov	r1, r9
 8004da8:	eb43 0501 	adc.w	r5, r3, r1
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	00eb      	lsls	r3, r5, #3
 8004db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dba:	00e2      	lsls	r2, r4, #3
 8004dbc:	4614      	mov	r4, r2
 8004dbe:	461d      	mov	r5, r3
 8004dc0:	4643      	mov	r3, r8
 8004dc2:	18e3      	adds	r3, r4, r3
 8004dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dc8:	464b      	mov	r3, r9
 8004dca:	eb45 0303 	adc.w	r3, r5, r3
 8004dce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004dee:	4629      	mov	r1, r5
 8004df0:	008b      	lsls	r3, r1, #2
 8004df2:	4621      	mov	r1, r4
 8004df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df8:	4621      	mov	r1, r4
 8004dfa:	008a      	lsls	r2, r1, #2
 8004dfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e00:	f7fb fed2 	bl	8000ba8 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4b60      	ldr	r3, [pc, #384]	@ (8004f8c <UART_SetConfig+0x4e4>)
 8004e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	011c      	lsls	r4, r3, #4
 8004e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e24:	4642      	mov	r2, r8
 8004e26:	464b      	mov	r3, r9
 8004e28:	1891      	adds	r1, r2, r2
 8004e2a:	61b9      	str	r1, [r7, #24]
 8004e2c:	415b      	adcs	r3, r3
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e34:	4641      	mov	r1, r8
 8004e36:	1851      	adds	r1, r2, r1
 8004e38:	6139      	str	r1, [r7, #16]
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	414b      	adcs	r3, r1
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	00cb      	lsls	r3, r1, #3
 8004e50:	4651      	mov	r1, sl
 8004e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e56:	4651      	mov	r1, sl
 8004e58:	00ca      	lsls	r2, r1, #3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	4642      	mov	r2, r8
 8004e62:	189b      	adds	r3, r3, r2
 8004e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e68:	464b      	mov	r3, r9
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	eb42 0303 	adc.w	r3, r2, r3
 8004e70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	008b      	lsls	r3, r1, #2
 8004e90:	4641      	mov	r1, r8
 8004e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e96:	4641      	mov	r1, r8
 8004e98:	008a      	lsls	r2, r1, #2
 8004e9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004e9e:	f7fb fe83 	bl	8000ba8 <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4b38      	ldr	r3, [pc, #224]	@ (8004f8c <UART_SetConfig+0x4e4>)
 8004eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2264      	movs	r2, #100	@ 0x64
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	1acb      	subs	r3, r1, r3
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	3332      	adds	r3, #50	@ 0x32
 8004ebc:	4a33      	ldr	r2, [pc, #204]	@ (8004f8c <UART_SetConfig+0x4e4>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ec8:	441c      	add	r4, r3
 8004eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ece:	2200      	movs	r2, #0
 8004ed0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ed2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ed4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ee8:	4641      	mov	r1, r8
 8004eea:	1851      	adds	r1, r2, r1
 8004eec:	6039      	str	r1, [r7, #0]
 8004eee:	4649      	mov	r1, r9
 8004ef0:	414b      	adcs	r3, r1
 8004ef2:	607b      	str	r3, [r7, #4]
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f00:	4659      	mov	r1, fp
 8004f02:	00cb      	lsls	r3, r1, #3
 8004f04:	4651      	mov	r1, sl
 8004f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	00ca      	lsls	r2, r1, #3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4619      	mov	r1, r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	4642      	mov	r2, r8
 8004f16:	189b      	adds	r3, r3, r2
 8004f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	460a      	mov	r2, r1
 8004f1e:	eb42 0303 	adc.w	r3, r2, r3
 8004f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	008b      	lsls	r3, r1, #2
 8004f40:	4641      	mov	r1, r8
 8004f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f46:	4641      	mov	r1, r8
 8004f48:	008a      	lsls	r2, r1, #2
 8004f4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f4e:	f7fb fe2b 	bl	8000ba8 <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <UART_SetConfig+0x4e4>)
 8004f58:	fba3 1302 	umull	r1, r3, r3, r2
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	2164      	movs	r1, #100	@ 0x64
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	3332      	adds	r3, #50	@ 0x32
 8004f6a:	4a08      	ldr	r2, [pc, #32]	@ (8004f8c <UART_SetConfig+0x4e4>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	f003 020f 	and.w	r2, r3, #15
 8004f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4422      	add	r2, r4
 8004f7e:	609a      	str	r2, [r3, #8]
}
 8004f80:	bf00      	nop
 8004f82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004f86:	46bd      	mov	sp, r7
 8004f88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8c:	51eb851f 	.word	0x51eb851f

08004f90 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	f023 0101 	bic.w	r1, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d102      	bne.n	8004fc0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004fba:	2340      	movs	r3, #64	@ 0x40
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	e001      	b.n	8004fc4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004fd0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004fd6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004fdc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004fe2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004fe8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004fee:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8004ff4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8004ffa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005000:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800501e:	4b10      	ldr	r3, [pc, #64]	@ (8005060 <FSMC_NORSRAM_Init+0xd0>)
 8005020:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005028:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005030:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	43db      	mvns	r3, r3
 8005040:	ea02 0103 	and.w	r1, r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4319      	orrs	r1, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	0008fb7f 	.word	0x0008fb7f

08005064 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800507a:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8005082:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 800508a:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	3b01      	subs	r3, #1
 8005092:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8005094:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	3b02      	subs	r3, #2
 800509c:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800509e:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80050aa:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050d4:	d11d      	bne.n	8005112 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80050de:	4b13      	ldr	r3, [pc, #76]	@ (800512c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	6811      	ldr	r1, [r2, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	6852      	ldr	r2, [r2, #4]
 80050ea:	0112      	lsls	r2, r2, #4
 80050ec:	4311      	orrs	r1, r2
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	6892      	ldr	r2, [r2, #8]
 80050f2:	0212      	lsls	r2, r2, #8
 80050f4:	4311      	orrs	r1, r2
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	6992      	ldr	r2, [r2, #24]
 80050fa:	4311      	orrs	r1, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	68d2      	ldr	r2, [r2, #12]
 8005100:	0412      	lsls	r2, r2, #16
 8005102:	430a      	orrs	r2, r1
 8005104:	ea43 0102 	orr.w	r1, r3, r2
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005110:	e005      	b.n	800511e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800511a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	cff00000 	.word	0xcff00000

08005130 <lcd_wr_data>:
 * @brief       LCD写数据
 * @param       data: 要写入的数据
 * @retval      无
 */
void lcd_wr_data(volatile uint16_t data)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	80fb      	strh	r3, [r7, #6]
    data = data;            /* 使用-O2优化的时候,必须插入的延时 */
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	b29b      	uxth	r3, r3
 800513e:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 8005140:	4b04      	ldr	r3, [pc, #16]	@ (8005154 <lcd_wr_data+0x24>)
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	b292      	uxth	r2, r2
 8005146:	805a      	strh	r2, [r3, #2]
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	6c00007e 	.word	0x6c00007e

08005158 <lcd_wr_regno>:
 * @brief       LCD写寄存器编号/地址函数
 * @param       regno: 寄存器编号/地址
 * @retval      无
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	80fb      	strh	r3, [r7, #6]
    regno = regno;          /* 使用-O2优化的时候,必须插入的延时 */
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	b29b      	uxth	r3, r3
 8005166:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* 写入要写的寄存器序号 */
 8005168:	4b04      	ldr	r3, [pc, #16]	@ (800517c <lcd_wr_regno+0x24>)
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	b292      	uxth	r2, r2
 800516e:	801a      	strh	r2, [r3, #0]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	6c00007e 	.word	0x6c00007e

08005180 <lcd_write_ram_prepare>:
 * @brief       准备写GRAM
 * @param       无
 * @retval      无
 */
void lcd_write_ram_prepare(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 8005184:	4b04      	ldr	r3, [pc, #16]	@ (8005198 <lcd_write_ram_prepare+0x18>)
 8005186:	4a05      	ldr	r2, [pc, #20]	@ (800519c <lcd_write_ram_prepare+0x1c>)
 8005188:	8912      	ldrh	r2, [r2, #8]
 800518a:	801a      	strh	r2, [r3, #0]
}
 800518c:	bf00      	nop
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	6c00007e 	.word	0x6c00007e
 800519c:	20000608 	.word	0x20000608

080051a0 <lcd_set_cursor>:
 * @brief       设置光标位置(对RGB屏无效)
 * @param       x,y: 坐标
 * @retval      无
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	460a      	mov	r2, r1
 80051aa:	80fb      	strh	r3, [r7, #6]
 80051ac:	4613      	mov	r3, r2
 80051ae:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0x1963)
 80051b0:	4b65      	ldr	r3, [pc, #404]	@ (8005348 <lcd_set_cursor+0x1a8>)
 80051b2:	889b      	ldrh	r3, [r3, #4]
 80051b4:	f641 1263 	movw	r2, #6499	@ 0x1963
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d167      	bne.n	800528c <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* 竖屏模式, x坐标需要变换 */
 80051bc:	4b62      	ldr	r3, [pc, #392]	@ (8005348 <lcd_set_cursor+0x1a8>)
 80051be:	799b      	ldrb	r3, [r3, #6]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d11e      	bne.n	8005202 <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 80051c4:	4b60      	ldr	r3, [pc, #384]	@ (8005348 <lcd_set_cursor+0x1a8>)
 80051c6:	881a      	ldrh	r2, [r3, #0]
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 80051d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005348 <lcd_set_cursor+0x1a8>)
 80051d4:	895b      	ldrh	r3, [r3, #10]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ffbe 	bl	8005158 <lcd_wr_regno>
            lcd_wr_data(0);
 80051dc:	2000      	movs	r0, #0
 80051de:	f7ff ffa7 	bl	8005130 <lcd_wr_data>
            lcd_wr_data(0);
 80051e2:	2000      	movs	r0, #0
 80051e4:	f7ff ffa4 	bl	8005130 <lcd_wr_data>
            lcd_wr_data(x >> 8);
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff ff9e 	bl	8005130 <lcd_wr_data>
            lcd_wr_data(x & 0xFF);
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff ff98 	bl	8005130 <lcd_wr_data>
 8005200:	e021      	b.n	8005246 <lcd_set_cursor+0xa6>
        }
        else                    /* 横屏模式 */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8005202:	4b51      	ldr	r3, [pc, #324]	@ (8005348 <lcd_set_cursor+0x1a8>)
 8005204:	895b      	ldrh	r3, [r3, #10]
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff ffa6 	bl	8005158 <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	b29b      	uxth	r3, r3
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff ff8c 	bl	8005130 <lcd_wr_data>
            lcd_wr_data(x & 0xFF);
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	b29b      	uxth	r3, r3
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff ff86 	bl	8005130 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 8005224:	4b48      	ldr	r3, [pc, #288]	@ (8005348 <lcd_set_cursor+0x1a8>)
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	3b01      	subs	r3, #1
 800522a:	121b      	asrs	r3, r3, #8
 800522c:	b29b      	uxth	r3, r3
 800522e:	4618      	mov	r0, r3
 8005230:	f7ff ff7e 	bl	8005130 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0xFF);
 8005234:	4b44      	ldr	r3, [pc, #272]	@ (8005348 <lcd_set_cursor+0x1a8>)
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	3b01      	subs	r3, #1
 800523a:	b29b      	uxth	r3, r3
 800523c:	b2db      	uxtb	r3, r3
 800523e:	b29b      	uxth	r3, r3
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff75 	bl	8005130 <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 8005246:	4b40      	ldr	r3, [pc, #256]	@ (8005348 <lcd_set_cursor+0x1a8>)
 8005248:	899b      	ldrh	r3, [r3, #12]
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff ff84 	bl	8005158 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8005250:	88bb      	ldrh	r3, [r7, #4]
 8005252:	0a1b      	lsrs	r3, r3, #8
 8005254:	b29b      	uxth	r3, r3
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff ff6a 	bl	8005130 <lcd_wr_data>
        lcd_wr_data(y & 0xFF);
 800525c:	88bb      	ldrh	r3, [r7, #4]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	b29b      	uxth	r3, r3
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff64 	bl	8005130 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8005268:	4b37      	ldr	r3, [pc, #220]	@ (8005348 <lcd_set_cursor+0x1a8>)
 800526a:	885b      	ldrh	r3, [r3, #2]
 800526c:	3b01      	subs	r3, #1
 800526e:	121b      	asrs	r3, r3, #8
 8005270:	b29b      	uxth	r3, r3
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff ff5c 	bl	8005130 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0xFF);
 8005278:	4b33      	ldr	r3, [pc, #204]	@ (8005348 <lcd_set_cursor+0x1a8>)
 800527a:	885b      	ldrh	r3, [r3, #2]
 800527c:	3b01      	subs	r3, #1
 800527e:	b29b      	uxth	r3, r3
 8005280:	b2db      	uxtb	r3, r3
 8005282:	b29b      	uxth	r3, r3
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff ff53 	bl	8005130 <lcd_wr_data>
        lcd_wr_data(x & 0xFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0xFF);
    }
}
 800528a:	e058      	b.n	800533e <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0x5510)
 800528c:	4b2e      	ldr	r3, [pc, #184]	@ (8005348 <lcd_set_cursor+0x1a8>)
 800528e:	889b      	ldrh	r3, [r3, #4]
 8005290:	f245 5210 	movw	r2, #21776	@ 0x5510
 8005294:	4293      	cmp	r3, r2
 8005296:	d130      	bne.n	80052fa <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 8005298:	4b2b      	ldr	r3, [pc, #172]	@ (8005348 <lcd_set_cursor+0x1a8>)
 800529a:	895b      	ldrh	r3, [r3, #10]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff ff5b 	bl	8005158 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	0a1b      	lsrs	r3, r3, #8
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff ff41 	bl	8005130 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 80052ae:	4b26      	ldr	r3, [pc, #152]	@ (8005348 <lcd_set_cursor+0x1a8>)
 80052b0:	895b      	ldrh	r3, [r3, #10]
 80052b2:	3301      	adds	r3, #1
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff ff4e 	bl	8005158 <lcd_wr_regno>
        lcd_wr_data(x & 0xFF);
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff ff34 	bl	8005130 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 80052c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005348 <lcd_set_cursor+0x1a8>)
 80052ca:	899b      	ldrh	r3, [r3, #12]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ff43 	bl	8005158 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 80052d2:	88bb      	ldrh	r3, [r7, #4]
 80052d4:	0a1b      	lsrs	r3, r3, #8
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff ff29 	bl	8005130 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 80052de:	4b1a      	ldr	r3, [pc, #104]	@ (8005348 <lcd_set_cursor+0x1a8>)
 80052e0:	899b      	ldrh	r3, [r3, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff ff36 	bl	8005158 <lcd_wr_regno>
        lcd_wr_data(y & 0xFF);
 80052ec:	88bb      	ldrh	r3, [r7, #4]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff ff1c 	bl	8005130 <lcd_wr_data>
}
 80052f8:	e021      	b.n	800533e <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 80052fa:	4b13      	ldr	r3, [pc, #76]	@ (8005348 <lcd_set_cursor+0x1a8>)
 80052fc:	895b      	ldrh	r3, [r3, #10]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff ff2a 	bl	8005158 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	b29b      	uxth	r3, r3
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff ff10 	bl	8005130 <lcd_wr_data>
        lcd_wr_data(x & 0xFF);
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	b29b      	uxth	r3, r3
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff ff0a 	bl	8005130 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 800531c:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <lcd_set_cursor+0x1a8>)
 800531e:	899b      	ldrh	r3, [r3, #12]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff ff19 	bl	8005158 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8005326:	88bb      	ldrh	r3, [r7, #4]
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	b29b      	uxth	r3, r3
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff feff 	bl	8005130 <lcd_wr_data>
        lcd_wr_data(y & 0xFF);
 8005332:	88bb      	ldrh	r3, [r7, #4]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	b29b      	uxth	r3, r3
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fef9 	bl	8005130 <lcd_wr_data>
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000608 	.word	0x20000608

0800534c <lcd_draw_point>:
 * @param       x,y: 坐标
 * @param       color: 点的颜色(32位颜色,方便兼容LTDC)
 * @retval      无
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	603a      	str	r2, [r7, #0]
 8005356:	80fb      	strh	r3, [r7, #6]
 8005358:	460b      	mov	r3, r1
 800535a:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* 设置光标位置 */
 800535c:	88ba      	ldrh	r2, [r7, #4]
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	4611      	mov	r1, r2
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff ff1c 	bl	80051a0 <lcd_set_cursor>
    lcd_write_ram_prepare();    /* 开始写入GRAM */
 8005368:	f7ff ff0a 	bl	8005180 <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 800536c:	4b03      	ldr	r3, [pc, #12]	@ (800537c <lcd_draw_point+0x30>)
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	b292      	uxth	r2, r2
 8005372:	805a      	strh	r2, [r3, #2]
}
 8005374:	bf00      	nop
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	6c00007e 	.word	0x6c00007e

08005380 <lcd_show_char>:
 * @param       size : 字体大小 12/16/24/32
 * @param       mode : 叠加方式(1); 非叠加方式(0);
 * @retval      无
 */
void lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size, uint8_t mode, uint16_t color)
{
 8005380:	b590      	push	{r4, r7, lr}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	4611      	mov	r1, r2
 800538c:	461a      	mov	r2, r3
 800538e:	4623      	mov	r3, r4
 8005390:	80fb      	strh	r3, [r7, #6]
 8005392:	4603      	mov	r3, r0
 8005394:	80bb      	strh	r3, [r7, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	70fb      	strb	r3, [r7, #3]
 800539a:	4613      	mov	r3, r2
 800539c:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 800539e:	88bb      	ldrh	r3, [r7, #4]
 80053a0:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* 得到字体一个字符对应点阵集所占的字节数 */
 80053aa:	78bb      	ldrb	r3, [r7, #2]
 80053ac:	08db      	lsrs	r3, r3, #3
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	78bb      	ldrb	r3, [r7, #2]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	4413      	add	r3, r2
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	78bb      	ldrb	r3, [r7, #2]
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	fb12 f303 	smulbb	r3, r2, r3
 80053d2:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* 得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库） */
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	3b20      	subs	r3, #32
 80053d8:	70fb      	strb	r3, [r7, #3]

    switch (size)
 80053da:	78bb      	ldrb	r3, [r7, #2]
 80053dc:	3b0c      	subs	r3, #12
 80053de:	2b14      	cmp	r3, #20
 80053e0:	f200 8099 	bhi.w	8005516 <lcd_show_char+0x196>
 80053e4:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <lcd_show_char+0x6c>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005441 	.word	0x08005441
 80053f0:	08005517 	.word	0x08005517
 80053f4:	08005517 	.word	0x08005517
 80053f8:	08005517 	.word	0x08005517
 80053fc:	08005453 	.word	0x08005453
 8005400:	08005517 	.word	0x08005517
 8005404:	08005517 	.word	0x08005517
 8005408:	08005517 	.word	0x08005517
 800540c:	08005517 	.word	0x08005517
 8005410:	08005517 	.word	0x08005517
 8005414:	08005517 	.word	0x08005517
 8005418:	08005517 	.word	0x08005517
 800541c:	0800545f 	.word	0x0800545f
 8005420:	08005517 	.word	0x08005517
 8005424:	08005517 	.word	0x08005517
 8005428:	08005517 	.word	0x08005517
 800542c:	08005517 	.word	0x08005517
 8005430:	08005517 	.word	0x08005517
 8005434:	08005517 	.word	0x08005517
 8005438:	08005517 	.word	0x08005517
 800543c:	08005471 	.word	0x08005471
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* 调用1206字体 */
 8005440:	78fa      	ldrb	r2, [r7, #3]
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4a36      	ldr	r2, [pc, #216]	@ (8005524 <lcd_show_char+0x1a4>)
 800544c:	4413      	add	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
            break;
 8005450:	e014      	b.n	800547c <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* 调用1608字体 */
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	4a34      	ldr	r2, [pc, #208]	@ (8005528 <lcd_show_char+0x1a8>)
 8005458:	4413      	add	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
            break;
 800545c:	e00e      	b.n	800547c <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* 调用2412字体 */
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	4613      	mov	r3, r2
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	4413      	add	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4a30      	ldr	r2, [pc, #192]	@ (800552c <lcd_show_char+0x1ac>)
 800546a:	4413      	add	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
            break;
 800546e:	e005      	b.n	800547c <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* 调用3216字体 */
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	019b      	lsls	r3, r3, #6
 8005474:	4a2e      	ldr	r2, [pc, #184]	@ (8005530 <lcd_show_char+0x1b0>)
 8005476:	4413      	add	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
            break;
 800547a:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 800547c:	2300      	movs	r3, #0
 800547e:	757b      	strb	r3, [r7, #21]
 8005480:	e044      	b.n	800550c <lcd_show_char+0x18c>
    {
        temp = pfont[t];                            /* 获取字符的点阵数据 */
 8005482:	7d7b      	ldrb	r3, [r7, #21]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)                  /* 一个字节8个点 */
 800548c:	2300      	movs	r3, #0
 800548e:	75bb      	strb	r3, [r7, #22]
 8005490:	e034      	b.n	80054fc <lcd_show_char+0x17c>
        {
            if (temp & 0x80)                        /* 有效点,需要显示 */
 8005492:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005496:	2b00      	cmp	r3, #0
 8005498:	da06      	bge.n	80054a8 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* 画点出来,要显示这个点 */
 800549a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800549c:	88b9      	ldrh	r1, [r7, #4]
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff ff53 	bl	800534c <lcd_draw_point>
 80054a6:	e00a      	b.n	80054be <lcd_show_char+0x13e>
            }
            else if (mode == 0)                     /* 无效点,不显示 */
 80054a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* 画背景色,相当于这个点不显示(注意背景色由全局变量控制) */
 80054b0:	4b20      	ldr	r3, [pc, #128]	@ (8005534 <lcd_show_char+0x1b4>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	88b9      	ldrh	r1, [r7, #4]
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff ff47 	bl	800534c <lcd_draw_point>
            }

            temp <<= 1;                             /* 移位, 以便获取下一个位的状态 */
 80054be:	7dfb      	ldrb	r3, [r7, #23]
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	75fb      	strb	r3, [r7, #23]
            y++;
 80054c4:	88bb      	ldrh	r3, [r7, #4]
 80054c6:	3301      	adds	r3, #1
 80054c8:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;          /* 超区域了 */
 80054ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <lcd_show_char+0x1b8>)
 80054cc:	885b      	ldrh	r3, [r3, #2]
 80054ce:	88ba      	ldrh	r2, [r7, #4]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d222      	bcs.n	800551a <lcd_show_char+0x19a>

            if ((y - y0) == size)                   /* 显示完一列了? */
 80054d4:	88ba      	ldrh	r2, [r7, #4]
 80054d6:	89fb      	ldrh	r3, [r7, #14]
 80054d8:	1ad2      	subs	r2, r2, r3
 80054da:	78bb      	ldrb	r3, [r7, #2]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d10a      	bne.n	80054f6 <lcd_show_char+0x176>
            {
                y = y0; /* y坐标复位 */
 80054e0:	89fb      	ldrh	r3, [r7, #14]
 80054e2:	80bb      	strh	r3, [r7, #4]
                x++;    /* x坐标递增 */
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	3301      	adds	r3, #1
 80054e8:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)
 80054ea:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <lcd_show_char+0x1b8>)
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d307      	bcc.n	8005504 <lcd_show_char+0x184>
                {
                    return;       /* x坐标超区域了 */
 80054f4:	e012      	b.n	800551c <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)                  /* 一个字节8个点 */
 80054f6:	7dbb      	ldrb	r3, [r7, #22]
 80054f8:	3301      	adds	r3, #1
 80054fa:	75bb      	strb	r3, [r7, #22]
 80054fc:	7dbb      	ldrb	r3, [r7, #22]
 80054fe:	2b07      	cmp	r3, #7
 8005500:	d9c7      	bls.n	8005492 <lcd_show_char+0x112>
 8005502:	e000      	b.n	8005506 <lcd_show_char+0x186>
                }

                break;
 8005504:	bf00      	nop
    for (t = 0; t < csize; t++)
 8005506:	7d7b      	ldrb	r3, [r7, #21]
 8005508:	3301      	adds	r3, #1
 800550a:	757b      	strb	r3, [r7, #21]
 800550c:	7d7a      	ldrb	r2, [r7, #21]
 800550e:	7b7b      	ldrb	r3, [r7, #13]
 8005510:	429a      	cmp	r2, r3
 8005512:	d3b6      	bcc.n	8005482 <lcd_show_char+0x102>
 8005514:	e002      	b.n	800551c <lcd_show_char+0x19c>
            return ;
 8005516:	bf00      	nop
 8005518:	e000      	b.n	800551c <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;          /* 超区域了 */
 800551a:	bf00      	nop
            }
        }
    }
}
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bd90      	pop	{r4, r7, pc}
 8005522:	bf00      	nop
 8005524:	080084bc 	.word	0x080084bc
 8005528:	08008930 	.word	0x08008930
 800552c:	08008f20 	.word	0x08008f20
 8005530:	08009c7c 	.word	0x08009c7c
 8005534:	2000000c 	.word	0x2000000c
 8005538:	20000608 	.word	0x20000608

0800553c <lcd_show_str>:
 * @param       size        : 选择字体 12/16/24/32
 * @param       p           : 字符串首地址
 * @retval      无
 */
void lcd_show_str(uint16_t x, uint16_t y, uint8_t size, char *p, uint16_t color)
{
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b089      	sub	sp, #36	@ 0x24
 8005540:	af02      	add	r7, sp, #8
 8005542:	607b      	str	r3, [r7, #4]
 8005544:	4603      	mov	r3, r0
 8005546:	81fb      	strh	r3, [r7, #14]
 8005548:	460b      	mov	r3, r1
 800554a:	81bb      	strh	r3, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	72fb      	strb	r3, [r7, #11]
    uint8_t x0 = x;
 8005550:	89fb      	ldrh	r3, [r7, #14]
 8005552:	75fb      	strb	r3, [r7, #23]

    uint16_t width = x + size / 2 * strlen(p);
 8005554:	7afb      	ldrb	r3, [r7, #11]
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	461c      	mov	r4, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fa fe87 	bl	8000270 <strlen>
 8005562:	4603      	mov	r3, r0
 8005564:	b29b      	uxth	r3, r3
 8005566:	fb14 f303 	smulbb	r3, r4, r3
 800556a:	b29a      	uxth	r2, r3
 800556c:	89fb      	ldrh	r3, [r7, #14]
 800556e:	4413      	add	r3, r2
 8005570:	82bb      	strh	r3, [r7, #20]
    uint16_t height = y + size;
 8005572:	7afb      	ldrb	r3, [r7, #11]
 8005574:	b29a      	uxth	r2, r3
 8005576:	89bb      	ldrh	r3, [r7, #12]
 8005578:	4413      	add	r3, r2
 800557a:	827b      	strh	r3, [r7, #18]

    while ((*p <= '~') && (*p >= ' '))   /* 判断是不是非法字符! */
 800557c:	e024      	b.n	80055c8 <lcd_show_str+0x8c>
    {
        if (x >= width)
 800557e:	89fa      	ldrh	r2, [r7, #14]
 8005580:	8abb      	ldrh	r3, [r7, #20]
 8005582:	429a      	cmp	r2, r3
 8005584:	d306      	bcc.n	8005594 <lcd_show_str+0x58>
        {
            x = x0;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	81fb      	strh	r3, [r7, #14]
            y += size;
 800558a:	7afb      	ldrb	r3, [r7, #11]
 800558c:	b29a      	uxth	r2, r3
 800558e:	89bb      	ldrh	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	81bb      	strh	r3, [r7, #12]
        }

        if (y >= height)
 8005594:	89ba      	ldrh	r2, [r7, #12]
 8005596:	8a7b      	ldrh	r3, [r7, #18]
 8005598:	429a      	cmp	r2, r3
 800559a:	d21e      	bcs.n	80055da <lcd_show_str+0x9e>
        {
            break;      /* 退出 */
        }

        lcd_show_char(x, y, *p, size, 0, color);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	781a      	ldrb	r2, [r3, #0]
 80055a0:	7afc      	ldrb	r4, [r7, #11]
 80055a2:	89b9      	ldrh	r1, [r7, #12]
 80055a4:	89f8      	ldrh	r0, [r7, #14]
 80055a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	2300      	movs	r3, #0
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	4623      	mov	r3, r4
 80055b0:	f7ff fee6 	bl	8005380 <lcd_show_char>
        x += size / 2;
 80055b4:	7afb      	ldrb	r3, [r7, #11]
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	89fb      	ldrh	r3, [r7, #14]
 80055be:	4413      	add	r3, r2
 80055c0:	81fb      	strh	r3, [r7, #14]
        p++;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3301      	adds	r3, #1
 80055c6:	607b      	str	r3, [r7, #4]
    while ((*p <= '~') && (*p >= ' '))   /* 判断是不是非法字符! */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80055ce:	d805      	bhi.n	80055dc <lcd_show_str+0xa0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b1f      	cmp	r3, #31
 80055d6:	d8d2      	bhi.n	800557e <lcd_show_str+0x42>
    }
}
 80055d8:	e000      	b.n	80055dc <lcd_show_str+0xa0>
            break;      /* 退出 */
 80055da:	bf00      	nop
}
 80055dc:	bf00      	nop
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd90      	pop	{r4, r7, pc}

080055e4 <HAL_UART_MspInit>:
  * 返 回 值: 无
  * 说    明: 该函数被HAL库内部调用
  */

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==DEBUG_USARTx)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a17      	ldr	r2, [pc, #92]	@ (8005650 <HAL_UART_MspInit+0x6c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d127      	bne.n	8005646 <HAL_UART_MspInit+0x62>
  {
    /* 串口外设时钟使能 */
    DEBUG_USART_RCC_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	4b16      	ldr	r3, [pc, #88]	@ (8005654 <HAL_UART_MspInit+0x70>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	4a15      	ldr	r2, [pc, #84]	@ (8005654 <HAL_UART_MspInit+0x70>)
 8005600:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005604:	6413      	str	r3, [r2, #64]	@ 0x40
 8005606:	4b13      	ldr	r3, [pc, #76]	@ (8005654 <HAL_UART_MspInit+0x70>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
  
    /* 串口外设功能GPIO配置 */
    GPIO_InitStruct.Pin = DEBUG_USARTx_Tx_GPIO_PIN;
 8005612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005618:	2302      	movs	r3, #2
 800561a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800561c:	2301      	movs	r3, #1
 800561e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005620:	2303      	movs	r3, #3
 8005622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = DEBUG_USARTx_AFx;
 8005624:	2308      	movs	r3, #8
 8005626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DEBUG_USARTx_Tx_GPIO, &GPIO_InitStruct);
 8005628:	f107 030c 	add.w	r3, r7, #12
 800562c:	4619      	mov	r1, r3
 800562e:	480a      	ldr	r0, [pc, #40]	@ (8005658 <HAL_UART_MspInit+0x74>)
 8005630:	f7fd fc10 	bl	8002e54 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Pin = DEBUG_USARTx_Rx_GPIO_PIN;  
 8005634:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005638:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DEBUG_USARTx_Rx_GPIO, &GPIO_InitStruct);       
 800563a:	f107 030c 	add.w	r3, r7, #12
 800563e:	4619      	mov	r1, r3
 8005640:	4805      	ldr	r0, [pc, #20]	@ (8005658 <HAL_UART_MspInit+0x74>)
 8005642:	f7fd fc07 	bl	8002e54 <HAL_GPIO_Init>
  }  
}
 8005646:	bf00      	nop
 8005648:	3720      	adds	r7, #32
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40004c00 	.word	0x40004c00
 8005654:	40023800 	.word	0x40023800
 8005658:	40020800 	.word	0x40020800

0800565c <MX_DEBUG_USART_Init>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明：无
  */
void MX_DEBUG_USART_Init(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
  /* 使能串口功能引脚GPIO时钟 */
  DEBUG_USARTx_GPIO_ClK_ENABLE();
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
 8005666:	4b16      	ldr	r3, [pc, #88]	@ (80056c0 <MX_DEBUG_USART_Init+0x64>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	4a15      	ldr	r2, [pc, #84]	@ (80056c0 <MX_DEBUG_USART_Init+0x64>)
 800566c:	f043 0304 	orr.w	r3, r3, #4
 8005670:	6313      	str	r3, [r2, #48]	@ 0x30
 8005672:	4b13      	ldr	r3, [pc, #76]	@ (80056c0 <MX_DEBUG_USART_Init+0x64>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	607b      	str	r3, [r7, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
  
  husart_debug.Instance = DEBUG_USARTx;
 800567e:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <MX_DEBUG_USART_Init+0x68>)
 8005680:	4a11      	ldr	r2, [pc, #68]	@ (80056c8 <MX_DEBUG_USART_Init+0x6c>)
 8005682:	601a      	str	r2, [r3, #0]
  husart_debug.Init.BaudRate = DEBUG_USARTx_BAUDRATE;
 8005684:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <MX_DEBUG_USART_Init+0x68>)
 8005686:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800568a:	605a      	str	r2, [r3, #4]
  husart_debug.Init.WordLength = UART_WORDLENGTH_8B;
 800568c:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <MX_DEBUG_USART_Init+0x68>)
 800568e:	2200      	movs	r2, #0
 8005690:	609a      	str	r2, [r3, #8]
  husart_debug.Init.StopBits = UART_STOPBITS_1;
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <MX_DEBUG_USART_Init+0x68>)
 8005694:	2200      	movs	r2, #0
 8005696:	60da      	str	r2, [r3, #12]
  husart_debug.Init.Parity = UART_PARITY_NONE;
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <MX_DEBUG_USART_Init+0x68>)
 800569a:	2200      	movs	r2, #0
 800569c:	611a      	str	r2, [r3, #16]
  husart_debug.Init.Mode = UART_MODE_TX_RX;
 800569e:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <MX_DEBUG_USART_Init+0x68>)
 80056a0:	220c      	movs	r2, #12
 80056a2:	615a      	str	r2, [r3, #20]
  husart_debug.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056a4:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <MX_DEBUG_USART_Init+0x68>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	619a      	str	r2, [r3, #24]
  husart_debug.Init.OverSampling = UART_OVERSAMPLING_16;
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <MX_DEBUG_USART_Init+0x68>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&husart_debug);
 80056b0:	4804      	ldr	r0, [pc, #16]	@ (80056c4 <MX_DEBUG_USART_Init+0x68>)
 80056b2:	f7ff f9a9 	bl	8004a08 <HAL_UART_Init>
  
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800
 80056c4:	20000618 	.word	0x20000618
 80056c8:	40004c00 	.word	0x40004c00

080056cc <__cvt>:
 80056cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	ec57 6b10 	vmov	r6, r7, d0
 80056d4:	2f00      	cmp	r7, #0
 80056d6:	460c      	mov	r4, r1
 80056d8:	4619      	mov	r1, r3
 80056da:	463b      	mov	r3, r7
 80056dc:	bfbb      	ittet	lt
 80056de:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80056e2:	461f      	movlt	r7, r3
 80056e4:	2300      	movge	r3, #0
 80056e6:	232d      	movlt	r3, #45	@ 0x2d
 80056e8:	700b      	strb	r3, [r1, #0]
 80056ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056ec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80056f0:	4691      	mov	r9, r2
 80056f2:	f023 0820 	bic.w	r8, r3, #32
 80056f6:	bfbc      	itt	lt
 80056f8:	4632      	movlt	r2, r6
 80056fa:	4616      	movlt	r6, r2
 80056fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005700:	d005      	beq.n	800570e <__cvt+0x42>
 8005702:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005706:	d100      	bne.n	800570a <__cvt+0x3e>
 8005708:	3401      	adds	r4, #1
 800570a:	2102      	movs	r1, #2
 800570c:	e000      	b.n	8005710 <__cvt+0x44>
 800570e:	2103      	movs	r1, #3
 8005710:	ab03      	add	r3, sp, #12
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	ab02      	add	r3, sp, #8
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	ec47 6b10 	vmov	d0, r6, r7
 800571c:	4653      	mov	r3, sl
 800571e:	4622      	mov	r2, r4
 8005720:	f000 ff5e 	bl	80065e0 <_dtoa_r>
 8005724:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005728:	4605      	mov	r5, r0
 800572a:	d119      	bne.n	8005760 <__cvt+0x94>
 800572c:	f019 0f01 	tst.w	r9, #1
 8005730:	d00e      	beq.n	8005750 <__cvt+0x84>
 8005732:	eb00 0904 	add.w	r9, r0, r4
 8005736:	2200      	movs	r2, #0
 8005738:	2300      	movs	r3, #0
 800573a:	4630      	mov	r0, r6
 800573c:	4639      	mov	r1, r7
 800573e:	f7fb f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005742:	b108      	cbz	r0, 8005748 <__cvt+0x7c>
 8005744:	f8cd 900c 	str.w	r9, [sp, #12]
 8005748:	2230      	movs	r2, #48	@ 0x30
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	454b      	cmp	r3, r9
 800574e:	d31e      	bcc.n	800578e <__cvt+0xc2>
 8005750:	9b03      	ldr	r3, [sp, #12]
 8005752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005754:	1b5b      	subs	r3, r3, r5
 8005756:	4628      	mov	r0, r5
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	b004      	add	sp, #16
 800575c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005760:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005764:	eb00 0904 	add.w	r9, r0, r4
 8005768:	d1e5      	bne.n	8005736 <__cvt+0x6a>
 800576a:	7803      	ldrb	r3, [r0, #0]
 800576c:	2b30      	cmp	r3, #48	@ 0x30
 800576e:	d10a      	bne.n	8005786 <__cvt+0xba>
 8005770:	2200      	movs	r2, #0
 8005772:	2300      	movs	r3, #0
 8005774:	4630      	mov	r0, r6
 8005776:	4639      	mov	r1, r7
 8005778:	f7fb f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800577c:	b918      	cbnz	r0, 8005786 <__cvt+0xba>
 800577e:	f1c4 0401 	rsb	r4, r4, #1
 8005782:	f8ca 4000 	str.w	r4, [sl]
 8005786:	f8da 3000 	ldr.w	r3, [sl]
 800578a:	4499      	add	r9, r3
 800578c:	e7d3      	b.n	8005736 <__cvt+0x6a>
 800578e:	1c59      	adds	r1, r3, #1
 8005790:	9103      	str	r1, [sp, #12]
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	e7d9      	b.n	800574a <__cvt+0x7e>

08005796 <__exponent>:
 8005796:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005798:	2900      	cmp	r1, #0
 800579a:	bfba      	itte	lt
 800579c:	4249      	neglt	r1, r1
 800579e:	232d      	movlt	r3, #45	@ 0x2d
 80057a0:	232b      	movge	r3, #43	@ 0x2b
 80057a2:	2909      	cmp	r1, #9
 80057a4:	7002      	strb	r2, [r0, #0]
 80057a6:	7043      	strb	r3, [r0, #1]
 80057a8:	dd29      	ble.n	80057fe <__exponent+0x68>
 80057aa:	f10d 0307 	add.w	r3, sp, #7
 80057ae:	461d      	mov	r5, r3
 80057b0:	270a      	movs	r7, #10
 80057b2:	461a      	mov	r2, r3
 80057b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80057b8:	fb07 1416 	mls	r4, r7, r6, r1
 80057bc:	3430      	adds	r4, #48	@ 0x30
 80057be:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057c2:	460c      	mov	r4, r1
 80057c4:	2c63      	cmp	r4, #99	@ 0x63
 80057c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80057ca:	4631      	mov	r1, r6
 80057cc:	dcf1      	bgt.n	80057b2 <__exponent+0x1c>
 80057ce:	3130      	adds	r1, #48	@ 0x30
 80057d0:	1e94      	subs	r4, r2, #2
 80057d2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057d6:	1c41      	adds	r1, r0, #1
 80057d8:	4623      	mov	r3, r4
 80057da:	42ab      	cmp	r3, r5
 80057dc:	d30a      	bcc.n	80057f4 <__exponent+0x5e>
 80057de:	f10d 0309 	add.w	r3, sp, #9
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	42ac      	cmp	r4, r5
 80057e6:	bf88      	it	hi
 80057e8:	2300      	movhi	r3, #0
 80057ea:	3302      	adds	r3, #2
 80057ec:	4403      	add	r3, r0
 80057ee:	1a18      	subs	r0, r3, r0
 80057f0:	b003      	add	sp, #12
 80057f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057f8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057fc:	e7ed      	b.n	80057da <__exponent+0x44>
 80057fe:	2330      	movs	r3, #48	@ 0x30
 8005800:	3130      	adds	r1, #48	@ 0x30
 8005802:	7083      	strb	r3, [r0, #2]
 8005804:	70c1      	strb	r1, [r0, #3]
 8005806:	1d03      	adds	r3, r0, #4
 8005808:	e7f1      	b.n	80057ee <__exponent+0x58>
	...

0800580c <_printf_float>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	b08d      	sub	sp, #52	@ 0x34
 8005812:	460c      	mov	r4, r1
 8005814:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005818:	4616      	mov	r6, r2
 800581a:	461f      	mov	r7, r3
 800581c:	4605      	mov	r5, r0
 800581e:	f000 fddf 	bl	80063e0 <_localeconv_r>
 8005822:	6803      	ldr	r3, [r0, #0]
 8005824:	9304      	str	r3, [sp, #16]
 8005826:	4618      	mov	r0, r3
 8005828:	f7fa fd22 	bl	8000270 <strlen>
 800582c:	2300      	movs	r3, #0
 800582e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005830:	f8d8 3000 	ldr.w	r3, [r8]
 8005834:	9005      	str	r0, [sp, #20]
 8005836:	3307      	adds	r3, #7
 8005838:	f023 0307 	bic.w	r3, r3, #7
 800583c:	f103 0208 	add.w	r2, r3, #8
 8005840:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005844:	f8d4 b000 	ldr.w	fp, [r4]
 8005848:	f8c8 2000 	str.w	r2, [r8]
 800584c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005850:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005854:	9307      	str	r3, [sp, #28]
 8005856:	f8cd 8018 	str.w	r8, [sp, #24]
 800585a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800585e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005862:	4b9c      	ldr	r3, [pc, #624]	@ (8005ad4 <_printf_float+0x2c8>)
 8005864:	f04f 32ff 	mov.w	r2, #4294967295
 8005868:	f7fb f960 	bl	8000b2c <__aeabi_dcmpun>
 800586c:	bb70      	cbnz	r0, 80058cc <_printf_float+0xc0>
 800586e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005872:	4b98      	ldr	r3, [pc, #608]	@ (8005ad4 <_printf_float+0x2c8>)
 8005874:	f04f 32ff 	mov.w	r2, #4294967295
 8005878:	f7fb f93a 	bl	8000af0 <__aeabi_dcmple>
 800587c:	bb30      	cbnz	r0, 80058cc <_printf_float+0xc0>
 800587e:	2200      	movs	r2, #0
 8005880:	2300      	movs	r3, #0
 8005882:	4640      	mov	r0, r8
 8005884:	4649      	mov	r1, r9
 8005886:	f7fb f929 	bl	8000adc <__aeabi_dcmplt>
 800588a:	b110      	cbz	r0, 8005892 <_printf_float+0x86>
 800588c:	232d      	movs	r3, #45	@ 0x2d
 800588e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005892:	4a91      	ldr	r2, [pc, #580]	@ (8005ad8 <_printf_float+0x2cc>)
 8005894:	4b91      	ldr	r3, [pc, #580]	@ (8005adc <_printf_float+0x2d0>)
 8005896:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800589a:	bf8c      	ite	hi
 800589c:	4690      	movhi	r8, r2
 800589e:	4698      	movls	r8, r3
 80058a0:	2303      	movs	r3, #3
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	f02b 0304 	bic.w	r3, fp, #4
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	f04f 0900 	mov.w	r9, #0
 80058ae:	9700      	str	r7, [sp, #0]
 80058b0:	4633      	mov	r3, r6
 80058b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80058b4:	4621      	mov	r1, r4
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 f9d2 	bl	8005c60 <_printf_common>
 80058bc:	3001      	adds	r0, #1
 80058be:	f040 808d 	bne.w	80059dc <_printf_float+0x1d0>
 80058c2:	f04f 30ff 	mov.w	r0, #4294967295
 80058c6:	b00d      	add	sp, #52	@ 0x34
 80058c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058cc:	4642      	mov	r2, r8
 80058ce:	464b      	mov	r3, r9
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fb f92a 	bl	8000b2c <__aeabi_dcmpun>
 80058d8:	b140      	cbz	r0, 80058ec <_printf_float+0xe0>
 80058da:	464b      	mov	r3, r9
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bfbc      	itt	lt
 80058e0:	232d      	movlt	r3, #45	@ 0x2d
 80058e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058e6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ae0 <_printf_float+0x2d4>)
 80058e8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ae4 <_printf_float+0x2d8>)
 80058ea:	e7d4      	b.n	8005896 <_printf_float+0x8a>
 80058ec:	6863      	ldr	r3, [r4, #4]
 80058ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80058f2:	9206      	str	r2, [sp, #24]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	d13b      	bne.n	8005970 <_printf_float+0x164>
 80058f8:	2306      	movs	r3, #6
 80058fa:	6063      	str	r3, [r4, #4]
 80058fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005900:	2300      	movs	r3, #0
 8005902:	6022      	str	r2, [r4, #0]
 8005904:	9303      	str	r3, [sp, #12]
 8005906:	ab0a      	add	r3, sp, #40	@ 0x28
 8005908:	e9cd a301 	strd	sl, r3, [sp, #4]
 800590c:	ab09      	add	r3, sp, #36	@ 0x24
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	6861      	ldr	r1, [r4, #4]
 8005912:	ec49 8b10 	vmov	d0, r8, r9
 8005916:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800591a:	4628      	mov	r0, r5
 800591c:	f7ff fed6 	bl	80056cc <__cvt>
 8005920:	9b06      	ldr	r3, [sp, #24]
 8005922:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005924:	2b47      	cmp	r3, #71	@ 0x47
 8005926:	4680      	mov	r8, r0
 8005928:	d129      	bne.n	800597e <_printf_float+0x172>
 800592a:	1cc8      	adds	r0, r1, #3
 800592c:	db02      	blt.n	8005934 <_printf_float+0x128>
 800592e:	6863      	ldr	r3, [r4, #4]
 8005930:	4299      	cmp	r1, r3
 8005932:	dd41      	ble.n	80059b8 <_printf_float+0x1ac>
 8005934:	f1aa 0a02 	sub.w	sl, sl, #2
 8005938:	fa5f fa8a 	uxtb.w	sl, sl
 800593c:	3901      	subs	r1, #1
 800593e:	4652      	mov	r2, sl
 8005940:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005944:	9109      	str	r1, [sp, #36]	@ 0x24
 8005946:	f7ff ff26 	bl	8005796 <__exponent>
 800594a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800594c:	1813      	adds	r3, r2, r0
 800594e:	2a01      	cmp	r2, #1
 8005950:	4681      	mov	r9, r0
 8005952:	6123      	str	r3, [r4, #16]
 8005954:	dc02      	bgt.n	800595c <_printf_float+0x150>
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	07d2      	lsls	r2, r2, #31
 800595a:	d501      	bpl.n	8005960 <_printf_float+0x154>
 800595c:	3301      	adds	r3, #1
 800595e:	6123      	str	r3, [r4, #16]
 8005960:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0a2      	beq.n	80058ae <_printf_float+0xa2>
 8005968:	232d      	movs	r3, #45	@ 0x2d
 800596a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800596e:	e79e      	b.n	80058ae <_printf_float+0xa2>
 8005970:	9a06      	ldr	r2, [sp, #24]
 8005972:	2a47      	cmp	r2, #71	@ 0x47
 8005974:	d1c2      	bne.n	80058fc <_printf_float+0xf0>
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1c0      	bne.n	80058fc <_printf_float+0xf0>
 800597a:	2301      	movs	r3, #1
 800597c:	e7bd      	b.n	80058fa <_printf_float+0xee>
 800597e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005982:	d9db      	bls.n	800593c <_printf_float+0x130>
 8005984:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005988:	d118      	bne.n	80059bc <_printf_float+0x1b0>
 800598a:	2900      	cmp	r1, #0
 800598c:	6863      	ldr	r3, [r4, #4]
 800598e:	dd0b      	ble.n	80059a8 <_printf_float+0x19c>
 8005990:	6121      	str	r1, [r4, #16]
 8005992:	b913      	cbnz	r3, 800599a <_printf_float+0x18e>
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	07d0      	lsls	r0, r2, #31
 8005998:	d502      	bpl.n	80059a0 <_printf_float+0x194>
 800599a:	3301      	adds	r3, #1
 800599c:	440b      	add	r3, r1
 800599e:	6123      	str	r3, [r4, #16]
 80059a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80059a2:	f04f 0900 	mov.w	r9, #0
 80059a6:	e7db      	b.n	8005960 <_printf_float+0x154>
 80059a8:	b913      	cbnz	r3, 80059b0 <_printf_float+0x1a4>
 80059aa:	6822      	ldr	r2, [r4, #0]
 80059ac:	07d2      	lsls	r2, r2, #31
 80059ae:	d501      	bpl.n	80059b4 <_printf_float+0x1a8>
 80059b0:	3302      	adds	r3, #2
 80059b2:	e7f4      	b.n	800599e <_printf_float+0x192>
 80059b4:	2301      	movs	r3, #1
 80059b6:	e7f2      	b.n	800599e <_printf_float+0x192>
 80059b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059be:	4299      	cmp	r1, r3
 80059c0:	db05      	blt.n	80059ce <_printf_float+0x1c2>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	6121      	str	r1, [r4, #16]
 80059c6:	07d8      	lsls	r0, r3, #31
 80059c8:	d5ea      	bpl.n	80059a0 <_printf_float+0x194>
 80059ca:	1c4b      	adds	r3, r1, #1
 80059cc:	e7e7      	b.n	800599e <_printf_float+0x192>
 80059ce:	2900      	cmp	r1, #0
 80059d0:	bfd4      	ite	le
 80059d2:	f1c1 0202 	rsble	r2, r1, #2
 80059d6:	2201      	movgt	r2, #1
 80059d8:	4413      	add	r3, r2
 80059da:	e7e0      	b.n	800599e <_printf_float+0x192>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	055a      	lsls	r2, r3, #21
 80059e0:	d407      	bmi.n	80059f2 <_printf_float+0x1e6>
 80059e2:	6923      	ldr	r3, [r4, #16]
 80059e4:	4642      	mov	r2, r8
 80059e6:	4631      	mov	r1, r6
 80059e8:	4628      	mov	r0, r5
 80059ea:	47b8      	blx	r7
 80059ec:	3001      	adds	r0, #1
 80059ee:	d12b      	bne.n	8005a48 <_printf_float+0x23c>
 80059f0:	e767      	b.n	80058c2 <_printf_float+0xb6>
 80059f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059f6:	f240 80dd 	bls.w	8005bb4 <_printf_float+0x3a8>
 80059fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059fe:	2200      	movs	r2, #0
 8005a00:	2300      	movs	r3, #0
 8005a02:	f7fb f861 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d033      	beq.n	8005a72 <_printf_float+0x266>
 8005a0a:	4a37      	ldr	r2, [pc, #220]	@ (8005ae8 <_printf_float+0x2dc>)
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4631      	mov	r1, r6
 8005a10:	4628      	mov	r0, r5
 8005a12:	47b8      	blx	r7
 8005a14:	3001      	adds	r0, #1
 8005a16:	f43f af54 	beq.w	80058c2 <_printf_float+0xb6>
 8005a1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a1e:	4543      	cmp	r3, r8
 8005a20:	db02      	blt.n	8005a28 <_printf_float+0x21c>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	07d8      	lsls	r0, r3, #31
 8005a26:	d50f      	bpl.n	8005a48 <_printf_float+0x23c>
 8005a28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b8      	blx	r7
 8005a32:	3001      	adds	r0, #1
 8005a34:	f43f af45 	beq.w	80058c2 <_printf_float+0xb6>
 8005a38:	f04f 0900 	mov.w	r9, #0
 8005a3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a40:	f104 0a1a 	add.w	sl, r4, #26
 8005a44:	45c8      	cmp	r8, r9
 8005a46:	dc09      	bgt.n	8005a5c <_printf_float+0x250>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	079b      	lsls	r3, r3, #30
 8005a4c:	f100 8103 	bmi.w	8005c56 <_printf_float+0x44a>
 8005a50:	68e0      	ldr	r0, [r4, #12]
 8005a52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a54:	4298      	cmp	r0, r3
 8005a56:	bfb8      	it	lt
 8005a58:	4618      	movlt	r0, r3
 8005a5a:	e734      	b.n	80058c6 <_printf_float+0xba>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	4652      	mov	r2, sl
 8005a60:	4631      	mov	r1, r6
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	f43f af2b 	beq.w	80058c2 <_printf_float+0xb6>
 8005a6c:	f109 0901 	add.w	r9, r9, #1
 8005a70:	e7e8      	b.n	8005a44 <_printf_float+0x238>
 8005a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	dc39      	bgt.n	8005aec <_printf_float+0x2e0>
 8005a78:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae8 <_printf_float+0x2dc>)
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4628      	mov	r0, r5
 8005a80:	47b8      	blx	r7
 8005a82:	3001      	adds	r0, #1
 8005a84:	f43f af1d 	beq.w	80058c2 <_printf_float+0xb6>
 8005a88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a8c:	ea59 0303 	orrs.w	r3, r9, r3
 8005a90:	d102      	bne.n	8005a98 <_printf_float+0x28c>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	07d9      	lsls	r1, r3, #31
 8005a96:	d5d7      	bpl.n	8005a48 <_printf_float+0x23c>
 8005a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	f43f af0d 	beq.w	80058c2 <_printf_float+0xb6>
 8005aa8:	f04f 0a00 	mov.w	sl, #0
 8005aac:	f104 0b1a 	add.w	fp, r4, #26
 8005ab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ab2:	425b      	negs	r3, r3
 8005ab4:	4553      	cmp	r3, sl
 8005ab6:	dc01      	bgt.n	8005abc <_printf_float+0x2b0>
 8005ab8:	464b      	mov	r3, r9
 8005aba:	e793      	b.n	80059e4 <_printf_float+0x1d8>
 8005abc:	2301      	movs	r3, #1
 8005abe:	465a      	mov	r2, fp
 8005ac0:	4631      	mov	r1, r6
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	47b8      	blx	r7
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	f43f aefb 	beq.w	80058c2 <_printf_float+0xb6>
 8005acc:	f10a 0a01 	add.w	sl, sl, #1
 8005ad0:	e7ee      	b.n	8005ab0 <_printf_float+0x2a4>
 8005ad2:	bf00      	nop
 8005ad4:	7fefffff 	.word	0x7fefffff
 8005ad8:	0800b440 	.word	0x0800b440
 8005adc:	0800b43c 	.word	0x0800b43c
 8005ae0:	0800b448 	.word	0x0800b448
 8005ae4:	0800b444 	.word	0x0800b444
 8005ae8:	0800b44c 	.word	0x0800b44c
 8005aec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005aee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005af2:	4553      	cmp	r3, sl
 8005af4:	bfa8      	it	ge
 8005af6:	4653      	movge	r3, sl
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	4699      	mov	r9, r3
 8005afc:	dc36      	bgt.n	8005b6c <_printf_float+0x360>
 8005afe:	f04f 0b00 	mov.w	fp, #0
 8005b02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b06:	f104 021a 	add.w	r2, r4, #26
 8005b0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b0c:	9306      	str	r3, [sp, #24]
 8005b0e:	eba3 0309 	sub.w	r3, r3, r9
 8005b12:	455b      	cmp	r3, fp
 8005b14:	dc31      	bgt.n	8005b7a <_printf_float+0x36e>
 8005b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b18:	459a      	cmp	sl, r3
 8005b1a:	dc3a      	bgt.n	8005b92 <_printf_float+0x386>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	07da      	lsls	r2, r3, #31
 8005b20:	d437      	bmi.n	8005b92 <_printf_float+0x386>
 8005b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b24:	ebaa 0903 	sub.w	r9, sl, r3
 8005b28:	9b06      	ldr	r3, [sp, #24]
 8005b2a:	ebaa 0303 	sub.w	r3, sl, r3
 8005b2e:	4599      	cmp	r9, r3
 8005b30:	bfa8      	it	ge
 8005b32:	4699      	movge	r9, r3
 8005b34:	f1b9 0f00 	cmp.w	r9, #0
 8005b38:	dc33      	bgt.n	8005ba2 <_printf_float+0x396>
 8005b3a:	f04f 0800 	mov.w	r8, #0
 8005b3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b42:	f104 0b1a 	add.w	fp, r4, #26
 8005b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b48:	ebaa 0303 	sub.w	r3, sl, r3
 8005b4c:	eba3 0309 	sub.w	r3, r3, r9
 8005b50:	4543      	cmp	r3, r8
 8005b52:	f77f af79 	ble.w	8005a48 <_printf_float+0x23c>
 8005b56:	2301      	movs	r3, #1
 8005b58:	465a      	mov	r2, fp
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	47b8      	blx	r7
 8005b60:	3001      	adds	r0, #1
 8005b62:	f43f aeae 	beq.w	80058c2 <_printf_float+0xb6>
 8005b66:	f108 0801 	add.w	r8, r8, #1
 8005b6a:	e7ec      	b.n	8005b46 <_printf_float+0x33a>
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	d1c2      	bne.n	8005afe <_printf_float+0x2f2>
 8005b78:	e6a3      	b.n	80058c2 <_printf_float+0xb6>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	9206      	str	r2, [sp, #24]
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	f43f ae9c 	beq.w	80058c2 <_printf_float+0xb6>
 8005b8a:	9a06      	ldr	r2, [sp, #24]
 8005b8c:	f10b 0b01 	add.w	fp, fp, #1
 8005b90:	e7bb      	b.n	8005b0a <_printf_float+0x2fe>
 8005b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b8      	blx	r7
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d1c0      	bne.n	8005b22 <_printf_float+0x316>
 8005ba0:	e68f      	b.n	80058c2 <_printf_float+0xb6>
 8005ba2:	9a06      	ldr	r2, [sp, #24]
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	4442      	add	r2, r8
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b8      	blx	r7
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d1c3      	bne.n	8005b3a <_printf_float+0x32e>
 8005bb2:	e686      	b.n	80058c2 <_printf_float+0xb6>
 8005bb4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005bb8:	f1ba 0f01 	cmp.w	sl, #1
 8005bbc:	dc01      	bgt.n	8005bc2 <_printf_float+0x3b6>
 8005bbe:	07db      	lsls	r3, r3, #31
 8005bc0:	d536      	bpl.n	8005c30 <_printf_float+0x424>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f43f ae78 	beq.w	80058c2 <_printf_float+0xb6>
 8005bd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b8      	blx	r7
 8005bdc:	3001      	adds	r0, #1
 8005bde:	f43f ae70 	beq.w	80058c2 <_printf_float+0xb6>
 8005be2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005be6:	2200      	movs	r2, #0
 8005be8:	2300      	movs	r3, #0
 8005bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bee:	f7fa ff6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bf2:	b9c0      	cbnz	r0, 8005c26 <_printf_float+0x41a>
 8005bf4:	4653      	mov	r3, sl
 8005bf6:	f108 0201 	add.w	r2, r8, #1
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b8      	blx	r7
 8005c00:	3001      	adds	r0, #1
 8005c02:	d10c      	bne.n	8005c1e <_printf_float+0x412>
 8005c04:	e65d      	b.n	80058c2 <_printf_float+0xb6>
 8005c06:	2301      	movs	r3, #1
 8005c08:	465a      	mov	r2, fp
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f ae56 	beq.w	80058c2 <_printf_float+0xb6>
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	45d0      	cmp	r8, sl
 8005c1c:	dbf3      	blt.n	8005c06 <_printf_float+0x3fa>
 8005c1e:	464b      	mov	r3, r9
 8005c20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c24:	e6df      	b.n	80059e6 <_printf_float+0x1da>
 8005c26:	f04f 0800 	mov.w	r8, #0
 8005c2a:	f104 0b1a 	add.w	fp, r4, #26
 8005c2e:	e7f4      	b.n	8005c1a <_printf_float+0x40e>
 8005c30:	2301      	movs	r3, #1
 8005c32:	4642      	mov	r2, r8
 8005c34:	e7e1      	b.n	8005bfa <_printf_float+0x3ee>
 8005c36:	2301      	movs	r3, #1
 8005c38:	464a      	mov	r2, r9
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	47b8      	blx	r7
 8005c40:	3001      	adds	r0, #1
 8005c42:	f43f ae3e 	beq.w	80058c2 <_printf_float+0xb6>
 8005c46:	f108 0801 	add.w	r8, r8, #1
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c4e:	1a5b      	subs	r3, r3, r1
 8005c50:	4543      	cmp	r3, r8
 8005c52:	dcf0      	bgt.n	8005c36 <_printf_float+0x42a>
 8005c54:	e6fc      	b.n	8005a50 <_printf_float+0x244>
 8005c56:	f04f 0800 	mov.w	r8, #0
 8005c5a:	f104 0919 	add.w	r9, r4, #25
 8005c5e:	e7f4      	b.n	8005c4a <_printf_float+0x43e>

08005c60 <_printf_common>:
 8005c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	4616      	mov	r6, r2
 8005c66:	4698      	mov	r8, r3
 8005c68:	688a      	ldr	r2, [r1, #8]
 8005c6a:	690b      	ldr	r3, [r1, #16]
 8005c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c70:	4293      	cmp	r3, r2
 8005c72:	bfb8      	it	lt
 8005c74:	4613      	movlt	r3, r2
 8005c76:	6033      	str	r3, [r6, #0]
 8005c78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	b10a      	cbz	r2, 8005c86 <_printf_common+0x26>
 8005c82:	3301      	adds	r3, #1
 8005c84:	6033      	str	r3, [r6, #0]
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	0699      	lsls	r1, r3, #26
 8005c8a:	bf42      	ittt	mi
 8005c8c:	6833      	ldrmi	r3, [r6, #0]
 8005c8e:	3302      	addmi	r3, #2
 8005c90:	6033      	strmi	r3, [r6, #0]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	f015 0506 	ands.w	r5, r5, #6
 8005c98:	d106      	bne.n	8005ca8 <_printf_common+0x48>
 8005c9a:	f104 0a19 	add.w	sl, r4, #25
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	6832      	ldr	r2, [r6, #0]
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	42ab      	cmp	r3, r5
 8005ca6:	dc26      	bgt.n	8005cf6 <_printf_common+0x96>
 8005ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	3b00      	subs	r3, #0
 8005cb0:	bf18      	it	ne
 8005cb2:	2301      	movne	r3, #1
 8005cb4:	0692      	lsls	r2, r2, #26
 8005cb6:	d42b      	bmi.n	8005d10 <_printf_common+0xb0>
 8005cb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	47c8      	blx	r9
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d01e      	beq.n	8005d04 <_printf_common+0xa4>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	6922      	ldr	r2, [r4, #16]
 8005cca:	f003 0306 	and.w	r3, r3, #6
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	bf02      	ittt	eq
 8005cd2:	68e5      	ldreq	r5, [r4, #12]
 8005cd4:	6833      	ldreq	r3, [r6, #0]
 8005cd6:	1aed      	subeq	r5, r5, r3
 8005cd8:	68a3      	ldr	r3, [r4, #8]
 8005cda:	bf0c      	ite	eq
 8005cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce0:	2500      	movne	r5, #0
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	bfc4      	itt	gt
 8005ce6:	1a9b      	subgt	r3, r3, r2
 8005ce8:	18ed      	addgt	r5, r5, r3
 8005cea:	2600      	movs	r6, #0
 8005cec:	341a      	adds	r4, #26
 8005cee:	42b5      	cmp	r5, r6
 8005cf0:	d11a      	bne.n	8005d28 <_printf_common+0xc8>
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e008      	b.n	8005d08 <_printf_common+0xa8>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	4641      	mov	r1, r8
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	47c8      	blx	r9
 8005d00:	3001      	adds	r0, #1
 8005d02:	d103      	bne.n	8005d0c <_printf_common+0xac>
 8005d04:	f04f 30ff 	mov.w	r0, #4294967295
 8005d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d0c:	3501      	adds	r5, #1
 8005d0e:	e7c6      	b.n	8005c9e <_printf_common+0x3e>
 8005d10:	18e1      	adds	r1, r4, r3
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	2030      	movs	r0, #48	@ 0x30
 8005d16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d1a:	4422      	add	r2, r4
 8005d1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d24:	3302      	adds	r3, #2
 8005d26:	e7c7      	b.n	8005cb8 <_printf_common+0x58>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	4638      	mov	r0, r7
 8005d30:	47c8      	blx	r9
 8005d32:	3001      	adds	r0, #1
 8005d34:	d0e6      	beq.n	8005d04 <_printf_common+0xa4>
 8005d36:	3601      	adds	r6, #1
 8005d38:	e7d9      	b.n	8005cee <_printf_common+0x8e>
	...

08005d3c <_printf_i>:
 8005d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	7e0f      	ldrb	r7, [r1, #24]
 8005d42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d44:	2f78      	cmp	r7, #120	@ 0x78
 8005d46:	4691      	mov	r9, r2
 8005d48:	4680      	mov	r8, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	469a      	mov	sl, r3
 8005d4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d52:	d807      	bhi.n	8005d64 <_printf_i+0x28>
 8005d54:	2f62      	cmp	r7, #98	@ 0x62
 8005d56:	d80a      	bhi.n	8005d6e <_printf_i+0x32>
 8005d58:	2f00      	cmp	r7, #0
 8005d5a:	f000 80d1 	beq.w	8005f00 <_printf_i+0x1c4>
 8005d5e:	2f58      	cmp	r7, #88	@ 0x58
 8005d60:	f000 80b8 	beq.w	8005ed4 <_printf_i+0x198>
 8005d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d6c:	e03a      	b.n	8005de4 <_printf_i+0xa8>
 8005d6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d72:	2b15      	cmp	r3, #21
 8005d74:	d8f6      	bhi.n	8005d64 <_printf_i+0x28>
 8005d76:	a101      	add	r1, pc, #4	@ (adr r1, 8005d7c <_printf_i+0x40>)
 8005d78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d7c:	08005dd5 	.word	0x08005dd5
 8005d80:	08005de9 	.word	0x08005de9
 8005d84:	08005d65 	.word	0x08005d65
 8005d88:	08005d65 	.word	0x08005d65
 8005d8c:	08005d65 	.word	0x08005d65
 8005d90:	08005d65 	.word	0x08005d65
 8005d94:	08005de9 	.word	0x08005de9
 8005d98:	08005d65 	.word	0x08005d65
 8005d9c:	08005d65 	.word	0x08005d65
 8005da0:	08005d65 	.word	0x08005d65
 8005da4:	08005d65 	.word	0x08005d65
 8005da8:	08005ee7 	.word	0x08005ee7
 8005dac:	08005e13 	.word	0x08005e13
 8005db0:	08005ea1 	.word	0x08005ea1
 8005db4:	08005d65 	.word	0x08005d65
 8005db8:	08005d65 	.word	0x08005d65
 8005dbc:	08005f09 	.word	0x08005f09
 8005dc0:	08005d65 	.word	0x08005d65
 8005dc4:	08005e13 	.word	0x08005e13
 8005dc8:	08005d65 	.word	0x08005d65
 8005dcc:	08005d65 	.word	0x08005d65
 8005dd0:	08005ea9 	.word	0x08005ea9
 8005dd4:	6833      	ldr	r3, [r6, #0]
 8005dd6:	1d1a      	adds	r2, r3, #4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6032      	str	r2, [r6, #0]
 8005ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005de0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005de4:	2301      	movs	r3, #1
 8005de6:	e09c      	b.n	8005f22 <_printf_i+0x1e6>
 8005de8:	6833      	ldr	r3, [r6, #0]
 8005dea:	6820      	ldr	r0, [r4, #0]
 8005dec:	1d19      	adds	r1, r3, #4
 8005dee:	6031      	str	r1, [r6, #0]
 8005df0:	0606      	lsls	r6, r0, #24
 8005df2:	d501      	bpl.n	8005df8 <_printf_i+0xbc>
 8005df4:	681d      	ldr	r5, [r3, #0]
 8005df6:	e003      	b.n	8005e00 <_printf_i+0xc4>
 8005df8:	0645      	lsls	r5, r0, #25
 8005dfa:	d5fb      	bpl.n	8005df4 <_printf_i+0xb8>
 8005dfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e00:	2d00      	cmp	r5, #0
 8005e02:	da03      	bge.n	8005e0c <_printf_i+0xd0>
 8005e04:	232d      	movs	r3, #45	@ 0x2d
 8005e06:	426d      	negs	r5, r5
 8005e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e0c:	4858      	ldr	r0, [pc, #352]	@ (8005f70 <_printf_i+0x234>)
 8005e0e:	230a      	movs	r3, #10
 8005e10:	e011      	b.n	8005e36 <_printf_i+0xfa>
 8005e12:	6821      	ldr	r1, [r4, #0]
 8005e14:	6833      	ldr	r3, [r6, #0]
 8005e16:	0608      	lsls	r0, r1, #24
 8005e18:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e1c:	d402      	bmi.n	8005e24 <_printf_i+0xe8>
 8005e1e:	0649      	lsls	r1, r1, #25
 8005e20:	bf48      	it	mi
 8005e22:	b2ad      	uxthmi	r5, r5
 8005e24:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e26:	4852      	ldr	r0, [pc, #328]	@ (8005f70 <_printf_i+0x234>)
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	bf14      	ite	ne
 8005e2c:	230a      	movne	r3, #10
 8005e2e:	2308      	moveq	r3, #8
 8005e30:	2100      	movs	r1, #0
 8005e32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e36:	6866      	ldr	r6, [r4, #4]
 8005e38:	60a6      	str	r6, [r4, #8]
 8005e3a:	2e00      	cmp	r6, #0
 8005e3c:	db05      	blt.n	8005e4a <_printf_i+0x10e>
 8005e3e:	6821      	ldr	r1, [r4, #0]
 8005e40:	432e      	orrs	r6, r5
 8005e42:	f021 0104 	bic.w	r1, r1, #4
 8005e46:	6021      	str	r1, [r4, #0]
 8005e48:	d04b      	beq.n	8005ee2 <_printf_i+0x1a6>
 8005e4a:	4616      	mov	r6, r2
 8005e4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e50:	fb03 5711 	mls	r7, r3, r1, r5
 8005e54:	5dc7      	ldrb	r7, [r0, r7]
 8005e56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e5a:	462f      	mov	r7, r5
 8005e5c:	42bb      	cmp	r3, r7
 8005e5e:	460d      	mov	r5, r1
 8005e60:	d9f4      	bls.n	8005e4c <_printf_i+0x110>
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d10b      	bne.n	8005e7e <_printf_i+0x142>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	07df      	lsls	r7, r3, #31
 8005e6a:	d508      	bpl.n	8005e7e <_printf_i+0x142>
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	6861      	ldr	r1, [r4, #4]
 8005e70:	4299      	cmp	r1, r3
 8005e72:	bfde      	ittt	le
 8005e74:	2330      	movle	r3, #48	@ 0x30
 8005e76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e7e:	1b92      	subs	r2, r2, r6
 8005e80:	6122      	str	r2, [r4, #16]
 8005e82:	f8cd a000 	str.w	sl, [sp]
 8005e86:	464b      	mov	r3, r9
 8005e88:	aa03      	add	r2, sp, #12
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	f7ff fee7 	bl	8005c60 <_printf_common>
 8005e92:	3001      	adds	r0, #1
 8005e94:	d14a      	bne.n	8005f2c <_printf_i+0x1f0>
 8005e96:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9a:	b004      	add	sp, #16
 8005e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	f043 0320 	orr.w	r3, r3, #32
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	4832      	ldr	r0, [pc, #200]	@ (8005f74 <_printf_i+0x238>)
 8005eaa:	2778      	movs	r7, #120	@ 0x78
 8005eac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	6831      	ldr	r1, [r6, #0]
 8005eb4:	061f      	lsls	r7, r3, #24
 8005eb6:	f851 5b04 	ldr.w	r5, [r1], #4
 8005eba:	d402      	bmi.n	8005ec2 <_printf_i+0x186>
 8005ebc:	065f      	lsls	r7, r3, #25
 8005ebe:	bf48      	it	mi
 8005ec0:	b2ad      	uxthmi	r5, r5
 8005ec2:	6031      	str	r1, [r6, #0]
 8005ec4:	07d9      	lsls	r1, r3, #31
 8005ec6:	bf44      	itt	mi
 8005ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8005ecc:	6023      	strmi	r3, [r4, #0]
 8005ece:	b11d      	cbz	r5, 8005ed8 <_printf_i+0x19c>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	e7ad      	b.n	8005e30 <_printf_i+0xf4>
 8005ed4:	4826      	ldr	r0, [pc, #152]	@ (8005f70 <_printf_i+0x234>)
 8005ed6:	e7e9      	b.n	8005eac <_printf_i+0x170>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	f023 0320 	bic.w	r3, r3, #32
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	e7f6      	b.n	8005ed0 <_printf_i+0x194>
 8005ee2:	4616      	mov	r6, r2
 8005ee4:	e7bd      	b.n	8005e62 <_printf_i+0x126>
 8005ee6:	6833      	ldr	r3, [r6, #0]
 8005ee8:	6825      	ldr	r5, [r4, #0]
 8005eea:	6961      	ldr	r1, [r4, #20]
 8005eec:	1d18      	adds	r0, r3, #4
 8005eee:	6030      	str	r0, [r6, #0]
 8005ef0:	062e      	lsls	r6, r5, #24
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	d501      	bpl.n	8005efa <_printf_i+0x1be>
 8005ef6:	6019      	str	r1, [r3, #0]
 8005ef8:	e002      	b.n	8005f00 <_printf_i+0x1c4>
 8005efa:	0668      	lsls	r0, r5, #25
 8005efc:	d5fb      	bpl.n	8005ef6 <_printf_i+0x1ba>
 8005efe:	8019      	strh	r1, [r3, #0]
 8005f00:	2300      	movs	r3, #0
 8005f02:	6123      	str	r3, [r4, #16]
 8005f04:	4616      	mov	r6, r2
 8005f06:	e7bc      	b.n	8005e82 <_printf_i+0x146>
 8005f08:	6833      	ldr	r3, [r6, #0]
 8005f0a:	1d1a      	adds	r2, r3, #4
 8005f0c:	6032      	str	r2, [r6, #0]
 8005f0e:	681e      	ldr	r6, [r3, #0]
 8005f10:	6862      	ldr	r2, [r4, #4]
 8005f12:	2100      	movs	r1, #0
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7fa f95b 	bl	80001d0 <memchr>
 8005f1a:	b108      	cbz	r0, 8005f20 <_printf_i+0x1e4>
 8005f1c:	1b80      	subs	r0, r0, r6
 8005f1e:	6060      	str	r0, [r4, #4]
 8005f20:	6863      	ldr	r3, [r4, #4]
 8005f22:	6123      	str	r3, [r4, #16]
 8005f24:	2300      	movs	r3, #0
 8005f26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f2a:	e7aa      	b.n	8005e82 <_printf_i+0x146>
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	4632      	mov	r2, r6
 8005f30:	4649      	mov	r1, r9
 8005f32:	4640      	mov	r0, r8
 8005f34:	47d0      	blx	sl
 8005f36:	3001      	adds	r0, #1
 8005f38:	d0ad      	beq.n	8005e96 <_printf_i+0x15a>
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	079b      	lsls	r3, r3, #30
 8005f3e:	d413      	bmi.n	8005f68 <_printf_i+0x22c>
 8005f40:	68e0      	ldr	r0, [r4, #12]
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	4298      	cmp	r0, r3
 8005f46:	bfb8      	it	lt
 8005f48:	4618      	movlt	r0, r3
 8005f4a:	e7a6      	b.n	8005e9a <_printf_i+0x15e>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	4632      	mov	r2, r6
 8005f50:	4649      	mov	r1, r9
 8005f52:	4640      	mov	r0, r8
 8005f54:	47d0      	blx	sl
 8005f56:	3001      	adds	r0, #1
 8005f58:	d09d      	beq.n	8005e96 <_printf_i+0x15a>
 8005f5a:	3501      	adds	r5, #1
 8005f5c:	68e3      	ldr	r3, [r4, #12]
 8005f5e:	9903      	ldr	r1, [sp, #12]
 8005f60:	1a5b      	subs	r3, r3, r1
 8005f62:	42ab      	cmp	r3, r5
 8005f64:	dcf2      	bgt.n	8005f4c <_printf_i+0x210>
 8005f66:	e7eb      	b.n	8005f40 <_printf_i+0x204>
 8005f68:	2500      	movs	r5, #0
 8005f6a:	f104 0619 	add.w	r6, r4, #25
 8005f6e:	e7f5      	b.n	8005f5c <_printf_i+0x220>
 8005f70:	0800b44e 	.word	0x0800b44e
 8005f74:	0800b45f 	.word	0x0800b45f

08005f78 <std>:
 8005f78:	2300      	movs	r3, #0
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f86:	6083      	str	r3, [r0, #8]
 8005f88:	8181      	strh	r1, [r0, #12]
 8005f8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f8c:	81c2      	strh	r2, [r0, #14]
 8005f8e:	6183      	str	r3, [r0, #24]
 8005f90:	4619      	mov	r1, r3
 8005f92:	2208      	movs	r2, #8
 8005f94:	305c      	adds	r0, #92	@ 0x5c
 8005f96:	f000 fa1b 	bl	80063d0 <memset>
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd0 <std+0x58>)
 8005f9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd4 <std+0x5c>)
 8005fa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd8 <std+0x60>)
 8005fa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fdc <std+0x64>)
 8005fa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005faa:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe0 <std+0x68>)
 8005fac:	6224      	str	r4, [r4, #32]
 8005fae:	429c      	cmp	r4, r3
 8005fb0:	d006      	beq.n	8005fc0 <std+0x48>
 8005fb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fb6:	4294      	cmp	r4, r2
 8005fb8:	d002      	beq.n	8005fc0 <std+0x48>
 8005fba:	33d0      	adds	r3, #208	@ 0xd0
 8005fbc:	429c      	cmp	r4, r3
 8005fbe:	d105      	bne.n	8005fcc <std+0x54>
 8005fc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc8:	f000 ba7e 	b.w	80064c8 <__retarget_lock_init_recursive>
 8005fcc:	bd10      	pop	{r4, pc}
 8005fce:	bf00      	nop
 8005fd0:	08006221 	.word	0x08006221
 8005fd4:	08006243 	.word	0x08006243
 8005fd8:	0800627b 	.word	0x0800627b
 8005fdc:	0800629f 	.word	0x0800629f
 8005fe0:	20000660 	.word	0x20000660

08005fe4 <stdio_exit_handler>:
 8005fe4:	4a02      	ldr	r2, [pc, #8]	@ (8005ff0 <stdio_exit_handler+0xc>)
 8005fe6:	4903      	ldr	r1, [pc, #12]	@ (8005ff4 <stdio_exit_handler+0x10>)
 8005fe8:	4803      	ldr	r0, [pc, #12]	@ (8005ff8 <stdio_exit_handler+0x14>)
 8005fea:	f000 b869 	b.w	80060c0 <_fwalk_sglue>
 8005fee:	bf00      	nop
 8005ff0:	20000010 	.word	0x20000010
 8005ff4:	080080b1 	.word	0x080080b1
 8005ff8:	20000020 	.word	0x20000020

08005ffc <cleanup_stdio>:
 8005ffc:	6841      	ldr	r1, [r0, #4]
 8005ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8006030 <cleanup_stdio+0x34>)
 8006000:	4299      	cmp	r1, r3
 8006002:	b510      	push	{r4, lr}
 8006004:	4604      	mov	r4, r0
 8006006:	d001      	beq.n	800600c <cleanup_stdio+0x10>
 8006008:	f002 f852 	bl	80080b0 <_fflush_r>
 800600c:	68a1      	ldr	r1, [r4, #8]
 800600e:	4b09      	ldr	r3, [pc, #36]	@ (8006034 <cleanup_stdio+0x38>)
 8006010:	4299      	cmp	r1, r3
 8006012:	d002      	beq.n	800601a <cleanup_stdio+0x1e>
 8006014:	4620      	mov	r0, r4
 8006016:	f002 f84b 	bl	80080b0 <_fflush_r>
 800601a:	68e1      	ldr	r1, [r4, #12]
 800601c:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <cleanup_stdio+0x3c>)
 800601e:	4299      	cmp	r1, r3
 8006020:	d004      	beq.n	800602c <cleanup_stdio+0x30>
 8006022:	4620      	mov	r0, r4
 8006024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006028:	f002 b842 	b.w	80080b0 <_fflush_r>
 800602c:	bd10      	pop	{r4, pc}
 800602e:	bf00      	nop
 8006030:	20000660 	.word	0x20000660
 8006034:	200006c8 	.word	0x200006c8
 8006038:	20000730 	.word	0x20000730

0800603c <global_stdio_init.part.0>:
 800603c:	b510      	push	{r4, lr}
 800603e:	4b0b      	ldr	r3, [pc, #44]	@ (800606c <global_stdio_init.part.0+0x30>)
 8006040:	4c0b      	ldr	r4, [pc, #44]	@ (8006070 <global_stdio_init.part.0+0x34>)
 8006042:	4a0c      	ldr	r2, [pc, #48]	@ (8006074 <global_stdio_init.part.0+0x38>)
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	4620      	mov	r0, r4
 8006048:	2200      	movs	r2, #0
 800604a:	2104      	movs	r1, #4
 800604c:	f7ff ff94 	bl	8005f78 <std>
 8006050:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006054:	2201      	movs	r2, #1
 8006056:	2109      	movs	r1, #9
 8006058:	f7ff ff8e 	bl	8005f78 <std>
 800605c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006060:	2202      	movs	r2, #2
 8006062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006066:	2112      	movs	r1, #18
 8006068:	f7ff bf86 	b.w	8005f78 <std>
 800606c:	20000798 	.word	0x20000798
 8006070:	20000660 	.word	0x20000660
 8006074:	08005fe5 	.word	0x08005fe5

08006078 <__sfp_lock_acquire>:
 8006078:	4801      	ldr	r0, [pc, #4]	@ (8006080 <__sfp_lock_acquire+0x8>)
 800607a:	f000 ba26 	b.w	80064ca <__retarget_lock_acquire_recursive>
 800607e:	bf00      	nop
 8006080:	200007a1 	.word	0x200007a1

08006084 <__sfp_lock_release>:
 8006084:	4801      	ldr	r0, [pc, #4]	@ (800608c <__sfp_lock_release+0x8>)
 8006086:	f000 ba21 	b.w	80064cc <__retarget_lock_release_recursive>
 800608a:	bf00      	nop
 800608c:	200007a1 	.word	0x200007a1

08006090 <__sinit>:
 8006090:	b510      	push	{r4, lr}
 8006092:	4604      	mov	r4, r0
 8006094:	f7ff fff0 	bl	8006078 <__sfp_lock_acquire>
 8006098:	6a23      	ldr	r3, [r4, #32]
 800609a:	b11b      	cbz	r3, 80060a4 <__sinit+0x14>
 800609c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a0:	f7ff bff0 	b.w	8006084 <__sfp_lock_release>
 80060a4:	4b04      	ldr	r3, [pc, #16]	@ (80060b8 <__sinit+0x28>)
 80060a6:	6223      	str	r3, [r4, #32]
 80060a8:	4b04      	ldr	r3, [pc, #16]	@ (80060bc <__sinit+0x2c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f5      	bne.n	800609c <__sinit+0xc>
 80060b0:	f7ff ffc4 	bl	800603c <global_stdio_init.part.0>
 80060b4:	e7f2      	b.n	800609c <__sinit+0xc>
 80060b6:	bf00      	nop
 80060b8:	08005ffd 	.word	0x08005ffd
 80060bc:	20000798 	.word	0x20000798

080060c0 <_fwalk_sglue>:
 80060c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060c4:	4607      	mov	r7, r0
 80060c6:	4688      	mov	r8, r1
 80060c8:	4614      	mov	r4, r2
 80060ca:	2600      	movs	r6, #0
 80060cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060d0:	f1b9 0901 	subs.w	r9, r9, #1
 80060d4:	d505      	bpl.n	80060e2 <_fwalk_sglue+0x22>
 80060d6:	6824      	ldr	r4, [r4, #0]
 80060d8:	2c00      	cmp	r4, #0
 80060da:	d1f7      	bne.n	80060cc <_fwalk_sglue+0xc>
 80060dc:	4630      	mov	r0, r6
 80060de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e2:	89ab      	ldrh	r3, [r5, #12]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d907      	bls.n	80060f8 <_fwalk_sglue+0x38>
 80060e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060ec:	3301      	adds	r3, #1
 80060ee:	d003      	beq.n	80060f8 <_fwalk_sglue+0x38>
 80060f0:	4629      	mov	r1, r5
 80060f2:	4638      	mov	r0, r7
 80060f4:	47c0      	blx	r8
 80060f6:	4306      	orrs	r6, r0
 80060f8:	3568      	adds	r5, #104	@ 0x68
 80060fa:	e7e9      	b.n	80060d0 <_fwalk_sglue+0x10>

080060fc <iprintf>:
 80060fc:	b40f      	push	{r0, r1, r2, r3}
 80060fe:	b507      	push	{r0, r1, r2, lr}
 8006100:	4906      	ldr	r1, [pc, #24]	@ (800611c <iprintf+0x20>)
 8006102:	ab04      	add	r3, sp, #16
 8006104:	6808      	ldr	r0, [r1, #0]
 8006106:	f853 2b04 	ldr.w	r2, [r3], #4
 800610a:	6881      	ldr	r1, [r0, #8]
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	f001 fe33 	bl	8007d78 <_vfiprintf_r>
 8006112:	b003      	add	sp, #12
 8006114:	f85d eb04 	ldr.w	lr, [sp], #4
 8006118:	b004      	add	sp, #16
 800611a:	4770      	bx	lr
 800611c:	2000001c 	.word	0x2000001c

08006120 <_puts_r>:
 8006120:	6a03      	ldr	r3, [r0, #32]
 8006122:	b570      	push	{r4, r5, r6, lr}
 8006124:	6884      	ldr	r4, [r0, #8]
 8006126:	4605      	mov	r5, r0
 8006128:	460e      	mov	r6, r1
 800612a:	b90b      	cbnz	r3, 8006130 <_puts_r+0x10>
 800612c:	f7ff ffb0 	bl	8006090 <__sinit>
 8006130:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006132:	07db      	lsls	r3, r3, #31
 8006134:	d405      	bmi.n	8006142 <_puts_r+0x22>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	0598      	lsls	r0, r3, #22
 800613a:	d402      	bmi.n	8006142 <_puts_r+0x22>
 800613c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800613e:	f000 f9c4 	bl	80064ca <__retarget_lock_acquire_recursive>
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	0719      	lsls	r1, r3, #28
 8006146:	d502      	bpl.n	800614e <_puts_r+0x2e>
 8006148:	6923      	ldr	r3, [r4, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d135      	bne.n	80061ba <_puts_r+0x9a>
 800614e:	4621      	mov	r1, r4
 8006150:	4628      	mov	r0, r5
 8006152:	f000 f8e7 	bl	8006324 <__swsetup_r>
 8006156:	b380      	cbz	r0, 80061ba <_puts_r+0x9a>
 8006158:	f04f 35ff 	mov.w	r5, #4294967295
 800615c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800615e:	07da      	lsls	r2, r3, #31
 8006160:	d405      	bmi.n	800616e <_puts_r+0x4e>
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	059b      	lsls	r3, r3, #22
 8006166:	d402      	bmi.n	800616e <_puts_r+0x4e>
 8006168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800616a:	f000 f9af 	bl	80064cc <__retarget_lock_release_recursive>
 800616e:	4628      	mov	r0, r5
 8006170:	bd70      	pop	{r4, r5, r6, pc}
 8006172:	2b00      	cmp	r3, #0
 8006174:	da04      	bge.n	8006180 <_puts_r+0x60>
 8006176:	69a2      	ldr	r2, [r4, #24]
 8006178:	429a      	cmp	r2, r3
 800617a:	dc17      	bgt.n	80061ac <_puts_r+0x8c>
 800617c:	290a      	cmp	r1, #10
 800617e:	d015      	beq.n	80061ac <_puts_r+0x8c>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	6022      	str	r2, [r4, #0]
 8006186:	7019      	strb	r1, [r3, #0]
 8006188:	68a3      	ldr	r3, [r4, #8]
 800618a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800618e:	3b01      	subs	r3, #1
 8006190:	60a3      	str	r3, [r4, #8]
 8006192:	2900      	cmp	r1, #0
 8006194:	d1ed      	bne.n	8006172 <_puts_r+0x52>
 8006196:	2b00      	cmp	r3, #0
 8006198:	da11      	bge.n	80061be <_puts_r+0x9e>
 800619a:	4622      	mov	r2, r4
 800619c:	210a      	movs	r1, #10
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 f881 	bl	80062a6 <__swbuf_r>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d0d7      	beq.n	8006158 <_puts_r+0x38>
 80061a8:	250a      	movs	r5, #10
 80061aa:	e7d7      	b.n	800615c <_puts_r+0x3c>
 80061ac:	4622      	mov	r2, r4
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 f879 	bl	80062a6 <__swbuf_r>
 80061b4:	3001      	adds	r0, #1
 80061b6:	d1e7      	bne.n	8006188 <_puts_r+0x68>
 80061b8:	e7ce      	b.n	8006158 <_puts_r+0x38>
 80061ba:	3e01      	subs	r6, #1
 80061bc:	e7e4      	b.n	8006188 <_puts_r+0x68>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	6022      	str	r2, [r4, #0]
 80061c4:	220a      	movs	r2, #10
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e7ee      	b.n	80061a8 <_puts_r+0x88>
	...

080061cc <puts>:
 80061cc:	4b02      	ldr	r3, [pc, #8]	@ (80061d8 <puts+0xc>)
 80061ce:	4601      	mov	r1, r0
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	f7ff bfa5 	b.w	8006120 <_puts_r>
 80061d6:	bf00      	nop
 80061d8:	2000001c 	.word	0x2000001c

080061dc <siprintf>:
 80061dc:	b40e      	push	{r1, r2, r3}
 80061de:	b510      	push	{r4, lr}
 80061e0:	b09d      	sub	sp, #116	@ 0x74
 80061e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061e4:	9002      	str	r0, [sp, #8]
 80061e6:	9006      	str	r0, [sp, #24]
 80061e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061ec:	480a      	ldr	r0, [pc, #40]	@ (8006218 <siprintf+0x3c>)
 80061ee:	9107      	str	r1, [sp, #28]
 80061f0:	9104      	str	r1, [sp, #16]
 80061f2:	490a      	ldr	r1, [pc, #40]	@ (800621c <siprintf+0x40>)
 80061f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f8:	9105      	str	r1, [sp, #20]
 80061fa:	2400      	movs	r4, #0
 80061fc:	a902      	add	r1, sp, #8
 80061fe:	6800      	ldr	r0, [r0, #0]
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006204:	f001 fc92 	bl	8007b2c <_svfiprintf_r>
 8006208:	9b02      	ldr	r3, [sp, #8]
 800620a:	701c      	strb	r4, [r3, #0]
 800620c:	b01d      	add	sp, #116	@ 0x74
 800620e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006212:	b003      	add	sp, #12
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	2000001c 	.word	0x2000001c
 800621c:	ffff0208 	.word	0xffff0208

08006220 <__sread>:
 8006220:	b510      	push	{r4, lr}
 8006222:	460c      	mov	r4, r1
 8006224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006228:	f000 f900 	bl	800642c <_read_r>
 800622c:	2800      	cmp	r0, #0
 800622e:	bfab      	itete	ge
 8006230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006232:	89a3      	ldrhlt	r3, [r4, #12]
 8006234:	181b      	addge	r3, r3, r0
 8006236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800623a:	bfac      	ite	ge
 800623c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800623e:	81a3      	strhlt	r3, [r4, #12]
 8006240:	bd10      	pop	{r4, pc}

08006242 <__swrite>:
 8006242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006246:	461f      	mov	r7, r3
 8006248:	898b      	ldrh	r3, [r1, #12]
 800624a:	05db      	lsls	r3, r3, #23
 800624c:	4605      	mov	r5, r0
 800624e:	460c      	mov	r4, r1
 8006250:	4616      	mov	r6, r2
 8006252:	d505      	bpl.n	8006260 <__swrite+0x1e>
 8006254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006258:	2302      	movs	r3, #2
 800625a:	2200      	movs	r2, #0
 800625c:	f000 f8d4 	bl	8006408 <_lseek_r>
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	4632      	mov	r2, r6
 800626e:	463b      	mov	r3, r7
 8006270:	4628      	mov	r0, r5
 8006272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006276:	f000 b8eb 	b.w	8006450 <_write_r>

0800627a <__sseek>:
 800627a:	b510      	push	{r4, lr}
 800627c:	460c      	mov	r4, r1
 800627e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006282:	f000 f8c1 	bl	8006408 <_lseek_r>
 8006286:	1c43      	adds	r3, r0, #1
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	bf15      	itete	ne
 800628c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800628e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006296:	81a3      	strheq	r3, [r4, #12]
 8006298:	bf18      	it	ne
 800629a:	81a3      	strhne	r3, [r4, #12]
 800629c:	bd10      	pop	{r4, pc}

0800629e <__sclose>:
 800629e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a2:	f000 b8a1 	b.w	80063e8 <_close_r>

080062a6 <__swbuf_r>:
 80062a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a8:	460e      	mov	r6, r1
 80062aa:	4614      	mov	r4, r2
 80062ac:	4605      	mov	r5, r0
 80062ae:	b118      	cbz	r0, 80062b8 <__swbuf_r+0x12>
 80062b0:	6a03      	ldr	r3, [r0, #32]
 80062b2:	b90b      	cbnz	r3, 80062b8 <__swbuf_r+0x12>
 80062b4:	f7ff feec 	bl	8006090 <__sinit>
 80062b8:	69a3      	ldr	r3, [r4, #24]
 80062ba:	60a3      	str	r3, [r4, #8]
 80062bc:	89a3      	ldrh	r3, [r4, #12]
 80062be:	071a      	lsls	r2, r3, #28
 80062c0:	d501      	bpl.n	80062c6 <__swbuf_r+0x20>
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	b943      	cbnz	r3, 80062d8 <__swbuf_r+0x32>
 80062c6:	4621      	mov	r1, r4
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 f82b 	bl	8006324 <__swsetup_r>
 80062ce:	b118      	cbz	r0, 80062d8 <__swbuf_r+0x32>
 80062d0:	f04f 37ff 	mov.w	r7, #4294967295
 80062d4:	4638      	mov	r0, r7
 80062d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	6922      	ldr	r2, [r4, #16]
 80062dc:	1a98      	subs	r0, r3, r2
 80062de:	6963      	ldr	r3, [r4, #20]
 80062e0:	b2f6      	uxtb	r6, r6
 80062e2:	4283      	cmp	r3, r0
 80062e4:	4637      	mov	r7, r6
 80062e6:	dc05      	bgt.n	80062f4 <__swbuf_r+0x4e>
 80062e8:	4621      	mov	r1, r4
 80062ea:	4628      	mov	r0, r5
 80062ec:	f001 fee0 	bl	80080b0 <_fflush_r>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d1ed      	bne.n	80062d0 <__swbuf_r+0x2a>
 80062f4:	68a3      	ldr	r3, [r4, #8]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	60a3      	str	r3, [r4, #8]
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	6022      	str	r2, [r4, #0]
 8006300:	701e      	strb	r6, [r3, #0]
 8006302:	6962      	ldr	r2, [r4, #20]
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	429a      	cmp	r2, r3
 8006308:	d004      	beq.n	8006314 <__swbuf_r+0x6e>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	07db      	lsls	r3, r3, #31
 800630e:	d5e1      	bpl.n	80062d4 <__swbuf_r+0x2e>
 8006310:	2e0a      	cmp	r6, #10
 8006312:	d1df      	bne.n	80062d4 <__swbuf_r+0x2e>
 8006314:	4621      	mov	r1, r4
 8006316:	4628      	mov	r0, r5
 8006318:	f001 feca 	bl	80080b0 <_fflush_r>
 800631c:	2800      	cmp	r0, #0
 800631e:	d0d9      	beq.n	80062d4 <__swbuf_r+0x2e>
 8006320:	e7d6      	b.n	80062d0 <__swbuf_r+0x2a>
	...

08006324 <__swsetup_r>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	4b29      	ldr	r3, [pc, #164]	@ (80063cc <__swsetup_r+0xa8>)
 8006328:	4605      	mov	r5, r0
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	460c      	mov	r4, r1
 800632e:	b118      	cbz	r0, 8006338 <__swsetup_r+0x14>
 8006330:	6a03      	ldr	r3, [r0, #32]
 8006332:	b90b      	cbnz	r3, 8006338 <__swsetup_r+0x14>
 8006334:	f7ff feac 	bl	8006090 <__sinit>
 8006338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633c:	0719      	lsls	r1, r3, #28
 800633e:	d422      	bmi.n	8006386 <__swsetup_r+0x62>
 8006340:	06da      	lsls	r2, r3, #27
 8006342:	d407      	bmi.n	8006354 <__swsetup_r+0x30>
 8006344:	2209      	movs	r2, #9
 8006346:	602a      	str	r2, [r5, #0]
 8006348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800634c:	81a3      	strh	r3, [r4, #12]
 800634e:	f04f 30ff 	mov.w	r0, #4294967295
 8006352:	e033      	b.n	80063bc <__swsetup_r+0x98>
 8006354:	0758      	lsls	r0, r3, #29
 8006356:	d512      	bpl.n	800637e <__swsetup_r+0x5a>
 8006358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800635a:	b141      	cbz	r1, 800636e <__swsetup_r+0x4a>
 800635c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006360:	4299      	cmp	r1, r3
 8006362:	d002      	beq.n	800636a <__swsetup_r+0x46>
 8006364:	4628      	mov	r0, r5
 8006366:	f000 ff0b 	bl	8007180 <_free_r>
 800636a:	2300      	movs	r3, #0
 800636c:	6363      	str	r3, [r4, #52]	@ 0x34
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006374:	81a3      	strh	r3, [r4, #12]
 8006376:	2300      	movs	r3, #0
 8006378:	6063      	str	r3, [r4, #4]
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	f043 0308 	orr.w	r3, r3, #8
 8006384:	81a3      	strh	r3, [r4, #12]
 8006386:	6923      	ldr	r3, [r4, #16]
 8006388:	b94b      	cbnz	r3, 800639e <__swsetup_r+0x7a>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006394:	d003      	beq.n	800639e <__swsetup_r+0x7a>
 8006396:	4621      	mov	r1, r4
 8006398:	4628      	mov	r0, r5
 800639a:	f001 fed7 	bl	800814c <__smakebuf_r>
 800639e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a2:	f013 0201 	ands.w	r2, r3, #1
 80063a6:	d00a      	beq.n	80063be <__swsetup_r+0x9a>
 80063a8:	2200      	movs	r2, #0
 80063aa:	60a2      	str	r2, [r4, #8]
 80063ac:	6962      	ldr	r2, [r4, #20]
 80063ae:	4252      	negs	r2, r2
 80063b0:	61a2      	str	r2, [r4, #24]
 80063b2:	6922      	ldr	r2, [r4, #16]
 80063b4:	b942      	cbnz	r2, 80063c8 <__swsetup_r+0xa4>
 80063b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063ba:	d1c5      	bne.n	8006348 <__swsetup_r+0x24>
 80063bc:	bd38      	pop	{r3, r4, r5, pc}
 80063be:	0799      	lsls	r1, r3, #30
 80063c0:	bf58      	it	pl
 80063c2:	6962      	ldrpl	r2, [r4, #20]
 80063c4:	60a2      	str	r2, [r4, #8]
 80063c6:	e7f4      	b.n	80063b2 <__swsetup_r+0x8e>
 80063c8:	2000      	movs	r0, #0
 80063ca:	e7f7      	b.n	80063bc <__swsetup_r+0x98>
 80063cc:	2000001c 	.word	0x2000001c

080063d0 <memset>:
 80063d0:	4402      	add	r2, r0
 80063d2:	4603      	mov	r3, r0
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d100      	bne.n	80063da <memset+0xa>
 80063d8:	4770      	bx	lr
 80063da:	f803 1b01 	strb.w	r1, [r3], #1
 80063de:	e7f9      	b.n	80063d4 <memset+0x4>

080063e0 <_localeconv_r>:
 80063e0:	4800      	ldr	r0, [pc, #0]	@ (80063e4 <_localeconv_r+0x4>)
 80063e2:	4770      	bx	lr
 80063e4:	2000015c 	.word	0x2000015c

080063e8 <_close_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d06      	ldr	r5, [pc, #24]	@ (8006404 <_close_r+0x1c>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	f7fb fe8a 	bl	800210c <_close>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_close_r+0x1a>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_close_r+0x1a>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	2000079c 	.word	0x2000079c

08006408 <_lseek_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4d07      	ldr	r5, [pc, #28]	@ (8006428 <_lseek_r+0x20>)
 800640c:	4604      	mov	r4, r0
 800640e:	4608      	mov	r0, r1
 8006410:	4611      	mov	r1, r2
 8006412:	2200      	movs	r2, #0
 8006414:	602a      	str	r2, [r5, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	f7fb fe9f 	bl	800215a <_lseek>
 800641c:	1c43      	adds	r3, r0, #1
 800641e:	d102      	bne.n	8006426 <_lseek_r+0x1e>
 8006420:	682b      	ldr	r3, [r5, #0]
 8006422:	b103      	cbz	r3, 8006426 <_lseek_r+0x1e>
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	bd38      	pop	{r3, r4, r5, pc}
 8006428:	2000079c 	.word	0x2000079c

0800642c <_read_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d07      	ldr	r5, [pc, #28]	@ (800644c <_read_r+0x20>)
 8006430:	4604      	mov	r4, r0
 8006432:	4608      	mov	r0, r1
 8006434:	4611      	mov	r1, r2
 8006436:	2200      	movs	r2, #0
 8006438:	602a      	str	r2, [r5, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	f7fb fe2d 	bl	800209a <_read>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_read_r+0x1e>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	b103      	cbz	r3, 800644a <_read_r+0x1e>
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	2000079c 	.word	0x2000079c

08006450 <_write_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4d07      	ldr	r5, [pc, #28]	@ (8006470 <_write_r+0x20>)
 8006454:	4604      	mov	r4, r0
 8006456:	4608      	mov	r0, r1
 8006458:	4611      	mov	r1, r2
 800645a:	2200      	movs	r2, #0
 800645c:	602a      	str	r2, [r5, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	f7fb fe38 	bl	80020d4 <_write>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_write_r+0x1e>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_write_r+0x1e>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	2000079c 	.word	0x2000079c

08006474 <__errno>:
 8006474:	4b01      	ldr	r3, [pc, #4]	@ (800647c <__errno+0x8>)
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	2000001c 	.word	0x2000001c

08006480 <__libc_init_array>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	4d0d      	ldr	r5, [pc, #52]	@ (80064b8 <__libc_init_array+0x38>)
 8006484:	4c0d      	ldr	r4, [pc, #52]	@ (80064bc <__libc_init_array+0x3c>)
 8006486:	1b64      	subs	r4, r4, r5
 8006488:	10a4      	asrs	r4, r4, #2
 800648a:	2600      	movs	r6, #0
 800648c:	42a6      	cmp	r6, r4
 800648e:	d109      	bne.n	80064a4 <__libc_init_array+0x24>
 8006490:	4d0b      	ldr	r5, [pc, #44]	@ (80064c0 <__libc_init_array+0x40>)
 8006492:	4c0c      	ldr	r4, [pc, #48]	@ (80064c4 <__libc_init_array+0x44>)
 8006494:	f001 ffd6 	bl	8008444 <_init>
 8006498:	1b64      	subs	r4, r4, r5
 800649a:	10a4      	asrs	r4, r4, #2
 800649c:	2600      	movs	r6, #0
 800649e:	42a6      	cmp	r6, r4
 80064a0:	d105      	bne.n	80064ae <__libc_init_array+0x2e>
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
 80064a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a8:	4798      	blx	r3
 80064aa:	3601      	adds	r6, #1
 80064ac:	e7ee      	b.n	800648c <__libc_init_array+0xc>
 80064ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b2:	4798      	blx	r3
 80064b4:	3601      	adds	r6, #1
 80064b6:	e7f2      	b.n	800649e <__libc_init_array+0x1e>
 80064b8:	0800b7bc 	.word	0x0800b7bc
 80064bc:	0800b7bc 	.word	0x0800b7bc
 80064c0:	0800b7bc 	.word	0x0800b7bc
 80064c4:	0800b7c0 	.word	0x0800b7c0

080064c8 <__retarget_lock_init_recursive>:
 80064c8:	4770      	bx	lr

080064ca <__retarget_lock_acquire_recursive>:
 80064ca:	4770      	bx	lr

080064cc <__retarget_lock_release_recursive>:
 80064cc:	4770      	bx	lr

080064ce <quorem>:
 80064ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d2:	6903      	ldr	r3, [r0, #16]
 80064d4:	690c      	ldr	r4, [r1, #16]
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	4607      	mov	r7, r0
 80064da:	db7e      	blt.n	80065da <quorem+0x10c>
 80064dc:	3c01      	subs	r4, #1
 80064de:	f101 0814 	add.w	r8, r1, #20
 80064e2:	00a3      	lsls	r3, r4, #2
 80064e4:	f100 0514 	add.w	r5, r0, #20
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064f8:	3301      	adds	r3, #1
 80064fa:	429a      	cmp	r2, r3
 80064fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006500:	fbb2 f6f3 	udiv	r6, r2, r3
 8006504:	d32e      	bcc.n	8006564 <quorem+0x96>
 8006506:	f04f 0a00 	mov.w	sl, #0
 800650a:	46c4      	mov	ip, r8
 800650c:	46ae      	mov	lr, r5
 800650e:	46d3      	mov	fp, sl
 8006510:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006514:	b298      	uxth	r0, r3
 8006516:	fb06 a000 	mla	r0, r6, r0, sl
 800651a:	0c02      	lsrs	r2, r0, #16
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	fb06 2303 	mla	r3, r6, r3, r2
 8006522:	f8de 2000 	ldr.w	r2, [lr]
 8006526:	b280      	uxth	r0, r0
 8006528:	b292      	uxth	r2, r2
 800652a:	1a12      	subs	r2, r2, r0
 800652c:	445a      	add	r2, fp
 800652e:	f8de 0000 	ldr.w	r0, [lr]
 8006532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006536:	b29b      	uxth	r3, r3
 8006538:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800653c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006540:	b292      	uxth	r2, r2
 8006542:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006546:	45e1      	cmp	r9, ip
 8006548:	f84e 2b04 	str.w	r2, [lr], #4
 800654c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006550:	d2de      	bcs.n	8006510 <quorem+0x42>
 8006552:	9b00      	ldr	r3, [sp, #0]
 8006554:	58eb      	ldr	r3, [r5, r3]
 8006556:	b92b      	cbnz	r3, 8006564 <quorem+0x96>
 8006558:	9b01      	ldr	r3, [sp, #4]
 800655a:	3b04      	subs	r3, #4
 800655c:	429d      	cmp	r5, r3
 800655e:	461a      	mov	r2, r3
 8006560:	d32f      	bcc.n	80065c2 <quorem+0xf4>
 8006562:	613c      	str	r4, [r7, #16]
 8006564:	4638      	mov	r0, r7
 8006566:	f001 f97d 	bl	8007864 <__mcmp>
 800656a:	2800      	cmp	r0, #0
 800656c:	db25      	blt.n	80065ba <quorem+0xec>
 800656e:	4629      	mov	r1, r5
 8006570:	2000      	movs	r0, #0
 8006572:	f858 2b04 	ldr.w	r2, [r8], #4
 8006576:	f8d1 c000 	ldr.w	ip, [r1]
 800657a:	fa1f fe82 	uxth.w	lr, r2
 800657e:	fa1f f38c 	uxth.w	r3, ip
 8006582:	eba3 030e 	sub.w	r3, r3, lr
 8006586:	4403      	add	r3, r0
 8006588:	0c12      	lsrs	r2, r2, #16
 800658a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800658e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006592:	b29b      	uxth	r3, r3
 8006594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006598:	45c1      	cmp	r9, r8
 800659a:	f841 3b04 	str.w	r3, [r1], #4
 800659e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065a2:	d2e6      	bcs.n	8006572 <quorem+0xa4>
 80065a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065ac:	b922      	cbnz	r2, 80065b8 <quorem+0xea>
 80065ae:	3b04      	subs	r3, #4
 80065b0:	429d      	cmp	r5, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	d30b      	bcc.n	80065ce <quorem+0x100>
 80065b6:	613c      	str	r4, [r7, #16]
 80065b8:	3601      	adds	r6, #1
 80065ba:	4630      	mov	r0, r6
 80065bc:	b003      	add	sp, #12
 80065be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	3b04      	subs	r3, #4
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	d1cb      	bne.n	8006562 <quorem+0x94>
 80065ca:	3c01      	subs	r4, #1
 80065cc:	e7c6      	b.n	800655c <quorem+0x8e>
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	d1ef      	bne.n	80065b6 <quorem+0xe8>
 80065d6:	3c01      	subs	r4, #1
 80065d8:	e7ea      	b.n	80065b0 <quorem+0xe2>
 80065da:	2000      	movs	r0, #0
 80065dc:	e7ee      	b.n	80065bc <quorem+0xee>
	...

080065e0 <_dtoa_r>:
 80065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	69c7      	ldr	r7, [r0, #28]
 80065e6:	b097      	sub	sp, #92	@ 0x5c
 80065e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80065ec:	ec55 4b10 	vmov	r4, r5, d0
 80065f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80065f2:	9107      	str	r1, [sp, #28]
 80065f4:	4681      	mov	r9, r0
 80065f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80065f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80065fa:	b97f      	cbnz	r7, 800661c <_dtoa_r+0x3c>
 80065fc:	2010      	movs	r0, #16
 80065fe:	f000 fe09 	bl	8007214 <malloc>
 8006602:	4602      	mov	r2, r0
 8006604:	f8c9 001c 	str.w	r0, [r9, #28]
 8006608:	b920      	cbnz	r0, 8006614 <_dtoa_r+0x34>
 800660a:	4ba9      	ldr	r3, [pc, #676]	@ (80068b0 <_dtoa_r+0x2d0>)
 800660c:	21ef      	movs	r1, #239	@ 0xef
 800660e:	48a9      	ldr	r0, [pc, #676]	@ (80068b4 <_dtoa_r+0x2d4>)
 8006610:	f001 fe32 	bl	8008278 <__assert_func>
 8006614:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006618:	6007      	str	r7, [r0, #0]
 800661a:	60c7      	str	r7, [r0, #12]
 800661c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006620:	6819      	ldr	r1, [r3, #0]
 8006622:	b159      	cbz	r1, 800663c <_dtoa_r+0x5c>
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	604a      	str	r2, [r1, #4]
 8006628:	2301      	movs	r3, #1
 800662a:	4093      	lsls	r3, r2
 800662c:	608b      	str	r3, [r1, #8]
 800662e:	4648      	mov	r0, r9
 8006630:	f000 fee6 	bl	8007400 <_Bfree>
 8006634:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	1e2b      	subs	r3, r5, #0
 800663e:	bfb9      	ittee	lt
 8006640:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006644:	9305      	strlt	r3, [sp, #20]
 8006646:	2300      	movge	r3, #0
 8006648:	6033      	strge	r3, [r6, #0]
 800664a:	9f05      	ldr	r7, [sp, #20]
 800664c:	4b9a      	ldr	r3, [pc, #616]	@ (80068b8 <_dtoa_r+0x2d8>)
 800664e:	bfbc      	itt	lt
 8006650:	2201      	movlt	r2, #1
 8006652:	6032      	strlt	r2, [r6, #0]
 8006654:	43bb      	bics	r3, r7
 8006656:	d112      	bne.n	800667e <_dtoa_r+0x9e>
 8006658:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800665a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006664:	4323      	orrs	r3, r4
 8006666:	f000 855a 	beq.w	800711e <_dtoa_r+0xb3e>
 800666a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800666c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80068cc <_dtoa_r+0x2ec>
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 855c 	beq.w	800712e <_dtoa_r+0xb4e>
 8006676:	f10a 0303 	add.w	r3, sl, #3
 800667a:	f000 bd56 	b.w	800712a <_dtoa_r+0xb4a>
 800667e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006682:	2200      	movs	r2, #0
 8006684:	ec51 0b17 	vmov	r0, r1, d7
 8006688:	2300      	movs	r3, #0
 800668a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800668e:	f7fa fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006692:	4680      	mov	r8, r0
 8006694:	b158      	cbz	r0, 80066ae <_dtoa_r+0xce>
 8006696:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006698:	2301      	movs	r3, #1
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800669e:	b113      	cbz	r3, 80066a6 <_dtoa_r+0xc6>
 80066a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80066a2:	4b86      	ldr	r3, [pc, #536]	@ (80068bc <_dtoa_r+0x2dc>)
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80068d0 <_dtoa_r+0x2f0>
 80066aa:	f000 bd40 	b.w	800712e <_dtoa_r+0xb4e>
 80066ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80066b2:	aa14      	add	r2, sp, #80	@ 0x50
 80066b4:	a915      	add	r1, sp, #84	@ 0x54
 80066b6:	4648      	mov	r0, r9
 80066b8:	f001 f984 	bl	80079c4 <__d2b>
 80066bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80066c0:	9002      	str	r0, [sp, #8]
 80066c2:	2e00      	cmp	r6, #0
 80066c4:	d078      	beq.n	80067b8 <_dtoa_r+0x1d8>
 80066c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80066cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80066d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80066dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80066e0:	4619      	mov	r1, r3
 80066e2:	2200      	movs	r2, #0
 80066e4:	4b76      	ldr	r3, [pc, #472]	@ (80068c0 <_dtoa_r+0x2e0>)
 80066e6:	f7f9 fdcf 	bl	8000288 <__aeabi_dsub>
 80066ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8006898 <_dtoa_r+0x2b8>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f7f9 ff82 	bl	80005f8 <__aeabi_dmul>
 80066f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80068a0 <_dtoa_r+0x2c0>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f7f9 fdc7 	bl	800028c <__adddf3>
 80066fe:	4604      	mov	r4, r0
 8006700:	4630      	mov	r0, r6
 8006702:	460d      	mov	r5, r1
 8006704:	f7f9 ff0e 	bl	8000524 <__aeabi_i2d>
 8006708:	a367      	add	r3, pc, #412	@ (adr r3, 80068a8 <_dtoa_r+0x2c8>)
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f7f9 ff73 	bl	80005f8 <__aeabi_dmul>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4620      	mov	r0, r4
 8006718:	4629      	mov	r1, r5
 800671a:	f7f9 fdb7 	bl	800028c <__adddf3>
 800671e:	4604      	mov	r4, r0
 8006720:	460d      	mov	r5, r1
 8006722:	f7fa fa19 	bl	8000b58 <__aeabi_d2iz>
 8006726:	2200      	movs	r2, #0
 8006728:	4607      	mov	r7, r0
 800672a:	2300      	movs	r3, #0
 800672c:	4620      	mov	r0, r4
 800672e:	4629      	mov	r1, r5
 8006730:	f7fa f9d4 	bl	8000adc <__aeabi_dcmplt>
 8006734:	b140      	cbz	r0, 8006748 <_dtoa_r+0x168>
 8006736:	4638      	mov	r0, r7
 8006738:	f7f9 fef4 	bl	8000524 <__aeabi_i2d>
 800673c:	4622      	mov	r2, r4
 800673e:	462b      	mov	r3, r5
 8006740:	f7fa f9c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006744:	b900      	cbnz	r0, 8006748 <_dtoa_r+0x168>
 8006746:	3f01      	subs	r7, #1
 8006748:	2f16      	cmp	r7, #22
 800674a:	d852      	bhi.n	80067f2 <_dtoa_r+0x212>
 800674c:	4b5d      	ldr	r3, [pc, #372]	@ (80068c4 <_dtoa_r+0x2e4>)
 800674e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800675a:	f7fa f9bf 	bl	8000adc <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	d049      	beq.n	80067f6 <_dtoa_r+0x216>
 8006762:	3f01      	subs	r7, #1
 8006764:	2300      	movs	r3, #0
 8006766:	9310      	str	r3, [sp, #64]	@ 0x40
 8006768:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800676a:	1b9b      	subs	r3, r3, r6
 800676c:	1e5a      	subs	r2, r3, #1
 800676e:	bf45      	ittet	mi
 8006770:	f1c3 0301 	rsbmi	r3, r3, #1
 8006774:	9300      	strmi	r3, [sp, #0]
 8006776:	2300      	movpl	r3, #0
 8006778:	2300      	movmi	r3, #0
 800677a:	9206      	str	r2, [sp, #24]
 800677c:	bf54      	ite	pl
 800677e:	9300      	strpl	r3, [sp, #0]
 8006780:	9306      	strmi	r3, [sp, #24]
 8006782:	2f00      	cmp	r7, #0
 8006784:	db39      	blt.n	80067fa <_dtoa_r+0x21a>
 8006786:	9b06      	ldr	r3, [sp, #24]
 8006788:	970d      	str	r7, [sp, #52]	@ 0x34
 800678a:	443b      	add	r3, r7
 800678c:	9306      	str	r3, [sp, #24]
 800678e:	2300      	movs	r3, #0
 8006790:	9308      	str	r3, [sp, #32]
 8006792:	9b07      	ldr	r3, [sp, #28]
 8006794:	2b09      	cmp	r3, #9
 8006796:	d863      	bhi.n	8006860 <_dtoa_r+0x280>
 8006798:	2b05      	cmp	r3, #5
 800679a:	bfc4      	itt	gt
 800679c:	3b04      	subgt	r3, #4
 800679e:	9307      	strgt	r3, [sp, #28]
 80067a0:	9b07      	ldr	r3, [sp, #28]
 80067a2:	f1a3 0302 	sub.w	r3, r3, #2
 80067a6:	bfcc      	ite	gt
 80067a8:	2400      	movgt	r4, #0
 80067aa:	2401      	movle	r4, #1
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d863      	bhi.n	8006878 <_dtoa_r+0x298>
 80067b0:	e8df f003 	tbb	[pc, r3]
 80067b4:	2b375452 	.word	0x2b375452
 80067b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80067bc:	441e      	add	r6, r3
 80067be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	bfc1      	itttt	gt
 80067c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80067ca:	409f      	lslgt	r7, r3
 80067cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80067d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80067d4:	bfd6      	itet	le
 80067d6:	f1c3 0320 	rsble	r3, r3, #32
 80067da:	ea47 0003 	orrgt.w	r0, r7, r3
 80067de:	fa04 f003 	lslle.w	r0, r4, r3
 80067e2:	f7f9 fe8f 	bl	8000504 <__aeabi_ui2d>
 80067e6:	2201      	movs	r2, #1
 80067e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80067ec:	3e01      	subs	r6, #1
 80067ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80067f0:	e776      	b.n	80066e0 <_dtoa_r+0x100>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e7b7      	b.n	8006766 <_dtoa_r+0x186>
 80067f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80067f8:	e7b6      	b.n	8006768 <_dtoa_r+0x188>
 80067fa:	9b00      	ldr	r3, [sp, #0]
 80067fc:	1bdb      	subs	r3, r3, r7
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	427b      	negs	r3, r7
 8006802:	9308      	str	r3, [sp, #32]
 8006804:	2300      	movs	r3, #0
 8006806:	930d      	str	r3, [sp, #52]	@ 0x34
 8006808:	e7c3      	b.n	8006792 <_dtoa_r+0x1b2>
 800680a:	2301      	movs	r3, #1
 800680c:	9309      	str	r3, [sp, #36]	@ 0x24
 800680e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006810:	eb07 0b03 	add.w	fp, r7, r3
 8006814:	f10b 0301 	add.w	r3, fp, #1
 8006818:	2b01      	cmp	r3, #1
 800681a:	9303      	str	r3, [sp, #12]
 800681c:	bfb8      	it	lt
 800681e:	2301      	movlt	r3, #1
 8006820:	e006      	b.n	8006830 <_dtoa_r+0x250>
 8006822:	2301      	movs	r3, #1
 8006824:	9309      	str	r3, [sp, #36]	@ 0x24
 8006826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006828:	2b00      	cmp	r3, #0
 800682a:	dd28      	ble.n	800687e <_dtoa_r+0x29e>
 800682c:	469b      	mov	fp, r3
 800682e:	9303      	str	r3, [sp, #12]
 8006830:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006834:	2100      	movs	r1, #0
 8006836:	2204      	movs	r2, #4
 8006838:	f102 0514 	add.w	r5, r2, #20
 800683c:	429d      	cmp	r5, r3
 800683e:	d926      	bls.n	800688e <_dtoa_r+0x2ae>
 8006840:	6041      	str	r1, [r0, #4]
 8006842:	4648      	mov	r0, r9
 8006844:	f000 fd9c 	bl	8007380 <_Balloc>
 8006848:	4682      	mov	sl, r0
 800684a:	2800      	cmp	r0, #0
 800684c:	d142      	bne.n	80068d4 <_dtoa_r+0x2f4>
 800684e:	4b1e      	ldr	r3, [pc, #120]	@ (80068c8 <_dtoa_r+0x2e8>)
 8006850:	4602      	mov	r2, r0
 8006852:	f240 11af 	movw	r1, #431	@ 0x1af
 8006856:	e6da      	b.n	800660e <_dtoa_r+0x2e>
 8006858:	2300      	movs	r3, #0
 800685a:	e7e3      	b.n	8006824 <_dtoa_r+0x244>
 800685c:	2300      	movs	r3, #0
 800685e:	e7d5      	b.n	800680c <_dtoa_r+0x22c>
 8006860:	2401      	movs	r4, #1
 8006862:	2300      	movs	r3, #0
 8006864:	9307      	str	r3, [sp, #28]
 8006866:	9409      	str	r4, [sp, #36]	@ 0x24
 8006868:	f04f 3bff 	mov.w	fp, #4294967295
 800686c:	2200      	movs	r2, #0
 800686e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006872:	2312      	movs	r3, #18
 8006874:	920c      	str	r2, [sp, #48]	@ 0x30
 8006876:	e7db      	b.n	8006830 <_dtoa_r+0x250>
 8006878:	2301      	movs	r3, #1
 800687a:	9309      	str	r3, [sp, #36]	@ 0x24
 800687c:	e7f4      	b.n	8006868 <_dtoa_r+0x288>
 800687e:	f04f 0b01 	mov.w	fp, #1
 8006882:	f8cd b00c 	str.w	fp, [sp, #12]
 8006886:	465b      	mov	r3, fp
 8006888:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800688c:	e7d0      	b.n	8006830 <_dtoa_r+0x250>
 800688e:	3101      	adds	r1, #1
 8006890:	0052      	lsls	r2, r2, #1
 8006892:	e7d1      	b.n	8006838 <_dtoa_r+0x258>
 8006894:	f3af 8000 	nop.w
 8006898:	636f4361 	.word	0x636f4361
 800689c:	3fd287a7 	.word	0x3fd287a7
 80068a0:	8b60c8b3 	.word	0x8b60c8b3
 80068a4:	3fc68a28 	.word	0x3fc68a28
 80068a8:	509f79fb 	.word	0x509f79fb
 80068ac:	3fd34413 	.word	0x3fd34413
 80068b0:	0800b47d 	.word	0x0800b47d
 80068b4:	0800b494 	.word	0x0800b494
 80068b8:	7ff00000 	.word	0x7ff00000
 80068bc:	0800b44d 	.word	0x0800b44d
 80068c0:	3ff80000 	.word	0x3ff80000
 80068c4:	0800b5e8 	.word	0x0800b5e8
 80068c8:	0800b4ec 	.word	0x0800b4ec
 80068cc:	0800b479 	.word	0x0800b479
 80068d0:	0800b44c 	.word	0x0800b44c
 80068d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80068d8:	6018      	str	r0, [r3, #0]
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	2b0e      	cmp	r3, #14
 80068de:	f200 80a1 	bhi.w	8006a24 <_dtoa_r+0x444>
 80068e2:	2c00      	cmp	r4, #0
 80068e4:	f000 809e 	beq.w	8006a24 <_dtoa_r+0x444>
 80068e8:	2f00      	cmp	r7, #0
 80068ea:	dd33      	ble.n	8006954 <_dtoa_r+0x374>
 80068ec:	4b9c      	ldr	r3, [pc, #624]	@ (8006b60 <_dtoa_r+0x580>)
 80068ee:	f007 020f 	and.w	r2, r7, #15
 80068f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068f6:	ed93 7b00 	vldr	d7, [r3]
 80068fa:	05f8      	lsls	r0, r7, #23
 80068fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006900:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006904:	d516      	bpl.n	8006934 <_dtoa_r+0x354>
 8006906:	4b97      	ldr	r3, [pc, #604]	@ (8006b64 <_dtoa_r+0x584>)
 8006908:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800690c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006910:	f7f9 ff9c 	bl	800084c <__aeabi_ddiv>
 8006914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006918:	f004 040f 	and.w	r4, r4, #15
 800691c:	2603      	movs	r6, #3
 800691e:	4d91      	ldr	r5, [pc, #580]	@ (8006b64 <_dtoa_r+0x584>)
 8006920:	b954      	cbnz	r4, 8006938 <_dtoa_r+0x358>
 8006922:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800692a:	f7f9 ff8f 	bl	800084c <__aeabi_ddiv>
 800692e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006932:	e028      	b.n	8006986 <_dtoa_r+0x3a6>
 8006934:	2602      	movs	r6, #2
 8006936:	e7f2      	b.n	800691e <_dtoa_r+0x33e>
 8006938:	07e1      	lsls	r1, r4, #31
 800693a:	d508      	bpl.n	800694e <_dtoa_r+0x36e>
 800693c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006940:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006944:	f7f9 fe58 	bl	80005f8 <__aeabi_dmul>
 8006948:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800694c:	3601      	adds	r6, #1
 800694e:	1064      	asrs	r4, r4, #1
 8006950:	3508      	adds	r5, #8
 8006952:	e7e5      	b.n	8006920 <_dtoa_r+0x340>
 8006954:	f000 80af 	beq.w	8006ab6 <_dtoa_r+0x4d6>
 8006958:	427c      	negs	r4, r7
 800695a:	4b81      	ldr	r3, [pc, #516]	@ (8006b60 <_dtoa_r+0x580>)
 800695c:	4d81      	ldr	r5, [pc, #516]	@ (8006b64 <_dtoa_r+0x584>)
 800695e:	f004 020f 	and.w	r2, r4, #15
 8006962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800696e:	f7f9 fe43 	bl	80005f8 <__aeabi_dmul>
 8006972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006976:	1124      	asrs	r4, r4, #4
 8006978:	2300      	movs	r3, #0
 800697a:	2602      	movs	r6, #2
 800697c:	2c00      	cmp	r4, #0
 800697e:	f040 808f 	bne.w	8006aa0 <_dtoa_r+0x4c0>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1d3      	bne.n	800692e <_dtoa_r+0x34e>
 8006986:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006988:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8094 	beq.w	8006aba <_dtoa_r+0x4da>
 8006992:	4b75      	ldr	r3, [pc, #468]	@ (8006b68 <_dtoa_r+0x588>)
 8006994:	2200      	movs	r2, #0
 8006996:	4620      	mov	r0, r4
 8006998:	4629      	mov	r1, r5
 800699a:	f7fa f89f 	bl	8000adc <__aeabi_dcmplt>
 800699e:	2800      	cmp	r0, #0
 80069a0:	f000 808b 	beq.w	8006aba <_dtoa_r+0x4da>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 8087 	beq.w	8006aba <_dtoa_r+0x4da>
 80069ac:	f1bb 0f00 	cmp.w	fp, #0
 80069b0:	dd34      	ble.n	8006a1c <_dtoa_r+0x43c>
 80069b2:	4620      	mov	r0, r4
 80069b4:	4b6d      	ldr	r3, [pc, #436]	@ (8006b6c <_dtoa_r+0x58c>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	4629      	mov	r1, r5
 80069ba:	f7f9 fe1d 	bl	80005f8 <__aeabi_dmul>
 80069be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069c2:	f107 38ff 	add.w	r8, r7, #4294967295
 80069c6:	3601      	adds	r6, #1
 80069c8:	465c      	mov	r4, fp
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7f9 fdaa 	bl	8000524 <__aeabi_i2d>
 80069d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d4:	f7f9 fe10 	bl	80005f8 <__aeabi_dmul>
 80069d8:	4b65      	ldr	r3, [pc, #404]	@ (8006b70 <_dtoa_r+0x590>)
 80069da:	2200      	movs	r2, #0
 80069dc:	f7f9 fc56 	bl	800028c <__adddf3>
 80069e0:	4605      	mov	r5, r0
 80069e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80069e6:	2c00      	cmp	r4, #0
 80069e8:	d16a      	bne.n	8006ac0 <_dtoa_r+0x4e0>
 80069ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ee:	4b61      	ldr	r3, [pc, #388]	@ (8006b74 <_dtoa_r+0x594>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	f7f9 fc49 	bl	8000288 <__aeabi_dsub>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069fe:	462a      	mov	r2, r5
 8006a00:	4633      	mov	r3, r6
 8006a02:	f7fa f889 	bl	8000b18 <__aeabi_dcmpgt>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f040 8298 	bne.w	8006f3c <_dtoa_r+0x95c>
 8006a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a10:	462a      	mov	r2, r5
 8006a12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a16:	f7fa f861 	bl	8000adc <__aeabi_dcmplt>
 8006a1a:	bb38      	cbnz	r0, 8006a6c <_dtoa_r+0x48c>
 8006a1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006a20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f2c0 8157 	blt.w	8006cda <_dtoa_r+0x6fa>
 8006a2c:	2f0e      	cmp	r7, #14
 8006a2e:	f300 8154 	bgt.w	8006cda <_dtoa_r+0x6fa>
 8006a32:	4b4b      	ldr	r3, [pc, #300]	@ (8006b60 <_dtoa_r+0x580>)
 8006a34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a38:	ed93 7b00 	vldr	d7, [r3]
 8006a3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	ed8d 7b00 	vstr	d7, [sp]
 8006a44:	f280 80e5 	bge.w	8006c12 <_dtoa_r+0x632>
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f300 80e1 	bgt.w	8006c12 <_dtoa_r+0x632>
 8006a50:	d10c      	bne.n	8006a6c <_dtoa_r+0x48c>
 8006a52:	4b48      	ldr	r3, [pc, #288]	@ (8006b74 <_dtoa_r+0x594>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	ec51 0b17 	vmov	r0, r1, d7
 8006a5a:	f7f9 fdcd 	bl	80005f8 <__aeabi_dmul>
 8006a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a62:	f7fa f84f 	bl	8000b04 <__aeabi_dcmpge>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f000 8266 	beq.w	8006f38 <_dtoa_r+0x958>
 8006a6c:	2400      	movs	r4, #0
 8006a6e:	4625      	mov	r5, r4
 8006a70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a72:	4656      	mov	r6, sl
 8006a74:	ea6f 0803 	mvn.w	r8, r3
 8006a78:	2700      	movs	r7, #0
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	4648      	mov	r0, r9
 8006a7e:	f000 fcbf 	bl	8007400 <_Bfree>
 8006a82:	2d00      	cmp	r5, #0
 8006a84:	f000 80bd 	beq.w	8006c02 <_dtoa_r+0x622>
 8006a88:	b12f      	cbz	r7, 8006a96 <_dtoa_r+0x4b6>
 8006a8a:	42af      	cmp	r7, r5
 8006a8c:	d003      	beq.n	8006a96 <_dtoa_r+0x4b6>
 8006a8e:	4639      	mov	r1, r7
 8006a90:	4648      	mov	r0, r9
 8006a92:	f000 fcb5 	bl	8007400 <_Bfree>
 8006a96:	4629      	mov	r1, r5
 8006a98:	4648      	mov	r0, r9
 8006a9a:	f000 fcb1 	bl	8007400 <_Bfree>
 8006a9e:	e0b0      	b.n	8006c02 <_dtoa_r+0x622>
 8006aa0:	07e2      	lsls	r2, r4, #31
 8006aa2:	d505      	bpl.n	8006ab0 <_dtoa_r+0x4d0>
 8006aa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006aa8:	f7f9 fda6 	bl	80005f8 <__aeabi_dmul>
 8006aac:	3601      	adds	r6, #1
 8006aae:	2301      	movs	r3, #1
 8006ab0:	1064      	asrs	r4, r4, #1
 8006ab2:	3508      	adds	r5, #8
 8006ab4:	e762      	b.n	800697c <_dtoa_r+0x39c>
 8006ab6:	2602      	movs	r6, #2
 8006ab8:	e765      	b.n	8006986 <_dtoa_r+0x3a6>
 8006aba:	9c03      	ldr	r4, [sp, #12]
 8006abc:	46b8      	mov	r8, r7
 8006abe:	e784      	b.n	80069ca <_dtoa_r+0x3ea>
 8006ac0:	4b27      	ldr	r3, [pc, #156]	@ (8006b60 <_dtoa_r+0x580>)
 8006ac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ac8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006acc:	4454      	add	r4, sl
 8006ace:	2900      	cmp	r1, #0
 8006ad0:	d054      	beq.n	8006b7c <_dtoa_r+0x59c>
 8006ad2:	4929      	ldr	r1, [pc, #164]	@ (8006b78 <_dtoa_r+0x598>)
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	f7f9 feb9 	bl	800084c <__aeabi_ddiv>
 8006ada:	4633      	mov	r3, r6
 8006adc:	462a      	mov	r2, r5
 8006ade:	f7f9 fbd3 	bl	8000288 <__aeabi_dsub>
 8006ae2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ae6:	4656      	mov	r6, sl
 8006ae8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aec:	f7fa f834 	bl	8000b58 <__aeabi_d2iz>
 8006af0:	4605      	mov	r5, r0
 8006af2:	f7f9 fd17 	bl	8000524 <__aeabi_i2d>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006afe:	f7f9 fbc3 	bl	8000288 <__aeabi_dsub>
 8006b02:	3530      	adds	r5, #48	@ 0x30
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b0c:	f806 5b01 	strb.w	r5, [r6], #1
 8006b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b14:	f7f9 ffe2 	bl	8000adc <__aeabi_dcmplt>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d172      	bne.n	8006c02 <_dtoa_r+0x622>
 8006b1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b20:	4911      	ldr	r1, [pc, #68]	@ (8006b68 <_dtoa_r+0x588>)
 8006b22:	2000      	movs	r0, #0
 8006b24:	f7f9 fbb0 	bl	8000288 <__aeabi_dsub>
 8006b28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b2c:	f7f9 ffd6 	bl	8000adc <__aeabi_dcmplt>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f040 80b4 	bne.w	8006c9e <_dtoa_r+0x6be>
 8006b36:	42a6      	cmp	r6, r4
 8006b38:	f43f af70 	beq.w	8006a1c <_dtoa_r+0x43c>
 8006b3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b40:	4b0a      	ldr	r3, [pc, #40]	@ (8006b6c <_dtoa_r+0x58c>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	f7f9 fd58 	bl	80005f8 <__aeabi_dmul>
 8006b48:	4b08      	ldr	r3, [pc, #32]	@ (8006b6c <_dtoa_r+0x58c>)
 8006b4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b4e:	2200      	movs	r2, #0
 8006b50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b54:	f7f9 fd50 	bl	80005f8 <__aeabi_dmul>
 8006b58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b5c:	e7c4      	b.n	8006ae8 <_dtoa_r+0x508>
 8006b5e:	bf00      	nop
 8006b60:	0800b5e8 	.word	0x0800b5e8
 8006b64:	0800b5c0 	.word	0x0800b5c0
 8006b68:	3ff00000 	.word	0x3ff00000
 8006b6c:	40240000 	.word	0x40240000
 8006b70:	401c0000 	.word	0x401c0000
 8006b74:	40140000 	.word	0x40140000
 8006b78:	3fe00000 	.word	0x3fe00000
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f7f9 fd3a 	bl	80005f8 <__aeabi_dmul>
 8006b84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006b8a:	4656      	mov	r6, sl
 8006b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b90:	f7f9 ffe2 	bl	8000b58 <__aeabi_d2iz>
 8006b94:	4605      	mov	r5, r0
 8006b96:	f7f9 fcc5 	bl	8000524 <__aeabi_i2d>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ba2:	f7f9 fb71 	bl	8000288 <__aeabi_dsub>
 8006ba6:	3530      	adds	r5, #48	@ 0x30
 8006ba8:	f806 5b01 	strb.w	r5, [r6], #1
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	42a6      	cmp	r6, r4
 8006bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bb6:	f04f 0200 	mov.w	r2, #0
 8006bba:	d124      	bne.n	8006c06 <_dtoa_r+0x626>
 8006bbc:	4baf      	ldr	r3, [pc, #700]	@ (8006e7c <_dtoa_r+0x89c>)
 8006bbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006bc2:	f7f9 fb63 	bl	800028c <__adddf3>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bce:	f7f9 ffa3 	bl	8000b18 <__aeabi_dcmpgt>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d163      	bne.n	8006c9e <_dtoa_r+0x6be>
 8006bd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006bda:	49a8      	ldr	r1, [pc, #672]	@ (8006e7c <_dtoa_r+0x89c>)
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f7f9 fb53 	bl	8000288 <__aeabi_dsub>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bea:	f7f9 ff77 	bl	8000adc <__aeabi_dcmplt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f43f af14 	beq.w	8006a1c <_dtoa_r+0x43c>
 8006bf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006bf6:	1e73      	subs	r3, r6, #1
 8006bf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006bfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006bfe:	2b30      	cmp	r3, #48	@ 0x30
 8006c00:	d0f8      	beq.n	8006bf4 <_dtoa_r+0x614>
 8006c02:	4647      	mov	r7, r8
 8006c04:	e03b      	b.n	8006c7e <_dtoa_r+0x69e>
 8006c06:	4b9e      	ldr	r3, [pc, #632]	@ (8006e80 <_dtoa_r+0x8a0>)
 8006c08:	f7f9 fcf6 	bl	80005f8 <__aeabi_dmul>
 8006c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c10:	e7bc      	b.n	8006b8c <_dtoa_r+0x5ac>
 8006c12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006c16:	4656      	mov	r6, sl
 8006c18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 fe14 	bl	800084c <__aeabi_ddiv>
 8006c24:	f7f9 ff98 	bl	8000b58 <__aeabi_d2iz>
 8006c28:	4680      	mov	r8, r0
 8006c2a:	f7f9 fc7b 	bl	8000524 <__aeabi_i2d>
 8006c2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c32:	f7f9 fce1 	bl	80005f8 <__aeabi_dmul>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c42:	f7f9 fb21 	bl	8000288 <__aeabi_dsub>
 8006c46:	f806 4b01 	strb.w	r4, [r6], #1
 8006c4a:	9d03      	ldr	r5, [sp, #12]
 8006c4c:	eba6 040a 	sub.w	r4, r6, sl
 8006c50:	42a5      	cmp	r5, r4
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	d133      	bne.n	8006cc0 <_dtoa_r+0x6e0>
 8006c58:	f7f9 fb18 	bl	800028c <__adddf3>
 8006c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c60:	4604      	mov	r4, r0
 8006c62:	460d      	mov	r5, r1
 8006c64:	f7f9 ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8006c68:	b9c0      	cbnz	r0, 8006c9c <_dtoa_r+0x6bc>
 8006c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c6e:	4620      	mov	r0, r4
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7f9 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c76:	b110      	cbz	r0, 8006c7e <_dtoa_r+0x69e>
 8006c78:	f018 0f01 	tst.w	r8, #1
 8006c7c:	d10e      	bne.n	8006c9c <_dtoa_r+0x6bc>
 8006c7e:	9902      	ldr	r1, [sp, #8]
 8006c80:	4648      	mov	r0, r9
 8006c82:	f000 fbbd 	bl	8007400 <_Bfree>
 8006c86:	2300      	movs	r3, #0
 8006c88:	7033      	strb	r3, [r6, #0]
 8006c8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c8c:	3701      	adds	r7, #1
 8006c8e:	601f      	str	r7, [r3, #0]
 8006c90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 824b 	beq.w	800712e <_dtoa_r+0xb4e>
 8006c98:	601e      	str	r6, [r3, #0]
 8006c9a:	e248      	b.n	800712e <_dtoa_r+0xb4e>
 8006c9c:	46b8      	mov	r8, r7
 8006c9e:	4633      	mov	r3, r6
 8006ca0:	461e      	mov	r6, r3
 8006ca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ca6:	2a39      	cmp	r2, #57	@ 0x39
 8006ca8:	d106      	bne.n	8006cb8 <_dtoa_r+0x6d8>
 8006caa:	459a      	cmp	sl, r3
 8006cac:	d1f8      	bne.n	8006ca0 <_dtoa_r+0x6c0>
 8006cae:	2230      	movs	r2, #48	@ 0x30
 8006cb0:	f108 0801 	add.w	r8, r8, #1
 8006cb4:	f88a 2000 	strb.w	r2, [sl]
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	3201      	adds	r2, #1
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e7a0      	b.n	8006c02 <_dtoa_r+0x622>
 8006cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8006e80 <_dtoa_r+0x8a0>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f7f9 fc98 	bl	80005f8 <__aeabi_dmul>
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4604      	mov	r4, r0
 8006cce:	460d      	mov	r5, r1
 8006cd0:	f7f9 fefa 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d09f      	beq.n	8006c18 <_dtoa_r+0x638>
 8006cd8:	e7d1      	b.n	8006c7e <_dtoa_r+0x69e>
 8006cda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cdc:	2a00      	cmp	r2, #0
 8006cde:	f000 80ea 	beq.w	8006eb6 <_dtoa_r+0x8d6>
 8006ce2:	9a07      	ldr	r2, [sp, #28]
 8006ce4:	2a01      	cmp	r2, #1
 8006ce6:	f300 80cd 	bgt.w	8006e84 <_dtoa_r+0x8a4>
 8006cea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006cec:	2a00      	cmp	r2, #0
 8006cee:	f000 80c1 	beq.w	8006e74 <_dtoa_r+0x894>
 8006cf2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006cf6:	9c08      	ldr	r4, [sp, #32]
 8006cf8:	9e00      	ldr	r6, [sp, #0]
 8006cfa:	9a00      	ldr	r2, [sp, #0]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	9200      	str	r2, [sp, #0]
 8006d00:	9a06      	ldr	r2, [sp, #24]
 8006d02:	2101      	movs	r1, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	4648      	mov	r0, r9
 8006d08:	9206      	str	r2, [sp, #24]
 8006d0a:	f000 fc2d 	bl	8007568 <__i2b>
 8006d0e:	4605      	mov	r5, r0
 8006d10:	b166      	cbz	r6, 8006d2c <_dtoa_r+0x74c>
 8006d12:	9b06      	ldr	r3, [sp, #24]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dd09      	ble.n	8006d2c <_dtoa_r+0x74c>
 8006d18:	42b3      	cmp	r3, r6
 8006d1a:	9a00      	ldr	r2, [sp, #0]
 8006d1c:	bfa8      	it	ge
 8006d1e:	4633      	movge	r3, r6
 8006d20:	1ad2      	subs	r2, r2, r3
 8006d22:	9200      	str	r2, [sp, #0]
 8006d24:	9a06      	ldr	r2, [sp, #24]
 8006d26:	1af6      	subs	r6, r6, r3
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	9306      	str	r3, [sp, #24]
 8006d2c:	9b08      	ldr	r3, [sp, #32]
 8006d2e:	b30b      	cbz	r3, 8006d74 <_dtoa_r+0x794>
 8006d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 80c6 	beq.w	8006ec4 <_dtoa_r+0x8e4>
 8006d38:	2c00      	cmp	r4, #0
 8006d3a:	f000 80c0 	beq.w	8006ebe <_dtoa_r+0x8de>
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4622      	mov	r2, r4
 8006d42:	4648      	mov	r0, r9
 8006d44:	f000 fcc8 	bl	80076d8 <__pow5mult>
 8006d48:	9a02      	ldr	r2, [sp, #8]
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	4648      	mov	r0, r9
 8006d50:	f000 fc20 	bl	8007594 <__multiply>
 8006d54:	9902      	ldr	r1, [sp, #8]
 8006d56:	4680      	mov	r8, r0
 8006d58:	4648      	mov	r0, r9
 8006d5a:	f000 fb51 	bl	8007400 <_Bfree>
 8006d5e:	9b08      	ldr	r3, [sp, #32]
 8006d60:	1b1b      	subs	r3, r3, r4
 8006d62:	9308      	str	r3, [sp, #32]
 8006d64:	f000 80b1 	beq.w	8006eca <_dtoa_r+0x8ea>
 8006d68:	9a08      	ldr	r2, [sp, #32]
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	f000 fcb3 	bl	80076d8 <__pow5mult>
 8006d72:	9002      	str	r0, [sp, #8]
 8006d74:	2101      	movs	r1, #1
 8006d76:	4648      	mov	r0, r9
 8006d78:	f000 fbf6 	bl	8007568 <__i2b>
 8006d7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d7e:	4604      	mov	r4, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 81d8 	beq.w	8007136 <_dtoa_r+0xb56>
 8006d86:	461a      	mov	r2, r3
 8006d88:	4601      	mov	r1, r0
 8006d8a:	4648      	mov	r0, r9
 8006d8c:	f000 fca4 	bl	80076d8 <__pow5mult>
 8006d90:	9b07      	ldr	r3, [sp, #28]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	4604      	mov	r4, r0
 8006d96:	f300 809f 	bgt.w	8006ed8 <_dtoa_r+0x8f8>
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f040 8097 	bne.w	8006ed0 <_dtoa_r+0x8f0>
 8006da2:	9b05      	ldr	r3, [sp, #20]
 8006da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f040 8093 	bne.w	8006ed4 <_dtoa_r+0x8f4>
 8006dae:	9b05      	ldr	r3, [sp, #20]
 8006db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006db4:	0d1b      	lsrs	r3, r3, #20
 8006db6:	051b      	lsls	r3, r3, #20
 8006db8:	b133      	cbz	r3, 8006dc8 <_dtoa_r+0x7e8>
 8006dba:	9b00      	ldr	r3, [sp, #0]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	9b06      	ldr	r3, [sp, #24]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	9306      	str	r3, [sp, #24]
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	9308      	str	r3, [sp, #32]
 8006dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 81b8 	beq.w	8007142 <_dtoa_r+0xb62>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006dd8:	6918      	ldr	r0, [r3, #16]
 8006dda:	f000 fb79 	bl	80074d0 <__hi0bits>
 8006dde:	f1c0 0020 	rsb	r0, r0, #32
 8006de2:	9b06      	ldr	r3, [sp, #24]
 8006de4:	4418      	add	r0, r3
 8006de6:	f010 001f 	ands.w	r0, r0, #31
 8006dea:	f000 8082 	beq.w	8006ef2 <_dtoa_r+0x912>
 8006dee:	f1c0 0320 	rsb	r3, r0, #32
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	dd73      	ble.n	8006ede <_dtoa_r+0x8fe>
 8006df6:	9b00      	ldr	r3, [sp, #0]
 8006df8:	f1c0 001c 	rsb	r0, r0, #28
 8006dfc:	4403      	add	r3, r0
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	9b06      	ldr	r3, [sp, #24]
 8006e02:	4403      	add	r3, r0
 8006e04:	4406      	add	r6, r0
 8006e06:	9306      	str	r3, [sp, #24]
 8006e08:	9b00      	ldr	r3, [sp, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dd05      	ble.n	8006e1a <_dtoa_r+0x83a>
 8006e0e:	9902      	ldr	r1, [sp, #8]
 8006e10:	461a      	mov	r2, r3
 8006e12:	4648      	mov	r0, r9
 8006e14:	f000 fcba 	bl	800778c <__lshift>
 8006e18:	9002      	str	r0, [sp, #8]
 8006e1a:	9b06      	ldr	r3, [sp, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dd05      	ble.n	8006e2c <_dtoa_r+0x84c>
 8006e20:	4621      	mov	r1, r4
 8006e22:	461a      	mov	r2, r3
 8006e24:	4648      	mov	r0, r9
 8006e26:	f000 fcb1 	bl	800778c <__lshift>
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d061      	beq.n	8006ef6 <_dtoa_r+0x916>
 8006e32:	9802      	ldr	r0, [sp, #8]
 8006e34:	4621      	mov	r1, r4
 8006e36:	f000 fd15 	bl	8007864 <__mcmp>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	da5b      	bge.n	8006ef6 <_dtoa_r+0x916>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9902      	ldr	r1, [sp, #8]
 8006e42:	220a      	movs	r2, #10
 8006e44:	4648      	mov	r0, r9
 8006e46:	f000 fafd 	bl	8007444 <__multadd>
 8006e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4c:	9002      	str	r0, [sp, #8]
 8006e4e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8177 	beq.w	8007146 <_dtoa_r+0xb66>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	220a      	movs	r2, #10
 8006e5e:	4648      	mov	r0, r9
 8006e60:	f000 faf0 	bl	8007444 <__multadd>
 8006e64:	f1bb 0f00 	cmp.w	fp, #0
 8006e68:	4605      	mov	r5, r0
 8006e6a:	dc6f      	bgt.n	8006f4c <_dtoa_r+0x96c>
 8006e6c:	9b07      	ldr	r3, [sp, #28]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	dc49      	bgt.n	8006f06 <_dtoa_r+0x926>
 8006e72:	e06b      	b.n	8006f4c <_dtoa_r+0x96c>
 8006e74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006e7a:	e73c      	b.n	8006cf6 <_dtoa_r+0x716>
 8006e7c:	3fe00000 	.word	0x3fe00000
 8006e80:	40240000 	.word	0x40240000
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	1e5c      	subs	r4, r3, #1
 8006e88:	9b08      	ldr	r3, [sp, #32]
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	db09      	blt.n	8006ea2 <_dtoa_r+0x8c2>
 8006e8e:	1b1c      	subs	r4, r3, r4
 8006e90:	9b03      	ldr	r3, [sp, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f6bf af30 	bge.w	8006cf8 <_dtoa_r+0x718>
 8006e98:	9b00      	ldr	r3, [sp, #0]
 8006e9a:	9a03      	ldr	r2, [sp, #12]
 8006e9c:	1a9e      	subs	r6, r3, r2
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e72b      	b.n	8006cfa <_dtoa_r+0x71a>
 8006ea2:	9b08      	ldr	r3, [sp, #32]
 8006ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ea6:	9408      	str	r4, [sp, #32]
 8006ea8:	1ae3      	subs	r3, r4, r3
 8006eaa:	441a      	add	r2, r3
 8006eac:	9e00      	ldr	r6, [sp, #0]
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	920d      	str	r2, [sp, #52]	@ 0x34
 8006eb2:	2400      	movs	r4, #0
 8006eb4:	e721      	b.n	8006cfa <_dtoa_r+0x71a>
 8006eb6:	9c08      	ldr	r4, [sp, #32]
 8006eb8:	9e00      	ldr	r6, [sp, #0]
 8006eba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006ebc:	e728      	b.n	8006d10 <_dtoa_r+0x730>
 8006ebe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006ec2:	e751      	b.n	8006d68 <_dtoa_r+0x788>
 8006ec4:	9a08      	ldr	r2, [sp, #32]
 8006ec6:	9902      	ldr	r1, [sp, #8]
 8006ec8:	e750      	b.n	8006d6c <_dtoa_r+0x78c>
 8006eca:	f8cd 8008 	str.w	r8, [sp, #8]
 8006ece:	e751      	b.n	8006d74 <_dtoa_r+0x794>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e779      	b.n	8006dc8 <_dtoa_r+0x7e8>
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	e777      	b.n	8006dc8 <_dtoa_r+0x7e8>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9308      	str	r3, [sp, #32]
 8006edc:	e779      	b.n	8006dd2 <_dtoa_r+0x7f2>
 8006ede:	d093      	beq.n	8006e08 <_dtoa_r+0x828>
 8006ee0:	9a00      	ldr	r2, [sp, #0]
 8006ee2:	331c      	adds	r3, #28
 8006ee4:	441a      	add	r2, r3
 8006ee6:	9200      	str	r2, [sp, #0]
 8006ee8:	9a06      	ldr	r2, [sp, #24]
 8006eea:	441a      	add	r2, r3
 8006eec:	441e      	add	r6, r3
 8006eee:	9206      	str	r2, [sp, #24]
 8006ef0:	e78a      	b.n	8006e08 <_dtoa_r+0x828>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	e7f4      	b.n	8006ee0 <_dtoa_r+0x900>
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	46b8      	mov	r8, r7
 8006efc:	dc20      	bgt.n	8006f40 <_dtoa_r+0x960>
 8006efe:	469b      	mov	fp, r3
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	dd1e      	ble.n	8006f44 <_dtoa_r+0x964>
 8006f06:	f1bb 0f00 	cmp.w	fp, #0
 8006f0a:	f47f adb1 	bne.w	8006a70 <_dtoa_r+0x490>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	465b      	mov	r3, fp
 8006f12:	2205      	movs	r2, #5
 8006f14:	4648      	mov	r0, r9
 8006f16:	f000 fa95 	bl	8007444 <__multadd>
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	9802      	ldr	r0, [sp, #8]
 8006f20:	f000 fca0 	bl	8007864 <__mcmp>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f77f ada3 	ble.w	8006a70 <_dtoa_r+0x490>
 8006f2a:	4656      	mov	r6, sl
 8006f2c:	2331      	movs	r3, #49	@ 0x31
 8006f2e:	f806 3b01 	strb.w	r3, [r6], #1
 8006f32:	f108 0801 	add.w	r8, r8, #1
 8006f36:	e59f      	b.n	8006a78 <_dtoa_r+0x498>
 8006f38:	9c03      	ldr	r4, [sp, #12]
 8006f3a:	46b8      	mov	r8, r7
 8006f3c:	4625      	mov	r5, r4
 8006f3e:	e7f4      	b.n	8006f2a <_dtoa_r+0x94a>
 8006f40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 8101 	beq.w	800714e <_dtoa_r+0xb6e>
 8006f4c:	2e00      	cmp	r6, #0
 8006f4e:	dd05      	ble.n	8006f5c <_dtoa_r+0x97c>
 8006f50:	4629      	mov	r1, r5
 8006f52:	4632      	mov	r2, r6
 8006f54:	4648      	mov	r0, r9
 8006f56:	f000 fc19 	bl	800778c <__lshift>
 8006f5a:	4605      	mov	r5, r0
 8006f5c:	9b08      	ldr	r3, [sp, #32]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d05c      	beq.n	800701c <_dtoa_r+0xa3c>
 8006f62:	6869      	ldr	r1, [r5, #4]
 8006f64:	4648      	mov	r0, r9
 8006f66:	f000 fa0b 	bl	8007380 <_Balloc>
 8006f6a:	4606      	mov	r6, r0
 8006f6c:	b928      	cbnz	r0, 8006f7a <_dtoa_r+0x99a>
 8006f6e:	4b82      	ldr	r3, [pc, #520]	@ (8007178 <_dtoa_r+0xb98>)
 8006f70:	4602      	mov	r2, r0
 8006f72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006f76:	f7ff bb4a 	b.w	800660e <_dtoa_r+0x2e>
 8006f7a:	692a      	ldr	r2, [r5, #16]
 8006f7c:	3202      	adds	r2, #2
 8006f7e:	0092      	lsls	r2, r2, #2
 8006f80:	f105 010c 	add.w	r1, r5, #12
 8006f84:	300c      	adds	r0, #12
 8006f86:	f001 f969 	bl	800825c <memcpy>
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4648      	mov	r0, r9
 8006f90:	f000 fbfc 	bl	800778c <__lshift>
 8006f94:	f10a 0301 	add.w	r3, sl, #1
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	eb0a 030b 	add.w	r3, sl, fp
 8006f9e:	9308      	str	r3, [sp, #32]
 8006fa0:	9b04      	ldr	r3, [sp, #16]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	462f      	mov	r7, r5
 8006fa8:	9306      	str	r3, [sp, #24]
 8006faa:	4605      	mov	r5, r0
 8006fac:	9b00      	ldr	r3, [sp, #0]
 8006fae:	9802      	ldr	r0, [sp, #8]
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	f103 3bff 	add.w	fp, r3, #4294967295
 8006fb6:	f7ff fa8a 	bl	80064ce <quorem>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	3330      	adds	r3, #48	@ 0x30
 8006fbe:	9003      	str	r0, [sp, #12]
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	9802      	ldr	r0, [sp, #8]
 8006fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc6:	f000 fc4d 	bl	8007864 <__mcmp>
 8006fca:	462a      	mov	r2, r5
 8006fcc:	9004      	str	r0, [sp, #16]
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4648      	mov	r0, r9
 8006fd2:	f000 fc63 	bl	800789c <__mdiff>
 8006fd6:	68c2      	ldr	r2, [r0, #12]
 8006fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fda:	4606      	mov	r6, r0
 8006fdc:	bb02      	cbnz	r2, 8007020 <_dtoa_r+0xa40>
 8006fde:	4601      	mov	r1, r0
 8006fe0:	9802      	ldr	r0, [sp, #8]
 8006fe2:	f000 fc3f 	bl	8007864 <__mcmp>
 8006fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4631      	mov	r1, r6
 8006fec:	4648      	mov	r0, r9
 8006fee:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff2:	f000 fa05 	bl	8007400 <_Bfree>
 8006ff6:	9b07      	ldr	r3, [sp, #28]
 8006ff8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ffa:	9e00      	ldr	r6, [sp, #0]
 8006ffc:	ea42 0103 	orr.w	r1, r2, r3
 8007000:	9b06      	ldr	r3, [sp, #24]
 8007002:	4319      	orrs	r1, r3
 8007004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007006:	d10d      	bne.n	8007024 <_dtoa_r+0xa44>
 8007008:	2b39      	cmp	r3, #57	@ 0x39
 800700a:	d027      	beq.n	800705c <_dtoa_r+0xa7c>
 800700c:	9a04      	ldr	r2, [sp, #16]
 800700e:	2a00      	cmp	r2, #0
 8007010:	dd01      	ble.n	8007016 <_dtoa_r+0xa36>
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	3331      	adds	r3, #49	@ 0x31
 8007016:	f88b 3000 	strb.w	r3, [fp]
 800701a:	e52e      	b.n	8006a7a <_dtoa_r+0x49a>
 800701c:	4628      	mov	r0, r5
 800701e:	e7b9      	b.n	8006f94 <_dtoa_r+0x9b4>
 8007020:	2201      	movs	r2, #1
 8007022:	e7e2      	b.n	8006fea <_dtoa_r+0xa0a>
 8007024:	9904      	ldr	r1, [sp, #16]
 8007026:	2900      	cmp	r1, #0
 8007028:	db04      	blt.n	8007034 <_dtoa_r+0xa54>
 800702a:	9807      	ldr	r0, [sp, #28]
 800702c:	4301      	orrs	r1, r0
 800702e:	9806      	ldr	r0, [sp, #24]
 8007030:	4301      	orrs	r1, r0
 8007032:	d120      	bne.n	8007076 <_dtoa_r+0xa96>
 8007034:	2a00      	cmp	r2, #0
 8007036:	ddee      	ble.n	8007016 <_dtoa_r+0xa36>
 8007038:	9902      	ldr	r1, [sp, #8]
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2201      	movs	r2, #1
 800703e:	4648      	mov	r0, r9
 8007040:	f000 fba4 	bl	800778c <__lshift>
 8007044:	4621      	mov	r1, r4
 8007046:	9002      	str	r0, [sp, #8]
 8007048:	f000 fc0c 	bl	8007864 <__mcmp>
 800704c:	2800      	cmp	r0, #0
 800704e:	9b00      	ldr	r3, [sp, #0]
 8007050:	dc02      	bgt.n	8007058 <_dtoa_r+0xa78>
 8007052:	d1e0      	bne.n	8007016 <_dtoa_r+0xa36>
 8007054:	07da      	lsls	r2, r3, #31
 8007056:	d5de      	bpl.n	8007016 <_dtoa_r+0xa36>
 8007058:	2b39      	cmp	r3, #57	@ 0x39
 800705a:	d1da      	bne.n	8007012 <_dtoa_r+0xa32>
 800705c:	2339      	movs	r3, #57	@ 0x39
 800705e:	f88b 3000 	strb.w	r3, [fp]
 8007062:	4633      	mov	r3, r6
 8007064:	461e      	mov	r6, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800706c:	2a39      	cmp	r2, #57	@ 0x39
 800706e:	d04e      	beq.n	800710e <_dtoa_r+0xb2e>
 8007070:	3201      	adds	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]
 8007074:	e501      	b.n	8006a7a <_dtoa_r+0x49a>
 8007076:	2a00      	cmp	r2, #0
 8007078:	dd03      	ble.n	8007082 <_dtoa_r+0xaa2>
 800707a:	2b39      	cmp	r3, #57	@ 0x39
 800707c:	d0ee      	beq.n	800705c <_dtoa_r+0xa7c>
 800707e:	3301      	adds	r3, #1
 8007080:	e7c9      	b.n	8007016 <_dtoa_r+0xa36>
 8007082:	9a00      	ldr	r2, [sp, #0]
 8007084:	9908      	ldr	r1, [sp, #32]
 8007086:	f802 3c01 	strb.w	r3, [r2, #-1]
 800708a:	428a      	cmp	r2, r1
 800708c:	d028      	beq.n	80070e0 <_dtoa_r+0xb00>
 800708e:	9902      	ldr	r1, [sp, #8]
 8007090:	2300      	movs	r3, #0
 8007092:	220a      	movs	r2, #10
 8007094:	4648      	mov	r0, r9
 8007096:	f000 f9d5 	bl	8007444 <__multadd>
 800709a:	42af      	cmp	r7, r5
 800709c:	9002      	str	r0, [sp, #8]
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	f04f 020a 	mov.w	r2, #10
 80070a6:	4639      	mov	r1, r7
 80070a8:	4648      	mov	r0, r9
 80070aa:	d107      	bne.n	80070bc <_dtoa_r+0xadc>
 80070ac:	f000 f9ca 	bl	8007444 <__multadd>
 80070b0:	4607      	mov	r7, r0
 80070b2:	4605      	mov	r5, r0
 80070b4:	9b00      	ldr	r3, [sp, #0]
 80070b6:	3301      	adds	r3, #1
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	e777      	b.n	8006fac <_dtoa_r+0x9cc>
 80070bc:	f000 f9c2 	bl	8007444 <__multadd>
 80070c0:	4629      	mov	r1, r5
 80070c2:	4607      	mov	r7, r0
 80070c4:	2300      	movs	r3, #0
 80070c6:	220a      	movs	r2, #10
 80070c8:	4648      	mov	r0, r9
 80070ca:	f000 f9bb 	bl	8007444 <__multadd>
 80070ce:	4605      	mov	r5, r0
 80070d0:	e7f0      	b.n	80070b4 <_dtoa_r+0xad4>
 80070d2:	f1bb 0f00 	cmp.w	fp, #0
 80070d6:	bfcc      	ite	gt
 80070d8:	465e      	movgt	r6, fp
 80070da:	2601      	movle	r6, #1
 80070dc:	4456      	add	r6, sl
 80070de:	2700      	movs	r7, #0
 80070e0:	9902      	ldr	r1, [sp, #8]
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	2201      	movs	r2, #1
 80070e6:	4648      	mov	r0, r9
 80070e8:	f000 fb50 	bl	800778c <__lshift>
 80070ec:	4621      	mov	r1, r4
 80070ee:	9002      	str	r0, [sp, #8]
 80070f0:	f000 fbb8 	bl	8007864 <__mcmp>
 80070f4:	2800      	cmp	r0, #0
 80070f6:	dcb4      	bgt.n	8007062 <_dtoa_r+0xa82>
 80070f8:	d102      	bne.n	8007100 <_dtoa_r+0xb20>
 80070fa:	9b00      	ldr	r3, [sp, #0]
 80070fc:	07db      	lsls	r3, r3, #31
 80070fe:	d4b0      	bmi.n	8007062 <_dtoa_r+0xa82>
 8007100:	4633      	mov	r3, r6
 8007102:	461e      	mov	r6, r3
 8007104:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007108:	2a30      	cmp	r2, #48	@ 0x30
 800710a:	d0fa      	beq.n	8007102 <_dtoa_r+0xb22>
 800710c:	e4b5      	b.n	8006a7a <_dtoa_r+0x49a>
 800710e:	459a      	cmp	sl, r3
 8007110:	d1a8      	bne.n	8007064 <_dtoa_r+0xa84>
 8007112:	2331      	movs	r3, #49	@ 0x31
 8007114:	f108 0801 	add.w	r8, r8, #1
 8007118:	f88a 3000 	strb.w	r3, [sl]
 800711c:	e4ad      	b.n	8006a7a <_dtoa_r+0x49a>
 800711e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007120:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800717c <_dtoa_r+0xb9c>
 8007124:	b11b      	cbz	r3, 800712e <_dtoa_r+0xb4e>
 8007126:	f10a 0308 	add.w	r3, sl, #8
 800712a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	4650      	mov	r0, sl
 8007130:	b017      	add	sp, #92	@ 0x5c
 8007132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007136:	9b07      	ldr	r3, [sp, #28]
 8007138:	2b01      	cmp	r3, #1
 800713a:	f77f ae2e 	ble.w	8006d9a <_dtoa_r+0x7ba>
 800713e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007140:	9308      	str	r3, [sp, #32]
 8007142:	2001      	movs	r0, #1
 8007144:	e64d      	b.n	8006de2 <_dtoa_r+0x802>
 8007146:	f1bb 0f00 	cmp.w	fp, #0
 800714a:	f77f aed9 	ble.w	8006f00 <_dtoa_r+0x920>
 800714e:	4656      	mov	r6, sl
 8007150:	9802      	ldr	r0, [sp, #8]
 8007152:	4621      	mov	r1, r4
 8007154:	f7ff f9bb 	bl	80064ce <quorem>
 8007158:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800715c:	f806 3b01 	strb.w	r3, [r6], #1
 8007160:	eba6 020a 	sub.w	r2, r6, sl
 8007164:	4593      	cmp	fp, r2
 8007166:	ddb4      	ble.n	80070d2 <_dtoa_r+0xaf2>
 8007168:	9902      	ldr	r1, [sp, #8]
 800716a:	2300      	movs	r3, #0
 800716c:	220a      	movs	r2, #10
 800716e:	4648      	mov	r0, r9
 8007170:	f000 f968 	bl	8007444 <__multadd>
 8007174:	9002      	str	r0, [sp, #8]
 8007176:	e7eb      	b.n	8007150 <_dtoa_r+0xb70>
 8007178:	0800b4ec 	.word	0x0800b4ec
 800717c:	0800b470 	.word	0x0800b470

08007180 <_free_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4605      	mov	r5, r0
 8007184:	2900      	cmp	r1, #0
 8007186:	d041      	beq.n	800720c <_free_r+0x8c>
 8007188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718c:	1f0c      	subs	r4, r1, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	bfb8      	it	lt
 8007192:	18e4      	addlt	r4, r4, r3
 8007194:	f000 f8e8 	bl	8007368 <__malloc_lock>
 8007198:	4a1d      	ldr	r2, [pc, #116]	@ (8007210 <_free_r+0x90>)
 800719a:	6813      	ldr	r3, [r2, #0]
 800719c:	b933      	cbnz	r3, 80071ac <_free_r+0x2c>
 800719e:	6063      	str	r3, [r4, #4]
 80071a0:	6014      	str	r4, [r2, #0]
 80071a2:	4628      	mov	r0, r5
 80071a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071a8:	f000 b8e4 	b.w	8007374 <__malloc_unlock>
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	d908      	bls.n	80071c2 <_free_r+0x42>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	1821      	adds	r1, r4, r0
 80071b4:	428b      	cmp	r3, r1
 80071b6:	bf01      	itttt	eq
 80071b8:	6819      	ldreq	r1, [r3, #0]
 80071ba:	685b      	ldreq	r3, [r3, #4]
 80071bc:	1809      	addeq	r1, r1, r0
 80071be:	6021      	streq	r1, [r4, #0]
 80071c0:	e7ed      	b.n	800719e <_free_r+0x1e>
 80071c2:	461a      	mov	r2, r3
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	b10b      	cbz	r3, 80071cc <_free_r+0x4c>
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	d9fa      	bls.n	80071c2 <_free_r+0x42>
 80071cc:	6811      	ldr	r1, [r2, #0]
 80071ce:	1850      	adds	r0, r2, r1
 80071d0:	42a0      	cmp	r0, r4
 80071d2:	d10b      	bne.n	80071ec <_free_r+0x6c>
 80071d4:	6820      	ldr	r0, [r4, #0]
 80071d6:	4401      	add	r1, r0
 80071d8:	1850      	adds	r0, r2, r1
 80071da:	4283      	cmp	r3, r0
 80071dc:	6011      	str	r1, [r2, #0]
 80071de:	d1e0      	bne.n	80071a2 <_free_r+0x22>
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	6053      	str	r3, [r2, #4]
 80071e6:	4408      	add	r0, r1
 80071e8:	6010      	str	r0, [r2, #0]
 80071ea:	e7da      	b.n	80071a2 <_free_r+0x22>
 80071ec:	d902      	bls.n	80071f4 <_free_r+0x74>
 80071ee:	230c      	movs	r3, #12
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	e7d6      	b.n	80071a2 <_free_r+0x22>
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	1821      	adds	r1, r4, r0
 80071f8:	428b      	cmp	r3, r1
 80071fa:	bf04      	itt	eq
 80071fc:	6819      	ldreq	r1, [r3, #0]
 80071fe:	685b      	ldreq	r3, [r3, #4]
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	bf04      	itt	eq
 8007204:	1809      	addeq	r1, r1, r0
 8007206:	6021      	streq	r1, [r4, #0]
 8007208:	6054      	str	r4, [r2, #4]
 800720a:	e7ca      	b.n	80071a2 <_free_r+0x22>
 800720c:	bd38      	pop	{r3, r4, r5, pc}
 800720e:	bf00      	nop
 8007210:	200007a8 	.word	0x200007a8

08007214 <malloc>:
 8007214:	4b02      	ldr	r3, [pc, #8]	@ (8007220 <malloc+0xc>)
 8007216:	4601      	mov	r1, r0
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	f000 b825 	b.w	8007268 <_malloc_r>
 800721e:	bf00      	nop
 8007220:	2000001c 	.word	0x2000001c

08007224 <sbrk_aligned>:
 8007224:	b570      	push	{r4, r5, r6, lr}
 8007226:	4e0f      	ldr	r6, [pc, #60]	@ (8007264 <sbrk_aligned+0x40>)
 8007228:	460c      	mov	r4, r1
 800722a:	6831      	ldr	r1, [r6, #0]
 800722c:	4605      	mov	r5, r0
 800722e:	b911      	cbnz	r1, 8007236 <sbrk_aligned+0x12>
 8007230:	f001 f804 	bl	800823c <_sbrk_r>
 8007234:	6030      	str	r0, [r6, #0]
 8007236:	4621      	mov	r1, r4
 8007238:	4628      	mov	r0, r5
 800723a:	f000 ffff 	bl	800823c <_sbrk_r>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	d103      	bne.n	800724a <sbrk_aligned+0x26>
 8007242:	f04f 34ff 	mov.w	r4, #4294967295
 8007246:	4620      	mov	r0, r4
 8007248:	bd70      	pop	{r4, r5, r6, pc}
 800724a:	1cc4      	adds	r4, r0, #3
 800724c:	f024 0403 	bic.w	r4, r4, #3
 8007250:	42a0      	cmp	r0, r4
 8007252:	d0f8      	beq.n	8007246 <sbrk_aligned+0x22>
 8007254:	1a21      	subs	r1, r4, r0
 8007256:	4628      	mov	r0, r5
 8007258:	f000 fff0 	bl	800823c <_sbrk_r>
 800725c:	3001      	adds	r0, #1
 800725e:	d1f2      	bne.n	8007246 <sbrk_aligned+0x22>
 8007260:	e7ef      	b.n	8007242 <sbrk_aligned+0x1e>
 8007262:	bf00      	nop
 8007264:	200007a4 	.word	0x200007a4

08007268 <_malloc_r>:
 8007268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800726c:	1ccd      	adds	r5, r1, #3
 800726e:	f025 0503 	bic.w	r5, r5, #3
 8007272:	3508      	adds	r5, #8
 8007274:	2d0c      	cmp	r5, #12
 8007276:	bf38      	it	cc
 8007278:	250c      	movcc	r5, #12
 800727a:	2d00      	cmp	r5, #0
 800727c:	4606      	mov	r6, r0
 800727e:	db01      	blt.n	8007284 <_malloc_r+0x1c>
 8007280:	42a9      	cmp	r1, r5
 8007282:	d904      	bls.n	800728e <_malloc_r+0x26>
 8007284:	230c      	movs	r3, #12
 8007286:	6033      	str	r3, [r6, #0]
 8007288:	2000      	movs	r0, #0
 800728a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800728e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007364 <_malloc_r+0xfc>
 8007292:	f000 f869 	bl	8007368 <__malloc_lock>
 8007296:	f8d8 3000 	ldr.w	r3, [r8]
 800729a:	461c      	mov	r4, r3
 800729c:	bb44      	cbnz	r4, 80072f0 <_malloc_r+0x88>
 800729e:	4629      	mov	r1, r5
 80072a0:	4630      	mov	r0, r6
 80072a2:	f7ff ffbf 	bl	8007224 <sbrk_aligned>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	4604      	mov	r4, r0
 80072aa:	d158      	bne.n	800735e <_malloc_r+0xf6>
 80072ac:	f8d8 4000 	ldr.w	r4, [r8]
 80072b0:	4627      	mov	r7, r4
 80072b2:	2f00      	cmp	r7, #0
 80072b4:	d143      	bne.n	800733e <_malloc_r+0xd6>
 80072b6:	2c00      	cmp	r4, #0
 80072b8:	d04b      	beq.n	8007352 <_malloc_r+0xea>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	4639      	mov	r1, r7
 80072be:	4630      	mov	r0, r6
 80072c0:	eb04 0903 	add.w	r9, r4, r3
 80072c4:	f000 ffba 	bl	800823c <_sbrk_r>
 80072c8:	4581      	cmp	r9, r0
 80072ca:	d142      	bne.n	8007352 <_malloc_r+0xea>
 80072cc:	6821      	ldr	r1, [r4, #0]
 80072ce:	1a6d      	subs	r5, r5, r1
 80072d0:	4629      	mov	r1, r5
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ffa6 	bl	8007224 <sbrk_aligned>
 80072d8:	3001      	adds	r0, #1
 80072da:	d03a      	beq.n	8007352 <_malloc_r+0xea>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	442b      	add	r3, r5
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	f8d8 3000 	ldr.w	r3, [r8]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	bb62      	cbnz	r2, 8007344 <_malloc_r+0xdc>
 80072ea:	f8c8 7000 	str.w	r7, [r8]
 80072ee:	e00f      	b.n	8007310 <_malloc_r+0xa8>
 80072f0:	6822      	ldr	r2, [r4, #0]
 80072f2:	1b52      	subs	r2, r2, r5
 80072f4:	d420      	bmi.n	8007338 <_malloc_r+0xd0>
 80072f6:	2a0b      	cmp	r2, #11
 80072f8:	d917      	bls.n	800732a <_malloc_r+0xc2>
 80072fa:	1961      	adds	r1, r4, r5
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	6025      	str	r5, [r4, #0]
 8007300:	bf18      	it	ne
 8007302:	6059      	strne	r1, [r3, #4]
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	bf08      	it	eq
 8007308:	f8c8 1000 	streq.w	r1, [r8]
 800730c:	5162      	str	r2, [r4, r5]
 800730e:	604b      	str	r3, [r1, #4]
 8007310:	4630      	mov	r0, r6
 8007312:	f000 f82f 	bl	8007374 <__malloc_unlock>
 8007316:	f104 000b 	add.w	r0, r4, #11
 800731a:	1d23      	adds	r3, r4, #4
 800731c:	f020 0007 	bic.w	r0, r0, #7
 8007320:	1ac2      	subs	r2, r0, r3
 8007322:	bf1c      	itt	ne
 8007324:	1a1b      	subne	r3, r3, r0
 8007326:	50a3      	strne	r3, [r4, r2]
 8007328:	e7af      	b.n	800728a <_malloc_r+0x22>
 800732a:	6862      	ldr	r2, [r4, #4]
 800732c:	42a3      	cmp	r3, r4
 800732e:	bf0c      	ite	eq
 8007330:	f8c8 2000 	streq.w	r2, [r8]
 8007334:	605a      	strne	r2, [r3, #4]
 8007336:	e7eb      	b.n	8007310 <_malloc_r+0xa8>
 8007338:	4623      	mov	r3, r4
 800733a:	6864      	ldr	r4, [r4, #4]
 800733c:	e7ae      	b.n	800729c <_malloc_r+0x34>
 800733e:	463c      	mov	r4, r7
 8007340:	687f      	ldr	r7, [r7, #4]
 8007342:	e7b6      	b.n	80072b2 <_malloc_r+0x4a>
 8007344:	461a      	mov	r2, r3
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	42a3      	cmp	r3, r4
 800734a:	d1fb      	bne.n	8007344 <_malloc_r+0xdc>
 800734c:	2300      	movs	r3, #0
 800734e:	6053      	str	r3, [r2, #4]
 8007350:	e7de      	b.n	8007310 <_malloc_r+0xa8>
 8007352:	230c      	movs	r3, #12
 8007354:	6033      	str	r3, [r6, #0]
 8007356:	4630      	mov	r0, r6
 8007358:	f000 f80c 	bl	8007374 <__malloc_unlock>
 800735c:	e794      	b.n	8007288 <_malloc_r+0x20>
 800735e:	6005      	str	r5, [r0, #0]
 8007360:	e7d6      	b.n	8007310 <_malloc_r+0xa8>
 8007362:	bf00      	nop
 8007364:	200007a8 	.word	0x200007a8

08007368 <__malloc_lock>:
 8007368:	4801      	ldr	r0, [pc, #4]	@ (8007370 <__malloc_lock+0x8>)
 800736a:	f7ff b8ae 	b.w	80064ca <__retarget_lock_acquire_recursive>
 800736e:	bf00      	nop
 8007370:	200007a0 	.word	0x200007a0

08007374 <__malloc_unlock>:
 8007374:	4801      	ldr	r0, [pc, #4]	@ (800737c <__malloc_unlock+0x8>)
 8007376:	f7ff b8a9 	b.w	80064cc <__retarget_lock_release_recursive>
 800737a:	bf00      	nop
 800737c:	200007a0 	.word	0x200007a0

08007380 <_Balloc>:
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	69c6      	ldr	r6, [r0, #28]
 8007384:	4604      	mov	r4, r0
 8007386:	460d      	mov	r5, r1
 8007388:	b976      	cbnz	r6, 80073a8 <_Balloc+0x28>
 800738a:	2010      	movs	r0, #16
 800738c:	f7ff ff42 	bl	8007214 <malloc>
 8007390:	4602      	mov	r2, r0
 8007392:	61e0      	str	r0, [r4, #28]
 8007394:	b920      	cbnz	r0, 80073a0 <_Balloc+0x20>
 8007396:	4b18      	ldr	r3, [pc, #96]	@ (80073f8 <_Balloc+0x78>)
 8007398:	4818      	ldr	r0, [pc, #96]	@ (80073fc <_Balloc+0x7c>)
 800739a:	216b      	movs	r1, #107	@ 0x6b
 800739c:	f000 ff6c 	bl	8008278 <__assert_func>
 80073a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073a4:	6006      	str	r6, [r0, #0]
 80073a6:	60c6      	str	r6, [r0, #12]
 80073a8:	69e6      	ldr	r6, [r4, #28]
 80073aa:	68f3      	ldr	r3, [r6, #12]
 80073ac:	b183      	cbz	r3, 80073d0 <_Balloc+0x50>
 80073ae:	69e3      	ldr	r3, [r4, #28]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073b6:	b9b8      	cbnz	r0, 80073e8 <_Balloc+0x68>
 80073b8:	2101      	movs	r1, #1
 80073ba:	fa01 f605 	lsl.w	r6, r1, r5
 80073be:	1d72      	adds	r2, r6, #5
 80073c0:	0092      	lsls	r2, r2, #2
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 ff76 	bl	80082b4 <_calloc_r>
 80073c8:	b160      	cbz	r0, 80073e4 <_Balloc+0x64>
 80073ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073ce:	e00e      	b.n	80073ee <_Balloc+0x6e>
 80073d0:	2221      	movs	r2, #33	@ 0x21
 80073d2:	2104      	movs	r1, #4
 80073d4:	4620      	mov	r0, r4
 80073d6:	f000 ff6d 	bl	80082b4 <_calloc_r>
 80073da:	69e3      	ldr	r3, [r4, #28]
 80073dc:	60f0      	str	r0, [r6, #12]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e4      	bne.n	80073ae <_Balloc+0x2e>
 80073e4:	2000      	movs	r0, #0
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
 80073e8:	6802      	ldr	r2, [r0, #0]
 80073ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073ee:	2300      	movs	r3, #0
 80073f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073f4:	e7f7      	b.n	80073e6 <_Balloc+0x66>
 80073f6:	bf00      	nop
 80073f8:	0800b47d 	.word	0x0800b47d
 80073fc:	0800b4fd 	.word	0x0800b4fd

08007400 <_Bfree>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	69c6      	ldr	r6, [r0, #28]
 8007404:	4605      	mov	r5, r0
 8007406:	460c      	mov	r4, r1
 8007408:	b976      	cbnz	r6, 8007428 <_Bfree+0x28>
 800740a:	2010      	movs	r0, #16
 800740c:	f7ff ff02 	bl	8007214 <malloc>
 8007410:	4602      	mov	r2, r0
 8007412:	61e8      	str	r0, [r5, #28]
 8007414:	b920      	cbnz	r0, 8007420 <_Bfree+0x20>
 8007416:	4b09      	ldr	r3, [pc, #36]	@ (800743c <_Bfree+0x3c>)
 8007418:	4809      	ldr	r0, [pc, #36]	@ (8007440 <_Bfree+0x40>)
 800741a:	218f      	movs	r1, #143	@ 0x8f
 800741c:	f000 ff2c 	bl	8008278 <__assert_func>
 8007420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007424:	6006      	str	r6, [r0, #0]
 8007426:	60c6      	str	r6, [r0, #12]
 8007428:	b13c      	cbz	r4, 800743a <_Bfree+0x3a>
 800742a:	69eb      	ldr	r3, [r5, #28]
 800742c:	6862      	ldr	r2, [r4, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007434:	6021      	str	r1, [r4, #0]
 8007436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800743a:	bd70      	pop	{r4, r5, r6, pc}
 800743c:	0800b47d 	.word	0x0800b47d
 8007440:	0800b4fd 	.word	0x0800b4fd

08007444 <__multadd>:
 8007444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007448:	690d      	ldr	r5, [r1, #16]
 800744a:	4607      	mov	r7, r0
 800744c:	460c      	mov	r4, r1
 800744e:	461e      	mov	r6, r3
 8007450:	f101 0c14 	add.w	ip, r1, #20
 8007454:	2000      	movs	r0, #0
 8007456:	f8dc 3000 	ldr.w	r3, [ip]
 800745a:	b299      	uxth	r1, r3
 800745c:	fb02 6101 	mla	r1, r2, r1, r6
 8007460:	0c1e      	lsrs	r6, r3, #16
 8007462:	0c0b      	lsrs	r3, r1, #16
 8007464:	fb02 3306 	mla	r3, r2, r6, r3
 8007468:	b289      	uxth	r1, r1
 800746a:	3001      	adds	r0, #1
 800746c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007470:	4285      	cmp	r5, r0
 8007472:	f84c 1b04 	str.w	r1, [ip], #4
 8007476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800747a:	dcec      	bgt.n	8007456 <__multadd+0x12>
 800747c:	b30e      	cbz	r6, 80074c2 <__multadd+0x7e>
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	42ab      	cmp	r3, r5
 8007482:	dc19      	bgt.n	80074b8 <__multadd+0x74>
 8007484:	6861      	ldr	r1, [r4, #4]
 8007486:	4638      	mov	r0, r7
 8007488:	3101      	adds	r1, #1
 800748a:	f7ff ff79 	bl	8007380 <_Balloc>
 800748e:	4680      	mov	r8, r0
 8007490:	b928      	cbnz	r0, 800749e <__multadd+0x5a>
 8007492:	4602      	mov	r2, r0
 8007494:	4b0c      	ldr	r3, [pc, #48]	@ (80074c8 <__multadd+0x84>)
 8007496:	480d      	ldr	r0, [pc, #52]	@ (80074cc <__multadd+0x88>)
 8007498:	21ba      	movs	r1, #186	@ 0xba
 800749a:	f000 feed 	bl	8008278 <__assert_func>
 800749e:	6922      	ldr	r2, [r4, #16]
 80074a0:	3202      	adds	r2, #2
 80074a2:	f104 010c 	add.w	r1, r4, #12
 80074a6:	0092      	lsls	r2, r2, #2
 80074a8:	300c      	adds	r0, #12
 80074aa:	f000 fed7 	bl	800825c <memcpy>
 80074ae:	4621      	mov	r1, r4
 80074b0:	4638      	mov	r0, r7
 80074b2:	f7ff ffa5 	bl	8007400 <_Bfree>
 80074b6:	4644      	mov	r4, r8
 80074b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074bc:	3501      	adds	r5, #1
 80074be:	615e      	str	r6, [r3, #20]
 80074c0:	6125      	str	r5, [r4, #16]
 80074c2:	4620      	mov	r0, r4
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c8:	0800b4ec 	.word	0x0800b4ec
 80074cc:	0800b4fd 	.word	0x0800b4fd

080074d0 <__hi0bits>:
 80074d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80074d4:	4603      	mov	r3, r0
 80074d6:	bf36      	itet	cc
 80074d8:	0403      	lslcc	r3, r0, #16
 80074da:	2000      	movcs	r0, #0
 80074dc:	2010      	movcc	r0, #16
 80074de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074e2:	bf3c      	itt	cc
 80074e4:	021b      	lslcc	r3, r3, #8
 80074e6:	3008      	addcc	r0, #8
 80074e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074ec:	bf3c      	itt	cc
 80074ee:	011b      	lslcc	r3, r3, #4
 80074f0:	3004      	addcc	r0, #4
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f6:	bf3c      	itt	cc
 80074f8:	009b      	lslcc	r3, r3, #2
 80074fa:	3002      	addcc	r0, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	db05      	blt.n	800750c <__hi0bits+0x3c>
 8007500:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007504:	f100 0001 	add.w	r0, r0, #1
 8007508:	bf08      	it	eq
 800750a:	2020      	moveq	r0, #32
 800750c:	4770      	bx	lr

0800750e <__lo0bits>:
 800750e:	6803      	ldr	r3, [r0, #0]
 8007510:	4602      	mov	r2, r0
 8007512:	f013 0007 	ands.w	r0, r3, #7
 8007516:	d00b      	beq.n	8007530 <__lo0bits+0x22>
 8007518:	07d9      	lsls	r1, r3, #31
 800751a:	d421      	bmi.n	8007560 <__lo0bits+0x52>
 800751c:	0798      	lsls	r0, r3, #30
 800751e:	bf49      	itett	mi
 8007520:	085b      	lsrmi	r3, r3, #1
 8007522:	089b      	lsrpl	r3, r3, #2
 8007524:	2001      	movmi	r0, #1
 8007526:	6013      	strmi	r3, [r2, #0]
 8007528:	bf5c      	itt	pl
 800752a:	6013      	strpl	r3, [r2, #0]
 800752c:	2002      	movpl	r0, #2
 800752e:	4770      	bx	lr
 8007530:	b299      	uxth	r1, r3
 8007532:	b909      	cbnz	r1, 8007538 <__lo0bits+0x2a>
 8007534:	0c1b      	lsrs	r3, r3, #16
 8007536:	2010      	movs	r0, #16
 8007538:	b2d9      	uxtb	r1, r3
 800753a:	b909      	cbnz	r1, 8007540 <__lo0bits+0x32>
 800753c:	3008      	adds	r0, #8
 800753e:	0a1b      	lsrs	r3, r3, #8
 8007540:	0719      	lsls	r1, r3, #28
 8007542:	bf04      	itt	eq
 8007544:	091b      	lsreq	r3, r3, #4
 8007546:	3004      	addeq	r0, #4
 8007548:	0799      	lsls	r1, r3, #30
 800754a:	bf04      	itt	eq
 800754c:	089b      	lsreq	r3, r3, #2
 800754e:	3002      	addeq	r0, #2
 8007550:	07d9      	lsls	r1, r3, #31
 8007552:	d403      	bmi.n	800755c <__lo0bits+0x4e>
 8007554:	085b      	lsrs	r3, r3, #1
 8007556:	f100 0001 	add.w	r0, r0, #1
 800755a:	d003      	beq.n	8007564 <__lo0bits+0x56>
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	4770      	bx	lr
 8007560:	2000      	movs	r0, #0
 8007562:	4770      	bx	lr
 8007564:	2020      	movs	r0, #32
 8007566:	4770      	bx	lr

08007568 <__i2b>:
 8007568:	b510      	push	{r4, lr}
 800756a:	460c      	mov	r4, r1
 800756c:	2101      	movs	r1, #1
 800756e:	f7ff ff07 	bl	8007380 <_Balloc>
 8007572:	4602      	mov	r2, r0
 8007574:	b928      	cbnz	r0, 8007582 <__i2b+0x1a>
 8007576:	4b05      	ldr	r3, [pc, #20]	@ (800758c <__i2b+0x24>)
 8007578:	4805      	ldr	r0, [pc, #20]	@ (8007590 <__i2b+0x28>)
 800757a:	f240 1145 	movw	r1, #325	@ 0x145
 800757e:	f000 fe7b 	bl	8008278 <__assert_func>
 8007582:	2301      	movs	r3, #1
 8007584:	6144      	str	r4, [r0, #20]
 8007586:	6103      	str	r3, [r0, #16]
 8007588:	bd10      	pop	{r4, pc}
 800758a:	bf00      	nop
 800758c:	0800b4ec 	.word	0x0800b4ec
 8007590:	0800b4fd 	.word	0x0800b4fd

08007594 <__multiply>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	4617      	mov	r7, r2
 800759a:	690a      	ldr	r2, [r1, #16]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	429a      	cmp	r2, r3
 80075a0:	bfa8      	it	ge
 80075a2:	463b      	movge	r3, r7
 80075a4:	4689      	mov	r9, r1
 80075a6:	bfa4      	itt	ge
 80075a8:	460f      	movge	r7, r1
 80075aa:	4699      	movge	r9, r3
 80075ac:	693d      	ldr	r5, [r7, #16]
 80075ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	eb05 060a 	add.w	r6, r5, sl
 80075ba:	42b3      	cmp	r3, r6
 80075bc:	b085      	sub	sp, #20
 80075be:	bfb8      	it	lt
 80075c0:	3101      	addlt	r1, #1
 80075c2:	f7ff fedd 	bl	8007380 <_Balloc>
 80075c6:	b930      	cbnz	r0, 80075d6 <__multiply+0x42>
 80075c8:	4602      	mov	r2, r0
 80075ca:	4b41      	ldr	r3, [pc, #260]	@ (80076d0 <__multiply+0x13c>)
 80075cc:	4841      	ldr	r0, [pc, #260]	@ (80076d4 <__multiply+0x140>)
 80075ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80075d2:	f000 fe51 	bl	8008278 <__assert_func>
 80075d6:	f100 0414 	add.w	r4, r0, #20
 80075da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80075de:	4623      	mov	r3, r4
 80075e0:	2200      	movs	r2, #0
 80075e2:	4573      	cmp	r3, lr
 80075e4:	d320      	bcc.n	8007628 <__multiply+0x94>
 80075e6:	f107 0814 	add.w	r8, r7, #20
 80075ea:	f109 0114 	add.w	r1, r9, #20
 80075ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80075f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80075f6:	9302      	str	r3, [sp, #8]
 80075f8:	1beb      	subs	r3, r5, r7
 80075fa:	3b15      	subs	r3, #21
 80075fc:	f023 0303 	bic.w	r3, r3, #3
 8007600:	3304      	adds	r3, #4
 8007602:	3715      	adds	r7, #21
 8007604:	42bd      	cmp	r5, r7
 8007606:	bf38      	it	cc
 8007608:	2304      	movcc	r3, #4
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	9b02      	ldr	r3, [sp, #8]
 800760e:	9103      	str	r1, [sp, #12]
 8007610:	428b      	cmp	r3, r1
 8007612:	d80c      	bhi.n	800762e <__multiply+0x9a>
 8007614:	2e00      	cmp	r6, #0
 8007616:	dd03      	ble.n	8007620 <__multiply+0x8c>
 8007618:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800761c:	2b00      	cmp	r3, #0
 800761e:	d055      	beq.n	80076cc <__multiply+0x138>
 8007620:	6106      	str	r6, [r0, #16]
 8007622:	b005      	add	sp, #20
 8007624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007628:	f843 2b04 	str.w	r2, [r3], #4
 800762c:	e7d9      	b.n	80075e2 <__multiply+0x4e>
 800762e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007632:	f1ba 0f00 	cmp.w	sl, #0
 8007636:	d01f      	beq.n	8007678 <__multiply+0xe4>
 8007638:	46c4      	mov	ip, r8
 800763a:	46a1      	mov	r9, r4
 800763c:	2700      	movs	r7, #0
 800763e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007642:	f8d9 3000 	ldr.w	r3, [r9]
 8007646:	fa1f fb82 	uxth.w	fp, r2
 800764a:	b29b      	uxth	r3, r3
 800764c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007650:	443b      	add	r3, r7
 8007652:	f8d9 7000 	ldr.w	r7, [r9]
 8007656:	0c12      	lsrs	r2, r2, #16
 8007658:	0c3f      	lsrs	r7, r7, #16
 800765a:	fb0a 7202 	mla	r2, sl, r2, r7
 800765e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007662:	b29b      	uxth	r3, r3
 8007664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007668:	4565      	cmp	r5, ip
 800766a:	f849 3b04 	str.w	r3, [r9], #4
 800766e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007672:	d8e4      	bhi.n	800763e <__multiply+0xaa>
 8007674:	9b01      	ldr	r3, [sp, #4]
 8007676:	50e7      	str	r7, [r4, r3]
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800767e:	3104      	adds	r1, #4
 8007680:	f1b9 0f00 	cmp.w	r9, #0
 8007684:	d020      	beq.n	80076c8 <__multiply+0x134>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	4647      	mov	r7, r8
 800768a:	46a4      	mov	ip, r4
 800768c:	f04f 0a00 	mov.w	sl, #0
 8007690:	f8b7 b000 	ldrh.w	fp, [r7]
 8007694:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007698:	fb09 220b 	mla	r2, r9, fp, r2
 800769c:	4452      	add	r2, sl
 800769e:	b29b      	uxth	r3, r3
 80076a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076a4:	f84c 3b04 	str.w	r3, [ip], #4
 80076a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80076ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80076b4:	fb09 330a 	mla	r3, r9, sl, r3
 80076b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80076bc:	42bd      	cmp	r5, r7
 80076be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076c2:	d8e5      	bhi.n	8007690 <__multiply+0xfc>
 80076c4:	9a01      	ldr	r2, [sp, #4]
 80076c6:	50a3      	str	r3, [r4, r2]
 80076c8:	3404      	adds	r4, #4
 80076ca:	e79f      	b.n	800760c <__multiply+0x78>
 80076cc:	3e01      	subs	r6, #1
 80076ce:	e7a1      	b.n	8007614 <__multiply+0x80>
 80076d0:	0800b4ec 	.word	0x0800b4ec
 80076d4:	0800b4fd 	.word	0x0800b4fd

080076d8 <__pow5mult>:
 80076d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076dc:	4615      	mov	r5, r2
 80076de:	f012 0203 	ands.w	r2, r2, #3
 80076e2:	4607      	mov	r7, r0
 80076e4:	460e      	mov	r6, r1
 80076e6:	d007      	beq.n	80076f8 <__pow5mult+0x20>
 80076e8:	4c25      	ldr	r4, [pc, #148]	@ (8007780 <__pow5mult+0xa8>)
 80076ea:	3a01      	subs	r2, #1
 80076ec:	2300      	movs	r3, #0
 80076ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076f2:	f7ff fea7 	bl	8007444 <__multadd>
 80076f6:	4606      	mov	r6, r0
 80076f8:	10ad      	asrs	r5, r5, #2
 80076fa:	d03d      	beq.n	8007778 <__pow5mult+0xa0>
 80076fc:	69fc      	ldr	r4, [r7, #28]
 80076fe:	b97c      	cbnz	r4, 8007720 <__pow5mult+0x48>
 8007700:	2010      	movs	r0, #16
 8007702:	f7ff fd87 	bl	8007214 <malloc>
 8007706:	4602      	mov	r2, r0
 8007708:	61f8      	str	r0, [r7, #28]
 800770a:	b928      	cbnz	r0, 8007718 <__pow5mult+0x40>
 800770c:	4b1d      	ldr	r3, [pc, #116]	@ (8007784 <__pow5mult+0xac>)
 800770e:	481e      	ldr	r0, [pc, #120]	@ (8007788 <__pow5mult+0xb0>)
 8007710:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007714:	f000 fdb0 	bl	8008278 <__assert_func>
 8007718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800771c:	6004      	str	r4, [r0, #0]
 800771e:	60c4      	str	r4, [r0, #12]
 8007720:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007728:	b94c      	cbnz	r4, 800773e <__pow5mult+0x66>
 800772a:	f240 2171 	movw	r1, #625	@ 0x271
 800772e:	4638      	mov	r0, r7
 8007730:	f7ff ff1a 	bl	8007568 <__i2b>
 8007734:	2300      	movs	r3, #0
 8007736:	f8c8 0008 	str.w	r0, [r8, #8]
 800773a:	4604      	mov	r4, r0
 800773c:	6003      	str	r3, [r0, #0]
 800773e:	f04f 0900 	mov.w	r9, #0
 8007742:	07eb      	lsls	r3, r5, #31
 8007744:	d50a      	bpl.n	800775c <__pow5mult+0x84>
 8007746:	4631      	mov	r1, r6
 8007748:	4622      	mov	r2, r4
 800774a:	4638      	mov	r0, r7
 800774c:	f7ff ff22 	bl	8007594 <__multiply>
 8007750:	4631      	mov	r1, r6
 8007752:	4680      	mov	r8, r0
 8007754:	4638      	mov	r0, r7
 8007756:	f7ff fe53 	bl	8007400 <_Bfree>
 800775a:	4646      	mov	r6, r8
 800775c:	106d      	asrs	r5, r5, #1
 800775e:	d00b      	beq.n	8007778 <__pow5mult+0xa0>
 8007760:	6820      	ldr	r0, [r4, #0]
 8007762:	b938      	cbnz	r0, 8007774 <__pow5mult+0x9c>
 8007764:	4622      	mov	r2, r4
 8007766:	4621      	mov	r1, r4
 8007768:	4638      	mov	r0, r7
 800776a:	f7ff ff13 	bl	8007594 <__multiply>
 800776e:	6020      	str	r0, [r4, #0]
 8007770:	f8c0 9000 	str.w	r9, [r0]
 8007774:	4604      	mov	r4, r0
 8007776:	e7e4      	b.n	8007742 <__pow5mult+0x6a>
 8007778:	4630      	mov	r0, r6
 800777a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800777e:	bf00      	nop
 8007780:	0800b5b0 	.word	0x0800b5b0
 8007784:	0800b47d 	.word	0x0800b47d
 8007788:	0800b4fd 	.word	0x0800b4fd

0800778c <__lshift>:
 800778c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007790:	460c      	mov	r4, r1
 8007792:	6849      	ldr	r1, [r1, #4]
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800779a:	68a3      	ldr	r3, [r4, #8]
 800779c:	4607      	mov	r7, r0
 800779e:	4691      	mov	r9, r2
 80077a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077a4:	f108 0601 	add.w	r6, r8, #1
 80077a8:	42b3      	cmp	r3, r6
 80077aa:	db0b      	blt.n	80077c4 <__lshift+0x38>
 80077ac:	4638      	mov	r0, r7
 80077ae:	f7ff fde7 	bl	8007380 <_Balloc>
 80077b2:	4605      	mov	r5, r0
 80077b4:	b948      	cbnz	r0, 80077ca <__lshift+0x3e>
 80077b6:	4602      	mov	r2, r0
 80077b8:	4b28      	ldr	r3, [pc, #160]	@ (800785c <__lshift+0xd0>)
 80077ba:	4829      	ldr	r0, [pc, #164]	@ (8007860 <__lshift+0xd4>)
 80077bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80077c0:	f000 fd5a 	bl	8008278 <__assert_func>
 80077c4:	3101      	adds	r1, #1
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	e7ee      	b.n	80077a8 <__lshift+0x1c>
 80077ca:	2300      	movs	r3, #0
 80077cc:	f100 0114 	add.w	r1, r0, #20
 80077d0:	f100 0210 	add.w	r2, r0, #16
 80077d4:	4618      	mov	r0, r3
 80077d6:	4553      	cmp	r3, sl
 80077d8:	db33      	blt.n	8007842 <__lshift+0xb6>
 80077da:	6920      	ldr	r0, [r4, #16]
 80077dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077e0:	f104 0314 	add.w	r3, r4, #20
 80077e4:	f019 091f 	ands.w	r9, r9, #31
 80077e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077f0:	d02b      	beq.n	800784a <__lshift+0xbe>
 80077f2:	f1c9 0e20 	rsb	lr, r9, #32
 80077f6:	468a      	mov	sl, r1
 80077f8:	2200      	movs	r2, #0
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	fa00 f009 	lsl.w	r0, r0, r9
 8007800:	4310      	orrs	r0, r2
 8007802:	f84a 0b04 	str.w	r0, [sl], #4
 8007806:	f853 2b04 	ldr.w	r2, [r3], #4
 800780a:	459c      	cmp	ip, r3
 800780c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007810:	d8f3      	bhi.n	80077fa <__lshift+0x6e>
 8007812:	ebac 0304 	sub.w	r3, ip, r4
 8007816:	3b15      	subs	r3, #21
 8007818:	f023 0303 	bic.w	r3, r3, #3
 800781c:	3304      	adds	r3, #4
 800781e:	f104 0015 	add.w	r0, r4, #21
 8007822:	4560      	cmp	r0, ip
 8007824:	bf88      	it	hi
 8007826:	2304      	movhi	r3, #4
 8007828:	50ca      	str	r2, [r1, r3]
 800782a:	b10a      	cbz	r2, 8007830 <__lshift+0xa4>
 800782c:	f108 0602 	add.w	r6, r8, #2
 8007830:	3e01      	subs	r6, #1
 8007832:	4638      	mov	r0, r7
 8007834:	612e      	str	r6, [r5, #16]
 8007836:	4621      	mov	r1, r4
 8007838:	f7ff fde2 	bl	8007400 <_Bfree>
 800783c:	4628      	mov	r0, r5
 800783e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007842:	f842 0f04 	str.w	r0, [r2, #4]!
 8007846:	3301      	adds	r3, #1
 8007848:	e7c5      	b.n	80077d6 <__lshift+0x4a>
 800784a:	3904      	subs	r1, #4
 800784c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007850:	f841 2f04 	str.w	r2, [r1, #4]!
 8007854:	459c      	cmp	ip, r3
 8007856:	d8f9      	bhi.n	800784c <__lshift+0xc0>
 8007858:	e7ea      	b.n	8007830 <__lshift+0xa4>
 800785a:	bf00      	nop
 800785c:	0800b4ec 	.word	0x0800b4ec
 8007860:	0800b4fd 	.word	0x0800b4fd

08007864 <__mcmp>:
 8007864:	690a      	ldr	r2, [r1, #16]
 8007866:	4603      	mov	r3, r0
 8007868:	6900      	ldr	r0, [r0, #16]
 800786a:	1a80      	subs	r0, r0, r2
 800786c:	b530      	push	{r4, r5, lr}
 800786e:	d10e      	bne.n	800788e <__mcmp+0x2a>
 8007870:	3314      	adds	r3, #20
 8007872:	3114      	adds	r1, #20
 8007874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800787c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007884:	4295      	cmp	r5, r2
 8007886:	d003      	beq.n	8007890 <__mcmp+0x2c>
 8007888:	d205      	bcs.n	8007896 <__mcmp+0x32>
 800788a:	f04f 30ff 	mov.w	r0, #4294967295
 800788e:	bd30      	pop	{r4, r5, pc}
 8007890:	42a3      	cmp	r3, r4
 8007892:	d3f3      	bcc.n	800787c <__mcmp+0x18>
 8007894:	e7fb      	b.n	800788e <__mcmp+0x2a>
 8007896:	2001      	movs	r0, #1
 8007898:	e7f9      	b.n	800788e <__mcmp+0x2a>
	...

0800789c <__mdiff>:
 800789c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a0:	4689      	mov	r9, r1
 80078a2:	4606      	mov	r6, r0
 80078a4:	4611      	mov	r1, r2
 80078a6:	4648      	mov	r0, r9
 80078a8:	4614      	mov	r4, r2
 80078aa:	f7ff ffdb 	bl	8007864 <__mcmp>
 80078ae:	1e05      	subs	r5, r0, #0
 80078b0:	d112      	bne.n	80078d8 <__mdiff+0x3c>
 80078b2:	4629      	mov	r1, r5
 80078b4:	4630      	mov	r0, r6
 80078b6:	f7ff fd63 	bl	8007380 <_Balloc>
 80078ba:	4602      	mov	r2, r0
 80078bc:	b928      	cbnz	r0, 80078ca <__mdiff+0x2e>
 80078be:	4b3f      	ldr	r3, [pc, #252]	@ (80079bc <__mdiff+0x120>)
 80078c0:	f240 2137 	movw	r1, #567	@ 0x237
 80078c4:	483e      	ldr	r0, [pc, #248]	@ (80079c0 <__mdiff+0x124>)
 80078c6:	f000 fcd7 	bl	8008278 <__assert_func>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078d0:	4610      	mov	r0, r2
 80078d2:	b003      	add	sp, #12
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d8:	bfbc      	itt	lt
 80078da:	464b      	movlt	r3, r9
 80078dc:	46a1      	movlt	r9, r4
 80078de:	4630      	mov	r0, r6
 80078e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80078e4:	bfba      	itte	lt
 80078e6:	461c      	movlt	r4, r3
 80078e8:	2501      	movlt	r5, #1
 80078ea:	2500      	movge	r5, #0
 80078ec:	f7ff fd48 	bl	8007380 <_Balloc>
 80078f0:	4602      	mov	r2, r0
 80078f2:	b918      	cbnz	r0, 80078fc <__mdiff+0x60>
 80078f4:	4b31      	ldr	r3, [pc, #196]	@ (80079bc <__mdiff+0x120>)
 80078f6:	f240 2145 	movw	r1, #581	@ 0x245
 80078fa:	e7e3      	b.n	80078c4 <__mdiff+0x28>
 80078fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007900:	6926      	ldr	r6, [r4, #16]
 8007902:	60c5      	str	r5, [r0, #12]
 8007904:	f109 0310 	add.w	r3, r9, #16
 8007908:	f109 0514 	add.w	r5, r9, #20
 800790c:	f104 0e14 	add.w	lr, r4, #20
 8007910:	f100 0b14 	add.w	fp, r0, #20
 8007914:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007918:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	46d9      	mov	r9, fp
 8007920:	f04f 0c00 	mov.w	ip, #0
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	f85e 0b04 	ldr.w	r0, [lr], #4
 800792a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	fa1f f38a 	uxth.w	r3, sl
 8007934:	4619      	mov	r1, r3
 8007936:	b283      	uxth	r3, r0
 8007938:	1acb      	subs	r3, r1, r3
 800793a:	0c00      	lsrs	r0, r0, #16
 800793c:	4463      	add	r3, ip
 800793e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007942:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007946:	b29b      	uxth	r3, r3
 8007948:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800794c:	4576      	cmp	r6, lr
 800794e:	f849 3b04 	str.w	r3, [r9], #4
 8007952:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007956:	d8e5      	bhi.n	8007924 <__mdiff+0x88>
 8007958:	1b33      	subs	r3, r6, r4
 800795a:	3b15      	subs	r3, #21
 800795c:	f023 0303 	bic.w	r3, r3, #3
 8007960:	3415      	adds	r4, #21
 8007962:	3304      	adds	r3, #4
 8007964:	42a6      	cmp	r6, r4
 8007966:	bf38      	it	cc
 8007968:	2304      	movcc	r3, #4
 800796a:	441d      	add	r5, r3
 800796c:	445b      	add	r3, fp
 800796e:	461e      	mov	r6, r3
 8007970:	462c      	mov	r4, r5
 8007972:	4544      	cmp	r4, r8
 8007974:	d30e      	bcc.n	8007994 <__mdiff+0xf8>
 8007976:	f108 0103 	add.w	r1, r8, #3
 800797a:	1b49      	subs	r1, r1, r5
 800797c:	f021 0103 	bic.w	r1, r1, #3
 8007980:	3d03      	subs	r5, #3
 8007982:	45a8      	cmp	r8, r5
 8007984:	bf38      	it	cc
 8007986:	2100      	movcc	r1, #0
 8007988:	440b      	add	r3, r1
 800798a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800798e:	b191      	cbz	r1, 80079b6 <__mdiff+0x11a>
 8007990:	6117      	str	r7, [r2, #16]
 8007992:	e79d      	b.n	80078d0 <__mdiff+0x34>
 8007994:	f854 1b04 	ldr.w	r1, [r4], #4
 8007998:	46e6      	mov	lr, ip
 800799a:	0c08      	lsrs	r0, r1, #16
 800799c:	fa1c fc81 	uxtah	ip, ip, r1
 80079a0:	4471      	add	r1, lr
 80079a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079a6:	b289      	uxth	r1, r1
 80079a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80079ac:	f846 1b04 	str.w	r1, [r6], #4
 80079b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079b4:	e7dd      	b.n	8007972 <__mdiff+0xd6>
 80079b6:	3f01      	subs	r7, #1
 80079b8:	e7e7      	b.n	800798a <__mdiff+0xee>
 80079ba:	bf00      	nop
 80079bc:	0800b4ec 	.word	0x0800b4ec
 80079c0:	0800b4fd 	.word	0x0800b4fd

080079c4 <__d2b>:
 80079c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079c8:	460f      	mov	r7, r1
 80079ca:	2101      	movs	r1, #1
 80079cc:	ec59 8b10 	vmov	r8, r9, d0
 80079d0:	4616      	mov	r6, r2
 80079d2:	f7ff fcd5 	bl	8007380 <_Balloc>
 80079d6:	4604      	mov	r4, r0
 80079d8:	b930      	cbnz	r0, 80079e8 <__d2b+0x24>
 80079da:	4602      	mov	r2, r0
 80079dc:	4b23      	ldr	r3, [pc, #140]	@ (8007a6c <__d2b+0xa8>)
 80079de:	4824      	ldr	r0, [pc, #144]	@ (8007a70 <__d2b+0xac>)
 80079e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80079e4:	f000 fc48 	bl	8008278 <__assert_func>
 80079e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80079ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079f0:	b10d      	cbz	r5, 80079f6 <__d2b+0x32>
 80079f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	f1b8 0300 	subs.w	r3, r8, #0
 80079fc:	d023      	beq.n	8007a46 <__d2b+0x82>
 80079fe:	4668      	mov	r0, sp
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	f7ff fd84 	bl	800750e <__lo0bits>
 8007a06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a0a:	b1d0      	cbz	r0, 8007a42 <__d2b+0x7e>
 8007a0c:	f1c0 0320 	rsb	r3, r0, #32
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	430b      	orrs	r3, r1
 8007a16:	40c2      	lsrs	r2, r0
 8007a18:	6163      	str	r3, [r4, #20]
 8007a1a:	9201      	str	r2, [sp, #4]
 8007a1c:	9b01      	ldr	r3, [sp, #4]
 8007a1e:	61a3      	str	r3, [r4, #24]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bf0c      	ite	eq
 8007a24:	2201      	moveq	r2, #1
 8007a26:	2202      	movne	r2, #2
 8007a28:	6122      	str	r2, [r4, #16]
 8007a2a:	b1a5      	cbz	r5, 8007a56 <__d2b+0x92>
 8007a2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a30:	4405      	add	r5, r0
 8007a32:	603d      	str	r5, [r7, #0]
 8007a34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a38:	6030      	str	r0, [r6, #0]
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	b003      	add	sp, #12
 8007a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a42:	6161      	str	r1, [r4, #20]
 8007a44:	e7ea      	b.n	8007a1c <__d2b+0x58>
 8007a46:	a801      	add	r0, sp, #4
 8007a48:	f7ff fd61 	bl	800750e <__lo0bits>
 8007a4c:	9b01      	ldr	r3, [sp, #4]
 8007a4e:	6163      	str	r3, [r4, #20]
 8007a50:	3020      	adds	r0, #32
 8007a52:	2201      	movs	r2, #1
 8007a54:	e7e8      	b.n	8007a28 <__d2b+0x64>
 8007a56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007a5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007a5e:	6038      	str	r0, [r7, #0]
 8007a60:	6918      	ldr	r0, [r3, #16]
 8007a62:	f7ff fd35 	bl	80074d0 <__hi0bits>
 8007a66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a6a:	e7e5      	b.n	8007a38 <__d2b+0x74>
 8007a6c:	0800b4ec 	.word	0x0800b4ec
 8007a70:	0800b4fd 	.word	0x0800b4fd

08007a74 <__ssputs_r>:
 8007a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	688e      	ldr	r6, [r1, #8]
 8007a7a:	461f      	mov	r7, r3
 8007a7c:	42be      	cmp	r6, r7
 8007a7e:	680b      	ldr	r3, [r1, #0]
 8007a80:	4682      	mov	sl, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	4690      	mov	r8, r2
 8007a86:	d82d      	bhi.n	8007ae4 <__ssputs_r+0x70>
 8007a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a90:	d026      	beq.n	8007ae0 <__ssputs_r+0x6c>
 8007a92:	6965      	ldr	r5, [r4, #20]
 8007a94:	6909      	ldr	r1, [r1, #16]
 8007a96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a9a:	eba3 0901 	sub.w	r9, r3, r1
 8007a9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aa2:	1c7b      	adds	r3, r7, #1
 8007aa4:	444b      	add	r3, r9
 8007aa6:	106d      	asrs	r5, r5, #1
 8007aa8:	429d      	cmp	r5, r3
 8007aaa:	bf38      	it	cc
 8007aac:	461d      	movcc	r5, r3
 8007aae:	0553      	lsls	r3, r2, #21
 8007ab0:	d527      	bpl.n	8007b02 <__ssputs_r+0x8e>
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f7ff fbd8 	bl	8007268 <_malloc_r>
 8007ab8:	4606      	mov	r6, r0
 8007aba:	b360      	cbz	r0, 8007b16 <__ssputs_r+0xa2>
 8007abc:	6921      	ldr	r1, [r4, #16]
 8007abe:	464a      	mov	r2, r9
 8007ac0:	f000 fbcc 	bl	800825c <memcpy>
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	6126      	str	r6, [r4, #16]
 8007ad2:	6165      	str	r5, [r4, #20]
 8007ad4:	444e      	add	r6, r9
 8007ad6:	eba5 0509 	sub.w	r5, r5, r9
 8007ada:	6026      	str	r6, [r4, #0]
 8007adc:	60a5      	str	r5, [r4, #8]
 8007ade:	463e      	mov	r6, r7
 8007ae0:	42be      	cmp	r6, r7
 8007ae2:	d900      	bls.n	8007ae6 <__ssputs_r+0x72>
 8007ae4:	463e      	mov	r6, r7
 8007ae6:	6820      	ldr	r0, [r4, #0]
 8007ae8:	4632      	mov	r2, r6
 8007aea:	4641      	mov	r1, r8
 8007aec:	f000 fb6a 	bl	80081c4 <memmove>
 8007af0:	68a3      	ldr	r3, [r4, #8]
 8007af2:	1b9b      	subs	r3, r3, r6
 8007af4:	60a3      	str	r3, [r4, #8]
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	4433      	add	r3, r6
 8007afa:	6023      	str	r3, [r4, #0]
 8007afc:	2000      	movs	r0, #0
 8007afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b02:	462a      	mov	r2, r5
 8007b04:	f000 fbfc 	bl	8008300 <_realloc_r>
 8007b08:	4606      	mov	r6, r0
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d1e0      	bne.n	8007ad0 <__ssputs_r+0x5c>
 8007b0e:	6921      	ldr	r1, [r4, #16]
 8007b10:	4650      	mov	r0, sl
 8007b12:	f7ff fb35 	bl	8007180 <_free_r>
 8007b16:	230c      	movs	r3, #12
 8007b18:	f8ca 3000 	str.w	r3, [sl]
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b22:	81a3      	strh	r3, [r4, #12]
 8007b24:	f04f 30ff 	mov.w	r0, #4294967295
 8007b28:	e7e9      	b.n	8007afe <__ssputs_r+0x8a>
	...

08007b2c <_svfiprintf_r>:
 8007b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b30:	4698      	mov	r8, r3
 8007b32:	898b      	ldrh	r3, [r1, #12]
 8007b34:	061b      	lsls	r3, r3, #24
 8007b36:	b09d      	sub	sp, #116	@ 0x74
 8007b38:	4607      	mov	r7, r0
 8007b3a:	460d      	mov	r5, r1
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	d510      	bpl.n	8007b62 <_svfiprintf_r+0x36>
 8007b40:	690b      	ldr	r3, [r1, #16]
 8007b42:	b973      	cbnz	r3, 8007b62 <_svfiprintf_r+0x36>
 8007b44:	2140      	movs	r1, #64	@ 0x40
 8007b46:	f7ff fb8f 	bl	8007268 <_malloc_r>
 8007b4a:	6028      	str	r0, [r5, #0]
 8007b4c:	6128      	str	r0, [r5, #16]
 8007b4e:	b930      	cbnz	r0, 8007b5e <_svfiprintf_r+0x32>
 8007b50:	230c      	movs	r3, #12
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	f04f 30ff 	mov.w	r0, #4294967295
 8007b58:	b01d      	add	sp, #116	@ 0x74
 8007b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5e:	2340      	movs	r3, #64	@ 0x40
 8007b60:	616b      	str	r3, [r5, #20]
 8007b62:	2300      	movs	r3, #0
 8007b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b66:	2320      	movs	r3, #32
 8007b68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b70:	2330      	movs	r3, #48	@ 0x30
 8007b72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d10 <_svfiprintf_r+0x1e4>
 8007b76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b7a:	f04f 0901 	mov.w	r9, #1
 8007b7e:	4623      	mov	r3, r4
 8007b80:	469a      	mov	sl, r3
 8007b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b86:	b10a      	cbz	r2, 8007b8c <_svfiprintf_r+0x60>
 8007b88:	2a25      	cmp	r2, #37	@ 0x25
 8007b8a:	d1f9      	bne.n	8007b80 <_svfiprintf_r+0x54>
 8007b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b90:	d00b      	beq.n	8007baa <_svfiprintf_r+0x7e>
 8007b92:	465b      	mov	r3, fp
 8007b94:	4622      	mov	r2, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	4638      	mov	r0, r7
 8007b9a:	f7ff ff6b 	bl	8007a74 <__ssputs_r>
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f000 80a7 	beq.w	8007cf2 <_svfiprintf_r+0x1c6>
 8007ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ba6:	445a      	add	r2, fp
 8007ba8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007baa:	f89a 3000 	ldrb.w	r3, [sl]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 809f 	beq.w	8007cf2 <_svfiprintf_r+0x1c6>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bbe:	f10a 0a01 	add.w	sl, sl, #1
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	9307      	str	r3, [sp, #28]
 8007bc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bca:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bcc:	4654      	mov	r4, sl
 8007bce:	2205      	movs	r2, #5
 8007bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd4:	484e      	ldr	r0, [pc, #312]	@ (8007d10 <_svfiprintf_r+0x1e4>)
 8007bd6:	f7f8 fafb 	bl	80001d0 <memchr>
 8007bda:	9a04      	ldr	r2, [sp, #16]
 8007bdc:	b9d8      	cbnz	r0, 8007c16 <_svfiprintf_r+0xea>
 8007bde:	06d0      	lsls	r0, r2, #27
 8007be0:	bf44      	itt	mi
 8007be2:	2320      	movmi	r3, #32
 8007be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007be8:	0711      	lsls	r1, r2, #28
 8007bea:	bf44      	itt	mi
 8007bec:	232b      	movmi	r3, #43	@ 0x2b
 8007bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bf8:	d015      	beq.n	8007c26 <_svfiprintf_r+0xfa>
 8007bfa:	9a07      	ldr	r2, [sp, #28]
 8007bfc:	4654      	mov	r4, sl
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f04f 0c0a 	mov.w	ip, #10
 8007c04:	4621      	mov	r1, r4
 8007c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c0a:	3b30      	subs	r3, #48	@ 0x30
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	d94b      	bls.n	8007ca8 <_svfiprintf_r+0x17c>
 8007c10:	b1b0      	cbz	r0, 8007c40 <_svfiprintf_r+0x114>
 8007c12:	9207      	str	r2, [sp, #28]
 8007c14:	e014      	b.n	8007c40 <_svfiprintf_r+0x114>
 8007c16:	eba0 0308 	sub.w	r3, r0, r8
 8007c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	46a2      	mov	sl, r4
 8007c24:	e7d2      	b.n	8007bcc <_svfiprintf_r+0xa0>
 8007c26:	9b03      	ldr	r3, [sp, #12]
 8007c28:	1d19      	adds	r1, r3, #4
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	9103      	str	r1, [sp, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bfbb      	ittet	lt
 8007c32:	425b      	neglt	r3, r3
 8007c34:	f042 0202 	orrlt.w	r2, r2, #2
 8007c38:	9307      	strge	r3, [sp, #28]
 8007c3a:	9307      	strlt	r3, [sp, #28]
 8007c3c:	bfb8      	it	lt
 8007c3e:	9204      	strlt	r2, [sp, #16]
 8007c40:	7823      	ldrb	r3, [r4, #0]
 8007c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c44:	d10a      	bne.n	8007c5c <_svfiprintf_r+0x130>
 8007c46:	7863      	ldrb	r3, [r4, #1]
 8007c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c4a:	d132      	bne.n	8007cb2 <_svfiprintf_r+0x186>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	1d1a      	adds	r2, r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	9203      	str	r2, [sp, #12]
 8007c54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c58:	3402      	adds	r4, #2
 8007c5a:	9305      	str	r3, [sp, #20]
 8007c5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d20 <_svfiprintf_r+0x1f4>
 8007c60:	7821      	ldrb	r1, [r4, #0]
 8007c62:	2203      	movs	r2, #3
 8007c64:	4650      	mov	r0, sl
 8007c66:	f7f8 fab3 	bl	80001d0 <memchr>
 8007c6a:	b138      	cbz	r0, 8007c7c <_svfiprintf_r+0x150>
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	eba0 000a 	sub.w	r0, r0, sl
 8007c72:	2240      	movs	r2, #64	@ 0x40
 8007c74:	4082      	lsls	r2, r0
 8007c76:	4313      	orrs	r3, r2
 8007c78:	3401      	adds	r4, #1
 8007c7a:	9304      	str	r3, [sp, #16]
 8007c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c80:	4824      	ldr	r0, [pc, #144]	@ (8007d14 <_svfiprintf_r+0x1e8>)
 8007c82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c86:	2206      	movs	r2, #6
 8007c88:	f7f8 faa2 	bl	80001d0 <memchr>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d036      	beq.n	8007cfe <_svfiprintf_r+0x1d2>
 8007c90:	4b21      	ldr	r3, [pc, #132]	@ (8007d18 <_svfiprintf_r+0x1ec>)
 8007c92:	bb1b      	cbnz	r3, 8007cdc <_svfiprintf_r+0x1b0>
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	3307      	adds	r3, #7
 8007c98:	f023 0307 	bic.w	r3, r3, #7
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	9303      	str	r3, [sp, #12]
 8007ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca2:	4433      	add	r3, r6
 8007ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ca6:	e76a      	b.n	8007b7e <_svfiprintf_r+0x52>
 8007ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cac:	460c      	mov	r4, r1
 8007cae:	2001      	movs	r0, #1
 8007cb0:	e7a8      	b.n	8007c04 <_svfiprintf_r+0xd8>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	3401      	adds	r4, #1
 8007cb6:	9305      	str	r3, [sp, #20]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	f04f 0c0a 	mov.w	ip, #10
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc4:	3a30      	subs	r2, #48	@ 0x30
 8007cc6:	2a09      	cmp	r2, #9
 8007cc8:	d903      	bls.n	8007cd2 <_svfiprintf_r+0x1a6>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0c6      	beq.n	8007c5c <_svfiprintf_r+0x130>
 8007cce:	9105      	str	r1, [sp, #20]
 8007cd0:	e7c4      	b.n	8007c5c <_svfiprintf_r+0x130>
 8007cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e7f0      	b.n	8007cbe <_svfiprintf_r+0x192>
 8007cdc:	ab03      	add	r3, sp, #12
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d1c <_svfiprintf_r+0x1f0>)
 8007ce4:	a904      	add	r1, sp, #16
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7fd fd90 	bl	800580c <_printf_float>
 8007cec:	1c42      	adds	r2, r0, #1
 8007cee:	4606      	mov	r6, r0
 8007cf0:	d1d6      	bne.n	8007ca0 <_svfiprintf_r+0x174>
 8007cf2:	89ab      	ldrh	r3, [r5, #12]
 8007cf4:	065b      	lsls	r3, r3, #25
 8007cf6:	f53f af2d 	bmi.w	8007b54 <_svfiprintf_r+0x28>
 8007cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cfc:	e72c      	b.n	8007b58 <_svfiprintf_r+0x2c>
 8007cfe:	ab03      	add	r3, sp, #12
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	462a      	mov	r2, r5
 8007d04:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <_svfiprintf_r+0x1f0>)
 8007d06:	a904      	add	r1, sp, #16
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7fe f817 	bl	8005d3c <_printf_i>
 8007d0e:	e7ed      	b.n	8007cec <_svfiprintf_r+0x1c0>
 8007d10:	0800b556 	.word	0x0800b556
 8007d14:	0800b560 	.word	0x0800b560
 8007d18:	0800580d 	.word	0x0800580d
 8007d1c:	08007a75 	.word	0x08007a75
 8007d20:	0800b55c 	.word	0x0800b55c

08007d24 <__sfputc_r>:
 8007d24:	6893      	ldr	r3, [r2, #8]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	b410      	push	{r4}
 8007d2c:	6093      	str	r3, [r2, #8]
 8007d2e:	da08      	bge.n	8007d42 <__sfputc_r+0x1e>
 8007d30:	6994      	ldr	r4, [r2, #24]
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	db01      	blt.n	8007d3a <__sfputc_r+0x16>
 8007d36:	290a      	cmp	r1, #10
 8007d38:	d103      	bne.n	8007d42 <__sfputc_r+0x1e>
 8007d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d3e:	f7fe bab2 	b.w	80062a6 <__swbuf_r>
 8007d42:	6813      	ldr	r3, [r2, #0]
 8007d44:	1c58      	adds	r0, r3, #1
 8007d46:	6010      	str	r0, [r2, #0]
 8007d48:	7019      	strb	r1, [r3, #0]
 8007d4a:	4608      	mov	r0, r1
 8007d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <__sfputs_r>:
 8007d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	4614      	mov	r4, r2
 8007d5a:	18d5      	adds	r5, r2, r3
 8007d5c:	42ac      	cmp	r4, r5
 8007d5e:	d101      	bne.n	8007d64 <__sfputs_r+0x12>
 8007d60:	2000      	movs	r0, #0
 8007d62:	e007      	b.n	8007d74 <__sfputs_r+0x22>
 8007d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d68:	463a      	mov	r2, r7
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ffda 	bl	8007d24 <__sfputc_r>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d1f3      	bne.n	8007d5c <__sfputs_r+0xa>
 8007d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d78 <_vfiprintf_r>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	460d      	mov	r5, r1
 8007d7e:	b09d      	sub	sp, #116	@ 0x74
 8007d80:	4614      	mov	r4, r2
 8007d82:	4698      	mov	r8, r3
 8007d84:	4606      	mov	r6, r0
 8007d86:	b118      	cbz	r0, 8007d90 <_vfiprintf_r+0x18>
 8007d88:	6a03      	ldr	r3, [r0, #32]
 8007d8a:	b90b      	cbnz	r3, 8007d90 <_vfiprintf_r+0x18>
 8007d8c:	f7fe f980 	bl	8006090 <__sinit>
 8007d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d92:	07d9      	lsls	r1, r3, #31
 8007d94:	d405      	bmi.n	8007da2 <_vfiprintf_r+0x2a>
 8007d96:	89ab      	ldrh	r3, [r5, #12]
 8007d98:	059a      	lsls	r2, r3, #22
 8007d9a:	d402      	bmi.n	8007da2 <_vfiprintf_r+0x2a>
 8007d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d9e:	f7fe fb94 	bl	80064ca <__retarget_lock_acquire_recursive>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	071b      	lsls	r3, r3, #28
 8007da6:	d501      	bpl.n	8007dac <_vfiprintf_r+0x34>
 8007da8:	692b      	ldr	r3, [r5, #16]
 8007daa:	b99b      	cbnz	r3, 8007dd4 <_vfiprintf_r+0x5c>
 8007dac:	4629      	mov	r1, r5
 8007dae:	4630      	mov	r0, r6
 8007db0:	f7fe fab8 	bl	8006324 <__swsetup_r>
 8007db4:	b170      	cbz	r0, 8007dd4 <_vfiprintf_r+0x5c>
 8007db6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007db8:	07dc      	lsls	r4, r3, #31
 8007dba:	d504      	bpl.n	8007dc6 <_vfiprintf_r+0x4e>
 8007dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc0:	b01d      	add	sp, #116	@ 0x74
 8007dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc6:	89ab      	ldrh	r3, [r5, #12]
 8007dc8:	0598      	lsls	r0, r3, #22
 8007dca:	d4f7      	bmi.n	8007dbc <_vfiprintf_r+0x44>
 8007dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dce:	f7fe fb7d 	bl	80064cc <__retarget_lock_release_recursive>
 8007dd2:	e7f3      	b.n	8007dbc <_vfiprintf_r+0x44>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd8:	2320      	movs	r3, #32
 8007dda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de2:	2330      	movs	r3, #48	@ 0x30
 8007de4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007f94 <_vfiprintf_r+0x21c>
 8007de8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dec:	f04f 0901 	mov.w	r9, #1
 8007df0:	4623      	mov	r3, r4
 8007df2:	469a      	mov	sl, r3
 8007df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007df8:	b10a      	cbz	r2, 8007dfe <_vfiprintf_r+0x86>
 8007dfa:	2a25      	cmp	r2, #37	@ 0x25
 8007dfc:	d1f9      	bne.n	8007df2 <_vfiprintf_r+0x7a>
 8007dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8007e02:	d00b      	beq.n	8007e1c <_vfiprintf_r+0xa4>
 8007e04:	465b      	mov	r3, fp
 8007e06:	4622      	mov	r2, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7ff ffa1 	bl	8007d52 <__sfputs_r>
 8007e10:	3001      	adds	r0, #1
 8007e12:	f000 80a7 	beq.w	8007f64 <_vfiprintf_r+0x1ec>
 8007e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e18:	445a      	add	r2, fp
 8007e1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 809f 	beq.w	8007f64 <_vfiprintf_r+0x1ec>
 8007e26:	2300      	movs	r3, #0
 8007e28:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e30:	f10a 0a01 	add.w	sl, sl, #1
 8007e34:	9304      	str	r3, [sp, #16]
 8007e36:	9307      	str	r3, [sp, #28]
 8007e38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e3e:	4654      	mov	r4, sl
 8007e40:	2205      	movs	r2, #5
 8007e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e46:	4853      	ldr	r0, [pc, #332]	@ (8007f94 <_vfiprintf_r+0x21c>)
 8007e48:	f7f8 f9c2 	bl	80001d0 <memchr>
 8007e4c:	9a04      	ldr	r2, [sp, #16]
 8007e4e:	b9d8      	cbnz	r0, 8007e88 <_vfiprintf_r+0x110>
 8007e50:	06d1      	lsls	r1, r2, #27
 8007e52:	bf44      	itt	mi
 8007e54:	2320      	movmi	r3, #32
 8007e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e5a:	0713      	lsls	r3, r2, #28
 8007e5c:	bf44      	itt	mi
 8007e5e:	232b      	movmi	r3, #43	@ 0x2b
 8007e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e64:	f89a 3000 	ldrb.w	r3, [sl]
 8007e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e6a:	d015      	beq.n	8007e98 <_vfiprintf_r+0x120>
 8007e6c:	9a07      	ldr	r2, [sp, #28]
 8007e6e:	4654      	mov	r4, sl
 8007e70:	2000      	movs	r0, #0
 8007e72:	f04f 0c0a 	mov.w	ip, #10
 8007e76:	4621      	mov	r1, r4
 8007e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e7c:	3b30      	subs	r3, #48	@ 0x30
 8007e7e:	2b09      	cmp	r3, #9
 8007e80:	d94b      	bls.n	8007f1a <_vfiprintf_r+0x1a2>
 8007e82:	b1b0      	cbz	r0, 8007eb2 <_vfiprintf_r+0x13a>
 8007e84:	9207      	str	r2, [sp, #28]
 8007e86:	e014      	b.n	8007eb2 <_vfiprintf_r+0x13a>
 8007e88:	eba0 0308 	sub.w	r3, r0, r8
 8007e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e90:	4313      	orrs	r3, r2
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	46a2      	mov	sl, r4
 8007e96:	e7d2      	b.n	8007e3e <_vfiprintf_r+0xc6>
 8007e98:	9b03      	ldr	r3, [sp, #12]
 8007e9a:	1d19      	adds	r1, r3, #4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	9103      	str	r1, [sp, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bfbb      	ittet	lt
 8007ea4:	425b      	neglt	r3, r3
 8007ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8007eaa:	9307      	strge	r3, [sp, #28]
 8007eac:	9307      	strlt	r3, [sp, #28]
 8007eae:	bfb8      	it	lt
 8007eb0:	9204      	strlt	r2, [sp, #16]
 8007eb2:	7823      	ldrb	r3, [r4, #0]
 8007eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eb6:	d10a      	bne.n	8007ece <_vfiprintf_r+0x156>
 8007eb8:	7863      	ldrb	r3, [r4, #1]
 8007eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ebc:	d132      	bne.n	8007f24 <_vfiprintf_r+0x1ac>
 8007ebe:	9b03      	ldr	r3, [sp, #12]
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	9203      	str	r2, [sp, #12]
 8007ec6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007eca:	3402      	adds	r4, #2
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007fa4 <_vfiprintf_r+0x22c>
 8007ed2:	7821      	ldrb	r1, [r4, #0]
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	f7f8 f97a 	bl	80001d0 <memchr>
 8007edc:	b138      	cbz	r0, 8007eee <_vfiprintf_r+0x176>
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	eba0 000a 	sub.w	r0, r0, sl
 8007ee4:	2240      	movs	r2, #64	@ 0x40
 8007ee6:	4082      	lsls	r2, r0
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	3401      	adds	r4, #1
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef2:	4829      	ldr	r0, [pc, #164]	@ (8007f98 <_vfiprintf_r+0x220>)
 8007ef4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ef8:	2206      	movs	r2, #6
 8007efa:	f7f8 f969 	bl	80001d0 <memchr>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d03f      	beq.n	8007f82 <_vfiprintf_r+0x20a>
 8007f02:	4b26      	ldr	r3, [pc, #152]	@ (8007f9c <_vfiprintf_r+0x224>)
 8007f04:	bb1b      	cbnz	r3, 8007f4e <_vfiprintf_r+0x1d6>
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	3307      	adds	r3, #7
 8007f0a:	f023 0307 	bic.w	r3, r3, #7
 8007f0e:	3308      	adds	r3, #8
 8007f10:	9303      	str	r3, [sp, #12]
 8007f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f14:	443b      	add	r3, r7
 8007f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f18:	e76a      	b.n	8007df0 <_vfiprintf_r+0x78>
 8007f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f1e:	460c      	mov	r4, r1
 8007f20:	2001      	movs	r0, #1
 8007f22:	e7a8      	b.n	8007e76 <_vfiprintf_r+0xfe>
 8007f24:	2300      	movs	r3, #0
 8007f26:	3401      	adds	r4, #1
 8007f28:	9305      	str	r3, [sp, #20]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	f04f 0c0a 	mov.w	ip, #10
 8007f30:	4620      	mov	r0, r4
 8007f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f36:	3a30      	subs	r2, #48	@ 0x30
 8007f38:	2a09      	cmp	r2, #9
 8007f3a:	d903      	bls.n	8007f44 <_vfiprintf_r+0x1cc>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0c6      	beq.n	8007ece <_vfiprintf_r+0x156>
 8007f40:	9105      	str	r1, [sp, #20]
 8007f42:	e7c4      	b.n	8007ece <_vfiprintf_r+0x156>
 8007f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f48:	4604      	mov	r4, r0
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e7f0      	b.n	8007f30 <_vfiprintf_r+0x1b8>
 8007f4e:	ab03      	add	r3, sp, #12
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	462a      	mov	r2, r5
 8007f54:	4b12      	ldr	r3, [pc, #72]	@ (8007fa0 <_vfiprintf_r+0x228>)
 8007f56:	a904      	add	r1, sp, #16
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7fd fc57 	bl	800580c <_printf_float>
 8007f5e:	4607      	mov	r7, r0
 8007f60:	1c78      	adds	r0, r7, #1
 8007f62:	d1d6      	bne.n	8007f12 <_vfiprintf_r+0x19a>
 8007f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f66:	07d9      	lsls	r1, r3, #31
 8007f68:	d405      	bmi.n	8007f76 <_vfiprintf_r+0x1fe>
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	059a      	lsls	r2, r3, #22
 8007f6e:	d402      	bmi.n	8007f76 <_vfiprintf_r+0x1fe>
 8007f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f72:	f7fe faab 	bl	80064cc <__retarget_lock_release_recursive>
 8007f76:	89ab      	ldrh	r3, [r5, #12]
 8007f78:	065b      	lsls	r3, r3, #25
 8007f7a:	f53f af1f 	bmi.w	8007dbc <_vfiprintf_r+0x44>
 8007f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f80:	e71e      	b.n	8007dc0 <_vfiprintf_r+0x48>
 8007f82:	ab03      	add	r3, sp, #12
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	462a      	mov	r2, r5
 8007f88:	4b05      	ldr	r3, [pc, #20]	@ (8007fa0 <_vfiprintf_r+0x228>)
 8007f8a:	a904      	add	r1, sp, #16
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7fd fed5 	bl	8005d3c <_printf_i>
 8007f92:	e7e4      	b.n	8007f5e <_vfiprintf_r+0x1e6>
 8007f94:	0800b556 	.word	0x0800b556
 8007f98:	0800b560 	.word	0x0800b560
 8007f9c:	0800580d 	.word	0x0800580d
 8007fa0:	08007d53 	.word	0x08007d53
 8007fa4:	0800b55c 	.word	0x0800b55c

08007fa8 <__sflush_r>:
 8007fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb0:	0716      	lsls	r6, r2, #28
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	d454      	bmi.n	8008062 <__sflush_r+0xba>
 8007fb8:	684b      	ldr	r3, [r1, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dc02      	bgt.n	8007fc4 <__sflush_r+0x1c>
 8007fbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dd48      	ble.n	8008056 <__sflush_r+0xae>
 8007fc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	d045      	beq.n	8008056 <__sflush_r+0xae>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fd0:	682f      	ldr	r7, [r5, #0]
 8007fd2:	6a21      	ldr	r1, [r4, #32]
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	d030      	beq.n	800803a <__sflush_r+0x92>
 8007fd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	0759      	lsls	r1, r3, #29
 8007fde:	d505      	bpl.n	8007fec <__sflush_r+0x44>
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	1ad2      	subs	r2, r2, r3
 8007fe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fe6:	b10b      	cbz	r3, 8007fec <__sflush_r+0x44>
 8007fe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fea:	1ad2      	subs	r2, r2, r3
 8007fec:	2300      	movs	r3, #0
 8007fee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ff0:	6a21      	ldr	r1, [r4, #32]
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b0      	blx	r6
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	d106      	bne.n	800800a <__sflush_r+0x62>
 8007ffc:	6829      	ldr	r1, [r5, #0]
 8007ffe:	291d      	cmp	r1, #29
 8008000:	d82b      	bhi.n	800805a <__sflush_r+0xb2>
 8008002:	4a2a      	ldr	r2, [pc, #168]	@ (80080ac <__sflush_r+0x104>)
 8008004:	40ca      	lsrs	r2, r1
 8008006:	07d6      	lsls	r6, r2, #31
 8008008:	d527      	bpl.n	800805a <__sflush_r+0xb2>
 800800a:	2200      	movs	r2, #0
 800800c:	6062      	str	r2, [r4, #4]
 800800e:	04d9      	lsls	r1, r3, #19
 8008010:	6922      	ldr	r2, [r4, #16]
 8008012:	6022      	str	r2, [r4, #0]
 8008014:	d504      	bpl.n	8008020 <__sflush_r+0x78>
 8008016:	1c42      	adds	r2, r0, #1
 8008018:	d101      	bne.n	800801e <__sflush_r+0x76>
 800801a:	682b      	ldr	r3, [r5, #0]
 800801c:	b903      	cbnz	r3, 8008020 <__sflush_r+0x78>
 800801e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008022:	602f      	str	r7, [r5, #0]
 8008024:	b1b9      	cbz	r1, 8008056 <__sflush_r+0xae>
 8008026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800802a:	4299      	cmp	r1, r3
 800802c:	d002      	beq.n	8008034 <__sflush_r+0x8c>
 800802e:	4628      	mov	r0, r5
 8008030:	f7ff f8a6 	bl	8007180 <_free_r>
 8008034:	2300      	movs	r3, #0
 8008036:	6363      	str	r3, [r4, #52]	@ 0x34
 8008038:	e00d      	b.n	8008056 <__sflush_r+0xae>
 800803a:	2301      	movs	r3, #1
 800803c:	4628      	mov	r0, r5
 800803e:	47b0      	blx	r6
 8008040:	4602      	mov	r2, r0
 8008042:	1c50      	adds	r0, r2, #1
 8008044:	d1c9      	bne.n	8007fda <__sflush_r+0x32>
 8008046:	682b      	ldr	r3, [r5, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0c6      	beq.n	8007fda <__sflush_r+0x32>
 800804c:	2b1d      	cmp	r3, #29
 800804e:	d001      	beq.n	8008054 <__sflush_r+0xac>
 8008050:	2b16      	cmp	r3, #22
 8008052:	d11e      	bne.n	8008092 <__sflush_r+0xea>
 8008054:	602f      	str	r7, [r5, #0]
 8008056:	2000      	movs	r0, #0
 8008058:	e022      	b.n	80080a0 <__sflush_r+0xf8>
 800805a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800805e:	b21b      	sxth	r3, r3
 8008060:	e01b      	b.n	800809a <__sflush_r+0xf2>
 8008062:	690f      	ldr	r7, [r1, #16]
 8008064:	2f00      	cmp	r7, #0
 8008066:	d0f6      	beq.n	8008056 <__sflush_r+0xae>
 8008068:	0793      	lsls	r3, r2, #30
 800806a:	680e      	ldr	r6, [r1, #0]
 800806c:	bf08      	it	eq
 800806e:	694b      	ldreq	r3, [r1, #20]
 8008070:	600f      	str	r7, [r1, #0]
 8008072:	bf18      	it	ne
 8008074:	2300      	movne	r3, #0
 8008076:	eba6 0807 	sub.w	r8, r6, r7
 800807a:	608b      	str	r3, [r1, #8]
 800807c:	f1b8 0f00 	cmp.w	r8, #0
 8008080:	dde9      	ble.n	8008056 <__sflush_r+0xae>
 8008082:	6a21      	ldr	r1, [r4, #32]
 8008084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008086:	4643      	mov	r3, r8
 8008088:	463a      	mov	r2, r7
 800808a:	4628      	mov	r0, r5
 800808c:	47b0      	blx	r6
 800808e:	2800      	cmp	r0, #0
 8008090:	dc08      	bgt.n	80080a4 <__sflush_r+0xfc>
 8008092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800809a:	81a3      	strh	r3, [r4, #12]
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a4:	4407      	add	r7, r0
 80080a6:	eba8 0800 	sub.w	r8, r8, r0
 80080aa:	e7e7      	b.n	800807c <__sflush_r+0xd4>
 80080ac:	20400001 	.word	0x20400001

080080b0 <_fflush_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	690b      	ldr	r3, [r1, #16]
 80080b4:	4605      	mov	r5, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	b913      	cbnz	r3, 80080c0 <_fflush_r+0x10>
 80080ba:	2500      	movs	r5, #0
 80080bc:	4628      	mov	r0, r5
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	b118      	cbz	r0, 80080ca <_fflush_r+0x1a>
 80080c2:	6a03      	ldr	r3, [r0, #32]
 80080c4:	b90b      	cbnz	r3, 80080ca <_fflush_r+0x1a>
 80080c6:	f7fd ffe3 	bl	8006090 <__sinit>
 80080ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f3      	beq.n	80080ba <_fflush_r+0xa>
 80080d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080d4:	07d0      	lsls	r0, r2, #31
 80080d6:	d404      	bmi.n	80080e2 <_fflush_r+0x32>
 80080d8:	0599      	lsls	r1, r3, #22
 80080da:	d402      	bmi.n	80080e2 <_fflush_r+0x32>
 80080dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080de:	f7fe f9f4 	bl	80064ca <__retarget_lock_acquire_recursive>
 80080e2:	4628      	mov	r0, r5
 80080e4:	4621      	mov	r1, r4
 80080e6:	f7ff ff5f 	bl	8007fa8 <__sflush_r>
 80080ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080ec:	07da      	lsls	r2, r3, #31
 80080ee:	4605      	mov	r5, r0
 80080f0:	d4e4      	bmi.n	80080bc <_fflush_r+0xc>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	059b      	lsls	r3, r3, #22
 80080f6:	d4e1      	bmi.n	80080bc <_fflush_r+0xc>
 80080f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080fa:	f7fe f9e7 	bl	80064cc <__retarget_lock_release_recursive>
 80080fe:	e7dd      	b.n	80080bc <_fflush_r+0xc>

08008100 <__swhatbuf_r>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	460c      	mov	r4, r1
 8008104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008108:	2900      	cmp	r1, #0
 800810a:	b096      	sub	sp, #88	@ 0x58
 800810c:	4615      	mov	r5, r2
 800810e:	461e      	mov	r6, r3
 8008110:	da0d      	bge.n	800812e <__swhatbuf_r+0x2e>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008118:	f04f 0100 	mov.w	r1, #0
 800811c:	bf14      	ite	ne
 800811e:	2340      	movne	r3, #64	@ 0x40
 8008120:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008124:	2000      	movs	r0, #0
 8008126:	6031      	str	r1, [r6, #0]
 8008128:	602b      	str	r3, [r5, #0]
 800812a:	b016      	add	sp, #88	@ 0x58
 800812c:	bd70      	pop	{r4, r5, r6, pc}
 800812e:	466a      	mov	r2, sp
 8008130:	f000 f862 	bl	80081f8 <_fstat_r>
 8008134:	2800      	cmp	r0, #0
 8008136:	dbec      	blt.n	8008112 <__swhatbuf_r+0x12>
 8008138:	9901      	ldr	r1, [sp, #4]
 800813a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800813e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008142:	4259      	negs	r1, r3
 8008144:	4159      	adcs	r1, r3
 8008146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800814a:	e7eb      	b.n	8008124 <__swhatbuf_r+0x24>

0800814c <__smakebuf_r>:
 800814c:	898b      	ldrh	r3, [r1, #12]
 800814e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008150:	079d      	lsls	r5, r3, #30
 8008152:	4606      	mov	r6, r0
 8008154:	460c      	mov	r4, r1
 8008156:	d507      	bpl.n	8008168 <__smakebuf_r+0x1c>
 8008158:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	6123      	str	r3, [r4, #16]
 8008160:	2301      	movs	r3, #1
 8008162:	6163      	str	r3, [r4, #20]
 8008164:	b003      	add	sp, #12
 8008166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008168:	ab01      	add	r3, sp, #4
 800816a:	466a      	mov	r2, sp
 800816c:	f7ff ffc8 	bl	8008100 <__swhatbuf_r>
 8008170:	9f00      	ldr	r7, [sp, #0]
 8008172:	4605      	mov	r5, r0
 8008174:	4639      	mov	r1, r7
 8008176:	4630      	mov	r0, r6
 8008178:	f7ff f876 	bl	8007268 <_malloc_r>
 800817c:	b948      	cbnz	r0, 8008192 <__smakebuf_r+0x46>
 800817e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008182:	059a      	lsls	r2, r3, #22
 8008184:	d4ee      	bmi.n	8008164 <__smakebuf_r+0x18>
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	f043 0302 	orr.w	r3, r3, #2
 800818e:	81a3      	strh	r3, [r4, #12]
 8008190:	e7e2      	b.n	8008158 <__smakebuf_r+0xc>
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	6020      	str	r0, [r4, #0]
 8008196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80081a2:	b15b      	cbz	r3, 80081bc <__smakebuf_r+0x70>
 80081a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081a8:	4630      	mov	r0, r6
 80081aa:	f000 f837 	bl	800821c <_isatty_r>
 80081ae:	b128      	cbz	r0, 80081bc <__smakebuf_r+0x70>
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	f023 0303 	bic.w	r3, r3, #3
 80081b6:	f043 0301 	orr.w	r3, r3, #1
 80081ba:	81a3      	strh	r3, [r4, #12]
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	431d      	orrs	r5, r3
 80081c0:	81a5      	strh	r5, [r4, #12]
 80081c2:	e7cf      	b.n	8008164 <__smakebuf_r+0x18>

080081c4 <memmove>:
 80081c4:	4288      	cmp	r0, r1
 80081c6:	b510      	push	{r4, lr}
 80081c8:	eb01 0402 	add.w	r4, r1, r2
 80081cc:	d902      	bls.n	80081d4 <memmove+0x10>
 80081ce:	4284      	cmp	r4, r0
 80081d0:	4623      	mov	r3, r4
 80081d2:	d807      	bhi.n	80081e4 <memmove+0x20>
 80081d4:	1e43      	subs	r3, r0, #1
 80081d6:	42a1      	cmp	r1, r4
 80081d8:	d008      	beq.n	80081ec <memmove+0x28>
 80081da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081e2:	e7f8      	b.n	80081d6 <memmove+0x12>
 80081e4:	4402      	add	r2, r0
 80081e6:	4601      	mov	r1, r0
 80081e8:	428a      	cmp	r2, r1
 80081ea:	d100      	bne.n	80081ee <memmove+0x2a>
 80081ec:	bd10      	pop	{r4, pc}
 80081ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081f6:	e7f7      	b.n	80081e8 <memmove+0x24>

080081f8 <_fstat_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	@ (8008218 <_fstat_r+0x20>)
 80081fc:	2300      	movs	r3, #0
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	f7f9 ff8d 	bl	8002124 <_fstat>
 800820a:	1c43      	adds	r3, r0, #1
 800820c:	d102      	bne.n	8008214 <_fstat_r+0x1c>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	b103      	cbz	r3, 8008214 <_fstat_r+0x1c>
 8008212:	6023      	str	r3, [r4, #0]
 8008214:	bd38      	pop	{r3, r4, r5, pc}
 8008216:	bf00      	nop
 8008218:	2000079c 	.word	0x2000079c

0800821c <_isatty_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d06      	ldr	r5, [pc, #24]	@ (8008238 <_isatty_r+0x1c>)
 8008220:	2300      	movs	r3, #0
 8008222:	4604      	mov	r4, r0
 8008224:	4608      	mov	r0, r1
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	f7f9 ff8c 	bl	8002144 <_isatty>
 800822c:	1c43      	adds	r3, r0, #1
 800822e:	d102      	bne.n	8008236 <_isatty_r+0x1a>
 8008230:	682b      	ldr	r3, [r5, #0]
 8008232:	b103      	cbz	r3, 8008236 <_isatty_r+0x1a>
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	2000079c 	.word	0x2000079c

0800823c <_sbrk_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d06      	ldr	r5, [pc, #24]	@ (8008258 <_sbrk_r+0x1c>)
 8008240:	2300      	movs	r3, #0
 8008242:	4604      	mov	r4, r0
 8008244:	4608      	mov	r0, r1
 8008246:	602b      	str	r3, [r5, #0]
 8008248:	f7f9 ff94 	bl	8002174 <_sbrk>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d102      	bne.n	8008256 <_sbrk_r+0x1a>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b103      	cbz	r3, 8008256 <_sbrk_r+0x1a>
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	2000079c 	.word	0x2000079c

0800825c <memcpy>:
 800825c:	440a      	add	r2, r1
 800825e:	4291      	cmp	r1, r2
 8008260:	f100 33ff 	add.w	r3, r0, #4294967295
 8008264:	d100      	bne.n	8008268 <memcpy+0xc>
 8008266:	4770      	bx	lr
 8008268:	b510      	push	{r4, lr}
 800826a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800826e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008272:	4291      	cmp	r1, r2
 8008274:	d1f9      	bne.n	800826a <memcpy+0xe>
 8008276:	bd10      	pop	{r4, pc}

08008278 <__assert_func>:
 8008278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800827a:	4614      	mov	r4, r2
 800827c:	461a      	mov	r2, r3
 800827e:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <__assert_func+0x2c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4605      	mov	r5, r0
 8008284:	68d8      	ldr	r0, [r3, #12]
 8008286:	b14c      	cbz	r4, 800829c <__assert_func+0x24>
 8008288:	4b07      	ldr	r3, [pc, #28]	@ (80082a8 <__assert_func+0x30>)
 800828a:	9100      	str	r1, [sp, #0]
 800828c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008290:	4906      	ldr	r1, [pc, #24]	@ (80082ac <__assert_func+0x34>)
 8008292:	462b      	mov	r3, r5
 8008294:	f000 f870 	bl	8008378 <fiprintf>
 8008298:	f000 f880 	bl	800839c <abort>
 800829c:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <__assert_func+0x38>)
 800829e:	461c      	mov	r4, r3
 80082a0:	e7f3      	b.n	800828a <__assert_func+0x12>
 80082a2:	bf00      	nop
 80082a4:	2000001c 	.word	0x2000001c
 80082a8:	0800b571 	.word	0x0800b571
 80082ac:	0800b57e 	.word	0x0800b57e
 80082b0:	0800b5ac 	.word	0x0800b5ac

080082b4 <_calloc_r>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	fba1 5402 	umull	r5, r4, r1, r2
 80082ba:	b934      	cbnz	r4, 80082ca <_calloc_r+0x16>
 80082bc:	4629      	mov	r1, r5
 80082be:	f7fe ffd3 	bl	8007268 <_malloc_r>
 80082c2:	4606      	mov	r6, r0
 80082c4:	b928      	cbnz	r0, 80082d2 <_calloc_r+0x1e>
 80082c6:	4630      	mov	r0, r6
 80082c8:	bd70      	pop	{r4, r5, r6, pc}
 80082ca:	220c      	movs	r2, #12
 80082cc:	6002      	str	r2, [r0, #0]
 80082ce:	2600      	movs	r6, #0
 80082d0:	e7f9      	b.n	80082c6 <_calloc_r+0x12>
 80082d2:	462a      	mov	r2, r5
 80082d4:	4621      	mov	r1, r4
 80082d6:	f7fe f87b 	bl	80063d0 <memset>
 80082da:	e7f4      	b.n	80082c6 <_calloc_r+0x12>

080082dc <__ascii_mbtowc>:
 80082dc:	b082      	sub	sp, #8
 80082de:	b901      	cbnz	r1, 80082e2 <__ascii_mbtowc+0x6>
 80082e0:	a901      	add	r1, sp, #4
 80082e2:	b142      	cbz	r2, 80082f6 <__ascii_mbtowc+0x1a>
 80082e4:	b14b      	cbz	r3, 80082fa <__ascii_mbtowc+0x1e>
 80082e6:	7813      	ldrb	r3, [r2, #0]
 80082e8:	600b      	str	r3, [r1, #0]
 80082ea:	7812      	ldrb	r2, [r2, #0]
 80082ec:	1e10      	subs	r0, r2, #0
 80082ee:	bf18      	it	ne
 80082f0:	2001      	movne	r0, #1
 80082f2:	b002      	add	sp, #8
 80082f4:	4770      	bx	lr
 80082f6:	4610      	mov	r0, r2
 80082f8:	e7fb      	b.n	80082f2 <__ascii_mbtowc+0x16>
 80082fa:	f06f 0001 	mvn.w	r0, #1
 80082fe:	e7f8      	b.n	80082f2 <__ascii_mbtowc+0x16>

08008300 <_realloc_r>:
 8008300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008304:	4607      	mov	r7, r0
 8008306:	4614      	mov	r4, r2
 8008308:	460d      	mov	r5, r1
 800830a:	b921      	cbnz	r1, 8008316 <_realloc_r+0x16>
 800830c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008310:	4611      	mov	r1, r2
 8008312:	f7fe bfa9 	b.w	8007268 <_malloc_r>
 8008316:	b92a      	cbnz	r2, 8008324 <_realloc_r+0x24>
 8008318:	f7fe ff32 	bl	8007180 <_free_r>
 800831c:	4625      	mov	r5, r4
 800831e:	4628      	mov	r0, r5
 8008320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008324:	f000 f841 	bl	80083aa <_malloc_usable_size_r>
 8008328:	4284      	cmp	r4, r0
 800832a:	4606      	mov	r6, r0
 800832c:	d802      	bhi.n	8008334 <_realloc_r+0x34>
 800832e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008332:	d8f4      	bhi.n	800831e <_realloc_r+0x1e>
 8008334:	4621      	mov	r1, r4
 8008336:	4638      	mov	r0, r7
 8008338:	f7fe ff96 	bl	8007268 <_malloc_r>
 800833c:	4680      	mov	r8, r0
 800833e:	b908      	cbnz	r0, 8008344 <_realloc_r+0x44>
 8008340:	4645      	mov	r5, r8
 8008342:	e7ec      	b.n	800831e <_realloc_r+0x1e>
 8008344:	42b4      	cmp	r4, r6
 8008346:	4622      	mov	r2, r4
 8008348:	4629      	mov	r1, r5
 800834a:	bf28      	it	cs
 800834c:	4632      	movcs	r2, r6
 800834e:	f7ff ff85 	bl	800825c <memcpy>
 8008352:	4629      	mov	r1, r5
 8008354:	4638      	mov	r0, r7
 8008356:	f7fe ff13 	bl	8007180 <_free_r>
 800835a:	e7f1      	b.n	8008340 <_realloc_r+0x40>

0800835c <__ascii_wctomb>:
 800835c:	4603      	mov	r3, r0
 800835e:	4608      	mov	r0, r1
 8008360:	b141      	cbz	r1, 8008374 <__ascii_wctomb+0x18>
 8008362:	2aff      	cmp	r2, #255	@ 0xff
 8008364:	d904      	bls.n	8008370 <__ascii_wctomb+0x14>
 8008366:	228a      	movs	r2, #138	@ 0x8a
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	f04f 30ff 	mov.w	r0, #4294967295
 800836e:	4770      	bx	lr
 8008370:	700a      	strb	r2, [r1, #0]
 8008372:	2001      	movs	r0, #1
 8008374:	4770      	bx	lr
	...

08008378 <fiprintf>:
 8008378:	b40e      	push	{r1, r2, r3}
 800837a:	b503      	push	{r0, r1, lr}
 800837c:	4601      	mov	r1, r0
 800837e:	ab03      	add	r3, sp, #12
 8008380:	4805      	ldr	r0, [pc, #20]	@ (8008398 <fiprintf+0x20>)
 8008382:	f853 2b04 	ldr.w	r2, [r3], #4
 8008386:	6800      	ldr	r0, [r0, #0]
 8008388:	9301      	str	r3, [sp, #4]
 800838a:	f7ff fcf5 	bl	8007d78 <_vfiprintf_r>
 800838e:	b002      	add	sp, #8
 8008390:	f85d eb04 	ldr.w	lr, [sp], #4
 8008394:	b003      	add	sp, #12
 8008396:	4770      	bx	lr
 8008398:	2000001c 	.word	0x2000001c

0800839c <abort>:
 800839c:	b508      	push	{r3, lr}
 800839e:	2006      	movs	r0, #6
 80083a0:	f000 f834 	bl	800840c <raise>
 80083a4:	2001      	movs	r0, #1
 80083a6:	f7f9 fe6d 	bl	8002084 <_exit>

080083aa <_malloc_usable_size_r>:
 80083aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ae:	1f18      	subs	r0, r3, #4
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bfbc      	itt	lt
 80083b4:	580b      	ldrlt	r3, [r1, r0]
 80083b6:	18c0      	addlt	r0, r0, r3
 80083b8:	4770      	bx	lr

080083ba <_raise_r>:
 80083ba:	291f      	cmp	r1, #31
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4605      	mov	r5, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	d904      	bls.n	80083ce <_raise_r+0x14>
 80083c4:	2316      	movs	r3, #22
 80083c6:	6003      	str	r3, [r0, #0]
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	bd38      	pop	{r3, r4, r5, pc}
 80083ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80083d0:	b112      	cbz	r2, 80083d8 <_raise_r+0x1e>
 80083d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083d6:	b94b      	cbnz	r3, 80083ec <_raise_r+0x32>
 80083d8:	4628      	mov	r0, r5
 80083da:	f000 f831 	bl	8008440 <_getpid_r>
 80083de:	4622      	mov	r2, r4
 80083e0:	4601      	mov	r1, r0
 80083e2:	4628      	mov	r0, r5
 80083e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083e8:	f000 b818 	b.w	800841c <_kill_r>
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d00a      	beq.n	8008406 <_raise_r+0x4c>
 80083f0:	1c59      	adds	r1, r3, #1
 80083f2:	d103      	bne.n	80083fc <_raise_r+0x42>
 80083f4:	2316      	movs	r3, #22
 80083f6:	6003      	str	r3, [r0, #0]
 80083f8:	2001      	movs	r0, #1
 80083fa:	e7e7      	b.n	80083cc <_raise_r+0x12>
 80083fc:	2100      	movs	r1, #0
 80083fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008402:	4620      	mov	r0, r4
 8008404:	4798      	blx	r3
 8008406:	2000      	movs	r0, #0
 8008408:	e7e0      	b.n	80083cc <_raise_r+0x12>
	...

0800840c <raise>:
 800840c:	4b02      	ldr	r3, [pc, #8]	@ (8008418 <raise+0xc>)
 800840e:	4601      	mov	r1, r0
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f7ff bfd2 	b.w	80083ba <_raise_r>
 8008416:	bf00      	nop
 8008418:	2000001c 	.word	0x2000001c

0800841c <_kill_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d07      	ldr	r5, [pc, #28]	@ (800843c <_kill_r+0x20>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	602b      	str	r3, [r5, #0]
 800842a:	f7f9 fe1b 	bl	8002064 <_kill>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d102      	bne.n	8008438 <_kill_r+0x1c>
 8008432:	682b      	ldr	r3, [r5, #0]
 8008434:	b103      	cbz	r3, 8008438 <_kill_r+0x1c>
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	bf00      	nop
 800843c:	2000079c 	.word	0x2000079c

08008440 <_getpid_r>:
 8008440:	f7f9 be08 	b.w	8002054 <_getpid>

08008444 <_init>:
 8008444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008446:	bf00      	nop
 8008448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800844a:	bc08      	pop	{r3}
 800844c:	469e      	mov	lr, r3
 800844e:	4770      	bx	lr

08008450 <_fini>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr
