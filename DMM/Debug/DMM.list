
DMM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a44c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003354  0800a5e0  0800a5e0  0000b5e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d934  0800d934  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d934  0800d934  0000e934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d93c  0800d93c  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d93c  0800d93c  0000e93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d940  0800d940  0000e940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d944  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d8  2**0
                  CONTENTS
 10 .bss          000003b8  200001d8  200001d8  0000f1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000590  20000590  0000f1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013189  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003176  00000000  00000000  00022391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00025508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b98  00000000  00000000  00026440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247cd  00000000  00000000  00026fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013627  00000000  00000000  0004b7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d16f0  00000000  00000000  0005edcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001304bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fcc  00000000  00000000  00130500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001354cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a5c4 	.word	0x0800a5c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a5c4 	.word	0x0800a5c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <MX_AD7190_SPI_Init>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 该函数被HAL库内部调用
*/
void MX_AD7190_SPI_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
  
  GPIO_InitTypeDef GPIO_InitStruct;
  /* 使能SPI外设以及SPI引脚时钟 */
  AD7190_SPIx_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001014 <MX_AD7190_SPI_Init+0x100>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	4a3c      	ldr	r2, [pc, #240]	@ (8001014 <MX_AD7190_SPI_Init+0x100>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001014 <MX_AD7190_SPI_Init+0x100>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  AD7190_GPIO_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b36      	ldr	r3, [pc, #216]	@ (8001014 <MX_AD7190_SPI_Init+0x100>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a35      	ldr	r2, [pc, #212]	@ (8001014 <MX_AD7190_SPI_Init+0x100>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <MX_AD7190_SPI_Init+0x100>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = AD7190_SCK_Pin;
 8000f52:	2308      	movs	r3, #8
 8000f54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f62:	2305      	movs	r3, #5
 8000f64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD7190_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	482a      	ldr	r0, [pc, #168]	@ (8001018 <MX_AD7190_SPI_Init+0x104>)
 8000f6e:	f001 fa57 	bl	8002420 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = AD7190_MISO_Pin|AD7190_MOSI_Pin;
 8000f72:	2330      	movs	r3, #48	@ 0x30
 8000f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f82:	2305      	movs	r3, #5
 8000f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AD7190_MISO_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4822      	ldr	r0, [pc, #136]	@ (8001018 <MX_AD7190_SPI_Init+0x104>)
 8000f8e:	f001 fa47 	bl	8002420 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = AD7190_CS_Pin;
 8000f92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AD7190_CS_GPIO_Port, &GPIO_InitStruct);  
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481c      	ldr	r0, [pc, #112]	@ (8001018 <MX_AD7190_SPI_Init+0x104>)
 8000fa8:	f001 fa3a 	bl	8002420 <HAL_GPIO_Init>

  /* SPI外设配置 */
  hspi_AD7190.Instance = AD7190_SPIx;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fae:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <MX_AD7190_SPI_Init+0x10c>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hspi_AD7190.Init.Mode = SPI_MODE_MASTER;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fb4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fb8:	605a      	str	r2, [r3, #4]
  hspi_AD7190.Init.Direction = SPI_DIRECTION_2LINES;
 8000fba:	4b18      	ldr	r3, [pc, #96]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hspi_AD7190.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc0:	4b16      	ldr	r3, [pc, #88]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hspi_AD7190.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fc8:	2202      	movs	r2, #2
 8000fca:	611a      	str	r2, [r3, #16]
  hspi_AD7190.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	615a      	str	r2, [r3, #20]
  hspi_AD7190.Init.NSS = SPI_NSS_SOFT;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd8:	619a      	str	r2, [r3, #24]
  hspi_AD7190.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fdc:	2220      	movs	r2, #32
 8000fde:	61da      	str	r2, [r3, #28]
  hspi_AD7190.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  hspi_AD7190.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi_AD7190.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi_AD7190.Init.CRCPolynomial = 7;
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_SPI_Init(&hspi_AD7190);
 8000ff8:	4808      	ldr	r0, [pc, #32]	@ (800101c <MX_AD7190_SPI_Init+0x108>)
 8000ffa:	f002 f9d1 	bl	80033a0 <HAL_SPI_Init>
  /* 片选使能 */
  AD7190_CS_ENABLE();
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001004:	4804      	ldr	r0, [pc, #16]	@ (8001018 <MX_AD7190_SPI_Init+0x104>)
 8001006:	f001 fba7 	bl	8002758 <HAL_GPIO_WritePin>
}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	200001f4 	.word	0x200001f4
 8001020:	40013000 	.word	0x40013000

08001024 <AD7190_SetRegisterValue>:
 * @param bytesNumber - Number of bytes to be written.
 *
 * @return none.
*******************************************************************************/
void AD7190_SetRegisterValue(unsigned char registerAddress,unsigned int  registerValue,unsigned char bytesNumber)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	71bb      	strb	r3, [r7, #6]
  unsigned char writeCommand[5] = {0, 0, 0, 0, 0};
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	711a      	strb	r2, [r3, #4]
  unsigned char* dataPointer    = (unsigned char*)&registerValue;
 800103e:	463b      	mov	r3, r7
 8001040:	617b      	str	r3, [r7, #20]
  unsigned char bytesNr         = bytesNumber;
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	74fb      	strb	r3, [r7, #19]
  
  writeCommand[0] = AD7190_COMM_WRITE | AD7190_COMM_ADDR(registerAddress);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001050:	b2db      	uxtb	r3, r3
 8001052:	733b      	strb	r3, [r7, #12]
  while(bytesNr > 0)
 8001054:	e00c      	b.n	8001070 <AD7190_SetRegisterValue+0x4c>
  {
      writeCommand[bytesNr] = *dataPointer;
 8001056:	7cfb      	ldrb	r3, [r7, #19]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	7812      	ldrb	r2, [r2, #0]
 800105c:	3318      	adds	r3, #24
 800105e:	443b      	add	r3, r7
 8001060:	f803 2c0c 	strb.w	r2, [r3, #-12]
      dataPointer ++;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
      bytesNr --;
 800106a:	7cfb      	ldrb	r3, [r7, #19]
 800106c:	3b01      	subs	r3, #1
 800106e:	74fb      	strb	r3, [r7, #19]
  while(bytesNr > 0)
 8001070:	7cfb      	ldrb	r3, [r7, #19]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1ef      	bne.n	8001056 <AD7190_SetRegisterValue+0x32>
  }
  HAL_SPI_Transmit(&hspi_AD7190,writeCommand, bytesNumber+1,0xFFFFFF);
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	b29b      	uxth	r3, r3
 800107a:	3301      	adds	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <AD7190_SetRegisterValue+0x70>)
 8001088:	f002 fa13 	bl	80034b2 <HAL_SPI_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001f4 	.word	0x200001f4

08001098 <AD7190_GetRegisterValue>:
 * @param bytesNumber - Number of bytes that will be read.
 *
 * @return buffer - Value of the register.
*******************************************************************************/
unsigned int AD7190_GetRegisterValue(unsigned char registerAddress,unsigned char bytesNumber)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]
  unsigned char registerWord[4] = {0, 0, 0, 0}; 
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  unsigned char address         = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	72fb      	strb	r3, [r7, #11]
  unsigned int  buffer          = 0x0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  unsigned char i               = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	74fb      	strb	r3, [r7, #19]
  
  address = AD7190_COMM_READ | AD7190_COMM_ADDR(registerAddress);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	72fb      	strb	r3, [r7, #11]
  
  HAL_SPI_Transmit(&hspi_AD7190,&address, 1,0xFFFFFF);    
 80010d0:	f107 010b 	add.w	r1, r7, #11
 80010d4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80010d8:	2201      	movs	r2, #1
 80010da:	4812      	ldr	r0, [pc, #72]	@ (8001124 <AD7190_GetRegisterValue+0x8c>)
 80010dc:	f002 f9e9 	bl	80034b2 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi_AD7190,registerWord,bytesNumber,0xFFFFFF);
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f107 010c 	add.w	r1, r7, #12
 80010e8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80010ec:	480d      	ldr	r0, [pc, #52]	@ (8001124 <AD7190_GetRegisterValue+0x8c>)
 80010ee:	f002 fb24 	bl	800373a <HAL_SPI_Receive>
  for(i = 0; i < bytesNumber; i++) 
 80010f2:	2300      	movs	r3, #0
 80010f4:	74fb      	strb	r3, [r7, #19]
 80010f6:	e00b      	b.n	8001110 <AD7190_GetRegisterValue+0x78>
  {
    buffer = (buffer << 8) + registerWord[i];
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	7cfa      	ldrb	r2, [r7, #19]
 80010fe:	3218      	adds	r2, #24
 8001100:	443a      	add	r2, r7
 8001102:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8001106:	4413      	add	r3, r2
 8001108:	617b      	str	r3, [r7, #20]
  for(i = 0; i < bytesNumber; i++) 
 800110a:	7cfb      	ldrb	r3, [r7, #19]
 800110c:	3301      	adds	r3, #1
 800110e:	74fb      	strb	r3, [r7, #19]
 8001110:	7cfa      	ldrb	r2, [r7, #19]
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	429a      	cmp	r2, r3
 8001116:	d3ef      	bcc.n	80010f8 <AD7190_GetRegisterValue+0x60>
  }
  return buffer;
 8001118:	697b      	ldr	r3, [r7, #20]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200001f4 	.word	0x200001f4

08001128 <AD7190_Reset>:
 * @brief Resets the device.
 *
 * @return none.
*******************************************************************************/
void AD7190_Reset(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  unsigned char registerWord[7];
  
  registerWord[0] = 0x01;
 800112e:	2301      	movs	r3, #1
 8001130:	703b      	strb	r3, [r7, #0]
  registerWord[1] = 0xFF;
 8001132:	23ff      	movs	r3, #255	@ 0xff
 8001134:	707b      	strb	r3, [r7, #1]
  registerWord[2] = 0xFF;
 8001136:	23ff      	movs	r3, #255	@ 0xff
 8001138:	70bb      	strb	r3, [r7, #2]
  registerWord[3] = 0xFF;
 800113a:	23ff      	movs	r3, #255	@ 0xff
 800113c:	70fb      	strb	r3, [r7, #3]
  registerWord[4] = 0xFF;
 800113e:	23ff      	movs	r3, #255	@ 0xff
 8001140:	713b      	strb	r3, [r7, #4]
  registerWord[5] = 0xFF;
 8001142:	23ff      	movs	r3, #255	@ 0xff
 8001144:	717b      	strb	r3, [r7, #5]
  registerWord[6] = 0xFF;
 8001146:	23ff      	movs	r3, #255	@ 0xff
 8001148:	71bb      	strb	r3, [r7, #6]
  HAL_SPI_Transmit(&hspi_AD7190,registerWord, 7,0xFFFFFF);
 800114a:	4639      	mov	r1, r7
 800114c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8001150:	2207      	movs	r2, #7
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <AD7190_Reset+0x38>)
 8001154:	f002 f9ad 	bl	80034b2 <HAL_SPI_Transmit>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001f4 	.word	0x200001f4

08001164 <AD7190_WaitRdyGoLow>:
 * @brief Waits for RDY pin to go low.
 *
 * @return none.
*******************************************************************************/
void AD7190_WaitRdyGoLow(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
  unsigned int timeOutCnt = 0xFFFFF;
 800116a:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <AD7190_WaitRdyGoLow+0x30>)
 800116c:	607b      	str	r3, [r7, #4]

  while(AD7190_RDY_STATE() && timeOutCnt--)
 800116e:	bf00      	nop
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <AD7190_WaitRdyGoLow+0x34>)
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	2b00      	cmp	r3, #0
 800117a:	d004      	beq.n	8001186 <AD7190_WaitRdyGoLow+0x22>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1e5a      	subs	r2, r3, #1
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f4      	bne.n	8001170 <AD7190_WaitRdyGoLow+0xc>
  {
      ;
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	000fffff 	.word	0x000fffff
 8001198:	40020400 	.word	0x40020400

0800119c <AD7190_Continuous_ReadData>:
 *                          1 - enable
 *
 * @return none.
*******************************************************************************/
void AD7190_Continuous_ReadData(unsigned char cread)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  unsigned char registerWord=0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
  
  if(cread==1)
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d102      	bne.n	80011b6 <AD7190_Continuous_ReadData+0x1a>
  {
    registerWord=0x5C; //0101 1100
 80011b0:	235c      	movs	r3, #92	@ 0x5c
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e003      	b.n	80011be <AD7190_Continuous_ReadData+0x22>
  }
  else
  {
    AD7190_WaitRdyGoLow();
 80011b6:	f7ff ffd5 	bl	8001164 <AD7190_WaitRdyGoLow>
    registerWord=0x5e; //0101 1110
 80011ba:	235e      	movs	r3, #94	@ 0x5e
 80011bc:	73fb      	strb	r3, [r7, #15]
  }
  HAL_SPI_Transmit(&hspi_AD7190,&registerWord,1,0xFFFFFF);
 80011be:	f107 010f 	add.w	r1, r7, #15
 80011c2:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80011c6:	2201      	movs	r2, #1
 80011c8:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <AD7190_Continuous_ReadData+0x3c>)
 80011ca:	f002 f972 	bl	80034b2 <HAL_SPI_Transmit>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200001f4 	.word	0x200001f4

080011dc <AD7190_Calibrate>:
 * @param channel - Channel to be calibrated.
 *
 * @return none.
*******************************************************************************/
void AD7190_Calibrate(unsigned char mode, unsigned char channel)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  
  AD7190_ChannelSelect(channel);
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f83e 	bl	800127a <AD7190_ChannelSelect>
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_MODE, 3);
 80011fe:	2103      	movs	r1, #3
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ff49 	bl	8001098 <AD7190_GetRegisterValue>
 8001206:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~AD7190_MODE_SEL(0x7);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800120e:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | AD7190_MODE_SEL(mode);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	055b      	lsls	r3, r3, #21
 8001214:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	60bb      	str	r3, [r7, #8]
//    AD7190_CS_ENABLE(); 
  AD7190_SetRegisterValue(AD7190_REG_MODE, newRegValue, 3);
 800121e:	2203      	movs	r2, #3
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff fefe 	bl	8001024 <AD7190_SetRegisterValue>
  AD7190_WaitRdyGoLow();
 8001228:	f7ff ff9c 	bl	8001164 <AD7190_WaitRdyGoLow>
//    AD7190_CS_DISABLE();
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <AD7190_ChopSetting>:
 *                        1 - enable
 *  
 * @return none.
*******************************************************************************/
void AD7190_ChopSetting(unsigned char chop)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
  unsigned int oldRegValue = 0x0;
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
  unsigned int newRegValue = 0x0;   
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
   
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3);
 8001246:	2103      	movs	r1, #3
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff ff25 	bl	8001098 <AD7190_GetRegisterValue>
 800124e:	60b8      	str	r0, [r7, #8]
  if(chop==1)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d104      	bne.n	8001260 <AD7190_ChopSetting+0x2c>
  {
    newRegValue = oldRegValue | AD7190_CONF_CHOP;
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	e003      	b.n	8001268 <AD7190_ChopSetting+0x34>
  }
  else
  {
    newRegValue = oldRegValue & (~AD7190_CONF_CHOP); 
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001266:	60fb      	str	r3, [r7, #12]
  }
  
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 8001268:	2203      	movs	r2, #3
 800126a:	68f9      	ldr	r1, [r7, #12]
 800126c:	2002      	movs	r0, #2
 800126e:	f7ff fed9 	bl	8001024 <AD7190_SetRegisterValue>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <AD7190_ChannelSelect>:
 * @param channel - Selects a channel.
 *  
 * @return none.
*******************************************************************************/
void AD7190_ChannelSelect(unsigned short channel)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	80fb      	strh	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;   
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
   
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3);
 800128c:	2103      	movs	r1, #3
 800128e:	2002      	movs	r0, #2
 8001290:	f7ff ff02 	bl	8001098 <AD7190_GetRegisterValue>
 8001294:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~(AD7190_CONF_CHAN(0xFF));
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800129c:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | AD7190_CONF_CHAN(1 << channel);   
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	2201      	movs	r2, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 80012b0:	2203      	movs	r2, #3
 80012b2:	68b9      	ldr	r1, [r7, #8]
 80012b4:	2002      	movs	r0, #2
 80012b6:	f7ff feb5 	bl	8001024 <AD7190_SetRegisterValue>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <AD7190_MultiChannelSelect>:

void AD7190_MultiChannelSelect(unsigned short channel)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	80fb      	strh	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;   
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
   
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF, 3);
 80012d4:	2103      	movs	r1, #3
 80012d6:	2002      	movs	r0, #2
 80012d8:	f7ff fede 	bl	8001098 <AD7190_GetRegisterValue>
 80012dc:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~(AD7190_CONF_CHAN(0xFF));
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80012e4:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | AD7190_CONF_CHAN(channel);   
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60bb      	str	r3, [r7, #8]
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 80012f2:	2203      	movs	r2, #3
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	2002      	movs	r0, #2
 80012f8:	f7ff fe94 	bl	8001024 <AD7190_SetRegisterValue>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <AD7190_RangeSetup>:
                 the ADC input range.     
 *
 * @return none.
*******************************************************************************/
void AD7190_RangeSetup(unsigned char polarity, unsigned char range)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	460a      	mov	r2, r1
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	4613      	mov	r3, r2
 8001312:	71bb      	strb	r3, [r7, #6]
  unsigned int oldRegValue = 0x0;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  unsigned int newRegValue = 0x0;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  
  oldRegValue = AD7190_GetRegisterValue(AD7190_REG_CONF,3);
 800131c:	2103      	movs	r1, #3
 800131e:	2002      	movs	r0, #2
 8001320:	f7ff feba 	bl	8001098 <AD7190_GetRegisterValue>
 8001324:	60f8      	str	r0, [r7, #12]
  oldRegValue &= ~(AD7190_CONF_UNIPOLAR | AD7190_CONF_GAIN(0x7));
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f023 030f 	bic.w	r3, r3, #15
 800132c:	60fb      	str	r3, [r7, #12]
  newRegValue = oldRegValue | (polarity * AD7190_CONF_UNIPOLAR) | AD7190_CONF_GAIN(range) | AD7190_CONF_BUF; 
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	461a      	mov	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	431a      	orrs	r2, r3
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	4313      	orrs	r3, r2
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	60bb      	str	r3, [r7, #8]
  AD7190_SetRegisterValue(AD7190_REG_CONF, newRegValue, 3);
 8001346:	2203      	movs	r2, #3
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	2002      	movs	r0, #2
 800134c:	f7ff fe6a 	bl	8001024 <AD7190_SetRegisterValue>
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <ad7190_unipolar_multichannel_conf>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 无
  */
void ad7190_unipolar_multichannel_conf(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  unsigned int command = 0x0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  
  // chop enable
  AD7190_ChopSetting(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff ff66 	bl	8001234 <AD7190_ChopSetting>
  
  /* Calibrates channel AIN1(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN1P_AINCOM);
 8001368:	2104      	movs	r1, #4
 800136a:	2004      	movs	r0, #4
 800136c:	f7ff ff36 	bl	80011dc <AD7190_Calibrate>
  /* Calibrates channel AIN2(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN2P_AINCOM);
 8001370:	2105      	movs	r1, #5
 8001372:	2004      	movs	r0, #4
 8001374:	f7ff ff32 	bl	80011dc <AD7190_Calibrate>
  /* Calibrates channel AIN3(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN3P_AINCOM);
 8001378:	2106      	movs	r1, #6
 800137a:	2004      	movs	r0, #4
 800137c:	f7ff ff2e 	bl	80011dc <AD7190_Calibrate>
  /* Calibrates channel AIN4(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_ZERO, AD7190_CH_AIN4P_AINCOM);
 8001380:	2107      	movs	r1, #7
 8001382:	2004      	movs	r0, #4
 8001384:	f7ff ff2a 	bl	80011dc <AD7190_Calibrate>
  
  /* Selects unipolar operation and ADC's input range to +-Vref/1. */
  AD7190_RangeSetup(1, AD7190_CONF_GAIN_1);  
 8001388:	2100      	movs	r1, #0
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff ffba 	bl	8001304 <AD7190_RangeSetup>
  /* Calibrates channel AIN1(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN1P_AINCOM);
 8001390:	2104      	movs	r1, #4
 8001392:	2005      	movs	r0, #5
 8001394:	f7ff ff22 	bl	80011dc <AD7190_Calibrate>
  /* Calibrates channel AIN2(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN2P_AINCOM);
 8001398:	2105      	movs	r1, #5
 800139a:	2005      	movs	r0, #5
 800139c:	f7ff ff1e 	bl	80011dc <AD7190_Calibrate>
  /* Calibrates channel AIN3(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN3P_AINCOM);
 80013a0:	2106      	movs	r1, #6
 80013a2:	2005      	movs	r0, #5
 80013a4:	f7ff ff1a 	bl	80011dc <AD7190_Calibrate>
  /* Calibrates channel AIN4(+) - AINCOM(-). */
  AD7190_Calibrate(AD7190_MODE_CAL_INT_FULL, AD7190_CH_AIN4P_AINCOM);
 80013a8:	2107      	movs	r1, #7
 80013aa:	2005      	movs	r0, #5
 80013ac:	f7ff ff16 	bl	80011dc <AD7190_Calibrate>
     
  // 使能：AD7190_CH_AIN1P_AINCOM
  //       AD7190_CH_AIN2P_AINCOM
  //       AD7190_CH_AIN3P_AINCOM
  //       AD7190_CH_AIN4P_AINCOM
  AD7190_MultiChannelSelect(0xF0);
 80013b0:	20f0      	movs	r0, #240	@ 0xf0
 80013b2:	f7ff ff86 	bl	80012c2 <AD7190_MultiChannelSelect>
  
  /* Performs a conversion. */ 
  command = AD7190_MODE_SEL(AD7190_MODE_CONT) | AD7190_MODE_DAT_STA| \
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <ad7190_unipolar_multichannel_conf+0x7c>)
 80013b8:	607b      	str	r3, [r7, #4]
                            AD7190_MODE_CLKSRC(AD7190_CLK_EXT_MCLK1_2) | AD7190_MODE_RATE(Get_Speed);
  AD7190_SetRegisterValue(AD7190_REG_MODE, command, 3);  
 80013ba:	2203      	movs	r2, #3
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff fe30 	bl	8001024 <AD7190_SetRegisterValue>
  
  AD7190_Continuous_ReadData(1);
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff fee9 	bl	800119c <AD7190_Continuous_ReadData>

}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	00100064 	.word	0x00100064

080013d8 <AD7190_Init>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明: 检测AD7190模块连接是否正常
*/
uint8_t AD7190_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	uint8_t reg_data;
	MX_AD7190_SPI_Init();
 80013de:	f7ff fd99 	bl	8000f14 <MX_AD7190_SPI_Init>
	AD7190_Reset();
 80013e2:	f7ff fea1 	bl	8001128 <AD7190_Reset>
	/* Allow at least 500 us before accessing any of the on-chip registers. */
	HAL_Delay(10);  
 80013e6:	200a      	movs	r0, #10
 80013e8:	f000 fe0a 	bl	8002000 <HAL_Delay>
	reg_data=AD7190_COMM_READ | AD7190_COMM_ADDR(AD7190_REG_ID);
 80013ec:	2360      	movs	r3, #96	@ 0x60
 80013ee:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi_AD7190,&reg_data,1,0xFFFF);
 80013f0:	1df9      	adds	r1, r7, #7
 80013f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f6:	2201      	movs	r2, #1
 80013f8:	480d      	ldr	r0, [pc, #52]	@ (8001430 <AD7190_Init+0x58>)
 80013fa:	f002 f85a 	bl	80034b2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi_AD7190,&reg_data,1,0xFFFF);
 80013fe:	1df9      	adds	r1, r7, #7
 8001400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001404:	2201      	movs	r2, #1
 8001406:	480a      	ldr	r0, [pc, #40]	@ (8001430 <AD7190_Init+0x58>)
 8001408:	f002 f997 	bl	800373a <HAL_SPI_Receive>
	printf("AD7190 AD:0x%02X\n",reg_data);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	4619      	mov	r1, r3
 8001410:	4808      	ldr	r0, [pc, #32]	@ (8001434 <AD7190_Init+0x5c>)
 8001412:	f006 ff33 	bl	800827c <iprintf>
	if((reg_data & AD7190_ID_MASK) == ID_AD7190)
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f003 030f 	and.w	r3, r3, #15
 800141c:	2b04      	cmp	r3, #4
 800141e:	d101      	bne.n	8001424 <AD7190_Init+0x4c>
  {
//    printf("conf:0x%06X  ",AD7190_Get_REG_Data(AD7190_REG_CONF));
//    printf("mode:0x%06X\n",AD7190_Get_REG_Data(AD7190_REG_MODE));  
    return ID_AD7190;
 8001420:	2304      	movs	r3, #4
 8001422:	e000      	b.n	8001426 <AD7190_Init+0x4e>
  }
	return 0 ;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001f4 	.word	0x200001f4
 8001434:	0800a5e0 	.word	0x0800a5e0

08001438 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	@ 0x38
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001466:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800146a:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800146c:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <MX_FSMC_Init+0xec>)
 800146e:	4a2e      	ldr	r2, [pc, #184]	@ (8001528 <MX_FSMC_Init+0xf0>)
 8001470:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 8001472:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001474:	2206      	movs	r2, #6
 8001476:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001478:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <MX_FSMC_Init+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800147e:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001484:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001486:	2210      	movs	r2, #16
 8001488:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <MX_FSMC_Init+0xec>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001490:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001496:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <MX_FSMC_Init+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800149c:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_FSMC_Init+0xec>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_FSMC_Init+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80014ce:	230f      	movs	r3, #15
 80014d0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 16;
 80014d2:	2310      	movs	r3, #16
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 15;
 80014d6:	230f      	movs	r3, #15
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80014da:	2310      	movs	r3, #16
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80014de:	2311      	movs	r3, #17
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014e2:	2300      	movs	r3, #0
 80014e4:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 4;
 80014e6:	2304      	movs	r3, #4
 80014e8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80014ea:	230f      	movs	r3, #15
 80014ec:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80014ee:	2309      	movs	r3, #9
 80014f0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80014f6:	2310      	movs	r3, #16
 80014f8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80014fa:	2311      	movs	r3, #17
 80014fc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8001502:	463a      	mov	r2, r7
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	@ (8001524 <MX_FSMC_Init+0xec>)
 800150c:	f002 fd1a 	bl	8003f44 <HAL_SRAM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001516:	f000 fb4b 	bl	8001bb0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800151a:	bf00      	nop
 800151c:	3738      	adds	r7, #56	@ 0x38
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200002fc 	.word	0x200002fc
 8001528:	a0000104 	.word	0xa0000104

0800152c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001540:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <HAL_FSMC_MspInit+0xc8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d151      	bne.n	80015ec <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001548:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <HAL_FSMC_MspInit+0xc8>)
 800154a:	2201      	movs	r2, #1
 800154c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b29      	ldr	r3, [pc, #164]	@ (80015f8 <HAL_FSMC_MspInit+0xcc>)
 8001554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001556:	4a28      	ldr	r2, [pc, #160]	@ (80015f8 <HAL_FSMC_MspInit+0xcc>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6393      	str	r3, [r2, #56]	@ 0x38
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <HAL_FSMC_MspInit+0xcc>)
 8001560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800156a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800157c:	230c      	movs	r3, #12
 800157e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	4619      	mov	r1, r3
 8001584:	481d      	ldr	r0, [pc, #116]	@ (80015fc <HAL_FSMC_MspInit+0xd0>)
 8001586:	f000 ff4b 	bl	8002420 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800158a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800158e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800159c:	230c      	movs	r3, #12
 800159e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4816      	ldr	r0, [pc, #88]	@ (8001600 <HAL_FSMC_MspInit+0xd4>)
 80015a6:	f000 ff3b 	bl	8002420 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80015aa:	f24c 7333 	movw	r3, #50995	@ 0xc733
 80015ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015bc:	230c      	movs	r3, #12
 80015be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	480f      	ldr	r0, [pc, #60]	@ (8001604 <HAL_FSMC_MspInit+0xd8>)
 80015c6:	f000 ff2b 	bl	8002420 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015dc:	230c      	movs	r3, #12
 80015de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4808      	ldr	r0, [pc, #32]	@ (8001608 <HAL_FSMC_MspInit+0xdc>)
 80015e6:	f000 ff1b 	bl	8002420 <HAL_GPIO_Init>
 80015ea:	e000      	b.n	80015ee <HAL_FSMC_MspInit+0xc2>
    return;
 80015ec:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	2000034c 	.word	0x2000034c
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40021400 	.word	0x40021400
 8001600:	40021000 	.word	0x40021000
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021800 	.word	0x40021800

0800160c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001614:	f7ff ff8a 	bl	800152c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	@ 0x38
 8001624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
 800163a:	4b5c      	ldr	r3, [pc, #368]	@ (80017ac <MX_GPIO_Init+0x18c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a5b      	ldr	r2, [pc, #364]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001640:	f043 0304 	orr.w	r3, r3, #4
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b59      	ldr	r3, [pc, #356]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	623b      	str	r3, [r7, #32]
 8001650:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	4b55      	ldr	r3, [pc, #340]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a54      	ldr	r2, [pc, #336]	@ (80017ac <MX_GPIO_Init+0x18c>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b52      	ldr	r3, [pc, #328]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	4b4e      	ldr	r3, [pc, #312]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a4d      	ldr	r2, [pc, #308]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b4b      	ldr	r3, [pc, #300]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	4b47      	ldr	r3, [pc, #284]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a46      	ldr	r2, [pc, #280]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001694:	f043 0320 	orr.w	r3, r3, #32
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <MX_GPIO_Init+0x18c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <MX_GPIO_Init+0x18c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a3f      	ldr	r2, [pc, #252]	@ (80017ac <MX_GPIO_Init+0x18c>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <MX_GPIO_Init+0x18c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b39      	ldr	r3, [pc, #228]	@ (80017ac <MX_GPIO_Init+0x18c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a38      	ldr	r2, [pc, #224]	@ (80017ac <MX_GPIO_Init+0x18c>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b36      	ldr	r3, [pc, #216]	@ (80017ac <MX_GPIO_Init+0x18c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <MX_GPIO_Init+0x18c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a31      	ldr	r2, [pc, #196]	@ (80017ac <MX_GPIO_Init+0x18c>)
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <MX_GPIO_Init+0x18c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a2a      	ldr	r2, [pc, #168]	@ (80017ac <MX_GPIO_Init+0x18c>)
 8001704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b28      	ldr	r3, [pc, #160]	@ (80017ac <MX_GPIO_Init+0x18c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	2108      	movs	r1, #8
 800171a:	4825      	ldr	r0, [pc, #148]	@ (80017b0 <MX_GPIO_Init+0x190>)
 800171c:	f001 f81c 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|LCD_BL_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001726:	4823      	ldr	r0, [pc, #140]	@ (80017b4 <MX_GPIO_Init+0x194>)
 8001728:	f001 f816 	bl	8002758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KeyUp_Pin */
  GPIO_InitStruct.Pin = KeyUp_Pin;
 800172c:	2301      	movs	r3, #1
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001730:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001736:	2302      	movs	r3, #2
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(KeyUp_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173e:	4619      	mov	r1, r3
 8001740:	481b      	ldr	r0, [pc, #108]	@ (80017b0 <MX_GPIO_Init+0x190>)
 8001742:	f000 fe6d 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_RESET_Pin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin;
 8001746:	2308      	movs	r3, #8
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800175a:	4619      	mov	r1, r3
 800175c:	4814      	ldr	r0, [pc, #80]	@ (80017b0 <MX_GPIO_Init+0x190>)
 800175e:	f000 fe5f 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LCD_BL_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LCD_BL_Pin;
 8001762:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	480e      	ldr	r0, [pc, #56]	@ (80017b4 <MX_GPIO_Init+0x194>)
 800177c:	f000 fe50 	bl	8002420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4806      	ldr	r0, [pc, #24]	@ (80017b8 <MX_GPIO_Init+0x198>)
 800179e:	f000 fe3f 	bl	8002420 <HAL_GPIO_Init>

}
 80017a2:	bf00      	nop
 80017a4:	3738      	adds	r7, #56	@ 0x38
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020400 	.word	0x40020400
 80017b8:	40020800 	.word	0x40020800
 80017bc:	00000000 	.word	0x00000000

080017c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b08d      	sub	sp, #52	@ 0x34
 80017c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c6:	f000 fba9 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ca:	f000 f94d 	bl	8001a68 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80017ce:	f000 f9d3 	bl	8001b78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d2:	f7ff ff25 	bl	8001620 <MX_GPIO_Init>
  MX_FSMC_Init();
 80017d6:	f7ff fe2f 	bl	8001438 <MX_FSMC_Init>
  //MX_ETH_Init();
  //MX_UART4_Init();
  MX_DEBUG_USART_Init();
 80017da:	f005 ffff 	bl	80077dc <MX_DEBUG_USART_Init>
  lcd_init();
 80017de:	f005 fce7 	bl	80071b0 <lcd_init>
  //MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  if(AD7190_Init()==0)
 80017e2:	f7ff fdf9 	bl	80013d8 <AD7190_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d113      	bne.n	8001814 <main+0x54>
  {
   // printf("获取不到 AD7190 !\n");
   lcd_show_str(10, 0*20 + 10, 16, "AD7190 Init fail", RED);
 80017ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001970 <main+0x1b0>)
 80017f4:	2210      	movs	r2, #16
 80017f6:	210a      	movs	r1, #10
 80017f8:	200a      	movs	r0, #10
 80017fa:	f005 ff5f 	bl	80076bc <lcd_show_str>
    while(1)
    {
      HAL_Delay(1000);
 80017fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001802:	f000 fbfd 	bl	8002000 <HAL_Delay>
      if(AD7190_Init())
 8001806:	f7ff fde7 	bl	80013d8 <AD7190_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d100      	bne.n	8001812 <main+0x52>
      HAL_Delay(1000);
 8001810:	e7f5      	b.n	80017fe <main+0x3e>
        break;
 8001812:	bf00      	nop
    }
  }
  ad7190_unipolar_multichannel_conf();
 8001814:	f7ff fda0 	bl	8001358 <ad7190_unipolar_multichannel_conf>
  bias_data[0]=BIAS_VOLTAGE_IN1;
 8001818:	4b56      	ldr	r3, [pc, #344]	@ (8001974 <main+0x1b4>)
 800181a:	4a57      	ldr	r2, [pc, #348]	@ (8001978 <main+0x1b8>)
 800181c:	601a      	str	r2, [r3, #0]
  bias_data[1]=BIAS_VOLTAGE_IN2;
 800181e:	4b55      	ldr	r3, [pc, #340]	@ (8001974 <main+0x1b4>)
 8001820:	4a56      	ldr	r2, [pc, #344]	@ (800197c <main+0x1bc>)
 8001822:	605a      	str	r2, [r3, #4]
  bias_data[2]=BIAS_VOLTAGE_IN3;
 8001824:	4b53      	ldr	r3, [pc, #332]	@ (8001974 <main+0x1b4>)
 8001826:	4a56      	ldr	r2, [pc, #344]	@ (8001980 <main+0x1c0>)
 8001828:	609a      	str	r2, [r3, #8]
  bias_data[3]=BIAS_VOLTAGE_IN4;
 800182a:	4b52      	ldr	r3, [pc, #328]	@ (8001974 <main+0x1b4>)
 800182c:	4a55      	ldr	r2, [pc, #340]	@ (8001984 <main+0x1c4>)
 800182e:	60da      	str	r2, [r3, #12]
  flag=1;
 8001830:	4b55      	ldr	r3, [pc, #340]	@ (8001988 <main+0x1c8>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 2)
 8001836:	4b54      	ldr	r3, [pc, #336]	@ (8001988 <main+0x1c8>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	f040 8084 	bne.w	800194a <main+0x18a>
		  int32_t filtered_bias = AD7190_Filter(number, bias_data[number]);
		     char disp[20];
		     sprintf(disp, "IN%d. 0x%05X", number, filtered_bias);
		     lcd_show_str(10, (number + 1) * 20 + 10, 16, disp, RED);
#else
		if(number >= 0 && number < 4)
 8001842:	4b52      	ldr	r3, [pc, #328]	@ (800198c <main+0x1cc>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b25b      	sxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	db7b      	blt.n	8001944 <main+0x184>
 800184c:	4b4f      	ldr	r3, [pc, #316]	@ (800198c <main+0x1cc>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	2b03      	cmp	r3, #3
 8001854:	dc76      	bgt.n	8001944 <main+0x184>
			//int32_t raw = ad7190_data[number]>>4;
		    //filtered_data[number] = AD7190_Filter(number, raw);
			//voltage_data[number]=filtered_data[number];
			//voltage_data[number]=voltage_data[number]*REFERENCE_VOLTAGE/OPA_RES_R2*OPA_RES_R1/0xFFFFF;

		   voltage_data[number]=ad7190_data[number]>>4;
 8001856:	4b4d      	ldr	r3, [pc, #308]	@ (800198c <main+0x1cc>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b25b      	sxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4b4c      	ldr	r3, [pc, #304]	@ (8001990 <main+0x1d0>)
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	111b      	asrs	r3, r3, #4
 8001866:	4a49      	ldr	r2, [pc, #292]	@ (800198c <main+0x1cc>)
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	b252      	sxtb	r2, r2
 800186c:	4614      	mov	r4, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe58 	bl	8000524 <__aeabi_i2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4846      	ldr	r0, [pc, #280]	@ (8001994 <main+0x1d4>)
 800187a:	00e1      	lsls	r1, r4, #3
 800187c:	4401      	add	r1, r0
 800187e:	e9c1 2300 	strd	r2, r3, [r1]
		   voltage_data[number]=voltage_data[number]*REFERENCE_VOLTAGE/OPA_RES_R2*OPA_RES_R1/0xFFFFF;
 8001882:	4b42      	ldr	r3, [pc, #264]	@ (800198c <main+0x1cc>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	4a42      	ldr	r2, [pc, #264]	@ (8001994 <main+0x1d4>)
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001892:	a331      	add	r3, pc, #196	@ (adr r3, 8001958 <main+0x198>)
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	f7fe feae 	bl	80005f8 <__aeabi_dmul>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <main+0x1d8>)
 80018aa:	f7fe ffcf 	bl	800084c <__aeabi_ddiv>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	a32a      	add	r3, pc, #168	@ (adr r3, 8001960 <main+0x1a0>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fe9c 	bl	80005f8 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	4b30      	ldr	r3, [pc, #192]	@ (800198c <main+0x1cc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	461c      	mov	r4, r3
 80018d0:	a325      	add	r3, pc, #148	@ (adr r3, 8001968 <main+0x1a8>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe ffb9 	bl	800084c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	482d      	ldr	r0, [pc, #180]	@ (8001994 <main+0x1d4>)
 80018e0:	00e1      	lsls	r1, r4, #3
 80018e2:	4401      	add	r1, r0
 80018e4:	e9c1 2300 	strd	r2, r3, [r1]
		   //printf("IN%d. 0x%05X->%0.3fV\n",number,ad7190_data[number],voltage_data[number]/1000);

			char disp[40];
			sprintf(disp, "CH%d:%6.6fV", number+1, voltage_data[number]/1000.0);
 80018e8:	4b28      	ldr	r3, [pc, #160]	@ (800198c <main+0x1cc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	1c5c      	adds	r4, r3, #1
 80018f0:	4b26      	ldr	r3, [pc, #152]	@ (800198c <main+0x1cc>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	4a27      	ldr	r2, [pc, #156]	@ (8001994 <main+0x1d4>)
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b25      	ldr	r3, [pc, #148]	@ (800199c <main+0x1dc>)
 8001906:	f7fe ffa1 	bl	800084c <__aeabi_ddiv>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4638      	mov	r0, r7
 8001910:	e9cd 2300 	strd	r2, r3, [sp]
 8001914:	4622      	mov	r2, r4
 8001916:	4922      	ldr	r1, [pc, #136]	@ (80019a0 <main+0x1e0>)
 8001918:	f006 fd20 	bl	800835c <siprintf>
			lcd_show_str(10, (number + 1) * 20 + 10, 16, disp, RED);
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <main+0x1cc>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b25b      	sxtb	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	b29b      	uxth	r3, r3
 8001930:	330a      	adds	r3, #10
 8001932:	b299      	uxth	r1, r3
 8001934:	463b      	mov	r3, r7
 8001936:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	2210      	movs	r2, #16
 800193e:	200a      	movs	r0, #10
 8001940:	f005 febc 	bl	80076bc <lcd_show_str>
		}
#endif
		flag = 1;
 8001944:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <main+0x1c8>)
 8001946:	2201      	movs	r2, #1
 8001948:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(10);
 800194a:	200a      	movs	r0, #10
 800194c:	f000 fb58 	bl	8002000 <HAL_Delay>
	  if(flag == 2)
 8001950:	e771      	b.n	8001836 <main+0x76>
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	00000000 	.word	0x00000000
 800195c:	40a9c200 	.word	0x40a9c200
 8001960:	00000000 	.word	0x00000000
 8001964:	40ba9000 	.word	0x40ba9000
 8001968:	00000000 	.word	0x00000000
 800196c:	412ffffe 	.word	0x412ffffe
 8001970:	0800a5f4 	.word	0x0800a5f4
 8001974:	20000360 	.word	0x20000360
 8001978:	000fab3e 	.word	0x000fab3e
 800197c:	000f9dca 	.word	0x000f9dca
 8001980:	000fa8a4 	.word	0x000fa8a4
 8001984:	000fa9eb 	.word	0x000fa9eb
 8001988:	20000390 	.word	0x20000390
 800198c:	20000391 	.word	0x20000391
 8001990:	20000350 	.word	0x20000350
 8001994:	20000370 	.word	0x20000370
 8001998:	409f4000 	.word	0x409f4000
 800199c:	408f4000 	.word	0x408f4000
 80019a0:	0800a608 	.word	0x0800a608

080019a4 <HAL_SYSTICK_Callback>:
  }
  /* USER CODE END 3 */
}

void HAL_SYSTICK_Callback(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  uint8_t sample[4];
  int8_t temp;

  if((flag)&&(AD7190_RDY_STATE()==0))
 80019aa:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <HAL_SYSTICK_Callback+0xa8>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d046      	beq.n	8001a42 <HAL_SYSTICK_Callback+0x9e>
 80019b4:	4b26      	ldr	r3, [pc, #152]	@ (8001a50 <HAL_SYSTICK_Callback+0xac>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d140      	bne.n	8001a42 <HAL_SYSTICK_Callback+0x9e>
  {
    HAL_SPI_Receive(&hspi_AD7190,sample,4,0xFF);
 80019c0:	4639      	mov	r1, r7
 80019c2:	23ff      	movs	r3, #255	@ 0xff
 80019c4:	2204      	movs	r2, #4
 80019c6:	4823      	ldr	r0, [pc, #140]	@ (8001a54 <HAL_SYSTICK_Callback+0xb0>)
 80019c8:	f001 feb7 	bl	800373a <HAL_SPI_Receive>
    if((sample[3]&0x80)==0)
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db36      	blt.n	8001a42 <HAL_SYSTICK_Callback+0x9e>
    {
      temp=(sample[3]&0x07)-4;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	3b04      	subs	r3, #4
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	71fb      	strb	r3, [r7, #7]
      if(temp>=0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db19      	blt.n	8001a1e <HAL_SYSTICK_Callback+0x7a>
      {
#if ZERO_MODE==1
        bias_data[temp]=((sample[0]<<16)|(sample[1]<<8)|sample[2]);
#else
        ad7190_data[temp]=((sample[0]<<16) | (sample[1]<<8) | sample[2])-bias_data[temp];
 80019ea:	783b      	ldrb	r3, [r7, #0]
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	787b      	ldrb	r3, [r7, #1]
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	4313      	orrs	r3, r2
 80019f4:	78ba      	ldrb	r2, [r7, #2]
 80019f6:	ea43 0102 	orr.w	r1, r3, r2
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	4a16      	ldr	r2, [pc, #88]	@ (8001a58 <HAL_SYSTICK_Callback+0xb4>)
 8001a00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	1a8a      	subs	r2, r1, r2
 8001a0a:	4914      	ldr	r1, [pc, #80]	@ (8001a5c <HAL_SYSTICK_Callback+0xb8>)
 8001a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
        number=temp;
 8001a10:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <HAL_SYSTICK_Callback+0xbc>)
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	7013      	strb	r3, [r2, #0]
        flag=2;
 8001a16:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <HAL_SYSTICK_Callback+0xa8>)
 8001a18:	2202      	movs	r2, #2
 8001a1a:	701a      	strb	r2, [r3, #0]
          printf("失败！！！\n");
        }
      }
    }
  }
}
 8001a1c:	e011      	b.n	8001a42 <HAL_SYSTICK_Callback+0x9e>
        flag++;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_SYSTICK_Callback+0xa8>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <HAL_SYSTICK_Callback+0xa8>)
 8001a2a:	701a      	strb	r2, [r3, #0]
        if(flag>=10)
 8001a2c:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <HAL_SYSTICK_Callback+0xa8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b09      	cmp	r3, #9
 8001a34:	d905      	bls.n	8001a42 <HAL_SYSTICK_Callback+0x9e>
          flag=0;
 8001a36:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_SYSTICK_Callback+0xa8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
          printf("失败！！！\n");
 8001a3c:	4809      	ldr	r0, [pc, #36]	@ (8001a64 <HAL_SYSTICK_Callback+0xc0>)
 8001a3e:	f006 fc85 	bl	800834c <puts>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000390 	.word	0x20000390
 8001a50:	40020400 	.word	0x40020400
 8001a54:	200001f4 	.word	0x200001f4
 8001a58:	20000360 	.word	0x20000360
 8001a5c:	20000350 	.word	0x20000350
 8001a60:	20000391 	.word	0x20000391
 8001a64:	0800a614 	.word	0x0800a614

08001a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b094      	sub	sp, #80	@ 0x50
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	2230      	movs	r2, #48	@ 0x30
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f006 fd6a 	bl	8008550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	4b36      	ldr	r3, [pc, #216]	@ (8001b6c <SystemClock_Config+0x104>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	4a35      	ldr	r2, [pc, #212]	@ (8001b6c <SystemClock_Config+0x104>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9c:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <SystemClock_Config+0x104>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	4b30      	ldr	r3, [pc, #192]	@ (8001b70 <SystemClock_Config+0x108>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	@ (8001b70 <SystemClock_Config+0x108>)
 8001ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <SystemClock_Config+0x108>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ad2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001adc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ae6:	2307      	movs	r3, #7
 8001ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fe4c 	bl	800278c <HAL_RCC_OscConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001afa:	f000 f859 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001afe:	230f      	movs	r3, #15
 8001b00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b02:	2302      	movs	r3, #2
 8001b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b0a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2105      	movs	r1, #5
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 f8ad 	bl	8002c7c <HAL_RCC_ClockConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b28:	f000 f842 	bl	8001bb0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLI2SCLK, RCC_MCODIV_2);
 8001b2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b30:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b34:	2001      	movs	r0, #1
 8001b36:	f001 f987 	bl	8002e48 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001b3a:	f001 f9ed 	bl	8002f18 <HAL_RCC_EnableCSS>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/100);
 8001b3e:	f001 fafd 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a0b      	ldr	r2, [pc, #44]	@ (8001b74 <SystemClock_Config+0x10c>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fb54 	bl	80021fa <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b52:	2004      	movs	r0, #4
 8001b54:	f000 fb5e 	bl	8002214 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b60:	f000 fb2f 	bl	80021c2 <HAL_NVIC_SetPriority>
}
 8001b64:	bf00      	nop
 8001b66:	3750      	adds	r7, #80	@ 0x50
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40007000 	.word	0x40007000
 8001b74:	51eb851f 	.word	0x51eb851f

08001b78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001b8e:	23c8      	movs	r3, #200	@ 0xc8
 8001b90:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b92:	2302      	movs	r3, #2
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 fb1f 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8001ba4:	f000 f804 	bl	8001bb0 <Error_Handler>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <Error_Handler+0x8>

08001bbc <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <HAL_SPI_MspInit+0x84>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d12b      	bne.n	8001c36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001be8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a10      	ldr	r2, [pc, #64]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_SPI_MspInit+0x88>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c16:	2338      	movs	r3, #56	@ 0x38
 8001c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c26:	2305      	movs	r3, #5
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <HAL_SPI_MspInit+0x8c>)
 8001c32:	f000 fbf5 	bl	8002420 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	@ 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40013000 	.word	0x40013000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020400 	.word	0x40020400

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ca0:	f001 fa80 	bl	80031a4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <NMI_Handler+0x8>

08001ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
	  HAL_IncTick();
 8001cf6:	f000 f963 	bl	8001fc0 <HAL_IncTick>
	  HAL_SYSTICK_IRQHandler();
 8001cfa:	f000 faa7 	bl	800224c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d08:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <ETH_IRQHandler+0x10>)
 8001d0a:	f000 faa5 	bl	8002258 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000024c 	.word	0x2000024c

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d32:	f006 fc5f 	bl	80085f4 <__errno>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2216      	movs	r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe7 	bl	8001d28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5a:	bf00      	nop
 8001d5c:	e7fd      	b.n	8001d5a <_exit+0x12>

08001d5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b086      	sub	sp, #24
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e00a      	b.n	8001d86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d70:	f3af 8000 	nop.w
 8001d74:	4601      	mov	r1, r0
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	60ba      	str	r2, [r7, #8]
 8001d7c:	b2ca      	uxtb	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbf0      	blt.n	8001d70 <_read+0x12>
  }

  return len;
 8001d8e:	687b      	ldr	r3, [r7, #4]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e009      	b.n	8001dbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	60ba      	str	r2, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	dbf1      	blt.n	8001daa <_write+0x12>
  }
  return len;
 8001dc6:	687b      	ldr	r3, [r7, #4]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_close>:

int _close(int file)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <_isatty>:

int _isatty(int file)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	@ (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f006 fbc4 	bl	80085f4 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	@ (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20020000 	.word	0x20020000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	20000394 	.word	0x20000394
 8001ea0:	20000590 	.word	0x20000590

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ecc:	f7ff ffea 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480c      	ldr	r0, [pc, #48]	@ (8001f04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ed2:	490d      	ldr	r1, [pc, #52]	@ (8001f08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef6:	f006 fb83 	bl	8008600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efa:	f7ff fc61 	bl	80017c0 <main>
  bx  lr    
 8001efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f08:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f0c:	0800d944 	.word	0x0800d944
  ldr r2, =_sbss
 8001f10:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f14:	20000590 	.word	0x20000590

08001f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f931 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fe7c 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f93b 	bl	80021fa <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 f911 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	@ (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	20000398 	.word	0x20000398

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000398 	.word	0x20000398

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008

08002048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002058:	4b0c      	ldr	r3, [pc, #48]	@ (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002064:	4013      	ands	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207a:	4a04      	ldr	r2, [pc, #16]	@ (800208c <__NVIC_SetPriorityGrouping+0x44>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	60d3      	str	r3, [r2, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	@ (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	@ (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	@ 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff47 	bl	8002048 <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff5c 	bl	8002090 <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff8e 	bl	8002100 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5d 	bl	80020ac <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ffb0 	bl	8002168 <SysTick_Config>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d106      	bne.n	8002230 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002222:	4b09      	ldr	r3, [pc, #36]	@ (8002248 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a08      	ldr	r2, [pc, #32]	@ (8002248 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800222e:	e005      	b.n	800223c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002236:	f023 0304 	bic.w	r3, r3, #4
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002250:	f7ff fba8 	bl	80019a4 <HAL_SYSTICK_Callback>
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002266:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002280:	4b4b      	ldr	r3, [pc, #300]	@ (80023b0 <HAL_ETH_IRQHandler+0x158>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00e      	beq.n	80022ae <HAL_ETH_IRQHandler+0x56>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b43      	ldr	r3, [pc, #268]	@ (80023b4 <HAL_ETH_IRQHandler+0x15c>)
 80022a6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f891 	bl	80023d0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00f      	beq.n	80022d8 <HAL_ETH_IRQHandler+0x80>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ca:	461a      	mov	r2, r3
 80022cc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80022d0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f872 	bl	80023bc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d042      	beq.n	8002368 <HAL_ETH_IRQHandler+0x110>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03d      	beq.n	8002368 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f043 0208 	orr.w	r2, r3, #8
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d01a      	beq.n	800233c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	4b29      	ldr	r3, [pc, #164]	@ (80023b8 <HAL_ETH_IRQHandler+0x160>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800232c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002330:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	22e0      	movs	r2, #224	@ 0xe0
 8002336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800233a:	e012      	b.n	8002362 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002344:	695a      	ldr	r2, [r3, #20]
 8002346:	f248 6380 	movw	r3, #34432	@ 0x8680
 800234a:	4013      	ands	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800235a:	461a      	mov	r2, r3
 800235c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002360:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f83e 	bl	80023e4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00e      	beq.n	8002390 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002378:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f838 	bl	80023f8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800239a:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <HAL_ETH_IRQHandler+0x158>)
 800239c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023a0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f832 	bl	800240c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80023a8:	bf00      	nop
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40013c00 	.word	0x40013c00
 80023b4:	00010040 	.word	0x00010040
 80023b8:	007e2000 	.word	0x007e2000

080023bc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	@ 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e16b      	b.n	8002714 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800243c:	2201      	movs	r2, #1
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	f040 815a 	bne.w	800270e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d005      	beq.n	8002472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246e:	2b02      	cmp	r3, #2
 8002470:	d130      	bne.n	80024d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 0201 	and.w	r2, r3, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d017      	beq.n	8002510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2203      	movs	r2, #3
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d123      	bne.n	8002564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	08da      	lsrs	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3208      	adds	r2, #8
 8002524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	08da      	lsrs	r2, r3, #3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3208      	adds	r2, #8
 800255e:	69b9      	ldr	r1, [r7, #24]
 8002560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0203 	and.w	r2, r3, #3
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80b4 	beq.w	800270e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b60      	ldr	r3, [pc, #384]	@ (800272c <HAL_GPIO_Init+0x30c>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	4a5f      	ldr	r2, [pc, #380]	@ (800272c <HAL_GPIO_Init+0x30c>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b6:	4b5d      	ldr	r3, [pc, #372]	@ (800272c <HAL_GPIO_Init+0x30c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002730 <HAL_GPIO_Init+0x310>)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3302      	adds	r3, #2
 80025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	220f      	movs	r2, #15
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a52      	ldr	r2, [pc, #328]	@ (8002734 <HAL_GPIO_Init+0x314>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d02b      	beq.n	8002646 <HAL_GPIO_Init+0x226>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a51      	ldr	r2, [pc, #324]	@ (8002738 <HAL_GPIO_Init+0x318>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d025      	beq.n	8002642 <HAL_GPIO_Init+0x222>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a50      	ldr	r2, [pc, #320]	@ (800273c <HAL_GPIO_Init+0x31c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01f      	beq.n	800263e <HAL_GPIO_Init+0x21e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4f      	ldr	r2, [pc, #316]	@ (8002740 <HAL_GPIO_Init+0x320>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d019      	beq.n	800263a <HAL_GPIO_Init+0x21a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4e      	ldr	r2, [pc, #312]	@ (8002744 <HAL_GPIO_Init+0x324>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_GPIO_Init+0x216>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4d      	ldr	r2, [pc, #308]	@ (8002748 <HAL_GPIO_Init+0x328>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00d      	beq.n	8002632 <HAL_GPIO_Init+0x212>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4c      	ldr	r2, [pc, #304]	@ (800274c <HAL_GPIO_Init+0x32c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d007      	beq.n	800262e <HAL_GPIO_Init+0x20e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4b      	ldr	r2, [pc, #300]	@ (8002750 <HAL_GPIO_Init+0x330>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_GPIO_Init+0x20a>
 8002626:	2307      	movs	r3, #7
 8002628:	e00e      	b.n	8002648 <HAL_GPIO_Init+0x228>
 800262a:	2308      	movs	r3, #8
 800262c:	e00c      	b.n	8002648 <HAL_GPIO_Init+0x228>
 800262e:	2306      	movs	r3, #6
 8002630:	e00a      	b.n	8002648 <HAL_GPIO_Init+0x228>
 8002632:	2305      	movs	r3, #5
 8002634:	e008      	b.n	8002648 <HAL_GPIO_Init+0x228>
 8002636:	2304      	movs	r3, #4
 8002638:	e006      	b.n	8002648 <HAL_GPIO_Init+0x228>
 800263a:	2303      	movs	r3, #3
 800263c:	e004      	b.n	8002648 <HAL_GPIO_Init+0x228>
 800263e:	2302      	movs	r3, #2
 8002640:	e002      	b.n	8002648 <HAL_GPIO_Init+0x228>
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_GPIO_Init+0x228>
 8002646:	2300      	movs	r3, #0
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f002 0203 	and.w	r2, r2, #3
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	4093      	lsls	r3, r2
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002658:	4935      	ldr	r1, [pc, #212]	@ (8002730 <HAL_GPIO_Init+0x310>)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	089b      	lsrs	r3, r3, #2
 800265e:	3302      	adds	r3, #2
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002666:	4b3b      	ldr	r3, [pc, #236]	@ (8002754 <HAL_GPIO_Init+0x334>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800268a:	4a32      	ldr	r2, [pc, #200]	@ (8002754 <HAL_GPIO_Init+0x334>)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002690:	4b30      	ldr	r3, [pc, #192]	@ (8002754 <HAL_GPIO_Init+0x334>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b4:	4a27      	ldr	r2, [pc, #156]	@ (8002754 <HAL_GPIO_Init+0x334>)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ba:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <HAL_GPIO_Init+0x334>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026de:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <HAL_GPIO_Init+0x334>)
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002754 <HAL_GPIO_Init+0x334>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002708:	4a12      	ldr	r2, [pc, #72]	@ (8002754 <HAL_GPIO_Init+0x334>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b0f      	cmp	r3, #15
 8002718:	f67f ae90 	bls.w	800243c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3724      	adds	r7, #36	@ 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	40013800 	.word	0x40013800
 8002734:	40020000 	.word	0x40020000
 8002738:	40020400 	.word	0x40020400
 800273c:	40020800 	.word	0x40020800
 8002740:	40020c00 	.word	0x40020c00
 8002744:	40021000 	.word	0x40021000
 8002748:	40021400 	.word	0x40021400
 800274c:	40021800 	.word	0x40021800
 8002750:	40021c00 	.word	0x40021c00
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
 8002764:	4613      	mov	r3, r2
 8002766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002768:	787b      	ldrb	r3, [r7, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276e:	887a      	ldrh	r2, [r7, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002774:	e003      	b.n	800277e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	619a      	str	r2, [r3, #24]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e267      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d075      	beq.n	8002896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027aa:	4b88      	ldr	r3, [pc, #544]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4b85      	ldr	r3, [pc, #532]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d112      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b82      	ldr	r3, [pc, #520]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4b7e      	ldr	r3, [pc, #504]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05b      	beq.n	8002894 <HAL_RCC_OscConfig+0x108>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d157      	bne.n	8002894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e242      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x74>
 80027f2:	4b76      	ldr	r3, [pc, #472]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a75      	ldr	r2, [pc, #468]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x98>
 800280a:	4b70      	ldr	r3, [pc, #448]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6f      	ldr	r2, [pc, #444]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b6d      	ldr	r3, [pc, #436]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a6c      	ldr	r2, [pc, #432]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002824:	4b69      	ldr	r3, [pc, #420]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a68      	ldr	r2, [pc, #416]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b66      	ldr	r3, [pc, #408]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a65      	ldr	r2, [pc, #404]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff fbd0 	bl	8001fe8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7ff fbcc 	bl	8001fe8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	@ 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e207      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b5b      	ldr	r3, [pc, #364]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xc0>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7ff fbbc 	bl	8001fe8 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7ff fbb8 	bl	8001fe8 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	@ 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1f3      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b51      	ldr	r3, [pc, #324]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0xe8>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028a2:	4b4a      	ldr	r3, [pc, #296]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b47      	ldr	r3, [pc, #284]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b44      	ldr	r3, [pc, #272]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b41      	ldr	r3, [pc, #260]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1c7      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b3b      	ldr	r3, [pc, #236]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4937      	ldr	r1, [pc, #220]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b34      	ldr	r3, [pc, #208]	@ (80029d0 <HAL_RCC_OscConfig+0x244>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7ff fb71 	bl	8001fe8 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800290a:	f7ff fb6d 	bl	8001fe8 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1a8      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b2b      	ldr	r3, [pc, #172]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b28      	ldr	r3, [pc, #160]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4925      	ldr	r1, [pc, #148]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b24      	ldr	r3, [pc, #144]	@ (80029d0 <HAL_RCC_OscConfig+0x244>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff fb50 	bl	8001fe8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294c:	f7ff fb4c 	bl	8001fe8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e187      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d036      	beq.n	80029e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b15      	ldr	r3, [pc, #84]	@ (80029d4 <HAL_RCC_OscConfig+0x248>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7ff fb30 	bl	8001fe8 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800298c:	f7ff fb2c 	bl	8001fe8 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e167      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <HAL_RCC_OscConfig+0x240>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x200>
 80029aa:	e01b      	b.n	80029e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_RCC_OscConfig+0x248>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7ff fb19 	bl	8001fe8 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	e00e      	b.n	80029d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ba:	f7ff fb15 	bl	8001fe8 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d907      	bls.n	80029d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e150      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	42470000 	.word	0x42470000
 80029d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	4b88      	ldr	r3, [pc, #544]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 80029da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ea      	bne.n	80029ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8097 	beq.w	8002b20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f6:	4b81      	ldr	r3, [pc, #516]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	4b7d      	ldr	r3, [pc, #500]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a12:	4b7a      	ldr	r3, [pc, #488]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b77      	ldr	r3, [pc, #476]	@ (8002c00 <HAL_RCC_OscConfig+0x474>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d118      	bne.n	8002a60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2e:	4b74      	ldr	r3, [pc, #464]	@ (8002c00 <HAL_RCC_OscConfig+0x474>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a73      	ldr	r2, [pc, #460]	@ (8002c00 <HAL_RCC_OscConfig+0x474>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a3a:	f7ff fad5 	bl	8001fe8 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a42:	f7ff fad1 	bl	8001fe8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e10c      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	4b6a      	ldr	r3, [pc, #424]	@ (8002c00 <HAL_RCC_OscConfig+0x474>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d106      	bne.n	8002a76 <HAL_RCC_OscConfig+0x2ea>
 8002a68:	4b64      	ldr	r3, [pc, #400]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6c:	4a63      	ldr	r2, [pc, #396]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a74:	e01c      	b.n	8002ab0 <HAL_RCC_OscConfig+0x324>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x30c>
 8002a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a82:	4a5e      	ldr	r2, [pc, #376]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x324>
 8002a98:	4b58      	ldr	r3, [pc, #352]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	4a57      	ldr	r2, [pc, #348]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa4:	4b55      	ldr	r3, [pc, #340]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	4a54      	ldr	r2, [pc, #336]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002aaa:	f023 0304 	bic.w	r3, r3, #4
 8002aae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7ff fa96 	bl	8001fe8 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7ff fa92 	bl	8001fe8 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0cb      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	4b49      	ldr	r3, [pc, #292]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ee      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x334>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae4:	f7ff fa80 	bl	8001fe8 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7ff fa7c 	bl	8001fe8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0b5      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b02:	4b3e      	ldr	r3, [pc, #248]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ee      	bne.n	8002aec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d105      	bne.n	8002b20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b14:	4b39      	ldr	r3, [pc, #228]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	4a38      	ldr	r2, [pc, #224]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80a1 	beq.w	8002c6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b2a:	4b34      	ldr	r3, [pc, #208]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d05c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d141      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b31      	ldr	r3, [pc, #196]	@ (8002c04 <HAL_RCC_OscConfig+0x478>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff fa50 	bl	8001fe8 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7ff fa4c 	bl	8001fe8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e087      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b27      	ldr	r3, [pc, #156]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69da      	ldr	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	019b      	lsls	r3, r3, #6
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	085b      	lsrs	r3, r3, #1
 8002b82:	3b01      	subs	r3, #1
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	491b      	ldr	r1, [pc, #108]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b94:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_RCC_OscConfig+0x478>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7ff fa25 	bl	8001fe8 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7ff fa21 	bl	8001fe8 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e05c      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb4:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x416>
 8002bc0:	e054      	b.n	8002c6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <HAL_RCC_OscConfig+0x478>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7ff fa0e 	bl	8001fe8 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7ff fa0a 	bl	8001fe8 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e045      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_RCC_OscConfig+0x470>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x444>
 8002bee:	e03d      	b.n	8002c6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d107      	bne.n	8002c08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e038      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40007000 	.word	0x40007000
 8002c04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d028      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d121      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d11a      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d111      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0cc      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b68      	ldr	r3, [pc, #416]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d90c      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b65      	ldr	r3, [pc, #404]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b63      	ldr	r3, [pc, #396]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0b8      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd0:	4b59      	ldr	r3, [pc, #356]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a58      	ldr	r2, [pc, #352]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce8:	4b53      	ldr	r3, [pc, #332]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a52      	ldr	r2, [pc, #328]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b50      	ldr	r3, [pc, #320]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	494d      	ldr	r1, [pc, #308]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d044      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e067      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b37      	ldr	r3, [pc, #220]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4934      	ldr	r1, [pc, #208]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7ff f93c 	bl	8001fe8 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7ff f938 	bl	8001fe8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e04f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b25      	ldr	r3, [pc, #148]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d20c      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b22      	ldr	r3, [pc, #136]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b20      	ldr	r3, [pc, #128]	@ (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e032      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4916      	ldr	r1, [pc, #88]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dee:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	490e      	ldr	r1, [pc, #56]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e02:	f000 f895 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	490a      	ldr	r1, [pc, #40]	@ (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	5ccb      	ldrb	r3, [r1, r3]
 8002e16:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1a:	4a09      	ldr	r2, [pc, #36]	@ (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f89c 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	0800a624 	.word	0x0800a624
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08c      	sub	sp, #48	@ 0x30
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d129      	bne.n	8002eae <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	4a2a      	ldr	r2, [pc, #168]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6a:	4b28      	ldr	r3, [pc, #160]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002e76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	2303      	movs	r3, #3
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002e8c:	f107 031c 	add.w	r3, r7, #28
 8002e90:	4619      	mov	r1, r3
 8002e92:	481f      	ldr	r0, [pc, #124]	@ (8002f10 <HAL_RCC_MCOConfig+0xc8>)
 8002e94:	f7ff fac4 	bl	8002420 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002e98:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	4919      	ldr	r1, [pc, #100]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002eac:	e029      	b.n	8002f02 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	4b16      	ldr	r3, [pc, #88]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4a15      	ldr	r2, [pc, #84]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4b13      	ldr	r3, [pc, #76]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002eca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	480b      	ldr	r0, [pc, #44]	@ (8002f14 <HAL_RCC_MCOConfig+0xcc>)
 8002ee8:	f7ff fa9a 	bl	8002420 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002eec:	4b07      	ldr	r3, [pc, #28]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	00d9      	lsls	r1, r3, #3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	430b      	orrs	r3, r1
 8002efc:	4903      	ldr	r1, [pc, #12]	@ (8002f0c <HAL_RCC_MCOConfig+0xc4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
}
 8002f02:	bf00      	nop
 8002f04:	3730      	adds	r7, #48	@ 0x30
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020000 	.word	0x40020000
 8002f14:	40020800 	.word	0x40020800

08002f18 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002f1c:	4b03      	ldr	r3, [pc, #12]	@ (8002f2c <HAL_RCC_EnableCSS+0x14>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	4247004c 	.word	0x4247004c

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f34:	b094      	sub	sp, #80	@ 0x50
 8002f36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f48:	4b79      	ldr	r3, [pc, #484]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d00d      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0x40>
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	f200 80e1 	bhi.w	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f62:	e0db      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b73      	ldr	r3, [pc, #460]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f68:	e0db      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6a:	4b73      	ldr	r3, [pc, #460]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f6e:	e0d8      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f70:	4b6f      	ldr	r3, [pc, #444]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f86:	4b6a      	ldr	r3, [pc, #424]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	099b      	lsrs	r3, r3, #6
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	f04f 0000 	mov.w	r0, #0
 8002faa:	f04f 0100 	mov.w	r1, #0
 8002fae:	0159      	lsls	r1, r3, #5
 8002fb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb4:	0150      	lsls	r0, r2, #5
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4621      	mov	r1, r4
 8002fbc:	1a51      	subs	r1, r2, r1
 8002fbe:	6139      	str	r1, [r7, #16]
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	018b      	lsls	r3, r1, #6
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fde:	4651      	mov	r1, sl
 8002fe0:	018a      	lsls	r2, r1, #6
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fe8:	4659      	mov	r1, fp
 8002fea:	eb63 0901 	sbc.w	r9, r3, r1
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ffe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003002:	4690      	mov	r8, r2
 8003004:	4699      	mov	r9, r3
 8003006:	4623      	mov	r3, r4
 8003008:	eb18 0303 	adds.w	r3, r8, r3
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	462b      	mov	r3, r5
 8003010:	eb49 0303 	adc.w	r3, r9, r3
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003022:	4629      	mov	r1, r5
 8003024:	024b      	lsls	r3, r1, #9
 8003026:	4621      	mov	r1, r4
 8003028:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800302c:	4621      	mov	r1, r4
 800302e:	024a      	lsls	r2, r1, #9
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003036:	2200      	movs	r2, #0
 8003038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800303a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800303c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003040:	f7fd fdd2 	bl	8000be8 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4613      	mov	r3, r2
 800304a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800304c:	e058      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	2200      	movs	r2, #0
 8003056:	4618      	mov	r0, r3
 8003058:	4611      	mov	r1, r2
 800305a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	2300      	movs	r3, #0
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
 8003064:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003068:	4642      	mov	r2, r8
 800306a:	464b      	mov	r3, r9
 800306c:	f04f 0000 	mov.w	r0, #0
 8003070:	f04f 0100 	mov.w	r1, #0
 8003074:	0159      	lsls	r1, r3, #5
 8003076:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307a:	0150      	lsls	r0, r2, #5
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4641      	mov	r1, r8
 8003082:	ebb2 0a01 	subs.w	sl, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb63 0b01 	sbc.w	fp, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003098:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800309c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a0:	ebb2 040a 	subs.w	r4, r2, sl
 80030a4:	eb63 050b 	sbc.w	r5, r3, fp
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	00eb      	lsls	r3, r5, #3
 80030b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b6:	00e2      	lsls	r2, r4, #3
 80030b8:	4614      	mov	r4, r2
 80030ba:	461d      	mov	r5, r3
 80030bc:	4643      	mov	r3, r8
 80030be:	18e3      	adds	r3, r4, r3
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	464b      	mov	r3, r9
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d6:	4629      	mov	r1, r5
 80030d8:	028b      	lsls	r3, r1, #10
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e0:	4621      	mov	r1, r4
 80030e2:	028a      	lsls	r2, r1, #10
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ea:	2200      	movs	r2, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	61fa      	str	r2, [r7, #28]
 80030f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f4:	f7fd fd78 	bl	8000be8 <__aeabi_uldivmod>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4613      	mov	r3, r2
 80030fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x200>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	3301      	adds	r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003110:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003114:	fbb2 f3f3 	udiv	r3, r2, r3
 8003118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800311a:	e002      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800311c:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x204>)
 800311e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003124:	4618      	mov	r0, r3
 8003126:	3750      	adds	r7, #80	@ 0x50
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b03      	ldr	r3, [pc, #12]	@ (8003150 <HAL_RCC_GetHCLKFreq+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000000 	.word	0x20000000

08003154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003158:	f7ff fff0 	bl	800313c <HAL_RCC_GetHCLKFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	0a9b      	lsrs	r3, r3, #10
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	4903      	ldr	r1, [pc, #12]	@ (8003178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	0800a634 	.word	0x0800a634

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003180:	f7ff ffdc 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0b5b      	lsrs	r3, r3, #13
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4903      	ldr	r1, [pc, #12]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	0800a634 	.word	0x0800a634

080031a4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80031a8:	4b06      	ldr	r3, [pc, #24]	@ (80031c4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b0:	2b80      	cmp	r3, #128	@ 0x80
 80031b2:	d104      	bne.n	80031be <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80031b4:	f000 f80a 	bl	80031cc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80031b8:	4b03      	ldr	r3, [pc, #12]	@ (80031c8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	701a      	strb	r2, [r3, #0]
  }
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	4002380e 	.word	0x4002380e

080031cc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003200:	2b00      	cmp	r3, #0
 8003202:	d035      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003204:	4b62      	ldr	r3, [pc, #392]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800320a:	f7fe feed 	bl	8001fe8 <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003210:	e008      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003212:	f7fe fee9 	bl	8001fe8 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0b0      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003224:	4b5b      	ldr	r3, [pc, #364]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	019a      	lsls	r2, r3, #6
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	071b      	lsls	r3, r3, #28
 800323c:	4955      	ldr	r1, [pc, #340]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003244:	4b52      	ldr	r3, [pc, #328]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800324a:	f7fe fecd 	bl	8001fe8 <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003252:	f7fe fec9 	bl	8001fe8 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e090      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003264:	4b4b      	ldr	r3, [pc, #300]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 8083 	beq.w	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	4b44      	ldr	r3, [pc, #272]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	4a43      	ldr	r2, [pc, #268]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	@ 0x40
 800328e:	4b41      	ldr	r3, [pc, #260]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800329a:	4b3f      	ldr	r3, [pc, #252]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a3e      	ldr	r2, [pc, #248]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032a6:	f7fe fe9f 	bl	8001fe8 <HAL_GetTick>
 80032aa:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7fe fe9b 	bl	8001fe8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e062      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80032c0:	4b35      	ldr	r3, [pc, #212]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032cc:	4b31      	ldr	r3, [pc, #196]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d02f      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d028      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032f4:	4b29      	ldr	r3, [pc, #164]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032fa:	4b28      	ldr	r3, [pc, #160]	@ (800339c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003300:	4a24      	ldr	r2, [pc, #144]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003306:	4b23      	ldr	r3, [pc, #140]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d114      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003312:	f7fe fe69 	bl	8001fe8 <HAL_GetTick>
 8003316:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe fe65 	bl	8001fe8 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e02a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	4b18      	ldr	r3, [pc, #96]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ee      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003344:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003348:	d10d      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800334a:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800335a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800335e:	490d      	ldr	r1, [pc, #52]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003360:	4313      	orrs	r3, r2
 8003362:	608b      	str	r3, [r1, #8]
 8003364:	e005      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	4a0a      	ldr	r2, [pc, #40]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800336c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003370:	6093      	str	r3, [r2, #8]
 8003372:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003374:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337e:	4905      	ldr	r1, [pc, #20]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	42470068 	.word	0x42470068
 8003394:	40023800 	.word	0x40023800
 8003398:	40007000 	.word	0x40007000
 800339c:	42470e40 	.word	0x42470e40

080033a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e07b      	b.n	80034aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033c2:	d009      	beq.n	80033d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
 80033ca:	e005      	b.n	80033d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fbe2 	bl	8001bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800340e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345c:	ea42 0103 	orr.w	r1, r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	0c1b      	lsrs	r3, r3, #16
 8003476:	f003 0104 	and.w	r1, r3, #4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	f003 0210 	and.w	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b088      	sub	sp, #32
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	603b      	str	r3, [r7, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034c2:	f7fe fd91 	bl	8001fe8 <HAL_GetTick>
 80034c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d001      	beq.n	80034dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
 80034da:	e12a      	b.n	8003732 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Transmit+0x36>
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e122      	b.n	8003732 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_SPI_Transmit+0x48>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e11b      	b.n	8003732 <HAL_SPI_Transmit+0x280>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2203      	movs	r2, #3
 8003506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	88fa      	ldrh	r2, [r7, #6]
 800351a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	88fa      	ldrh	r2, [r7, #6]
 8003520:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003548:	d10f      	bne.n	800356a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003558:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003568:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003574:	2b40      	cmp	r3, #64	@ 0x40
 8003576:	d007      	beq.n	8003588 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003586:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003590:	d152      	bne.n	8003638 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_Transmit+0xee>
 800359a:	8b7b      	ldrh	r3, [r7, #26]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d145      	bne.n	800362c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a4:	881a      	ldrh	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b0:	1c9a      	adds	r2, r3, #2
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035c4:	e032      	b.n	800362c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d112      	bne.n	80035fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035f8:	e018      	b.n	800362c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035fa:	f7fe fcf5 	bl	8001fe8 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d803      	bhi.n	8003612 <HAL_SPI_Transmit+0x160>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003610:	d102      	bne.n	8003618 <HAL_SPI_Transmit+0x166>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e082      	b.n	8003732 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1c7      	bne.n	80035c6 <HAL_SPI_Transmit+0x114>
 8003636:	e053      	b.n	80036e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_SPI_Transmit+0x194>
 8003640:	8b7b      	ldrh	r3, [r7, #26]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d147      	bne.n	80036d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800366c:	e033      	b.n	80036d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d113      	bne.n	80036a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	7812      	ldrb	r2, [r2, #0]
 8003688:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036a2:	e018      	b.n	80036d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a4:	f7fe fca0 	bl	8001fe8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d803      	bhi.n	80036bc <HAL_SPI_Transmit+0x20a>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d102      	bne.n	80036c2 <HAL_SPI_Transmit+0x210>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e02d      	b.n	8003732 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1c6      	bne.n	800366e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	6839      	ldr	r1, [r7, #0]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fbd9 	bl	8003e9c <SPI_EndRxTxTransaction>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10a      	bne.n	8003714 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003730:	2300      	movs	r3, #0
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b088      	sub	sp, #32
 800373e:	af02      	add	r7, sp, #8
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d001      	beq.n	800375a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
 8003758:	e104      	b.n	8003964 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_SPI_Receive+0x2c>
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0fc      	b.n	8003964 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003772:	d112      	bne.n	800379a <HAL_SPI_Receive+0x60>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10e      	bne.n	800379a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2204      	movs	r2, #4
 8003780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003784:	88fa      	ldrh	r2, [r7, #6]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f8eb 	bl	800396c <HAL_SPI_TransmitReceive>
 8003796:	4603      	mov	r3, r0
 8003798:	e0e4      	b.n	8003964 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379a:	f7fe fc25 	bl	8001fe8 <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_SPI_Receive+0x74>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e0da      	b.n	8003964 <HAL_SPI_Receive+0x22a>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2204      	movs	r2, #4
 80037ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	88fa      	ldrh	r2, [r7, #6]
 80037ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	88fa      	ldrh	r2, [r7, #6]
 80037d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037fc:	d10f      	bne.n	800381e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800380c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800381c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003828:	2b40      	cmp	r3, #64	@ 0x40
 800382a:	d007      	beq.n	800383c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800383a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d170      	bne.n	8003926 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003844:	e035      	b.n	80038b2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d115      	bne.n	8003880 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f103 020c 	add.w	r2, r3, #12
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003860:	7812      	ldrb	r2, [r2, #0]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800387e:	e018      	b.n	80038b2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003880:	f7fe fbb2 	bl	8001fe8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d803      	bhi.n	8003898 <HAL_SPI_Receive+0x15e>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d102      	bne.n	800389e <HAL_SPI_Receive+0x164>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e058      	b.n	8003964 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1c4      	bne.n	8003846 <HAL_SPI_Receive+0x10c>
 80038bc:	e038      	b.n	8003930 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d113      	bne.n	80038f4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d6:	b292      	uxth	r2, r2
 80038d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038f2:	e018      	b.n	8003926 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f4:	f7fe fb78 	bl	8001fe8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d803      	bhi.n	800390c <HAL_SPI_Receive+0x1d2>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d102      	bne.n	8003912 <HAL_SPI_Receive+0x1d8>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e01e      	b.n	8003964 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1c6      	bne.n	80038be <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	6839      	ldr	r1, [r7, #0]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 fa4b 	bl	8003dd0 <SPI_EndRxTransaction>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003962:	2300      	movs	r3, #0
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	@ 0x28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800397a:	2301      	movs	r3, #1
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800397e:	f7fe fb33 	bl	8001fe8 <HAL_GetTick>
 8003982:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800398a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003992:	887b      	ldrh	r3, [r7, #2]
 8003994:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003996:	7ffb      	ldrb	r3, [r7, #31]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d00c      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0x4a>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039a2:	d106      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x46>
 80039ac:	7ffb      	ldrb	r3, [r7, #31]
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d001      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
 80039b4:	e17f      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x5c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0x5c>
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e174      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_SPI_TransmitReceive+0x6e>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e16d      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d003      	beq.n	80039f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2205      	movs	r2, #5
 80039f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	887a      	ldrh	r2, [r7, #2]
 8003a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	887a      	ldrh	r2, [r7, #2]
 8003a1e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a36:	2b40      	cmp	r3, #64	@ 0x40
 8003a38:	d007      	beq.n	8003a4a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a52:	d17e      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_SPI_TransmitReceive+0xf6>
 8003a5c:	8afb      	ldrh	r3, [r7, #22]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d16c      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	881a      	ldrh	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	1c9a      	adds	r2, r3, #2
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a86:	e059      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d11b      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x162>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d016      	beq.n	8003ace <HAL_SPI_TransmitReceive+0x162>
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d113      	bne.n	8003ace <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	881a      	ldrh	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab6:	1c9a      	adds	r2, r3, #2
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d119      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x1a4>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d014      	beq.n	8003b10 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	b292      	uxth	r2, r2
 8003af2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b10:	f7fe fa6a 	bl	8001fe8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d80d      	bhi.n	8003b3c <HAL_SPI_TransmitReceive+0x1d0>
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d009      	beq.n	8003b3c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0bc      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1a0      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x11c>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d19b      	bne.n	8003a88 <HAL_SPI_TransmitReceive+0x11c>
 8003b50:	e082      	b.n	8003c58 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_SPI_TransmitReceive+0x1f4>
 8003b5a:	8afb      	ldrh	r3, [r7, #22]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d171      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b86:	e05d      	b.n	8003c44 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d11c      	bne.n	8003bd0 <HAL_SPI_TransmitReceive+0x264>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d017      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x264>
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d114      	bne.n	8003bd0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	330c      	adds	r3, #12
 8003bb0:	7812      	ldrb	r2, [r2, #0]
 8003bb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d119      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x2a6>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d014      	beq.n	8003c12 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c12:	f7fe f9e9 	bl	8001fe8 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d803      	bhi.n	8003c2a <HAL_SPI_TransmitReceive+0x2be>
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d102      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x2c4>
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e038      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d19c      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x21c>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d197      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f91d 	bl	8003e9c <SPI_EndRxTxTransaction>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e01d      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3728      	adds	r7, #40	@ 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cd0:	f7fe f98a 	bl	8001fe8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ce0:	f7fe f982 	bl	8001fe8 <HAL_GetTick>
 8003ce4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ce6:	4b39      	ldr	r3, [pc, #228]	@ (8003dcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	015b      	lsls	r3, r3, #5
 8003cec:	0d1b      	lsrs	r3, r3, #20
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	fb02 f303 	mul.w	r3, r2, r3
 8003cf4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf6:	e055      	b.n	8003da4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d051      	beq.n	8003da4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d00:	f7fe f972 	bl	8001fe8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d902      	bls.n	8003d16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d13d      	bne.n	8003d92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d2e:	d111      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d38:	d004      	beq.n	8003d44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d42:	d107      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5c:	d10f      	bne.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e018      	b.n	8003dc4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e002      	b.n	8003da4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	4013      	ands	r3, r2
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	bf0c      	ite	eq
 8003db4:	2301      	moveq	r3, #1
 8003db6:	2300      	movne	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	461a      	mov	r2, r3
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d19a      	bne.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000000 	.word	0x20000000

08003dd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de4:	d111      	bne.n	8003e0a <SPI_EndRxTransaction+0x3a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dee:	d004      	beq.n	8003dfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df8:	d107      	bne.n	8003e0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e12:	d12a      	bne.n	8003e6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1c:	d012      	beq.n	8003e44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2180      	movs	r1, #128	@ 0x80
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff ff49 	bl	8003cc0 <SPI_WaitFlagStateUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d02d      	beq.n	8003e90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e026      	b.n	8003e92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff ff36 	bl	8003cc0 <SPI_WaitFlagStateUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01a      	beq.n	8003e90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e013      	b.n	8003e92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2101      	movs	r1, #1
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff ff23 	bl	8003cc0 <SPI_WaitFlagStateUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e000      	b.n	8003e92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7ff ff04 	bl	8003cc0 <SPI_WaitFlagStateUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e032      	b.n	8003f34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ece:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <SPI_EndRxTxTransaction+0xa0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f40 <SPI_EndRxTxTransaction+0xa4>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	0d5b      	lsrs	r3, r3, #21
 8003eda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eec:	d112      	bne.n	8003f14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	@ 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7ff fee1 	bl	8003cc0 <SPI_WaitFlagStateUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d016      	beq.n	8003f32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e00f      	b.n	8003f34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2a:	2b80      	cmp	r3, #128	@ 0x80
 8003f2c:	d0f2      	beq.n	8003f14 <SPI_EndRxTxTransaction+0x78>
 8003f2e:	e000      	b.n	8003f32 <SPI_EndRxTxTransaction+0x96>
        break;
 8003f30:	bf00      	nop
  }

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	165e9f81 	.word	0x165e9f81

08003f44 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e038      	b.n	8003fcc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7fd fb4c 	bl	800160c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f000 faec 	bl	800455c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	f000 fb4e 	bl	8004630 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6858      	ldr	r0, [r3, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	f000 fb73 	bl	800468c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	6892      	ldr	r2, [r2, #8]
 8003fae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6892      	ldr	r2, [r2, #8]
 8003fba:	f041 0101 	orr.w	r1, r1, #1
 8003fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e042      	b.n	800406c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f003 fbb2 	bl	8007764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	@ 0x24
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f82b 	bl	8004074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800402c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800403c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800404c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b0c0      	sub	sp, #256	@ 0x100
 800407a:	af00      	add	r7, sp, #0
 800407c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	68d9      	ldr	r1, [r3, #12]
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	ea40 0301 	orr.w	r3, r0, r1
 800409c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040cc:	f021 010c 	bic.w	r1, r1, #12
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040da:	430b      	orrs	r3, r1
 80040dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ee:	6999      	ldr	r1, [r3, #24]
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	ea40 0301 	orr.w	r3, r0, r1
 80040fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4b8f      	ldr	r3, [pc, #572]	@ (8004340 <UART_SetConfig+0x2cc>)
 8004104:	429a      	cmp	r2, r3
 8004106:	d005      	beq.n	8004114 <UART_SetConfig+0xa0>
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b8d      	ldr	r3, [pc, #564]	@ (8004344 <UART_SetConfig+0x2d0>)
 8004110:	429a      	cmp	r2, r3
 8004112:	d104      	bne.n	800411e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004114:	f7ff f832 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8004118:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800411c:	e003      	b.n	8004126 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800411e:	f7ff f819 	bl	8003154 <HAL_RCC_GetPCLK1Freq>
 8004122:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004130:	f040 810c 	bne.w	800434c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004138:	2200      	movs	r2, #0
 800413a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800413e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004142:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004146:	4622      	mov	r2, r4
 8004148:	462b      	mov	r3, r5
 800414a:	1891      	adds	r1, r2, r2
 800414c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800414e:	415b      	adcs	r3, r3
 8004150:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004152:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004156:	4621      	mov	r1, r4
 8004158:	eb12 0801 	adds.w	r8, r2, r1
 800415c:	4629      	mov	r1, r5
 800415e:	eb43 0901 	adc.w	r9, r3, r1
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800416e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004176:	4690      	mov	r8, r2
 8004178:	4699      	mov	r9, r3
 800417a:	4623      	mov	r3, r4
 800417c:	eb18 0303 	adds.w	r3, r8, r3
 8004180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004184:	462b      	mov	r3, r5
 8004186:	eb49 0303 	adc.w	r3, r9, r3
 800418a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800419a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800419e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041a2:	460b      	mov	r3, r1
 80041a4:	18db      	adds	r3, r3, r3
 80041a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80041a8:	4613      	mov	r3, r2
 80041aa:	eb42 0303 	adc.w	r3, r2, r3
 80041ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80041b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041b8:	f7fc fd16 	bl	8000be8 <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4b61      	ldr	r3, [pc, #388]	@ (8004348 <UART_SetConfig+0x2d4>)
 80041c2:	fba3 2302 	umull	r2, r3, r3, r2
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	011c      	lsls	r4, r3, #4
 80041ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ce:	2200      	movs	r2, #0
 80041d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	1891      	adds	r1, r2, r2
 80041e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041e4:	415b      	adcs	r3, r3
 80041e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041ec:	4641      	mov	r1, r8
 80041ee:	eb12 0a01 	adds.w	sl, r2, r1
 80041f2:	4649      	mov	r1, r9
 80041f4:	eb43 0b01 	adc.w	fp, r3, r1
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004204:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004208:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800420c:	4692      	mov	sl, r2
 800420e:	469b      	mov	fp, r3
 8004210:	4643      	mov	r3, r8
 8004212:	eb1a 0303 	adds.w	r3, sl, r3
 8004216:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800421a:	464b      	mov	r3, r9
 800421c:	eb4b 0303 	adc.w	r3, fp, r3
 8004220:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004230:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004234:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004238:	460b      	mov	r3, r1
 800423a:	18db      	adds	r3, r3, r3
 800423c:	643b      	str	r3, [r7, #64]	@ 0x40
 800423e:	4613      	mov	r3, r2
 8004240:	eb42 0303 	adc.w	r3, r2, r3
 8004244:	647b      	str	r3, [r7, #68]	@ 0x44
 8004246:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800424a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800424e:	f7fc fccb 	bl	8000be8 <__aeabi_uldivmod>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4611      	mov	r1, r2
 8004258:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <UART_SetConfig+0x2d4>)
 800425a:	fba3 2301 	umull	r2, r3, r3, r1
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2264      	movs	r2, #100	@ 0x64
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	1acb      	subs	r3, r1, r3
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800426e:	4b36      	ldr	r3, [pc, #216]	@ (8004348 <UART_SetConfig+0x2d4>)
 8004270:	fba3 2302 	umull	r2, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800427c:	441c      	add	r4, r3
 800427e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004288:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800428c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	1891      	adds	r1, r2, r2
 8004296:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004298:	415b      	adcs	r3, r3
 800429a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800429c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042a0:	4641      	mov	r1, r8
 80042a2:	1851      	adds	r1, r2, r1
 80042a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80042a6:	4649      	mov	r1, r9
 80042a8:	414b      	adcs	r3, r1
 80042aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042b8:	4659      	mov	r1, fp
 80042ba:	00cb      	lsls	r3, r1, #3
 80042bc:	4651      	mov	r1, sl
 80042be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042c2:	4651      	mov	r1, sl
 80042c4:	00ca      	lsls	r2, r1, #3
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	4642      	mov	r2, r8
 80042ce:	189b      	adds	r3, r3, r2
 80042d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042d4:	464b      	mov	r3, r9
 80042d6:	460a      	mov	r2, r1
 80042d8:	eb42 0303 	adc.w	r3, r2, r3
 80042dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042f4:	460b      	mov	r3, r1
 80042f6:	18db      	adds	r3, r3, r3
 80042f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042fa:	4613      	mov	r3, r2
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004302:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004306:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800430a:	f7fc fc6d 	bl	8000be8 <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <UART_SetConfig+0x2d4>)
 8004314:	fba3 1302 	umull	r1, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2164      	movs	r1, #100	@ 0x64
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	3332      	adds	r3, #50	@ 0x32
 8004326:	4a08      	ldr	r2, [pc, #32]	@ (8004348 <UART_SetConfig+0x2d4>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f003 0207 	and.w	r2, r3, #7
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4422      	add	r2, r4
 800433a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800433c:	e106      	b.n	800454c <UART_SetConfig+0x4d8>
 800433e:	bf00      	nop
 8004340:	40011000 	.word	0x40011000
 8004344:	40011400 	.word	0x40011400
 8004348:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800434c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004350:	2200      	movs	r2, #0
 8004352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004356:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800435a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800435e:	4642      	mov	r2, r8
 8004360:	464b      	mov	r3, r9
 8004362:	1891      	adds	r1, r2, r2
 8004364:	6239      	str	r1, [r7, #32]
 8004366:	415b      	adcs	r3, r3
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
 800436a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800436e:	4641      	mov	r1, r8
 8004370:	1854      	adds	r4, r2, r1
 8004372:	4649      	mov	r1, r9
 8004374:	eb43 0501 	adc.w	r5, r3, r1
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	00eb      	lsls	r3, r5, #3
 8004382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004386:	00e2      	lsls	r2, r4, #3
 8004388:	4614      	mov	r4, r2
 800438a:	461d      	mov	r5, r3
 800438c:	4643      	mov	r3, r8
 800438e:	18e3      	adds	r3, r4, r3
 8004390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004394:	464b      	mov	r3, r9
 8004396:	eb45 0303 	adc.w	r3, r5, r3
 800439a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043ba:	4629      	mov	r1, r5
 80043bc:	008b      	lsls	r3, r1, #2
 80043be:	4621      	mov	r1, r4
 80043c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043c4:	4621      	mov	r1, r4
 80043c6:	008a      	lsls	r2, r1, #2
 80043c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043cc:	f7fc fc0c 	bl	8000be8 <__aeabi_uldivmod>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4b60      	ldr	r3, [pc, #384]	@ (8004558 <UART_SetConfig+0x4e4>)
 80043d6:	fba3 2302 	umull	r2, r3, r3, r2
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	011c      	lsls	r4, r3, #4
 80043de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	1891      	adds	r1, r2, r2
 80043f6:	61b9      	str	r1, [r7, #24]
 80043f8:	415b      	adcs	r3, r3
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004400:	4641      	mov	r1, r8
 8004402:	1851      	adds	r1, r2, r1
 8004404:	6139      	str	r1, [r7, #16]
 8004406:	4649      	mov	r1, r9
 8004408:	414b      	adcs	r3, r1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004418:	4659      	mov	r1, fp
 800441a:	00cb      	lsls	r3, r1, #3
 800441c:	4651      	mov	r1, sl
 800441e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004422:	4651      	mov	r1, sl
 8004424:	00ca      	lsls	r2, r1, #3
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	4603      	mov	r3, r0
 800442c:	4642      	mov	r2, r8
 800442e:	189b      	adds	r3, r3, r2
 8004430:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004434:	464b      	mov	r3, r9
 8004436:	460a      	mov	r2, r1
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	67bb      	str	r3, [r7, #120]	@ 0x78
 800444a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004458:	4649      	mov	r1, r9
 800445a:	008b      	lsls	r3, r1, #2
 800445c:	4641      	mov	r1, r8
 800445e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004462:	4641      	mov	r1, r8
 8004464:	008a      	lsls	r2, r1, #2
 8004466:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800446a:	f7fc fbbd 	bl	8000be8 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4611      	mov	r1, r2
 8004474:	4b38      	ldr	r3, [pc, #224]	@ (8004558 <UART_SetConfig+0x4e4>)
 8004476:	fba3 2301 	umull	r2, r3, r3, r1
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2264      	movs	r2, #100	@ 0x64
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	1acb      	subs	r3, r1, r3
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	3332      	adds	r3, #50	@ 0x32
 8004488:	4a33      	ldr	r2, [pc, #204]	@ (8004558 <UART_SetConfig+0x4e4>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004494:	441c      	add	r4, r3
 8004496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449a:	2200      	movs	r2, #0
 800449c:	673b      	str	r3, [r7, #112]	@ 0x70
 800449e:	677a      	str	r2, [r7, #116]	@ 0x74
 80044a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	415b      	adcs	r3, r3
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044b4:	4641      	mov	r1, r8
 80044b6:	1851      	adds	r1, r2, r1
 80044b8:	6039      	str	r1, [r7, #0]
 80044ba:	4649      	mov	r1, r9
 80044bc:	414b      	adcs	r3, r1
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044cc:	4659      	mov	r1, fp
 80044ce:	00cb      	lsls	r3, r1, #3
 80044d0:	4651      	mov	r1, sl
 80044d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d6:	4651      	mov	r1, sl
 80044d8:	00ca      	lsls	r2, r1, #3
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	4642      	mov	r2, r8
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044e6:	464b      	mov	r3, r9
 80044e8:	460a      	mov	r2, r1
 80044ea:	eb42 0303 	adc.w	r3, r2, r3
 80044ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80044fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004508:	4649      	mov	r1, r9
 800450a:	008b      	lsls	r3, r1, #2
 800450c:	4641      	mov	r1, r8
 800450e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004512:	4641      	mov	r1, r8
 8004514:	008a      	lsls	r2, r1, #2
 8004516:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800451a:	f7fc fb65 	bl	8000be8 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <UART_SetConfig+0x4e4>)
 8004524:	fba3 1302 	umull	r1, r3, r3, r2
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	2164      	movs	r1, #100	@ 0x64
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	3332      	adds	r3, #50	@ 0x32
 8004536:	4a08      	ldr	r2, [pc, #32]	@ (8004558 <UART_SetConfig+0x4e4>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	f003 020f 	and.w	r2, r3, #15
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4422      	add	r2, r4
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004552:	46bd      	mov	sp, r7
 8004554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004558:	51eb851f 	.word	0x51eb851f

0800455c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6812      	ldr	r2, [r2, #0]
 8004574:	f023 0101 	bic.w	r1, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b08      	cmp	r3, #8
 8004584:	d102      	bne.n	800458c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004586:	2340      	movs	r3, #64	@ 0x40
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e001      	b.n	8004590 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800459c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80045a2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80045a8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80045ae:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80045b4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80045ba:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80045c0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80045c6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80045cc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80045ea:	4b10      	ldr	r3, [pc, #64]	@ (800462c <FSMC_NORSRAM_Init+0xd0>)
 80045ec:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045f4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80045fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	43db      	mvns	r3, r3
 800460c:	ea02 0103 	and.w	r1, r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4319      	orrs	r1, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	0008fb7f 	.word	0x0008fb7f

08004630 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8004646:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800464e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8004656:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	3b01      	subs	r3, #1
 800465e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8004660:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	3b02      	subs	r3, #2
 8004668:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 800466a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8004676:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046a0:	d11d      	bne.n	80046de <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80046aa:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	6811      	ldr	r1, [r2, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	6852      	ldr	r2, [r2, #4]
 80046b6:	0112      	lsls	r2, r2, #4
 80046b8:	4311      	orrs	r1, r2
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	6892      	ldr	r2, [r2, #8]
 80046be:	0212      	lsls	r2, r2, #8
 80046c0:	4311      	orrs	r1, r2
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	6992      	ldr	r2, [r2, #24]
 80046c6:	4311      	orrs	r1, r2
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	68d2      	ldr	r2, [r2, #12]
 80046cc:	0412      	lsls	r2, r2, #16
 80046ce:	430a      	orrs	r2, r1
 80046d0:	ea43 0102 	orr.w	r1, r3, r2
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80046dc:	e005      	b.n	80046ea <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80046e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	cff00000 	.word	0xcff00000

080046fc <lcd_ex_st7789_reginit>:
 * @brief       ST7789 寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_st7789_reginit(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8004700:	2011      	movs	r0, #17
 8004702:	f002 f9b1 	bl	8006a68 <lcd_wr_regno>

    HAL_Delay(120);
 8004706:	2078      	movs	r0, #120	@ 0x78
 8004708:	f7fd fc7a 	bl	8002000 <HAL_Delay>

    lcd_wr_regno(0x36);
 800470c:	2036      	movs	r0, #54	@ 0x36
 800470e:	f002 f9ab 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004712:	2000      	movs	r0, #0
 8004714:	f002 f994 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8004718:	203a      	movs	r0, #58	@ 0x3a
 800471a:	f002 f9a5 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x05);
 800471e:	2005      	movs	r0, #5
 8004720:	f002 f98e 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8004724:	20b2      	movs	r0, #178	@ 0xb2
 8004726:	f002 f99f 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 800472a:	200c      	movs	r0, #12
 800472c:	f002 f988 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8004730:	200c      	movs	r0, #12
 8004732:	f002 f985 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004736:	2000      	movs	r0, #0
 8004738:	f002 f982 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x33);
 800473c:	2033      	movs	r0, #51	@ 0x33
 800473e:	f002 f97f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x33);
 8004742:	2033      	movs	r0, #51	@ 0x33
 8004744:	f002 f97c 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8004748:	20b7      	movs	r0, #183	@ 0xb7
 800474a:	f002 f98d 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x35);
 800474e:	2035      	movs	r0, #53	@ 0x35
 8004750:	f002 f976 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 8004754:	20bb      	movs	r0, #187	@ 0xbb
 8004756:	f002 f987 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 800475a:	2032      	movs	r0, #50	@ 0x32
 800475c:	f002 f970 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8004760:	20c0      	movs	r0, #192	@ 0xc0
 8004762:	f002 f981 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8004766:	200c      	movs	r0, #12
 8004768:	f002 f96a 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 800476c:	20c2      	movs	r0, #194	@ 0xc2
 800476e:	f002 f97b 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8004772:	2001      	movs	r0, #1
 8004774:	f002 f964 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 8004778:	20c3      	movs	r0, #195	@ 0xc3
 800477a:	f002 f975 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 800477e:	2010      	movs	r0, #16
 8004780:	f002 f95e 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 8004784:	20c4      	movs	r0, #196	@ 0xc4
 8004786:	f002 f96f 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 800478a:	2020      	movs	r0, #32
 800478c:	f002 f958 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8004790:	20c6      	movs	r0, #198	@ 0xc6
 8004792:	f002 f969 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x0f);
 8004796:	200f      	movs	r0, #15
 8004798:	f002 f952 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xD0);
 800479c:	20d0      	movs	r0, #208	@ 0xd0
 800479e:	f002 f963 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0xA4); 
 80047a2:	20a4      	movs	r0, #164	@ 0xa4
 80047a4:	f002 f94c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA1); 
 80047a8:	20a1      	movs	r0, #161	@ 0xa1
 80047aa:	f002 f949 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 80047ae:	20e0      	movs	r0, #224	@ 0xe0
 80047b0:	f002 f95a 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 80047b4:	20d0      	movs	r0, #208	@ 0xd0
 80047b6:	f002 f943 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80047ba:	2000      	movs	r0, #0
 80047bc:	f002 f940 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x02);
 80047c0:	2002      	movs	r0, #2
 80047c2:	f002 f93d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x07);
 80047c6:	2007      	movs	r0, #7
 80047c8:	f002 f93a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0a);
 80047cc:	200a      	movs	r0, #10
 80047ce:	f002 f937 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x28);
 80047d2:	2028      	movs	r0, #40	@ 0x28
 80047d4:	f002 f934 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x32);
 80047d8:	2032      	movs	r0, #50	@ 0x32
 80047da:	f002 f931 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x44);
 80047de:	2044      	movs	r0, #68	@ 0x44
 80047e0:	f002 f92e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x42);
 80047e4:	2042      	movs	r0, #66	@ 0x42
 80047e6:	f002 f92b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x06);
 80047ea:	2006      	movs	r0, #6
 80047ec:	f002 f928 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0e);
 80047f0:	200e      	movs	r0, #14
 80047f2:	f002 f925 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x12);
 80047f6:	2012      	movs	r0, #18
 80047f8:	f002 f922 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x14);
 80047fc:	2014      	movs	r0, #20
 80047fe:	f002 f91f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x17);
 8004802:	2017      	movs	r0, #23
 8004804:	f002 f91c 	bl	8006a40 <lcd_wr_data>


    lcd_wr_regno(0xE1);  /* Set Gamma */
 8004808:	20e1      	movs	r0, #225	@ 0xe1
 800480a:	f002 f92d 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 800480e:	20d0      	movs	r0, #208	@ 0xd0
 8004810:	f002 f916 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004814:	2000      	movs	r0, #0
 8004816:	f002 f913 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x02);
 800481a:	2002      	movs	r0, #2
 800481c:	f002 f910 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x07);
 8004820:	2007      	movs	r0, #7
 8004822:	f002 f90d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8004826:	200a      	movs	r0, #10
 8004828:	f002 f90a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x28);
 800482c:	2028      	movs	r0, #40	@ 0x28
 800482e:	f002 f907 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x31);
 8004832:	2031      	movs	r0, #49	@ 0x31
 8004834:	f002 f904 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x54);
 8004838:	2054      	movs	r0, #84	@ 0x54
 800483a:	f002 f901 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x47);
 800483e:	2047      	movs	r0, #71	@ 0x47
 8004840:	f002 f8fe 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8004844:	200e      	movs	r0, #14
 8004846:	f002 f8fb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x1c);
 800484a:	201c      	movs	r0, #28
 800484c:	f002 f8f8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x17);
 8004850:	2017      	movs	r0, #23
 8004852:	f002 f8f5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x1b); 
 8004856:	201b      	movs	r0, #27
 8004858:	f002 f8f2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x1e);
 800485c:	201e      	movs	r0, #30
 800485e:	f002 f8ef 	bl	8006a40 <lcd_wr_data>


    lcd_wr_regno(0x2A);
 8004862:	202a      	movs	r0, #42	@ 0x2a
 8004864:	f002 f900 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004868:	2000      	movs	r0, #0
 800486a:	f002 f8e9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800486e:	2000      	movs	r0, #0
 8004870:	f002 f8e6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004874:	2000      	movs	r0, #0
 8004876:	f002 f8e3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xef);
 800487a:	20ef      	movs	r0, #239	@ 0xef
 800487c:	f002 f8e0 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0x2B);
 8004880:	202b      	movs	r0, #43	@ 0x2b
 8004882:	f002 f8f1 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004886:	2000      	movs	r0, #0
 8004888:	f002 f8da 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800488c:	2000      	movs	r0, #0
 800488e:	f002 f8d7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x01);
 8004892:	2001      	movs	r0, #1
 8004894:	f002 f8d4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8004898:	203f      	movs	r0, #63	@ 0x3f
 800489a:	f002 f8d1 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 800489e:	2029      	movs	r0, #41	@ 0x29
 80048a0:	f002 f8e2 	bl	8006a68 <lcd_wr_regno>
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <lcd_ex_ili9341_reginit>:
 * @brief       ILI9341寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ili9341_reginit(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 80048ac:	20cf      	movs	r0, #207	@ 0xcf
 80048ae:	f002 f8db 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80048b2:	2000      	movs	r0, #0
 80048b4:	f002 f8c4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xC1);
 80048b8:	20c1      	movs	r0, #193	@ 0xc1
 80048ba:	f002 f8c1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x30);
 80048be:	2030      	movs	r0, #48	@ 0x30
 80048c0:	f002 f8be 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xED);
 80048c4:	20ed      	movs	r0, #237	@ 0xed
 80048c6:	f002 f8cf 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x64);
 80048ca:	2064      	movs	r0, #100	@ 0x64
 80048cc:	f002 f8b8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x03);
 80048d0:	2003      	movs	r0, #3
 80048d2:	f002 f8b5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x12);
 80048d6:	2012      	movs	r0, #18
 80048d8:	f002 f8b2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x81);
 80048dc:	2081      	movs	r0, #129	@ 0x81
 80048de:	f002 f8af 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xE8);
 80048e2:	20e8      	movs	r0, #232	@ 0xe8
 80048e4:	f002 f8c0 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x85);
 80048e8:	2085      	movs	r0, #133	@ 0x85
 80048ea:	f002 f8a9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x10);
 80048ee:	2010      	movs	r0, #16
 80048f0:	f002 f8a6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x7A);
 80048f4:	207a      	movs	r0, #122	@ 0x7a
 80048f6:	f002 f8a3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xCB);
 80048fa:	20cb      	movs	r0, #203	@ 0xcb
 80048fc:	f002 f8b4 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x39);
 8004900:	2039      	movs	r0, #57	@ 0x39
 8004902:	f002 f89d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8004906:	202c      	movs	r0, #44	@ 0x2c
 8004908:	f002 f89a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800490c:	2000      	movs	r0, #0
 800490e:	f002 f897 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x34);
 8004912:	2034      	movs	r0, #52	@ 0x34
 8004914:	f002 f894 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x02);
 8004918:	2002      	movs	r0, #2
 800491a:	f002 f891 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xF7);
 800491e:	20f7      	movs	r0, #247	@ 0xf7
 8004920:	f002 f8a2 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8004924:	2020      	movs	r0, #32
 8004926:	f002 f88b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xEA);
 800492a:	20ea      	movs	r0, #234	@ 0xea
 800492c:	f002 f89c 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004930:	2000      	movs	r0, #0
 8004932:	f002 f885 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004936:	2000      	movs	r0, #0
 8004938:	f002 f882 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 800493c:	20c0      	movs	r0, #192	@ 0xc0
 800493e:	f002 f893 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 8004942:	201b      	movs	r0, #27
 8004944:	f002 f87c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 8004948:	20c1      	movs	r0, #193	@ 0xc1
 800494a:	f002 f88d 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 800494e:	2001      	movs	r0, #1
 8004950:	f002 f876 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 8004954:	20c5      	movs	r0, #197	@ 0xc5
 8004956:	f002 f887 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 800495a:	2030      	movs	r0, #48	@ 0x30
 800495c:	f002 f870 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 8004960:	2030      	movs	r0, #48	@ 0x30
 8004962:	f002 f86d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 8004966:	20c7      	movs	r0, #199	@ 0xc7
 8004968:	f002 f87e 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0xB7);
 800496c:	20b7      	movs	r0, #183	@ 0xb7
 800496e:	f002 f867 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0x36); /*  Memory Access Control */
 8004972:	2036      	movs	r0, #54	@ 0x36
 8004974:	f002 f878 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8004978:	2048      	movs	r0, #72	@ 0x48
 800497a:	f002 f861 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0x3A);
 800497e:	203a      	movs	r0, #58	@ 0x3a
 8004980:	f002 f872 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8004984:	2055      	movs	r0, #85	@ 0x55
 8004986:	f002 f85b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xB1);
 800498a:	20b1      	movs	r0, #177	@ 0xb1
 800498c:	f002 f86c 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004990:	2000      	movs	r0, #0
 8004992:	f002 f855 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x1A);
 8004996:	201a      	movs	r0, #26
 8004998:	f002 f852 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xB6); /*  Display Function Control */
 800499c:	20b6      	movs	r0, #182	@ 0xb6
 800499e:	f002 f863 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 80049a2:	200a      	movs	r0, #10
 80049a4:	f002 f84c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA2);
 80049a8:	20a2      	movs	r0, #162	@ 0xa2
 80049aa:	f002 f849 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
 80049ae:	20f2      	movs	r0, #242	@ 0xf2
 80049b0:	f002 f85a 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80049b4:	2000      	movs	r0, #0
 80049b6:	f002 f843 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 80049ba:	2026      	movs	r0, #38	@ 0x26
 80049bc:	f002 f854 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x01);
 80049c0:	2001      	movs	r0, #1
 80049c2:	f002 f83d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 80049c6:	20e0      	movs	r0, #224	@ 0xe0
 80049c8:	f002 f84e 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 80049cc:	200f      	movs	r0, #15
 80049ce:	f002 f837 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x2A);
 80049d2:	202a      	movs	r0, #42	@ 0x2a
 80049d4:	f002 f834 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x28);
 80049d8:	2028      	movs	r0, #40	@ 0x28
 80049da:	f002 f831 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x08);
 80049de:	2008      	movs	r0, #8
 80049e0:	f002 f82e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0E);
 80049e4:	200e      	movs	r0, #14
 80049e6:	f002 f82b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x08);
 80049ea:	2008      	movs	r0, #8
 80049ec:	f002 f828 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x54);
 80049f0:	2054      	movs	r0, #84	@ 0x54
 80049f2:	f002 f825 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA9);
 80049f6:	20a9      	movs	r0, #169	@ 0xa9
 80049f8:	f002 f822 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x43);
 80049fc:	2043      	movs	r0, #67	@ 0x43
 80049fe:	f002 f81f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0A);
 8004a02:	200a      	movs	r0, #10
 8004a04:	f002 f81c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8004a08:	200f      	movs	r0, #15
 8004a0a:	f002 f819 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f002 f816 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004a14:	2000      	movs	r0, #0
 8004a16:	f002 f813 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f002 f810 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004a20:	2000      	movs	r0, #0
 8004a22:	f002 f80d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xE1);    /* Set Gamma */
 8004a26:	20e1      	movs	r0, #225	@ 0xe1
 8004a28:	f002 f81e 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f002 f807 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x15);
 8004a32:	2015      	movs	r0, #21
 8004a34:	f002 f804 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x17);
 8004a38:	2017      	movs	r0, #23
 8004a3a:	f002 f801 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x07);
 8004a3e:	2007      	movs	r0, #7
 8004a40:	f001 fffe 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x11);
 8004a44:	2011      	movs	r0, #17
 8004a46:	f001 fffb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x06);
 8004a4a:	2006      	movs	r0, #6
 8004a4c:	f001 fff8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x2B);
 8004a50:	202b      	movs	r0, #43	@ 0x2b
 8004a52:	f001 fff5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x56);
 8004a56:	2056      	movs	r0, #86	@ 0x56
 8004a58:	f001 fff2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8004a5c:	203c      	movs	r0, #60	@ 0x3c
 8004a5e:	f001 ffef 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x05);
 8004a62:	2005      	movs	r0, #5
 8004a64:	f001 ffec 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x10);
 8004a68:	2010      	movs	r0, #16
 8004a6a:	f001 ffe9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8004a6e:	200f      	movs	r0, #15
 8004a70:	f001 ffe6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8004a74:	203f      	movs	r0, #63	@ 0x3f
 8004a76:	f001 ffe3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8004a7a:	203f      	movs	r0, #63	@ 0x3f
 8004a7c:	f001 ffe0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8004a80:	200f      	movs	r0, #15
 8004a82:	f001 ffdd 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0x2B);
 8004a86:	202b      	movs	r0, #43	@ 0x2b
 8004a88:	f001 ffee 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f001 ffd7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004a92:	2000      	movs	r0, #0
 8004a94:	f001 ffd4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x01);
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f001 ffd1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8004a9e:	203f      	movs	r0, #63	@ 0x3f
 8004aa0:	f001 ffce 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8004aa4:	202a      	movs	r0, #42	@ 0x2a
 8004aa6:	f001 ffdf 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004aaa:	2000      	movs	r0, #0
 8004aac:	f001 ffc8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f001 ffc5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f001 ffc2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xef);
 8004abc:	20ef      	movs	r0, #239	@ 0xef
 8004abe:	f001 ffbf 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 8004ac2:	2011      	movs	r0, #17
 8004ac4:	f001 ffd0 	bl	8006a68 <lcd_wr_regno>
    HAL_Delay(120);
 8004ac8:	2078      	movs	r0, #120	@ 0x78
 8004aca:	f7fd fa99 	bl	8002000 <HAL_Delay>
    lcd_wr_regno(0x29); /* display on */
 8004ace:	2029      	movs	r0, #41	@ 0x29
 8004ad0:	f001 ffca 	bl	8006a68 <lcd_wr_regno>
 }
 8004ad4:	bf00      	nop
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <lcd_ex_nt35310_reginit>:
 * @brief       NT35310寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_nt35310_reginit(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 8004adc:	20ed      	movs	r0, #237	@ 0xed
 8004ade:	f001 ffc3 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	f001 ffac 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xFE);
 8004ae8:	20fe      	movs	r0, #254	@ 0xfe
 8004aea:	f001 ffa9 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xEE);
 8004aee:	20ee      	movs	r0, #238	@ 0xee
 8004af0:	f001 ffba 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0xDE);
 8004af4:	20de      	movs	r0, #222	@ 0xde
 8004af6:	f001 ffa3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x21);
 8004afa:	2021      	movs	r0, #33	@ 0x21
 8004afc:	f001 ffa0 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xF1);
 8004b00:	20f1      	movs	r0, #241	@ 0xf1
 8004b02:	f001 ffb1 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8004b06:	2001      	movs	r0, #1
 8004b08:	f001 ff9a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xDF);
 8004b0c:	20df      	movs	r0, #223	@ 0xdf
 8004b0e:	f001 ffab 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x10);
 8004b12:	2010      	movs	r0, #16
 8004b14:	f001 ff94 	bl	8006a40 <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8004b18:	20c4      	movs	r0, #196	@ 0xc4
 8004b1a:	f001 ffa5 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 8004b1e:	208f      	movs	r0, #143	@ 0x8f
 8004b20:	f001 ff8e 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8004b24:	20c6      	movs	r0, #198	@ 0xc6
 8004b26:	f001 ff9f 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	f001 ff88 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8004b30:	20e2      	movs	r0, #226	@ 0xe2
 8004b32:	f001 ff85 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8004b36:	20e2      	movs	r0, #226	@ 0xe2
 8004b38:	f001 ff82 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8004b3c:	20e2      	movs	r0, #226	@ 0xe2
 8004b3e:	f001 ff7f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xBF);
 8004b42:	20bf      	movs	r0, #191	@ 0xbf
 8004b44:	f001 ff90 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8004b48:	20aa      	movs	r0, #170	@ 0xaa
 8004b4a:	f001 ff79 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB0);
 8004b4e:	20b0      	movs	r0, #176	@ 0xb0
 8004b50:	f001 ff8a 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x0D);
 8004b54:	200d      	movs	r0, #13
 8004b56:	f001 ff73 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f001 ff70 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8004b60:	200d      	movs	r0, #13
 8004b62:	f001 ff6d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b66:	2000      	movs	r0, #0
 8004b68:	f001 ff6a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x11);
 8004b6c:	2011      	movs	r0, #17
 8004b6e:	f001 ff67 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b72:	2000      	movs	r0, #0
 8004b74:	f001 ff64 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x19);
 8004b78:	2019      	movs	r0, #25
 8004b7a:	f001 ff61 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f001 ff5e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x21);
 8004b84:	2021      	movs	r0, #33	@ 0x21
 8004b86:	f001 ff5b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	f001 ff58 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x2D);
 8004b90:	202d      	movs	r0, #45	@ 0x2d
 8004b92:	f001 ff55 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004b96:	2000      	movs	r0, #0
 8004b98:	f001 ff52 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3D);
 8004b9c:	203d      	movs	r0, #61	@ 0x3d
 8004b9e:	f001 ff4f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f001 ff4c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8004ba8:	205d      	movs	r0, #93	@ 0x5d
 8004baa:	f001 ff49 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004bae:	2000      	movs	r0, #0
 8004bb0:	f001 ff46 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8004bb4:	205d      	movs	r0, #93	@ 0x5d
 8004bb6:	f001 ff43 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f001 ff40 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB1);
 8004bc0:	20b1      	movs	r0, #177	@ 0xb1
 8004bc2:	f001 ff51 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8004bc6:	2080      	movs	r0, #128	@ 0x80
 8004bc8:	f001 ff3a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004bcc:	2000      	movs	r0, #0
 8004bce:	f001 ff37 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8004bd2:	208b      	movs	r0, #139	@ 0x8b
 8004bd4:	f001 ff34 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f001 ff31 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x96);
 8004bde:	2096      	movs	r0, #150	@ 0x96
 8004be0:	f001 ff2e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004be4:	2000      	movs	r0, #0
 8004be6:	f001 ff2b 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8004bea:	20b2      	movs	r0, #178	@ 0xb2
 8004bec:	f001 ff3c 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f001 ff25 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f001 ff22 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x02);
 8004bfc:	2002      	movs	r0, #2
 8004bfe:	f001 ff1f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c02:	2000      	movs	r0, #0
 8004c04:	f001 ff1c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x03);
 8004c08:	2003      	movs	r0, #3
 8004c0a:	f001 ff19 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f001 ff16 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB3);
 8004c14:	20b3      	movs	r0, #179	@ 0xb3
 8004c16:	f001 ff27 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004c1a:	2000      	movs	r0, #0
 8004c1c:	f001 ff10 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c20:	2000      	movs	r0, #0
 8004c22:	f001 ff0d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c26:	2000      	movs	r0, #0
 8004c28:	f001 ff0a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f001 ff07 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c32:	2000      	movs	r0, #0
 8004c34:	f001 ff04 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c38:	2000      	movs	r0, #0
 8004c3a:	f001 ff01 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c3e:	2000      	movs	r0, #0
 8004c40:	f001 fefe 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c44:	2000      	movs	r0, #0
 8004c46:	f001 fefb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f001 fef8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c50:	2000      	movs	r0, #0
 8004c52:	f001 fef5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c56:	2000      	movs	r0, #0
 8004c58:	f001 fef2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	f001 feef 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c62:	2000      	movs	r0, #0
 8004c64:	f001 feec 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f001 fee9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f001 fee6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c74:	2000      	movs	r0, #0
 8004c76:	f001 fee3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f001 fee0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c80:	2000      	movs	r0, #0
 8004c82:	f001 fedd 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c86:	2000      	movs	r0, #0
 8004c88:	f001 feda 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f001 fed7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f001 fed4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c98:	2000      	movs	r0, #0
 8004c9a:	f001 fed1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f001 fece 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f001 fecb 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8004caa:	20b4      	movs	r0, #180	@ 0xb4
 8004cac:	f001 fedc 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x8B);
 8004cb0:	208b      	movs	r0, #139	@ 0x8b
 8004cb2:	f001 fec5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f001 fec2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x96);
 8004cbc:	2096      	movs	r0, #150	@ 0x96
 8004cbe:	f001 febf 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f001 febc 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA1);
 8004cc8:	20a1      	movs	r0, #161	@ 0xa1
 8004cca:	f001 feb9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f001 feb6 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB5);
 8004cd4:	20b5      	movs	r0, #181	@ 0xb5
 8004cd6:	f001 fec7 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8004cda:	2002      	movs	r0, #2
 8004cdc:	f001 feb0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f001 fead 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x03);
 8004ce6:	2003      	movs	r0, #3
 8004ce8:	f001 feaa 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004cec:	2000      	movs	r0, #0
 8004cee:	f001 fea7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x04);
 8004cf2:	2004      	movs	r0, #4
 8004cf4:	f001 fea4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	f001 fea1 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB6);
 8004cfe:	20b6      	movs	r0, #182	@ 0xb6
 8004d00:	f001 feb2 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004d04:	2000      	movs	r0, #0
 8004d06:	f001 fe9b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f001 fe98 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8004d10:	20b7      	movs	r0, #183	@ 0xb7
 8004d12:	f001 fea9 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f001 fe92 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f001 fe8f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8004d22:	203f      	movs	r0, #63	@ 0x3f
 8004d24:	f001 fe8c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f001 fe89 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x5E);
 8004d2e:	205e      	movs	r0, #94	@ 0x5e
 8004d30:	f001 fe86 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d34:	2000      	movs	r0, #0
 8004d36:	f001 fe83 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x64);
 8004d3a:	2064      	movs	r0, #100	@ 0x64
 8004d3c:	f001 fe80 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d40:	2000      	movs	r0, #0
 8004d42:	f001 fe7d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x8C);
 8004d46:	208c      	movs	r0, #140	@ 0x8c
 8004d48:	f001 fe7a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f001 fe77 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xAC);
 8004d52:	20ac      	movs	r0, #172	@ 0xac
 8004d54:	f001 fe74 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f001 fe71 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8004d5e:	20dc      	movs	r0, #220	@ 0xdc
 8004d60:	f001 fe6e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d64:	2000      	movs	r0, #0
 8004d66:	f001 fe6b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x70);
 8004d6a:	2070      	movs	r0, #112	@ 0x70
 8004d6c:	f001 fe68 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d70:	2000      	movs	r0, #0
 8004d72:	f001 fe65 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x90);
 8004d76:	2090      	movs	r0, #144	@ 0x90
 8004d78:	f001 fe62 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f001 fe5f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xEB);
 8004d82:	20eb      	movs	r0, #235	@ 0xeb
 8004d84:	f001 fe5c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d88:	2000      	movs	r0, #0
 8004d8a:	f001 fe59 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8004d8e:	20dc      	movs	r0, #220	@ 0xdc
 8004d90:	f001 fe56 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004d94:	2000      	movs	r0, #0
 8004d96:	f001 fe53 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB8);
 8004d9a:	20b8      	movs	r0, #184	@ 0xb8
 8004d9c:	f001 fe64 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8004da0:	2000      	movs	r0, #0
 8004da2:	f001 fe4d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004da6:	2000      	movs	r0, #0
 8004da8:	f001 fe4a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004dac:	2000      	movs	r0, #0
 8004dae:	f001 fe47 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004db2:	2000      	movs	r0, #0
 8004db4:	f001 fe44 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004db8:	2000      	movs	r0, #0
 8004dba:	f001 fe41 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	f001 fe3e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f001 fe3b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f001 fe38 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xBA);
 8004dd0:	20ba      	movs	r0, #186	@ 0xba
 8004dd2:	f001 fe49 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x24);
 8004dd6:	2024      	movs	r0, #36	@ 0x24
 8004dd8:	f001 fe32 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f001 fe2f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004de2:	2000      	movs	r0, #0
 8004de4:	f001 fe2c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004de8:	2000      	movs	r0, #0
 8004dea:	f001 fe29 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 8004dee:	20c1      	movs	r0, #193	@ 0xc1
 8004df0:	f001 fe3a 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8004df4:	2020      	movs	r0, #32
 8004df6:	f001 fe23 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f001 fe20 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x54);
 8004e00:	2054      	movs	r0, #84	@ 0x54
 8004e02:	f001 fe1d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e06:	2000      	movs	r0, #0
 8004e08:	f001 fe1a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8004e0c:	20ff      	movs	r0, #255	@ 0xff
 8004e0e:	f001 fe17 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e12:	2000      	movs	r0, #0
 8004e14:	f001 fe14 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8004e18:	20c2      	movs	r0, #194	@ 0xc2
 8004e1a:	f001 fe25 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8004e1e:	200a      	movs	r0, #10
 8004e20:	f001 fe0e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e24:	2000      	movs	r0, #0
 8004e26:	f001 fe0b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x04);
 8004e2a:	2004      	movs	r0, #4
 8004e2c:	f001 fe08 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e30:	2000      	movs	r0, #0
 8004e32:	f001 fe05 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC3);
 8004e36:	20c3      	movs	r0, #195	@ 0xc3
 8004e38:	f001 fe16 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8004e3c:	203c      	movs	r0, #60	@ 0x3c
 8004e3e:	f001 fdff 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e42:	2000      	movs	r0, #0
 8004e44:	f001 fdfc 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3A);
 8004e48:	203a      	movs	r0, #58	@ 0x3a
 8004e4a:	f001 fdf9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f001 fdf6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x39);
 8004e54:	2039      	movs	r0, #57	@ 0x39
 8004e56:	f001 fdf3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	f001 fdf0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x37);
 8004e60:	2037      	movs	r0, #55	@ 0x37
 8004e62:	f001 fded 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e66:	2000      	movs	r0, #0
 8004e68:	f001 fdea 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8004e6c:	203c      	movs	r0, #60	@ 0x3c
 8004e6e:	f001 fde7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e72:	2000      	movs	r0, #0
 8004e74:	f001 fde4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x36);
 8004e78:	2036      	movs	r0, #54	@ 0x36
 8004e7a:	f001 fde1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f001 fdde 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x32);
 8004e84:	2032      	movs	r0, #50	@ 0x32
 8004e86:	f001 fddb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f001 fdd8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x2F);
 8004e90:	202f      	movs	r0, #47	@ 0x2f
 8004e92:	f001 fdd5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004e96:	2000      	movs	r0, #0
 8004e98:	f001 fdd2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8004e9c:	202c      	movs	r0, #44	@ 0x2c
 8004e9e:	f001 fdcf 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f001 fdcc 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x29);
 8004ea8:	2029      	movs	r0, #41	@ 0x29
 8004eaa:	f001 fdc9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f001 fdc6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x26);
 8004eb4:	2026      	movs	r0, #38	@ 0x26
 8004eb6:	f001 fdc3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004eba:	2000      	movs	r0, #0
 8004ebc:	f001 fdc0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x24);
 8004ec0:	2024      	movs	r0, #36	@ 0x24
 8004ec2:	f001 fdbd 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	f001 fdba 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x24);
 8004ecc:	2024      	movs	r0, #36	@ 0x24
 8004ece:	f001 fdb7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	f001 fdb4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x23);
 8004ed8:	2023      	movs	r0, #35	@ 0x23
 8004eda:	f001 fdb1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ede:	2000      	movs	r0, #0
 8004ee0:	f001 fdae 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8004ee4:	203c      	movs	r0, #60	@ 0x3c
 8004ee6:	f001 fdab 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004eea:	2000      	movs	r0, #0
 8004eec:	f001 fda8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x36);
 8004ef0:	2036      	movs	r0, #54	@ 0x36
 8004ef2:	f001 fda5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f001 fda2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x32);
 8004efc:	2032      	movs	r0, #50	@ 0x32
 8004efe:	f001 fd9f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f02:	2000      	movs	r0, #0
 8004f04:	f001 fd9c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x2F);
 8004f08:	202f      	movs	r0, #47	@ 0x2f
 8004f0a:	f001 fd99 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f001 fd96 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8004f14:	202c      	movs	r0, #44	@ 0x2c
 8004f16:	f001 fd93 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f001 fd90 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x29);
 8004f20:	2029      	movs	r0, #41	@ 0x29
 8004f22:	f001 fd8d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f26:	2000      	movs	r0, #0
 8004f28:	f001 fd8a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x26);
 8004f2c:	2026      	movs	r0, #38	@ 0x26
 8004f2e:	f001 fd87 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f32:	2000      	movs	r0, #0
 8004f34:	f001 fd84 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x24);
 8004f38:	2024      	movs	r0, #36	@ 0x24
 8004f3a:	f001 fd81 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f001 fd7e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x24);
 8004f44:	2024      	movs	r0, #36	@ 0x24
 8004f46:	f001 fd7b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f001 fd78 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x23);
 8004f50:	2023      	movs	r0, #35	@ 0x23
 8004f52:	f001 fd75 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f56:	2000      	movs	r0, #0
 8004f58:	f001 fd72 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC4);
 8004f5c:	20c4      	movs	r0, #196	@ 0xc4
 8004f5e:	f001 fd83 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x62);
 8004f62:	2062      	movs	r0, #98	@ 0x62
 8004f64:	f001 fd6c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f001 fd69 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x05);
 8004f6e:	2005      	movs	r0, #5
 8004f70:	f001 fd66 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f001 fd63 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x84);
 8004f7a:	2084      	movs	r0, #132	@ 0x84
 8004f7c:	f001 fd60 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f80:	2000      	movs	r0, #0
 8004f82:	f001 fd5d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xF0);
 8004f86:	20f0      	movs	r0, #240	@ 0xf0
 8004f88:	f001 fd5a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f001 fd57 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x18);
 8004f92:	2018      	movs	r0, #24
 8004f94:	f001 fd54 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f001 fd51 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA4);
 8004f9e:	20a4      	movs	r0, #164	@ 0xa4
 8004fa0:	f001 fd4e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f001 fd4b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x18);
 8004faa:	2018      	movs	r0, #24
 8004fac:	f001 fd48 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f001 fd45 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x50);
 8004fb6:	2050      	movs	r0, #80	@ 0x50
 8004fb8:	f001 fd42 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f001 fd3f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8004fc2:	200c      	movs	r0, #12
 8004fc4:	f001 fd3c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f001 fd39 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x17);
 8004fce:	2017      	movs	r0, #23
 8004fd0:	f001 fd36 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f001 fd33 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x95);
 8004fda:	2095      	movs	r0, #149	@ 0x95
 8004fdc:	f001 fd30 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	f001 fd2d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8004fe6:	20f3      	movs	r0, #243	@ 0xf3
 8004fe8:	f001 fd2a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004fec:	2000      	movs	r0, #0
 8004fee:	f001 fd27 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xE6);
 8004ff2:	20e6      	movs	r0, #230	@ 0xe6
 8004ff4:	f001 fd24 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f001 fd21 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 8004ffe:	20c5      	movs	r0, #197	@ 0xc5
 8005000:	f001 fd32 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8005004:	2032      	movs	r0, #50	@ 0x32
 8005006:	f001 fd1b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800500a:	2000      	movs	r0, #0
 800500c:	f001 fd18 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x44);
 8005010:	2044      	movs	r0, #68	@ 0x44
 8005012:	f001 fd15 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005016:	2000      	movs	r0, #0
 8005018:	f001 fd12 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x65);
 800501c:	2065      	movs	r0, #101	@ 0x65
 800501e:	f001 fd0f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005022:	2000      	movs	r0, #0
 8005024:	f001 fd0c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x76);
 8005028:	2076      	movs	r0, #118	@ 0x76
 800502a:	f001 fd09 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800502e:	2000      	movs	r0, #0
 8005030:	f001 fd06 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x88);
 8005034:	2088      	movs	r0, #136	@ 0x88
 8005036:	f001 fd03 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800503a:	2000      	movs	r0, #0
 800503c:	f001 fd00 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8005040:	20c6      	movs	r0, #198	@ 0xc6
 8005042:	f001 fd11 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8005046:	2020      	movs	r0, #32
 8005048:	f001 fcfa 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800504c:	2000      	movs	r0, #0
 800504e:	f001 fcf7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x17);
 8005052:	2017      	movs	r0, #23
 8005054:	f001 fcf4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005058:	2000      	movs	r0, #0
 800505a:	f001 fcf1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x01);
 800505e:	2001      	movs	r0, #1
 8005060:	f001 fcee 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005064:	2000      	movs	r0, #0
 8005066:	f001 fceb 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC7);
 800506a:	20c7      	movs	r0, #199	@ 0xc7
 800506c:	f001 fcfc 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005070:	2000      	movs	r0, #0
 8005072:	f001 fce5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005076:	2000      	movs	r0, #0
 8005078:	f001 fce2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800507c:	2000      	movs	r0, #0
 800507e:	f001 fcdf 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005082:	2000      	movs	r0, #0
 8005084:	f001 fcdc 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC8);
 8005088:	20c8      	movs	r0, #200	@ 0xc8
 800508a:	f001 fced 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800508e:	2000      	movs	r0, #0
 8005090:	f001 fcd6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005094:	2000      	movs	r0, #0
 8005096:	f001 fcd3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800509a:	2000      	movs	r0, #0
 800509c:	f001 fcd0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050a0:	2000      	movs	r0, #0
 80050a2:	f001 fccd 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xC9);
 80050a6:	20c9      	movs	r0, #201	@ 0xc9
 80050a8:	f001 fcde 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80050ac:	2000      	movs	r0, #0
 80050ae:	f001 fcc7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050b2:	2000      	movs	r0, #0
 80050b4:	f001 fcc4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050b8:	2000      	movs	r0, #0
 80050ba:	f001 fcc1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050be:	2000      	movs	r0, #0
 80050c0:	f001 fcbe 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050c4:	2000      	movs	r0, #0
 80050c6:	f001 fcbb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050ca:	2000      	movs	r0, #0
 80050cc:	f001 fcb8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050d0:	2000      	movs	r0, #0
 80050d2:	f001 fcb5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050d6:	2000      	movs	r0, #0
 80050d8:	f001 fcb2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050dc:	2000      	movs	r0, #0
 80050de:	f001 fcaf 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050e2:	2000      	movs	r0, #0
 80050e4:	f001 fcac 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050e8:	2000      	movs	r0, #0
 80050ea:	f001 fca9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050ee:	2000      	movs	r0, #0
 80050f0:	f001 fca6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050f4:	2000      	movs	r0, #0
 80050f6:	f001 fca3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80050fa:	2000      	movs	r0, #0
 80050fc:	f001 fca0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005100:	2000      	movs	r0, #0
 8005102:	f001 fc9d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005106:	2000      	movs	r0, #0
 8005108:	f001 fc9a 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 800510c:	20e0      	movs	r0, #224	@ 0xe0
 800510e:	f001 fcab 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8005112:	2016      	movs	r0, #22
 8005114:	f001 fc94 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005118:	2000      	movs	r0, #0
 800511a:	f001 fc91 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x1C);
 800511e:	201c      	movs	r0, #28
 8005120:	f001 fc8e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005124:	2000      	movs	r0, #0
 8005126:	f001 fc8b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x21);
 800512a:	2021      	movs	r0, #33	@ 0x21
 800512c:	f001 fc88 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005130:	2000      	movs	r0, #0
 8005132:	f001 fc85 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x36);
 8005136:	2036      	movs	r0, #54	@ 0x36
 8005138:	f001 fc82 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800513c:	2000      	movs	r0, #0
 800513e:	f001 fc7f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x46);
 8005142:	2046      	movs	r0, #70	@ 0x46
 8005144:	f001 fc7c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005148:	2000      	movs	r0, #0
 800514a:	f001 fc79 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x52);
 800514e:	2052      	movs	r0, #82	@ 0x52
 8005150:	f001 fc76 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005154:	2000      	movs	r0, #0
 8005156:	f001 fc73 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x64);
 800515a:	2064      	movs	r0, #100	@ 0x64
 800515c:	f001 fc70 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005160:	2000      	movs	r0, #0
 8005162:	f001 fc6d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8005166:	207a      	movs	r0, #122	@ 0x7a
 8005168:	f001 fc6a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800516c:	2000      	movs	r0, #0
 800516e:	f001 fc67 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8005172:	208b      	movs	r0, #139	@ 0x8b
 8005174:	f001 fc64 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005178:	2000      	movs	r0, #0
 800517a:	f001 fc61 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x99);
 800517e:	2099      	movs	r0, #153	@ 0x99
 8005180:	f001 fc5e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005184:	2000      	movs	r0, #0
 8005186:	f001 fc5b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA8);
 800518a:	20a8      	movs	r0, #168	@ 0xa8
 800518c:	f001 fc58 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005190:	2000      	movs	r0, #0
 8005192:	f001 fc55 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xB9);
 8005196:	20b9      	movs	r0, #185	@ 0xb9
 8005198:	f001 fc52 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800519c:	2000      	movs	r0, #0
 800519e:	f001 fc4f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xC4);
 80051a2:	20c4      	movs	r0, #196	@ 0xc4
 80051a4:	f001 fc4c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051a8:	2000      	movs	r0, #0
 80051aa:	f001 fc49 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xCA);
 80051ae:	20ca      	movs	r0, #202	@ 0xca
 80051b0:	f001 fc46 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051b4:	2000      	movs	r0, #0
 80051b6:	f001 fc43 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD2);
 80051ba:	20d2      	movs	r0, #210	@ 0xd2
 80051bc:	f001 fc40 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051c0:	2000      	movs	r0, #0
 80051c2:	f001 fc3d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD9);
 80051c6:	20d9      	movs	r0, #217	@ 0xd9
 80051c8:	f001 fc3a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051cc:	2000      	movs	r0, #0
 80051ce:	f001 fc37 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xE0);
 80051d2:	20e0      	movs	r0, #224	@ 0xe0
 80051d4:	f001 fc34 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051d8:	2000      	movs	r0, #0
 80051da:	f001 fc31 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80051de:	20f3      	movs	r0, #243	@ 0xf3
 80051e0:	f001 fc2e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051e4:	2000      	movs	r0, #0
 80051e6:	f001 fc2b 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 80051ea:	20e1      	movs	r0, #225	@ 0xe1
 80051ec:	f001 fc3c 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x16);
 80051f0:	2016      	movs	r0, #22
 80051f2:	f001 fc25 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80051f6:	2000      	movs	r0, #0
 80051f8:	f001 fc22 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x1C);
 80051fc:	201c      	movs	r0, #28
 80051fe:	f001 fc1f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005202:	2000      	movs	r0, #0
 8005204:	f001 fc1c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x22);
 8005208:	2022      	movs	r0, #34	@ 0x22
 800520a:	f001 fc19 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800520e:	2000      	movs	r0, #0
 8005210:	f001 fc16 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x36);
 8005214:	2036      	movs	r0, #54	@ 0x36
 8005216:	f001 fc13 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800521a:	2000      	movs	r0, #0
 800521c:	f001 fc10 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x45);
 8005220:	2045      	movs	r0, #69	@ 0x45
 8005222:	f001 fc0d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005226:	2000      	movs	r0, #0
 8005228:	f001 fc0a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x52);
 800522c:	2052      	movs	r0, #82	@ 0x52
 800522e:	f001 fc07 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005232:	2000      	movs	r0, #0
 8005234:	f001 fc04 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x64);
 8005238:	2064      	movs	r0, #100	@ 0x64
 800523a:	f001 fc01 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800523e:	2000      	movs	r0, #0
 8005240:	f001 fbfe 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8005244:	207a      	movs	r0, #122	@ 0x7a
 8005246:	f001 fbfb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800524a:	2000      	movs	r0, #0
 800524c:	f001 fbf8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8005250:	208b      	movs	r0, #139	@ 0x8b
 8005252:	f001 fbf5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005256:	2000      	movs	r0, #0
 8005258:	f001 fbf2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x99);
 800525c:	2099      	movs	r0, #153	@ 0x99
 800525e:	f001 fbef 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005262:	2000      	movs	r0, #0
 8005264:	f001 fbec 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA8);
 8005268:	20a8      	movs	r0, #168	@ 0xa8
 800526a:	f001 fbe9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800526e:	2000      	movs	r0, #0
 8005270:	f001 fbe6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xB9);
 8005274:	20b9      	movs	r0, #185	@ 0xb9
 8005276:	f001 fbe3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800527a:	2000      	movs	r0, #0
 800527c:	f001 fbe0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8005280:	20c4      	movs	r0, #196	@ 0xc4
 8005282:	f001 fbdd 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005286:	2000      	movs	r0, #0
 8005288:	f001 fbda 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xCA);
 800528c:	20ca      	movs	r0, #202	@ 0xca
 800528e:	f001 fbd7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005292:	2000      	movs	r0, #0
 8005294:	f001 fbd4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD2);
 8005298:	20d2      	movs	r0, #210	@ 0xd2
 800529a:	f001 fbd1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800529e:	2000      	movs	r0, #0
 80052a0:	f001 fbce 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD8);
 80052a4:	20d8      	movs	r0, #216	@ 0xd8
 80052a6:	f001 fbcb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052aa:	2000      	movs	r0, #0
 80052ac:	f001 fbc8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xE0);
 80052b0:	20e0      	movs	r0, #224	@ 0xe0
 80052b2:	f001 fbc5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052b6:	2000      	movs	r0, #0
 80052b8:	f001 fbc2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80052bc:	20f3      	movs	r0, #243	@ 0xf3
 80052be:	f001 fbbf 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052c2:	2000      	movs	r0, #0
 80052c4:	f001 fbbc 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xE2);
 80052c8:	20e2      	movs	r0, #226	@ 0xe2
 80052ca:	f001 fbcd 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x05);
 80052ce:	2005      	movs	r0, #5
 80052d0:	f001 fbb6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052d4:	2000      	movs	r0, #0
 80052d6:	f001 fbb3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x0B);
 80052da:	200b      	movs	r0, #11
 80052dc:	f001 fbb0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052e0:	2000      	movs	r0, #0
 80052e2:	f001 fbad 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x1B);
 80052e6:	201b      	movs	r0, #27
 80052e8:	f001 fbaa 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052ec:	2000      	movs	r0, #0
 80052ee:	f001 fba7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x34);
 80052f2:	2034      	movs	r0, #52	@ 0x34
 80052f4:	f001 fba4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80052f8:	2000      	movs	r0, #0
 80052fa:	f001 fba1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x44);
 80052fe:	2044      	movs	r0, #68	@ 0x44
 8005300:	f001 fb9e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005304:	2000      	movs	r0, #0
 8005306:	f001 fb9b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x4F);
 800530a:	204f      	movs	r0, #79	@ 0x4f
 800530c:	f001 fb98 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005310:	2000      	movs	r0, #0
 8005312:	f001 fb95 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x61);
 8005316:	2061      	movs	r0, #97	@ 0x61
 8005318:	f001 fb92 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800531c:	2000      	movs	r0, #0
 800531e:	f001 fb8f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x79);
 8005322:	2079      	movs	r0, #121	@ 0x79
 8005324:	f001 fb8c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005328:	2000      	movs	r0, #0
 800532a:	f001 fb89 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x88);
 800532e:	2088      	movs	r0, #136	@ 0x88
 8005330:	f001 fb86 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005334:	2000      	movs	r0, #0
 8005336:	f001 fb83 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x97);
 800533a:	2097      	movs	r0, #151	@ 0x97
 800533c:	f001 fb80 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005340:	2000      	movs	r0, #0
 8005342:	f001 fb7d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA6);
 8005346:	20a6      	movs	r0, #166	@ 0xa6
 8005348:	f001 fb7a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800534c:	2000      	movs	r0, #0
 800534e:	f001 fb77 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xB7);
 8005352:	20b7      	movs	r0, #183	@ 0xb7
 8005354:	f001 fb74 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005358:	2000      	movs	r0, #0
 800535a:	f001 fb71 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xC2);
 800535e:	20c2      	movs	r0, #194	@ 0xc2
 8005360:	f001 fb6e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005364:	2000      	movs	r0, #0
 8005366:	f001 fb6b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xC7);
 800536a:	20c7      	movs	r0, #199	@ 0xc7
 800536c:	f001 fb68 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005370:	2000      	movs	r0, #0
 8005372:	f001 fb65 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD1);
 8005376:	20d1      	movs	r0, #209	@ 0xd1
 8005378:	f001 fb62 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800537c:	2000      	movs	r0, #0
 800537e:	f001 fb5f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD6);
 8005382:	20d6      	movs	r0, #214	@ 0xd6
 8005384:	f001 fb5c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005388:	2000      	movs	r0, #0
 800538a:	f001 fb59 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xDD);
 800538e:	20dd      	movs	r0, #221	@ 0xdd
 8005390:	f001 fb56 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005394:	2000      	movs	r0, #0
 8005396:	f001 fb53 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xF3);
 800539a:	20f3      	movs	r0, #243	@ 0xf3
 800539c:	f001 fb50 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053a0:	2000      	movs	r0, #0
 80053a2:	f001 fb4d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xE3);
 80053a6:	20e3      	movs	r0, #227	@ 0xe3
 80053a8:	f001 fb5e 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x05);
 80053ac:	2005      	movs	r0, #5
 80053ae:	f001 fb47 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053b2:	2000      	movs	r0, #0
 80053b4:	f001 fb44 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA);
 80053b8:	200a      	movs	r0, #10
 80053ba:	f001 fb41 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053be:	2000      	movs	r0, #0
 80053c0:	f001 fb3e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x1C);
 80053c4:	201c      	movs	r0, #28
 80053c6:	f001 fb3b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053ca:	2000      	movs	r0, #0
 80053cc:	f001 fb38 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x33);
 80053d0:	2033      	movs	r0, #51	@ 0x33
 80053d2:	f001 fb35 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053d6:	2000      	movs	r0, #0
 80053d8:	f001 fb32 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x44);
 80053dc:	2044      	movs	r0, #68	@ 0x44
 80053de:	f001 fb2f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053e2:	2000      	movs	r0, #0
 80053e4:	f001 fb2c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x50);
 80053e8:	2050      	movs	r0, #80	@ 0x50
 80053ea:	f001 fb29 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053ee:	2000      	movs	r0, #0
 80053f0:	f001 fb26 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x62);
 80053f4:	2062      	movs	r0, #98	@ 0x62
 80053f6:	f001 fb23 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80053fa:	2000      	movs	r0, #0
 80053fc:	f001 fb20 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x78);
 8005400:	2078      	movs	r0, #120	@ 0x78
 8005402:	f001 fb1d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005406:	2000      	movs	r0, #0
 8005408:	f001 fb1a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x88);
 800540c:	2088      	movs	r0, #136	@ 0x88
 800540e:	f001 fb17 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005412:	2000      	movs	r0, #0
 8005414:	f001 fb14 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x97);
 8005418:	2097      	movs	r0, #151	@ 0x97
 800541a:	f001 fb11 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800541e:	2000      	movs	r0, #0
 8005420:	f001 fb0e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA6);
 8005424:	20a6      	movs	r0, #166	@ 0xa6
 8005426:	f001 fb0b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800542a:	2000      	movs	r0, #0
 800542c:	f001 fb08 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xB7);
 8005430:	20b7      	movs	r0, #183	@ 0xb7
 8005432:	f001 fb05 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005436:	2000      	movs	r0, #0
 8005438:	f001 fb02 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xC2);
 800543c:	20c2      	movs	r0, #194	@ 0xc2
 800543e:	f001 faff 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005442:	2000      	movs	r0, #0
 8005444:	f001 fafc 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xC7);
 8005448:	20c7      	movs	r0, #199	@ 0xc7
 800544a:	f001 faf9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800544e:	2000      	movs	r0, #0
 8005450:	f001 faf6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD1);
 8005454:	20d1      	movs	r0, #209	@ 0xd1
 8005456:	f001 faf3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800545a:	2000      	movs	r0, #0
 800545c:	f001 faf0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD5);
 8005460:	20d5      	movs	r0, #213	@ 0xd5
 8005462:	f001 faed 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005466:	2000      	movs	r0, #0
 8005468:	f001 faea 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xDD);
 800546c:	20dd      	movs	r0, #221	@ 0xdd
 800546e:	f001 fae7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005472:	2000      	movs	r0, #0
 8005474:	f001 fae4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8005478:	20f3      	movs	r0, #243	@ 0xf3
 800547a:	f001 fae1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800547e:	2000      	movs	r0, #0
 8005480:	f001 fade 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xE4);
 8005484:	20e4      	movs	r0, #228	@ 0xe4
 8005486:	f001 faef 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x01);
 800548a:	2001      	movs	r0, #1
 800548c:	f001 fad8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005490:	2000      	movs	r0, #0
 8005492:	f001 fad5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x01);
 8005496:	2001      	movs	r0, #1
 8005498:	f001 fad2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800549c:	2000      	movs	r0, #0
 800549e:	f001 facf 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x02);
 80054a2:	2002      	movs	r0, #2
 80054a4:	f001 facc 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054a8:	2000      	movs	r0, #0
 80054aa:	f001 fac9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x2A);
 80054ae:	202a      	movs	r0, #42	@ 0x2a
 80054b0:	f001 fac6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054b4:	2000      	movs	r0, #0
 80054b6:	f001 fac3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80054ba:	203c      	movs	r0, #60	@ 0x3c
 80054bc:	f001 fac0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054c0:	2000      	movs	r0, #0
 80054c2:	f001 fabd 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x4B);
 80054c6:	204b      	movs	r0, #75	@ 0x4b
 80054c8:	f001 faba 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054cc:	2000      	movs	r0, #0
 80054ce:	f001 fab7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x5D);
 80054d2:	205d      	movs	r0, #93	@ 0x5d
 80054d4:	f001 fab4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054d8:	2000      	movs	r0, #0
 80054da:	f001 fab1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x74);
 80054de:	2074      	movs	r0, #116	@ 0x74
 80054e0:	f001 faae 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054e4:	2000      	movs	r0, #0
 80054e6:	f001 faab 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x84);
 80054ea:	2084      	movs	r0, #132	@ 0x84
 80054ec:	f001 faa8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054f0:	2000      	movs	r0, #0
 80054f2:	f001 faa5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x93);
 80054f6:	2093      	movs	r0, #147	@ 0x93
 80054f8:	f001 faa2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80054fc:	2000      	movs	r0, #0
 80054fe:	f001 fa9f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8005502:	20a2      	movs	r0, #162	@ 0xa2
 8005504:	f001 fa9c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005508:	2000      	movs	r0, #0
 800550a:	f001 fa99 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xB3);
 800550e:	20b3      	movs	r0, #179	@ 0xb3
 8005510:	f001 fa96 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005514:	2000      	movs	r0, #0
 8005516:	f001 fa93 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xBE);
 800551a:	20be      	movs	r0, #190	@ 0xbe
 800551c:	f001 fa90 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005520:	2000      	movs	r0, #0
 8005522:	f001 fa8d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8005526:	20c4      	movs	r0, #196	@ 0xc4
 8005528:	f001 fa8a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800552c:	2000      	movs	r0, #0
 800552e:	f001 fa87 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xCD);
 8005532:	20cd      	movs	r0, #205	@ 0xcd
 8005534:	f001 fa84 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005538:	2000      	movs	r0, #0
 800553a:	f001 fa81 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD3);
 800553e:	20d3      	movs	r0, #211	@ 0xd3
 8005540:	f001 fa7e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005544:	2000      	movs	r0, #0
 8005546:	f001 fa7b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xDD);
 800554a:	20dd      	movs	r0, #221	@ 0xdd
 800554c:	f001 fa78 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005550:	2000      	movs	r0, #0
 8005552:	f001 fa75 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8005556:	20f3      	movs	r0, #243	@ 0xf3
 8005558:	f001 fa72 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800555c:	2000      	movs	r0, #0
 800555e:	f001 fa6f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xE5);
 8005562:	20e5      	movs	r0, #229	@ 0xe5
 8005564:	f001 fa80 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005568:	2000      	movs	r0, #0
 800556a:	f001 fa69 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800556e:	2000      	movs	r0, #0
 8005570:	f001 fa66 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005574:	2000      	movs	r0, #0
 8005576:	f001 fa63 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800557a:	2000      	movs	r0, #0
 800557c:	f001 fa60 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x02);
 8005580:	2002      	movs	r0, #2
 8005582:	f001 fa5d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005586:	2000      	movs	r0, #0
 8005588:	f001 fa5a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x29);
 800558c:	2029      	movs	r0, #41	@ 0x29
 800558e:	f001 fa57 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005592:	2000      	movs	r0, #0
 8005594:	f001 fa54 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8005598:	203c      	movs	r0, #60	@ 0x3c
 800559a:	f001 fa51 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800559e:	2000      	movs	r0, #0
 80055a0:	f001 fa4e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x4B);
 80055a4:	204b      	movs	r0, #75	@ 0x4b
 80055a6:	f001 fa4b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055aa:	2000      	movs	r0, #0
 80055ac:	f001 fa48 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x5D);
 80055b0:	205d      	movs	r0, #93	@ 0x5d
 80055b2:	f001 fa45 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055b6:	2000      	movs	r0, #0
 80055b8:	f001 fa42 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x74);
 80055bc:	2074      	movs	r0, #116	@ 0x74
 80055be:	f001 fa3f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055c2:	2000      	movs	r0, #0
 80055c4:	f001 fa3c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x84);
 80055c8:	2084      	movs	r0, #132	@ 0x84
 80055ca:	f001 fa39 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055ce:	2000      	movs	r0, #0
 80055d0:	f001 fa36 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x93);
 80055d4:	2093      	movs	r0, #147	@ 0x93
 80055d6:	f001 fa33 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055da:	2000      	movs	r0, #0
 80055dc:	f001 fa30 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xA2);
 80055e0:	20a2      	movs	r0, #162	@ 0xa2
 80055e2:	f001 fa2d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055e6:	2000      	movs	r0, #0
 80055e8:	f001 fa2a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xB3);
 80055ec:	20b3      	movs	r0, #179	@ 0xb3
 80055ee:	f001 fa27 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055f2:	2000      	movs	r0, #0
 80055f4:	f001 fa24 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xBE);
 80055f8:	20be      	movs	r0, #190	@ 0xbe
 80055fa:	f001 fa21 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80055fe:	2000      	movs	r0, #0
 8005600:	f001 fa1e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8005604:	20c4      	movs	r0, #196	@ 0xc4
 8005606:	f001 fa1b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800560a:	2000      	movs	r0, #0
 800560c:	f001 fa18 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xCD);
 8005610:	20cd      	movs	r0, #205	@ 0xcd
 8005612:	f001 fa15 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005616:	2000      	movs	r0, #0
 8005618:	f001 fa12 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xD3);
 800561c:	20d3      	movs	r0, #211	@ 0xd3
 800561e:	f001 fa0f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005622:	2000      	movs	r0, #0
 8005624:	f001 fa0c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8005628:	20dc      	movs	r0, #220	@ 0xdc
 800562a:	f001 fa09 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800562e:	2000      	movs	r0, #0
 8005630:	f001 fa06 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8005634:	20f3      	movs	r0, #243	@ 0xf3
 8005636:	f001 fa03 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800563a:	2000      	movs	r0, #0
 800563c:	f001 fa00 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8005640:	20e6      	movs	r0, #230	@ 0xe6
 8005642:	f001 fa11 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x11);
 8005646:	2011      	movs	r0, #17
 8005648:	f001 f9fa 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800564c:	2000      	movs	r0, #0
 800564e:	f001 f9f7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x34);
 8005652:	2034      	movs	r0, #52	@ 0x34
 8005654:	f001 f9f4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005658:	2000      	movs	r0, #0
 800565a:	f001 f9f1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x56);
 800565e:	2056      	movs	r0, #86	@ 0x56
 8005660:	f001 f9ee 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005664:	2000      	movs	r0, #0
 8005666:	f001 f9eb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x76);
 800566a:	2076      	movs	r0, #118	@ 0x76
 800566c:	f001 f9e8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005670:	2000      	movs	r0, #0
 8005672:	f001 f9e5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x77);
 8005676:	2077      	movs	r0, #119	@ 0x77
 8005678:	f001 f9e2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800567c:	2000      	movs	r0, #0
 800567e:	f001 f9df 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x66);
 8005682:	2066      	movs	r0, #102	@ 0x66
 8005684:	f001 f9dc 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005688:	2000      	movs	r0, #0
 800568a:	f001 f9d9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x88);
 800568e:	2088      	movs	r0, #136	@ 0x88
 8005690:	f001 f9d6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005694:	2000      	movs	r0, #0
 8005696:	f001 f9d3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x99);
 800569a:	2099      	movs	r0, #153	@ 0x99
 800569c:	f001 f9d0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056a0:	2000      	movs	r0, #0
 80056a2:	f001 f9cd 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xBB);
 80056a6:	20bb      	movs	r0, #187	@ 0xbb
 80056a8:	f001 f9ca 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056ac:	2000      	movs	r0, #0
 80056ae:	f001 f9c7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x99);
 80056b2:	2099      	movs	r0, #153	@ 0x99
 80056b4:	f001 f9c4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056b8:	2000      	movs	r0, #0
 80056ba:	f001 f9c1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x66);
 80056be:	2066      	movs	r0, #102	@ 0x66
 80056c0:	f001 f9be 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056c4:	2000      	movs	r0, #0
 80056c6:	f001 f9bb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x55);
 80056ca:	2055      	movs	r0, #85	@ 0x55
 80056cc:	f001 f9b8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056d0:	2000      	movs	r0, #0
 80056d2:	f001 f9b5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x55);
 80056d6:	2055      	movs	r0, #85	@ 0x55
 80056d8:	f001 f9b2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056dc:	2000      	movs	r0, #0
 80056de:	f001 f9af 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x45);
 80056e2:	2045      	movs	r0, #69	@ 0x45
 80056e4:	f001 f9ac 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056e8:	2000      	movs	r0, #0
 80056ea:	f001 f9a9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x43);
 80056ee:	2043      	movs	r0, #67	@ 0x43
 80056f0:	f001 f9a6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80056f4:	2000      	movs	r0, #0
 80056f6:	f001 f9a3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x44);
 80056fa:	2044      	movs	r0, #68	@ 0x44
 80056fc:	f001 f9a0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005700:	2000      	movs	r0, #0
 8005702:	f001 f99d 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xE7);
 8005706:	20e7      	movs	r0, #231	@ 0xe7
 8005708:	f001 f9ae 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x32);
 800570c:	2032      	movs	r0, #50	@ 0x32
 800570e:	f001 f997 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005712:	2000      	movs	r0, #0
 8005714:	f001 f994 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x55);
 8005718:	2055      	movs	r0, #85	@ 0x55
 800571a:	f001 f991 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800571e:	2000      	movs	r0, #0
 8005720:	f001 f98e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x76);
 8005724:	2076      	movs	r0, #118	@ 0x76
 8005726:	f001 f98b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800572a:	2000      	movs	r0, #0
 800572c:	f001 f988 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x66);
 8005730:	2066      	movs	r0, #102	@ 0x66
 8005732:	f001 f985 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005736:	2000      	movs	r0, #0
 8005738:	f001 f982 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x67);
 800573c:	2067      	movs	r0, #103	@ 0x67
 800573e:	f001 f97f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005742:	2000      	movs	r0, #0
 8005744:	f001 f97c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x67);
 8005748:	2067      	movs	r0, #103	@ 0x67
 800574a:	f001 f979 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800574e:	2000      	movs	r0, #0
 8005750:	f001 f976 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x87);
 8005754:	2087      	movs	r0, #135	@ 0x87
 8005756:	f001 f973 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800575a:	2000      	movs	r0, #0
 800575c:	f001 f970 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x99);
 8005760:	2099      	movs	r0, #153	@ 0x99
 8005762:	f001 f96d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005766:	2000      	movs	r0, #0
 8005768:	f001 f96a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xBB);
 800576c:	20bb      	movs	r0, #187	@ 0xbb
 800576e:	f001 f967 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005772:	2000      	movs	r0, #0
 8005774:	f001 f964 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x99);
 8005778:	2099      	movs	r0, #153	@ 0x99
 800577a:	f001 f961 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800577e:	2000      	movs	r0, #0
 8005780:	f001 f95e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x77);
 8005784:	2077      	movs	r0, #119	@ 0x77
 8005786:	f001 f95b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800578a:	2000      	movs	r0, #0
 800578c:	f001 f958 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x44);
 8005790:	2044      	movs	r0, #68	@ 0x44
 8005792:	f001 f955 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005796:	2000      	movs	r0, #0
 8005798:	f001 f952 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x56);
 800579c:	2056      	movs	r0, #86	@ 0x56
 800579e:	f001 f94f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057a2:	2000      	movs	r0, #0
 80057a4:	f001 f94c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x23);
 80057a8:	2023      	movs	r0, #35	@ 0x23
 80057aa:	f001 f949 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057ae:	2000      	movs	r0, #0
 80057b0:	f001 f946 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x33);
 80057b4:	2033      	movs	r0, #51	@ 0x33
 80057b6:	f001 f943 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057ba:	2000      	movs	r0, #0
 80057bc:	f001 f940 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x45);
 80057c0:	2045      	movs	r0, #69	@ 0x45
 80057c2:	f001 f93d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057c6:	2000      	movs	r0, #0
 80057c8:	f001 f93a 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 80057cc:	20e8      	movs	r0, #232	@ 0xe8
 80057ce:	f001 f94b 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80057d2:	2000      	movs	r0, #0
 80057d4:	f001 f934 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057d8:	2000      	movs	r0, #0
 80057da:	f001 f931 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x99);
 80057de:	2099      	movs	r0, #153	@ 0x99
 80057e0:	f001 f92e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057e4:	2000      	movs	r0, #0
 80057e6:	f001 f92b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x87);
 80057ea:	2087      	movs	r0, #135	@ 0x87
 80057ec:	f001 f928 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057f0:	2000      	movs	r0, #0
 80057f2:	f001 f925 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x88);
 80057f6:	2088      	movs	r0, #136	@ 0x88
 80057f8:	f001 f922 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80057fc:	2000      	movs	r0, #0
 80057fe:	f001 f91f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x77);
 8005802:	2077      	movs	r0, #119	@ 0x77
 8005804:	f001 f91c 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005808:	2000      	movs	r0, #0
 800580a:	f001 f919 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x66);
 800580e:	2066      	movs	r0, #102	@ 0x66
 8005810:	f001 f916 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005814:	2000      	movs	r0, #0
 8005816:	f001 f913 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x88);
 800581a:	2088      	movs	r0, #136	@ 0x88
 800581c:	f001 f910 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005820:	2000      	movs	r0, #0
 8005822:	f001 f90d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xAA);
 8005826:	20aa      	movs	r0, #170	@ 0xaa
 8005828:	f001 f90a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800582c:	2000      	movs	r0, #0
 800582e:	f001 f907 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8005832:	20bb      	movs	r0, #187	@ 0xbb
 8005834:	f001 f904 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005838:	2000      	movs	r0, #0
 800583a:	f001 f901 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x99);
 800583e:	2099      	movs	r0, #153	@ 0x99
 8005840:	f001 f8fe 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005844:	2000      	movs	r0, #0
 8005846:	f001 f8fb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x66);
 800584a:	2066      	movs	r0, #102	@ 0x66
 800584c:	f001 f8f8 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005850:	2000      	movs	r0, #0
 8005852:	f001 f8f5 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x55);
 8005856:	2055      	movs	r0, #85	@ 0x55
 8005858:	f001 f8f2 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800585c:	2000      	movs	r0, #0
 800585e:	f001 f8ef 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x55);
 8005862:	2055      	movs	r0, #85	@ 0x55
 8005864:	f001 f8ec 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005868:	2000      	movs	r0, #0
 800586a:	f001 f8e9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x44);
 800586e:	2044      	movs	r0, #68	@ 0x44
 8005870:	f001 f8e6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005874:	2000      	movs	r0, #0
 8005876:	f001 f8e3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x44);
 800587a:	2044      	movs	r0, #68	@ 0x44
 800587c:	f001 f8e0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005880:	2000      	movs	r0, #0
 8005882:	f001 f8dd 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x55);
 8005886:	2055      	movs	r0, #85	@ 0x55
 8005888:	f001 f8da 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800588c:	2000      	movs	r0, #0
 800588e:	f001 f8d7 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xE9);
 8005892:	20e9      	movs	r0, #233	@ 0xe9
 8005894:	f001 f8e8 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8005898:	20aa      	movs	r0, #170	@ 0xaa
 800589a:	f001 f8d1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800589e:	2000      	movs	r0, #0
 80058a0:	f001 f8ce 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058a4:	2000      	movs	r0, #0
 80058a6:	f001 f8cb 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058aa:	2000      	movs	r0, #0
 80058ac:	f001 f8c8 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0x00);
 80058b0:	2000      	movs	r0, #0
 80058b2:	f001 f8d9 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 80058b6:	20aa      	movs	r0, #170	@ 0xaa
 80058b8:	f001 f8c2 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xCF);
 80058bc:	20cf      	movs	r0, #207	@ 0xcf
 80058be:	f001 f8d3 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80058c2:	2000      	movs	r0, #0
 80058c4:	f001 f8bc 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058c8:	2000      	movs	r0, #0
 80058ca:	f001 f8b9 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058ce:	2000      	movs	r0, #0
 80058d0:	f001 f8b6 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058d4:	2000      	movs	r0, #0
 80058d6:	f001 f8b3 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058da:	2000      	movs	r0, #0
 80058dc:	f001 f8b0 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058e0:	2000      	movs	r0, #0
 80058e2:	f001 f8ad 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058e6:	2000      	movs	r0, #0
 80058e8:	f001 f8aa 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058ec:	2000      	movs	r0, #0
 80058ee:	f001 f8a7 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058f2:	2000      	movs	r0, #0
 80058f4:	f001 f8a4 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058f8:	2000      	movs	r0, #0
 80058fa:	f001 f8a1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80058fe:	2000      	movs	r0, #0
 8005900:	f001 f89e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005904:	2000      	movs	r0, #0
 8005906:	f001 f89b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800590a:	2000      	movs	r0, #0
 800590c:	f001 f898 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005910:	2000      	movs	r0, #0
 8005912:	f001 f895 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005916:	2000      	movs	r0, #0
 8005918:	f001 f892 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800591c:	2000      	movs	r0, #0
 800591e:	f001 f88f 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005922:	2000      	movs	r0, #0
 8005924:	f001 f88c 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8005928:	20f0      	movs	r0, #240	@ 0xf0
 800592a:	f001 f89d 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800592e:	2000      	movs	r0, #0
 8005930:	f001 f886 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x50);
 8005934:	2050      	movs	r0, #80	@ 0x50
 8005936:	f001 f883 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800593a:	2000      	movs	r0, #0
 800593c:	f001 f880 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005940:	2000      	movs	r0, #0
 8005942:	f001 f87d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005946:	2000      	movs	r0, #0
 8005948:	f001 f87a 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xF3);
 800594c:	20f3      	movs	r0, #243	@ 0xf3
 800594e:	f001 f88b 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8005952:	2000      	movs	r0, #0
 8005954:	f001 f874 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xF9);
 8005958:	20f9      	movs	r0, #249	@ 0xf9
 800595a:	f001 f885 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x06);
 800595e:	2006      	movs	r0, #6
 8005960:	f001 f86e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x10);
 8005964:	2010      	movs	r0, #16
 8005966:	f001 f86b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x29);
 800596a:	2029      	movs	r0, #41	@ 0x29
 800596c:	f001 f868 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8005970:	2000      	movs	r0, #0
 8005972:	f001 f865 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8005976:	203a      	movs	r0, #58	@ 0x3a
 8005978:	f001 f876 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 800597c:	2055      	movs	r0, #85	@ 0x55
 800597e:	f001 f85f 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0x11);
 8005982:	2011      	movs	r0, #17
 8005984:	f001 f870 	bl	8006a68 <lcd_wr_regno>
    HAL_Delay(100);
 8005988:	2064      	movs	r0, #100	@ 0x64
 800598a:	f7fc fb39 	bl	8002000 <HAL_Delay>
    lcd_wr_regno(0x29);
 800598e:	2029      	movs	r0, #41	@ 0x29
 8005990:	f001 f86a 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_regno(0x35);
 8005994:	2035      	movs	r0, #53	@ 0x35
 8005996:	f001 f867 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800599a:	2000      	movs	r0, #0
 800599c:	f001 f850 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0x51);
 80059a0:	2051      	movs	r0, #81	@ 0x51
 80059a2:	f001 f861 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 80059a6:	20ff      	movs	r0, #255	@ 0xff
 80059a8:	f001 f84a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0x53);
 80059ac:	2053      	movs	r0, #83	@ 0x53
 80059ae:	f001 f85b 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x2C);
 80059b2:	202c      	movs	r0, #44	@ 0x2c
 80059b4:	f001 f844 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0x55);
 80059b8:	2055      	movs	r0, #85	@ 0x55
 80059ba:	f001 f855 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x82);
 80059be:	2082      	movs	r0, #130	@ 0x82
 80059c0:	f001 f83e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0x2c);
 80059c4:	202c      	movs	r0, #44	@ 0x2c
 80059c6:	f001 f84f 	bl	8006a68 <lcd_wr_regno>
}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}

080059ce <lcd_ex_nt35510_reginit>:
 * @brief       NT35510寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_nt35510_reginit(void)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 80059d2:	2155      	movs	r1, #85	@ 0x55
 80059d4:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80059d8:	f001 f85a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 80059dc:	21aa      	movs	r1, #170	@ 0xaa
 80059de:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80059e2:	f001 f855 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 80059e6:	2152      	movs	r1, #82	@ 0x52
 80059e8:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80059ec:	f001 f850 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 80059f0:	2108      	movs	r1, #8
 80059f2:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80059f6:	f001 f84b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 80059fa:	2101      	movs	r1, #1
 80059fc:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8005a00:	f001 f846 	bl	8006a90 <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 8005a04:	210d      	movs	r1, #13
 8005a06:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8005a0a:	f001 f841 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 8005a0e:	210d      	movs	r1, #13
 8005a10:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8005a14:	f001 f83c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 8005a18:	210d      	movs	r1, #13
 8005a1a:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8005a1e:	f001 f837 	bl	8006a90 <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 8005a22:	2134      	movs	r1, #52	@ 0x34
 8005a24:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8005a28:	f001 f832 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 8005a2c:	2134      	movs	r1, #52	@ 0x34
 8005a2e:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8005a32:	f001 f82d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 8005a36:	2134      	movs	r1, #52	@ 0x34
 8005a38:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8005a3c:	f001 f828 	bl	8006a90 <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 8005a40:	210d      	movs	r1, #13
 8005a42:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8005a46:	f001 f823 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 8005a4a:	210d      	movs	r1, #13
 8005a4c:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8005a50:	f001 f81e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 8005a54:	210d      	movs	r1, #13
 8005a56:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8005a5a:	f001 f819 	bl	8006a90 <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 8005a5e:	2134      	movs	r1, #52	@ 0x34
 8005a60:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8005a64:	f001 f814 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 8005a68:	2134      	movs	r1, #52	@ 0x34
 8005a6a:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8005a6e:	f001 f80f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 8005a72:	2134      	movs	r1, #52	@ 0x34
 8005a74:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8005a78:	f001 f80a 	bl	8006a90 <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8005a82:	f001 f805 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 8005a86:	2100      	movs	r1, #0
 8005a88:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8005a8c:	f001 f800 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 8005a90:	2100      	movs	r1, #0
 8005a92:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8005a96:	f000 fffb 	bl	8006a90 <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 8005a9a:	2124      	movs	r1, #36	@ 0x24
 8005a9c:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8005aa0:	f000 fff6 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 8005aa4:	2124      	movs	r1, #36	@ 0x24
 8005aa6:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8005aaa:	f000 fff1 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 8005aae:	2124      	movs	r1, #36	@ 0x24
 8005ab0:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8005ab4:	f000 ffec 	bl	8006a90 <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 8005ab8:	2101      	movs	r1, #1
 8005aba:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8005abe:	f000 ffe7 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 8005ac2:	210f      	movs	r1, #15
 8005ac4:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8005ac8:	f000 ffe2 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 8005acc:	210f      	movs	r1, #15
 8005ace:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8005ad2:	f000 ffdd 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 8005ad6:	210f      	movs	r1, #15
 8005ad8:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8005adc:	f000 ffd8 	bl	8006a90 <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 8005ae0:	2134      	movs	r1, #52	@ 0x34
 8005ae2:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8005ae6:	f000 ffd3 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 8005aea:	2134      	movs	r1, #52	@ 0x34
 8005aec:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8005af0:	f000 ffce 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 8005af4:	2134      	movs	r1, #52	@ 0x34
 8005af6:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8005afa:	f000 ffc9 	bl	8006a90 <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 8005afe:	2108      	movs	r1, #8
 8005b00:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8005b04:	f000 ffc4 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 8005b08:	2108      	movs	r1, #8
 8005b0a:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8005b0e:	f000 ffbf 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 8005b12:	2108      	movs	r1, #8
 8005b14:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8005b18:	f000 ffba 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 8005b1c:	2103      	movs	r1, #3
 8005b1e:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 8005b22:	f000 ffb5 	bl	8006a90 <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 8005b26:	2124      	movs	r1, #36	@ 0x24
 8005b28:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8005b2c:	f000 ffb0 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 8005b30:	2124      	movs	r1, #36	@ 0x24
 8005b32:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8005b36:	f000 ffab 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 8005b3a:	2124      	movs	r1, #36	@ 0x24
 8005b3c:	f64b 2002 	movw	r0, #47618	@ 0xba02
 8005b40:	f000 ffa6 	bl	8006a90 <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 8005b44:	2100      	movs	r1, #0
 8005b46:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8005b4a:	f000 ffa1 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 8005b4e:	2178      	movs	r1, #120	@ 0x78
 8005b50:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8005b54:	f000 ff9c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8005b58:	2100      	movs	r1, #0
 8005b5a:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8005b5e:	f000 ff97 	bl	8006a90 <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 8005b62:	2100      	movs	r1, #0
 8005b64:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8005b68:	f000 ff92 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 8005b6c:	2178      	movs	r1, #120	@ 0x78
 8005b6e:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8005b72:	f000 ff8d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 8005b76:	2100      	movs	r1, #0
 8005b78:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8005b7c:	f000 ff88 	bl	8006a90 <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 8005b80:	2100      	movs	r1, #0
 8005b82:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8005b86:	f000 ff83 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 8005b8a:	2164      	movs	r1, #100	@ 0x64
 8005b8c:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 8005b90:	f000 ff7e 	bl	8006a90 <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 8005b94:	2100      	movs	r1, #0
 8005b96:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8005b9a:	f000 ff79 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 8005b9e:	2133      	movs	r1, #51	@ 0x33
 8005ba0:	f24d 1001 	movw	r0, #53505	@ 0xd101
 8005ba4:	f000 ff74 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 8005ba8:	2100      	movs	r1, #0
 8005baa:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8005bae:	f000 ff6f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 8005bb2:	2134      	movs	r1, #52	@ 0x34
 8005bb4:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8005bb8:	f000 ff6a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	f24d 1004 	movw	r0, #53508	@ 0xd104
 8005bc2:	f000 ff65 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 8005bc6:	213a      	movs	r1, #58	@ 0x3a
 8005bc8:	f24d 1005 	movw	r0, #53509	@ 0xd105
 8005bcc:	f000 ff60 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8005bd6:	f000 ff5b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 8005bda:	214a      	movs	r1, #74	@ 0x4a
 8005bdc:	f24d 1007 	movw	r0, #53511	@ 0xd107
 8005be0:	f000 ff56 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 8005be4:	2100      	movs	r1, #0
 8005be6:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8005bea:	f000 ff51 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 8005bee:	215c      	movs	r1, #92	@ 0x5c
 8005bf0:	f24d 1009 	movw	r0, #53513	@ 0xd109
 8005bf4:	f000 ff4c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8005bfe:	f000 ff47 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 8005c02:	2181      	movs	r1, #129	@ 0x81
 8005c04:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8005c08:	f000 ff42 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 8005c12:	f000 ff3d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 8005c16:	21a6      	movs	r1, #166	@ 0xa6
 8005c18:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8005c1c:	f000 ff38 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 8005c20:	2100      	movs	r1, #0
 8005c22:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8005c26:	f000 ff33 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 8005c2a:	21e5      	movs	r1, #229	@ 0xe5
 8005c2c:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 8005c30:	f000 ff2e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 8005c34:	2101      	movs	r1, #1
 8005c36:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8005c3a:	f000 ff29 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 8005c3e:	2113      	movs	r1, #19
 8005c40:	f24d 1011 	movw	r0, #53521	@ 0xd111
 8005c44:	f000 ff24 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 8005c48:	2101      	movs	r1, #1
 8005c4a:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8005c4e:	f000 ff1f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 8005c52:	2154      	movs	r1, #84	@ 0x54
 8005c54:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8005c58:	f000 ff1a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8005c62:	f000 ff15 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 8005c66:	2182      	movs	r1, #130	@ 0x82
 8005c68:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8005c6c:	f000 ff10 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 8005c70:	2101      	movs	r1, #1
 8005c72:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8005c76:	f000 ff0b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 8005c7a:	21ca      	movs	r1, #202	@ 0xca
 8005c7c:	f24d 1017 	movw	r0, #53527	@ 0xd117
 8005c80:	f000 ff06 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 8005c84:	2102      	movs	r1, #2
 8005c86:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8005c8a:	f000 ff01 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 8005c8e:	2100      	movs	r1, #0
 8005c90:	f24d 1019 	movw	r0, #53529	@ 0xd119
 8005c94:	f000 fefc 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 8005c98:	2102      	movs	r1, #2
 8005c9a:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8005c9e:	f000 fef7 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8005ca8:	f000 fef2 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 8005cac:	2102      	movs	r1, #2
 8005cae:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 8005cb2:	f000 feed 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 8005cb6:	2134      	movs	r1, #52	@ 0x34
 8005cb8:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8005cbc:	f000 fee8 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8005cc6:	f000 fee3 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 8005cca:	2167      	movs	r1, #103	@ 0x67
 8005ccc:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 8005cd0:	f000 fede 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8005cda:	f000 fed9 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 8005cde:	2184      	movs	r1, #132	@ 0x84
 8005ce0:	f24d 1021 	movw	r0, #53537	@ 0xd121
 8005ce4:	f000 fed4 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 8005ce8:	2102      	movs	r1, #2
 8005cea:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8005cee:	f000 fecf 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 8005cf2:	21a4      	movs	r1, #164	@ 0xa4
 8005cf4:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8005cf8:	f000 feca 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 8005cfc:	2102      	movs	r1, #2
 8005cfe:	f24d 1024 	movw	r0, #53540	@ 0xd124
 8005d02:	f000 fec5 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 8005d06:	21b7      	movs	r1, #183	@ 0xb7
 8005d08:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8005d0c:	f000 fec0 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 8005d10:	2102      	movs	r1, #2
 8005d12:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8005d16:	f000 febb 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 8005d1a:	21cf      	movs	r1, #207	@ 0xcf
 8005d1c:	f24d 1027 	movw	r0, #53543	@ 0xd127
 8005d20:	f000 feb6 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 8005d24:	2102      	movs	r1, #2
 8005d26:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8005d2a:	f000 feb1 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 8005d2e:	21de      	movs	r1, #222	@ 0xde
 8005d30:	f24d 1029 	movw	r0, #53545	@ 0xd129
 8005d34:	f000 feac 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 8005d38:	2102      	movs	r1, #2
 8005d3a:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8005d3e:	f000 fea7 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 8005d42:	21f2      	movs	r1, #242	@ 0xf2
 8005d44:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8005d48:	f000 fea2 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 8005d52:	f000 fe9d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 8005d56:	21fe      	movs	r1, #254	@ 0xfe
 8005d58:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8005d5c:	f000 fe98 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 8005d60:	2103      	movs	r1, #3
 8005d62:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8005d66:	f000 fe93 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 8005d6a:	2110      	movs	r1, #16
 8005d6c:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 8005d70:	f000 fe8e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 8005d74:	2103      	movs	r1, #3
 8005d76:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8005d7a:	f000 fe89 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 8005d7e:	2133      	movs	r1, #51	@ 0x33
 8005d80:	f24d 1031 	movw	r0, #53553	@ 0xd131
 8005d84:	f000 fe84 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 8005d88:	2103      	movs	r1, #3
 8005d8a:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8005d8e:	f000 fe7f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 8005d92:	216d      	movs	r1, #109	@ 0x6d
 8005d94:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8005d98:	f000 fe7a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 8005da2:	f000 fe75 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 8005da6:	2133      	movs	r1, #51	@ 0x33
 8005da8:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8005dac:	f000 fe70 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 8005db0:	2100      	movs	r1, #0
 8005db2:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8005db6:	f000 fe6b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 8005dba:	2134      	movs	r1, #52	@ 0x34
 8005dbc:	f24d 2003 	movw	r0, #53763	@ 0xd203
 8005dc0:	f000 fe66 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	f24d 2004 	movw	r0, #53764	@ 0xd204
 8005dca:	f000 fe61 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 8005dce:	213a      	movs	r1, #58	@ 0x3a
 8005dd0:	f24d 2005 	movw	r0, #53765	@ 0xd205
 8005dd4:	f000 fe5c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 8005dd8:	2100      	movs	r1, #0
 8005dda:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8005dde:	f000 fe57 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 8005de2:	214a      	movs	r1, #74	@ 0x4a
 8005de4:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8005de8:	f000 fe52 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 8005dec:	2100      	movs	r1, #0
 8005dee:	f24d 2008 	movw	r0, #53768	@ 0xd208
 8005df2:	f000 fe4d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 8005df6:	215c      	movs	r1, #92	@ 0x5c
 8005df8:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8005dfc:	f000 fe48 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 8005e00:	2100      	movs	r1, #0
 8005e02:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8005e06:	f000 fe43 	bl	8006a90 <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 8005e0a:	2181      	movs	r1, #129	@ 0x81
 8005e0c:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 8005e10:	f000 fe3e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 8005e14:	2100      	movs	r1, #0
 8005e16:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8005e1a:	f000 fe39 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 8005e1e:	21a6      	movs	r1, #166	@ 0xa6
 8005e20:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 8005e24:	f000 fe34 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 8005e28:	2100      	movs	r1, #0
 8005e2a:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8005e2e:	f000 fe2f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 8005e32:	21e5      	movs	r1, #229	@ 0xe5
 8005e34:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8005e38:	f000 fe2a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	f24d 2010 	movw	r0, #53776	@ 0xd210
 8005e42:	f000 fe25 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 8005e46:	2113      	movs	r1, #19
 8005e48:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8005e4c:	f000 fe20 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 8005e50:	2101      	movs	r1, #1
 8005e52:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8005e56:	f000 fe1b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 8005e5a:	2154      	movs	r1, #84	@ 0x54
 8005e5c:	f24d 2013 	movw	r0, #53779	@ 0xd213
 8005e60:	f000 fe16 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 8005e64:	2101      	movs	r1, #1
 8005e66:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8005e6a:	f000 fe11 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 8005e6e:	2182      	movs	r1, #130	@ 0x82
 8005e70:	f24d 2015 	movw	r0, #53781	@ 0xd215
 8005e74:	f000 fe0c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 8005e78:	2101      	movs	r1, #1
 8005e7a:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8005e7e:	f000 fe07 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 8005e82:	21ca      	movs	r1, #202	@ 0xca
 8005e84:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8005e88:	f000 fe02 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	f24d 2018 	movw	r0, #53784	@ 0xd218
 8005e92:	f000 fdfd 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 8005e96:	2100      	movs	r1, #0
 8005e98:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8005e9c:	f000 fdf8 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 8005ea0:	2102      	movs	r1, #2
 8005ea2:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8005ea6:	f000 fdf3 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 8005eaa:	2101      	movs	r1, #1
 8005eac:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 8005eb0:	f000 fdee 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 8005eb4:	2102      	movs	r1, #2
 8005eb6:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8005eba:	f000 fde9 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 8005ebe:	2134      	movs	r1, #52	@ 0x34
 8005ec0:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 8005ec4:	f000 fde4 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 8005ec8:	2102      	movs	r1, #2
 8005eca:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8005ece:	f000 fddf 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 8005ed2:	2167      	movs	r1, #103	@ 0x67
 8005ed4:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8005ed8:	f000 fdda 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 8005edc:	2102      	movs	r1, #2
 8005ede:	f24d 2020 	movw	r0, #53792	@ 0xd220
 8005ee2:	f000 fdd5 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 8005ee6:	2184      	movs	r1, #132	@ 0x84
 8005ee8:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8005eec:	f000 fdd0 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8005ef6:	f000 fdcb 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 8005efa:	21a4      	movs	r1, #164	@ 0xa4
 8005efc:	f24d 2023 	movw	r0, #53795	@ 0xd223
 8005f00:	f000 fdc6 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 8005f04:	2102      	movs	r1, #2
 8005f06:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8005f0a:	f000 fdc1 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 8005f0e:	21b7      	movs	r1, #183	@ 0xb7
 8005f10:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8005f14:	f000 fdbc 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 8005f18:	2102      	movs	r1, #2
 8005f1a:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8005f1e:	f000 fdb7 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 8005f22:	21cf      	movs	r1, #207	@ 0xcf
 8005f24:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8005f28:	f000 fdb2 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8005f32:	f000 fdad 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 8005f36:	21de      	movs	r1, #222	@ 0xde
 8005f38:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8005f3c:	f000 fda8 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 8005f40:	2102      	movs	r1, #2
 8005f42:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8005f46:	f000 fda3 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 8005f4a:	21f2      	movs	r1, #242	@ 0xf2
 8005f4c:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 8005f50:	f000 fd9e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 8005f54:	2102      	movs	r1, #2
 8005f56:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8005f5a:	f000 fd99 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 8005f5e:	21fe      	movs	r1, #254	@ 0xfe
 8005f60:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 8005f64:	f000 fd94 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 8005f68:	2103      	movs	r1, #3
 8005f6a:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8005f6e:	f000 fd8f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 8005f72:	2110      	movs	r1, #16
 8005f74:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8005f78:	f000 fd8a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 8005f7c:	2103      	movs	r1, #3
 8005f7e:	f24d 2030 	movw	r0, #53808	@ 0xd230
 8005f82:	f000 fd85 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 8005f86:	2133      	movs	r1, #51	@ 0x33
 8005f88:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8005f8c:	f000 fd80 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 8005f90:	2103      	movs	r1, #3
 8005f92:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8005f96:	f000 fd7b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 8005f9a:	216d      	movs	r1, #109	@ 0x6d
 8005f9c:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8005fa0:	f000 fd76 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8005faa:	f000 fd71 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 8005fae:	2133      	movs	r1, #51	@ 0x33
 8005fb0:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8005fb4:	f000 fd6c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 8005fb8:	2100      	movs	r1, #0
 8005fba:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8005fbe:	f000 fd67 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 8005fc2:	2134      	movs	r1, #52	@ 0x34
 8005fc4:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8005fc8:	f000 fd62 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 8005fcc:	2100      	movs	r1, #0
 8005fce:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8005fd2:	f000 fd5d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 8005fd6:	213a      	movs	r1, #58	@ 0x3a
 8005fd8:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8005fdc:	f000 fd58 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8005fe6:	f000 fd53 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 8005fea:	214a      	movs	r1, #74	@ 0x4a
 8005fec:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8005ff0:	f000 fd4e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8005ffa:	f000 fd49 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 8005ffe:	215c      	movs	r1, #92	@ 0x5c
 8006000:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8006004:	f000 fd44 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 8006008:	2100      	movs	r1, #0
 800600a:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 800600e:	f000 fd3f 	bl	8006a90 <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 8006012:	2181      	movs	r1, #129	@ 0x81
 8006014:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8006018:	f000 fd3a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 800601c:	2100      	movs	r1, #0
 800601e:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8006022:	f000 fd35 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 8006026:	21a6      	movs	r1, #166	@ 0xa6
 8006028:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 800602c:	f000 fd30 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 8006030:	2100      	movs	r1, #0
 8006032:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8006036:	f000 fd2b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 800603a:	21e5      	movs	r1, #229	@ 0xe5
 800603c:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8006040:	f000 fd26 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 8006044:	2101      	movs	r1, #1
 8006046:	f24d 3010 	movw	r0, #54032	@ 0xd310
 800604a:	f000 fd21 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 800604e:	2113      	movs	r1, #19
 8006050:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8006054:	f000 fd1c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 8006058:	2101      	movs	r1, #1
 800605a:	f24d 3012 	movw	r0, #54034	@ 0xd312
 800605e:	f000 fd17 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 8006062:	2154      	movs	r1, #84	@ 0x54
 8006064:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8006068:	f000 fd12 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 800606c:	2101      	movs	r1, #1
 800606e:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8006072:	f000 fd0d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 8006076:	2182      	movs	r1, #130	@ 0x82
 8006078:	f24d 3015 	movw	r0, #54037	@ 0xd315
 800607c:	f000 fd08 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 8006080:	2101      	movs	r1, #1
 8006082:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8006086:	f000 fd03 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 800608a:	21ca      	movs	r1, #202	@ 0xca
 800608c:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8006090:	f000 fcfe 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 8006094:	2102      	movs	r1, #2
 8006096:	f24d 3018 	movw	r0, #54040	@ 0xd318
 800609a:	f000 fcf9 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 800609e:	2100      	movs	r1, #0
 80060a0:	f24d 3019 	movw	r0, #54041	@ 0xd319
 80060a4:	f000 fcf4 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 80060a8:	2102      	movs	r1, #2
 80060aa:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 80060ae:	f000 fcef 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 80060b2:	2101      	movs	r1, #1
 80060b4:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 80060b8:	f000 fcea 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 80060bc:	2102      	movs	r1, #2
 80060be:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 80060c2:	f000 fce5 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 80060c6:	2134      	movs	r1, #52	@ 0x34
 80060c8:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 80060cc:	f000 fce0 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 80060d0:	2102      	movs	r1, #2
 80060d2:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 80060d6:	f000 fcdb 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 80060da:	2167      	movs	r1, #103	@ 0x67
 80060dc:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 80060e0:	f000 fcd6 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 80060e4:	2102      	movs	r1, #2
 80060e6:	f24d 3020 	movw	r0, #54048	@ 0xd320
 80060ea:	f000 fcd1 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 80060ee:	2184      	movs	r1, #132	@ 0x84
 80060f0:	f24d 3021 	movw	r0, #54049	@ 0xd321
 80060f4:	f000 fccc 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 80060f8:	2102      	movs	r1, #2
 80060fa:	f24d 3022 	movw	r0, #54050	@ 0xd322
 80060fe:	f000 fcc7 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 8006102:	21a4      	movs	r1, #164	@ 0xa4
 8006104:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8006108:	f000 fcc2 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 800610c:	2102      	movs	r1, #2
 800610e:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8006112:	f000 fcbd 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 8006116:	21b7      	movs	r1, #183	@ 0xb7
 8006118:	f24d 3025 	movw	r0, #54053	@ 0xd325
 800611c:	f000 fcb8 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 8006120:	2102      	movs	r1, #2
 8006122:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8006126:	f000 fcb3 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 800612a:	21cf      	movs	r1, #207	@ 0xcf
 800612c:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8006130:	f000 fcae 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 8006134:	2102      	movs	r1, #2
 8006136:	f24d 3028 	movw	r0, #54056	@ 0xd328
 800613a:	f000 fca9 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 800613e:	21de      	movs	r1, #222	@ 0xde
 8006140:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8006144:	f000 fca4 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 8006148:	2102      	movs	r1, #2
 800614a:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 800614e:	f000 fc9f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 8006152:	21f2      	movs	r1, #242	@ 0xf2
 8006154:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8006158:	f000 fc9a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 800615c:	2102      	movs	r1, #2
 800615e:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8006162:	f000 fc95 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 8006166:	21fe      	movs	r1, #254	@ 0xfe
 8006168:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 800616c:	f000 fc90 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 8006170:	2103      	movs	r1, #3
 8006172:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8006176:	f000 fc8b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 800617a:	2110      	movs	r1, #16
 800617c:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8006180:	f000 fc86 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 8006184:	2103      	movs	r1, #3
 8006186:	f24d 3030 	movw	r0, #54064	@ 0xd330
 800618a:	f000 fc81 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 800618e:	2133      	movs	r1, #51	@ 0x33
 8006190:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8006194:	f000 fc7c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 8006198:	2103      	movs	r1, #3
 800619a:	f24d 3032 	movw	r0, #54066	@ 0xd332
 800619e:	f000 fc77 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 80061a2:	216d      	movs	r1, #109	@ 0x6d
 80061a4:	f24d 3033 	movw	r0, #54067	@ 0xd333
 80061a8:	f000 fc72 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 80061ac:	2100      	movs	r1, #0
 80061ae:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 80061b2:	f000 fc6d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 80061b6:	2133      	movs	r1, #51	@ 0x33
 80061b8:	f24d 4001 	movw	r0, #54273	@ 0xd401
 80061bc:	f000 fc68 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 80061c0:	2100      	movs	r1, #0
 80061c2:	f24d 4002 	movw	r0, #54274	@ 0xd402
 80061c6:	f000 fc63 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 80061ca:	2134      	movs	r1, #52	@ 0x34
 80061cc:	f24d 4003 	movw	r0, #54275	@ 0xd403
 80061d0:	f000 fc5e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 80061d4:	2100      	movs	r1, #0
 80061d6:	f24d 4004 	movw	r0, #54276	@ 0xd404
 80061da:	f000 fc59 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 80061de:	213a      	movs	r1, #58	@ 0x3a
 80061e0:	f24d 4005 	movw	r0, #54277	@ 0xd405
 80061e4:	f000 fc54 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 80061e8:	2100      	movs	r1, #0
 80061ea:	f24d 4006 	movw	r0, #54278	@ 0xd406
 80061ee:	f000 fc4f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 80061f2:	214a      	movs	r1, #74	@ 0x4a
 80061f4:	f24d 4007 	movw	r0, #54279	@ 0xd407
 80061f8:	f000 fc4a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 80061fc:	2100      	movs	r1, #0
 80061fe:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8006202:	f000 fc45 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 8006206:	215c      	movs	r1, #92	@ 0x5c
 8006208:	f24d 4009 	movw	r0, #54281	@ 0xd409
 800620c:	f000 fc40 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 8006210:	2100      	movs	r1, #0
 8006212:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8006216:	f000 fc3b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 800621a:	2181      	movs	r1, #129	@ 0x81
 800621c:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8006220:	f000 fc36 	bl	8006a90 <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 8006224:	2100      	movs	r1, #0
 8006226:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 800622a:	f000 fc31 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 800622e:	21a6      	movs	r1, #166	@ 0xa6
 8006230:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8006234:	f000 fc2c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 8006238:	2100      	movs	r1, #0
 800623a:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 800623e:	f000 fc27 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 8006242:	21e5      	movs	r1, #229	@ 0xe5
 8006244:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8006248:	f000 fc22 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 800624c:	2101      	movs	r1, #1
 800624e:	f24d 4010 	movw	r0, #54288	@ 0xd410
 8006252:	f000 fc1d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 8006256:	2113      	movs	r1, #19
 8006258:	f24d 4011 	movw	r0, #54289	@ 0xd411
 800625c:	f000 fc18 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 8006260:	2101      	movs	r1, #1
 8006262:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8006266:	f000 fc13 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 800626a:	2154      	movs	r1, #84	@ 0x54
 800626c:	f24d 4013 	movw	r0, #54291	@ 0xd413
 8006270:	f000 fc0e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 8006274:	2101      	movs	r1, #1
 8006276:	f24d 4014 	movw	r0, #54292	@ 0xd414
 800627a:	f000 fc09 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 800627e:	2182      	movs	r1, #130	@ 0x82
 8006280:	f24d 4015 	movw	r0, #54293	@ 0xd415
 8006284:	f000 fc04 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 8006288:	2101      	movs	r1, #1
 800628a:	f24d 4016 	movw	r0, #54294	@ 0xd416
 800628e:	f000 fbff 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 8006292:	21ca      	movs	r1, #202	@ 0xca
 8006294:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8006298:	f000 fbfa 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 800629c:	2102      	movs	r1, #2
 800629e:	f24d 4018 	movw	r0, #54296	@ 0xd418
 80062a2:	f000 fbf5 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 80062a6:	2100      	movs	r1, #0
 80062a8:	f24d 4019 	movw	r0, #54297	@ 0xd419
 80062ac:	f000 fbf0 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 80062b0:	2102      	movs	r1, #2
 80062b2:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 80062b6:	f000 fbeb 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 80062ba:	2101      	movs	r1, #1
 80062bc:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 80062c0:	f000 fbe6 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 80062c4:	2102      	movs	r1, #2
 80062c6:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 80062ca:	f000 fbe1 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 80062ce:	2134      	movs	r1, #52	@ 0x34
 80062d0:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 80062d4:	f000 fbdc 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 80062d8:	2102      	movs	r1, #2
 80062da:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 80062de:	f000 fbd7 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 80062e2:	2167      	movs	r1, #103	@ 0x67
 80062e4:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 80062e8:	f000 fbd2 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 80062ec:	2102      	movs	r1, #2
 80062ee:	f24d 4020 	movw	r0, #54304	@ 0xd420
 80062f2:	f000 fbcd 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 80062f6:	2184      	movs	r1, #132	@ 0x84
 80062f8:	f24d 4021 	movw	r0, #54305	@ 0xd421
 80062fc:	f000 fbc8 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 8006300:	2102      	movs	r1, #2
 8006302:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8006306:	f000 fbc3 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 800630a:	21a4      	movs	r1, #164	@ 0xa4
 800630c:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8006310:	f000 fbbe 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 8006314:	2102      	movs	r1, #2
 8006316:	f24d 4024 	movw	r0, #54308	@ 0xd424
 800631a:	f000 fbb9 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 800631e:	21b7      	movs	r1, #183	@ 0xb7
 8006320:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8006324:	f000 fbb4 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 8006328:	2102      	movs	r1, #2
 800632a:	f24d 4026 	movw	r0, #54310	@ 0xd426
 800632e:	f000 fbaf 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 8006332:	21cf      	movs	r1, #207	@ 0xcf
 8006334:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8006338:	f000 fbaa 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 800633c:	2102      	movs	r1, #2
 800633e:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8006342:	f000 fba5 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 8006346:	21de      	movs	r1, #222	@ 0xde
 8006348:	f24d 4029 	movw	r0, #54313	@ 0xd429
 800634c:	f000 fba0 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 8006350:	2102      	movs	r1, #2
 8006352:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8006356:	f000 fb9b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 800635a:	21f2      	movs	r1, #242	@ 0xf2
 800635c:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 8006360:	f000 fb96 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 8006364:	2102      	movs	r1, #2
 8006366:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 800636a:	f000 fb91 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 800636e:	21fe      	movs	r1, #254	@ 0xfe
 8006370:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 8006374:	f000 fb8c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 8006378:	2103      	movs	r1, #3
 800637a:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 800637e:	f000 fb87 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 8006382:	2110      	movs	r1, #16
 8006384:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8006388:	f000 fb82 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 800638c:	2103      	movs	r1, #3
 800638e:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8006392:	f000 fb7d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 8006396:	2133      	movs	r1, #51	@ 0x33
 8006398:	f24d 4031 	movw	r0, #54321	@ 0xd431
 800639c:	f000 fb78 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 80063a0:	2103      	movs	r1, #3
 80063a2:	f24d 4032 	movw	r0, #54322	@ 0xd432
 80063a6:	f000 fb73 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 80063aa:	216d      	movs	r1, #109	@ 0x6d
 80063ac:	f24d 4033 	movw	r0, #54323	@ 0xd433
 80063b0:	f000 fb6e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 80063b4:	2100      	movs	r1, #0
 80063b6:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 80063ba:	f000 fb69 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 80063be:	2133      	movs	r1, #51	@ 0x33
 80063c0:	f24d 5001 	movw	r0, #54529	@ 0xd501
 80063c4:	f000 fb64 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 80063c8:	2100      	movs	r1, #0
 80063ca:	f24d 5002 	movw	r0, #54530	@ 0xd502
 80063ce:	f000 fb5f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 80063d2:	2134      	movs	r1, #52	@ 0x34
 80063d4:	f24d 5003 	movw	r0, #54531	@ 0xd503
 80063d8:	f000 fb5a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 80063dc:	2100      	movs	r1, #0
 80063de:	f24d 5004 	movw	r0, #54532	@ 0xd504
 80063e2:	f000 fb55 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 80063e6:	213a      	movs	r1, #58	@ 0x3a
 80063e8:	f24d 5005 	movw	r0, #54533	@ 0xd505
 80063ec:	f000 fb50 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 80063f0:	2100      	movs	r1, #0
 80063f2:	f24d 5006 	movw	r0, #54534	@ 0xd506
 80063f6:	f000 fb4b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 80063fa:	214a      	movs	r1, #74	@ 0x4a
 80063fc:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8006400:	f000 fb46 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 8006404:	2100      	movs	r1, #0
 8006406:	f24d 5008 	movw	r0, #54536	@ 0xd508
 800640a:	f000 fb41 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 800640e:	215c      	movs	r1, #92	@ 0x5c
 8006410:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8006414:	f000 fb3c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 8006418:	2100      	movs	r1, #0
 800641a:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 800641e:	f000 fb37 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 8006422:	2181      	movs	r1, #129	@ 0x81
 8006424:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8006428:	f000 fb32 	bl	8006a90 <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 800642c:	2100      	movs	r1, #0
 800642e:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8006432:	f000 fb2d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 8006436:	21a6      	movs	r1, #166	@ 0xa6
 8006438:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 800643c:	f000 fb28 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 8006440:	2100      	movs	r1, #0
 8006442:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8006446:	f000 fb23 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 800644a:	21e5      	movs	r1, #229	@ 0xe5
 800644c:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 8006450:	f000 fb1e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 8006454:	2101      	movs	r1, #1
 8006456:	f24d 5010 	movw	r0, #54544	@ 0xd510
 800645a:	f000 fb19 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 800645e:	2113      	movs	r1, #19
 8006460:	f24d 5011 	movw	r0, #54545	@ 0xd511
 8006464:	f000 fb14 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 8006468:	2101      	movs	r1, #1
 800646a:	f24d 5012 	movw	r0, #54546	@ 0xd512
 800646e:	f000 fb0f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 8006472:	2154      	movs	r1, #84	@ 0x54
 8006474:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8006478:	f000 fb0a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 800647c:	2101      	movs	r1, #1
 800647e:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8006482:	f000 fb05 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 8006486:	2182      	movs	r1, #130	@ 0x82
 8006488:	f24d 5015 	movw	r0, #54549	@ 0xd515
 800648c:	f000 fb00 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 8006490:	2101      	movs	r1, #1
 8006492:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8006496:	f000 fafb 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 800649a:	21ca      	movs	r1, #202	@ 0xca
 800649c:	f24d 5017 	movw	r0, #54551	@ 0xd517
 80064a0:	f000 faf6 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 80064a4:	2102      	movs	r1, #2
 80064a6:	f24d 5018 	movw	r0, #54552	@ 0xd518
 80064aa:	f000 faf1 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 80064ae:	2100      	movs	r1, #0
 80064b0:	f24d 5019 	movw	r0, #54553	@ 0xd519
 80064b4:	f000 faec 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 80064b8:	2102      	movs	r1, #2
 80064ba:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 80064be:	f000 fae7 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 80064c2:	2101      	movs	r1, #1
 80064c4:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 80064c8:	f000 fae2 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 80064cc:	2102      	movs	r1, #2
 80064ce:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 80064d2:	f000 fadd 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 80064d6:	2134      	movs	r1, #52	@ 0x34
 80064d8:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 80064dc:	f000 fad8 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 80064e0:	2102      	movs	r1, #2
 80064e2:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 80064e6:	f000 fad3 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 80064ea:	2167      	movs	r1, #103	@ 0x67
 80064ec:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 80064f0:	f000 face 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 80064f4:	2102      	movs	r1, #2
 80064f6:	f24d 5020 	movw	r0, #54560	@ 0xd520
 80064fa:	f000 fac9 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 80064fe:	2184      	movs	r1, #132	@ 0x84
 8006500:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8006504:	f000 fac4 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 8006508:	2102      	movs	r1, #2
 800650a:	f24d 5022 	movw	r0, #54562	@ 0xd522
 800650e:	f000 fabf 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 8006512:	21a4      	movs	r1, #164	@ 0xa4
 8006514:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8006518:	f000 faba 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 800651c:	2102      	movs	r1, #2
 800651e:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8006522:	f000 fab5 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 8006526:	21b7      	movs	r1, #183	@ 0xb7
 8006528:	f24d 5025 	movw	r0, #54565	@ 0xd525
 800652c:	f000 fab0 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8006530:	2102      	movs	r1, #2
 8006532:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8006536:	f000 faab 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 800653a:	21cf      	movs	r1, #207	@ 0xcf
 800653c:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8006540:	f000 faa6 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 8006544:	2102      	movs	r1, #2
 8006546:	f24d 5028 	movw	r0, #54568	@ 0xd528
 800654a:	f000 faa1 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 800654e:	21de      	movs	r1, #222	@ 0xde
 8006550:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8006554:	f000 fa9c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 8006558:	2102      	movs	r1, #2
 800655a:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 800655e:	f000 fa97 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 8006562:	21f2      	movs	r1, #242	@ 0xf2
 8006564:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8006568:	f000 fa92 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 800656c:	2102      	movs	r1, #2
 800656e:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8006572:	f000 fa8d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 8006576:	21fe      	movs	r1, #254	@ 0xfe
 8006578:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 800657c:	f000 fa88 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 8006580:	2103      	movs	r1, #3
 8006582:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8006586:	f000 fa83 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 800658a:	2110      	movs	r1, #16
 800658c:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8006590:	f000 fa7e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 8006594:	2103      	movs	r1, #3
 8006596:	f24d 5030 	movw	r0, #54576	@ 0xd530
 800659a:	f000 fa79 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 800659e:	2133      	movs	r1, #51	@ 0x33
 80065a0:	f24d 5031 	movw	r0, #54577	@ 0xd531
 80065a4:	f000 fa74 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 80065a8:	2103      	movs	r1, #3
 80065aa:	f24d 5032 	movw	r0, #54578	@ 0xd532
 80065ae:	f000 fa6f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 80065b2:	216d      	movs	r1, #109	@ 0x6d
 80065b4:	f24d 5033 	movw	r0, #54579	@ 0xd533
 80065b8:	f000 fa6a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 80065bc:	2100      	movs	r1, #0
 80065be:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 80065c2:	f000 fa65 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 80065c6:	2133      	movs	r1, #51	@ 0x33
 80065c8:	f24d 6001 	movw	r0, #54785	@ 0xd601
 80065cc:	f000 fa60 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 80065d0:	2100      	movs	r1, #0
 80065d2:	f24d 6002 	movw	r0, #54786	@ 0xd602
 80065d6:	f000 fa5b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 80065da:	2134      	movs	r1, #52	@ 0x34
 80065dc:	f24d 6003 	movw	r0, #54787	@ 0xd603
 80065e0:	f000 fa56 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 80065e4:	2100      	movs	r1, #0
 80065e6:	f24d 6004 	movw	r0, #54788	@ 0xd604
 80065ea:	f000 fa51 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 80065ee:	213a      	movs	r1, #58	@ 0x3a
 80065f0:	f24d 6005 	movw	r0, #54789	@ 0xd605
 80065f4:	f000 fa4c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 80065f8:	2100      	movs	r1, #0
 80065fa:	f24d 6006 	movw	r0, #54790	@ 0xd606
 80065fe:	f000 fa47 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 8006602:	214a      	movs	r1, #74	@ 0x4a
 8006604:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8006608:	f000 fa42 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 800660c:	2100      	movs	r1, #0
 800660e:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8006612:	f000 fa3d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 8006616:	215c      	movs	r1, #92	@ 0x5c
 8006618:	f24d 6009 	movw	r0, #54793	@ 0xd609
 800661c:	f000 fa38 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8006620:	2100      	movs	r1, #0
 8006622:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8006626:	f000 fa33 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 800662a:	2181      	movs	r1, #129	@ 0x81
 800662c:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8006630:	f000 fa2e 	bl	8006a90 <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 8006634:	2100      	movs	r1, #0
 8006636:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 800663a:	f000 fa29 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 800663e:	21a6      	movs	r1, #166	@ 0xa6
 8006640:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8006644:	f000 fa24 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 8006648:	2100      	movs	r1, #0
 800664a:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 800664e:	f000 fa1f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 8006652:	21e5      	movs	r1, #229	@ 0xe5
 8006654:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8006658:	f000 fa1a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 800665c:	2101      	movs	r1, #1
 800665e:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8006662:	f000 fa15 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 8006666:	2113      	movs	r1, #19
 8006668:	f24d 6011 	movw	r0, #54801	@ 0xd611
 800666c:	f000 fa10 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8006670:	2101      	movs	r1, #1
 8006672:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8006676:	f000 fa0b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 800667a:	2154      	movs	r1, #84	@ 0x54
 800667c:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8006680:	f000 fa06 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 8006684:	2101      	movs	r1, #1
 8006686:	f24d 6014 	movw	r0, #54804	@ 0xd614
 800668a:	f000 fa01 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 800668e:	2182      	movs	r1, #130	@ 0x82
 8006690:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8006694:	f000 f9fc 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 8006698:	2101      	movs	r1, #1
 800669a:	f24d 6016 	movw	r0, #54806	@ 0xd616
 800669e:	f000 f9f7 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 80066a2:	21ca      	movs	r1, #202	@ 0xca
 80066a4:	f24d 6017 	movw	r0, #54807	@ 0xd617
 80066a8:	f000 f9f2 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 80066ac:	2102      	movs	r1, #2
 80066ae:	f24d 6018 	movw	r0, #54808	@ 0xd618
 80066b2:	f000 f9ed 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 80066b6:	2100      	movs	r1, #0
 80066b8:	f24d 6019 	movw	r0, #54809	@ 0xd619
 80066bc:	f000 f9e8 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 80066c0:	2102      	movs	r1, #2
 80066c2:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 80066c6:	f000 f9e3 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 80066ca:	2101      	movs	r1, #1
 80066cc:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 80066d0:	f000 f9de 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 80066d4:	2102      	movs	r1, #2
 80066d6:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 80066da:	f000 f9d9 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 80066de:	2134      	movs	r1, #52	@ 0x34
 80066e0:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 80066e4:	f000 f9d4 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 80066e8:	2102      	movs	r1, #2
 80066ea:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 80066ee:	f000 f9cf 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 80066f2:	2167      	movs	r1, #103	@ 0x67
 80066f4:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 80066f8:	f000 f9ca 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 80066fc:	2102      	movs	r1, #2
 80066fe:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8006702:	f000 f9c5 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 8006706:	2184      	movs	r1, #132	@ 0x84
 8006708:	f24d 6021 	movw	r0, #54817	@ 0xd621
 800670c:	f000 f9c0 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 8006710:	2102      	movs	r1, #2
 8006712:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8006716:	f000 f9bb 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 800671a:	21a4      	movs	r1, #164	@ 0xa4
 800671c:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8006720:	f000 f9b6 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 8006724:	2102      	movs	r1, #2
 8006726:	f24d 6024 	movw	r0, #54820	@ 0xd624
 800672a:	f000 f9b1 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 800672e:	21b7      	movs	r1, #183	@ 0xb7
 8006730:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8006734:	f000 f9ac 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 8006738:	2102      	movs	r1, #2
 800673a:	f24d 6026 	movw	r0, #54822	@ 0xd626
 800673e:	f000 f9a7 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 8006742:	21cf      	movs	r1, #207	@ 0xcf
 8006744:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8006748:	f000 f9a2 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 800674c:	2102      	movs	r1, #2
 800674e:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8006752:	f000 f99d 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 8006756:	21de      	movs	r1, #222	@ 0xde
 8006758:	f24d 6029 	movw	r0, #54825	@ 0xd629
 800675c:	f000 f998 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8006760:	2102      	movs	r1, #2
 8006762:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8006766:	f000 f993 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 800676a:	21f2      	movs	r1, #242	@ 0xf2
 800676c:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8006770:	f000 f98e 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 8006774:	2102      	movs	r1, #2
 8006776:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 800677a:	f000 f989 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 800677e:	21fe      	movs	r1, #254	@ 0xfe
 8006780:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8006784:	f000 f984 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 8006788:	2103      	movs	r1, #3
 800678a:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 800678e:	f000 f97f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 8006792:	2110      	movs	r1, #16
 8006794:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8006798:	f000 f97a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 800679c:	2103      	movs	r1, #3
 800679e:	f24d 6030 	movw	r0, #54832	@ 0xd630
 80067a2:	f000 f975 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 80067a6:	2133      	movs	r1, #51	@ 0x33
 80067a8:	f24d 6031 	movw	r0, #54833	@ 0xd631
 80067ac:	f000 f970 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 80067b0:	2103      	movs	r1, #3
 80067b2:	f24d 6032 	movw	r0, #54834	@ 0xd632
 80067b6:	f000 f96b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 80067ba:	216d      	movs	r1, #109	@ 0x6d
 80067bc:	f24d 6033 	movw	r0, #54835	@ 0xd633
 80067c0:	f000 f966 	bl	8006a90 <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 80067c4:	2155      	movs	r1, #85	@ 0x55
 80067c6:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80067ca:	f000 f961 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 80067ce:	21aa      	movs	r1, #170	@ 0xaa
 80067d0:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80067d4:	f000 f95c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 80067d8:	2152      	movs	r1, #82	@ 0x52
 80067da:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80067de:	f000 f957 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 80067e2:	2108      	movs	r1, #8
 80067e4:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80067e8:	f000 f952 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 80067ec:	2100      	movs	r1, #0
 80067ee:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80067f2:	f000 f94d 	bl	8006a90 <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 80067f6:	21cc      	movs	r1, #204	@ 0xcc
 80067f8:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 80067fc:	f000 f948 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 8006800:	2100      	movs	r1, #0
 8006802:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8006806:	f000 f943 	bl	8006a90 <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 800680a:	2105      	movs	r1, #5
 800680c:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8006810:	f000 f93e 	bl	8006a90 <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 8006814:	2170      	movs	r1, #112	@ 0x70
 8006816:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 800681a:	f000 f939 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 800681e:	2170      	movs	r1, #112	@ 0x70
 8006820:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8006824:	f000 f934 	bl	8006a90 <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 8006828:	2101      	movs	r1, #1
 800682a:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 800682e:	f000 f92f 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 8006832:	2103      	movs	r1, #3
 8006834:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8006838:	f000 f92a 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 800683c:	2103      	movs	r1, #3
 800683e:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8006842:	f000 f925 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 8006846:	2103      	movs	r1, #3
 8006848:	f64b 0003 	movw	r0, #47107	@ 0xb803
 800684c:	f000 f920 	bl	8006a90 <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8006850:	2102      	movs	r1, #2
 8006852:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8006856:	f000 f91b 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 800685a:	2100      	movs	r1, #0
 800685c:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8006860:	f000 f916 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8006864:	2100      	movs	r1, #0
 8006866:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 800686a:	f000 f911 	bl	8006a90 <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 800686e:	21d0      	movs	r1, #208	@ 0xd0
 8006870:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8006874:	f000 f90c 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 8006878:	2102      	movs	r1, #2
 800687a:	f64c 1001 	movw	r0, #51457	@ 0xc901
 800687e:	f000 f907 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 8006882:	2150      	movs	r1, #80	@ 0x50
 8006884:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8006888:	f000 f902 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 800688c:	2150      	movs	r1, #80	@ 0x50
 800688e:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8006892:	f000 f8fd 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 8006896:	2150      	movs	r1, #80	@ 0x50
 8006898:	f64c 1004 	movw	r0, #51460	@ 0xc904
 800689c:	f000 f8f8 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 80068a0:	2100      	movs	r1, #0
 80068a2:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 80068a6:	f000 f8f3 	bl	8006a90 <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 80068aa:	2155      	movs	r1, #85	@ 0x55
 80068ac:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 80068b0:	f000 f8ee 	bl	8006a90 <lcd_write_reg>
    lcd_wr_regno(0x1100);
 80068b4:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 80068b8:	f000 f8d6 	bl	8006a68 <lcd_wr_regno>
    HAL_Delay(1);
 80068bc:	2001      	movs	r0, #1
 80068be:	f7fb fb9f 	bl	8002000 <HAL_Delay>
    lcd_wr_regno(0x2900);
 80068c2:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 80068c6:	f000 f8cf 	bl	8006a68 <lcd_wr_regno>
}
 80068ca:	bf00      	nop
 80068cc:	bd80      	pop	{r7, pc}

080068ce <lcd_ex_ssd1963_reginit>:
 * @brief       SSD1963寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ssd1963_reginit(void)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 80068d2:	20e2      	movs	r0, #226	@ 0xe2
 80068d4:	f000 f8c8 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* 参数1 */
 80068d8:	201d      	movs	r0, #29
 80068da:	f000 f8b1 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x02);  /* 参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 80068de:	2002      	movs	r0, #2
 80068e0:	f000 f8ae 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x04);  /* 参数3 Validate M and N values */
 80068e4:	2004      	movs	r0, #4
 80068e6:	f000 f8ab 	bl	8006a40 <lcd_wr_data>
    HAL_Delay(1);
 80068ea:	2001      	movs	r0, #1
 80068ec:	f7fb fb88 	bl	8002000 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 80068f0:	20e0      	movs	r0, #224	@ 0xe0
 80068f2:	f000 f8b9 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 80068f6:	2001      	movs	r0, #1
 80068f8:	f000 f8a2 	bl	8006a40 <lcd_wr_data>
    HAL_Delay(10);
 80068fc:	200a      	movs	r0, #10
 80068fe:	f7fb fb7f 	bl	8002000 <HAL_Delay>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 8006902:	20e0      	movs	r0, #224	@ 0xe0
 8006904:	f000 f8b0 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 8006908:	2003      	movs	r0, #3
 800690a:	f000 f899 	bl	8006a40 <lcd_wr_data>
    HAL_Delay(12);
 800690e:	200c      	movs	r0, #12
 8006910:	f7fb fb76 	bl	8002000 <HAL_Delay>
    lcd_wr_regno(0x01); /* 软复位 */
 8006914:	2001      	movs	r0, #1
 8006916:	f000 f8a7 	bl	8006a68 <lcd_wr_regno>
    HAL_Delay(10);
 800691a:	200a      	movs	r0, #10
 800691c:	f7fb fb70 	bl	8002000 <HAL_Delay>

    lcd_wr_regno(0xE6); /* 设置像素频率,33Mhz */
 8006920:	20e6      	movs	r0, #230	@ 0xe6
 8006922:	f000 f8a1 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x2F);
 8006926:	202f      	movs	r0, #47	@ 0x2f
 8006928:	f000 f88a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xFF);
 800692c:	20ff      	movs	r0, #255	@ 0xff
 800692e:	f000 f887 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8006932:	20ff      	movs	r0, #255	@ 0xff
 8006934:	f000 f884 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB0); /* 设置LCD模式 */
 8006938:	20b0      	movs	r0, #176	@ 0xb0
 800693a:	f000 f895 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24位模式 */
 800693e:	2020      	movs	r0, #32
 8006940:	f000 f87e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT 模式 */
 8006944:	2000      	movs	r0, #0
 8006946:	f000 f87b 	bl	8006a40 <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* 设置LCD水平像素 */
 800694a:	2003      	movs	r0, #3
 800694c:	f000 f878 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 8006950:	f240 301f 	movw	r0, #799	@ 0x31f
 8006954:	f000 f874 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* 设置LCD垂直像素 */
 8006958:	2001      	movs	r0, #1
 800695a:	f000 f871 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 800695e:	f240 10df 	movw	r0, #479	@ 0x1df
 8006962:	f000 f86d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB序列 */
 8006966:	2000      	movs	r0, #0
 8006968:	f000 f86a 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 800696c:	20b4      	movs	r0, #180	@ 0xb4
 800696e:	f000 f87b 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 8006972:	2004      	movs	r0, #4
 8006974:	f000 f864 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 8006978:	f240 401f 	movw	r0, #1055	@ 0x41f
 800697c:	f000 f860 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 8006980:	2000      	movs	r0, #0
 8006982:	f000 f85d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 8006986:	202e      	movs	r0, #46	@ 0x2e
 8006988:	f000 f85a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 800698c:	2000      	movs	r0, #0
 800698e:	f000 f857 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8006992:	2000      	movs	r0, #0
 8006994:	f000 f854 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 8006998:	2000      	movs	r0, #0
 800699a:	f000 f851 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 800699e:	2000      	movs	r0, #0
 80069a0:	f000 f84e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 80069a4:	20b6      	movs	r0, #182	@ 0xb6
 80069a6:	f000 f85f 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 80069aa:	2002      	movs	r0, #2
 80069ac:	f000 f848 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 80069b0:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 80069b4:	f000 f844 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 80069b8:	2000      	movs	r0, #0
 80069ba:	f000 f841 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 80069be:	2017      	movs	r0, #23
 80069c0:	f000 f83e 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 80069c4:	2015      	movs	r0, #21
 80069c6:	f000 f83b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80069ca:	2000      	movs	r0, #0
 80069cc:	f000 f838 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);
 80069d0:	2000      	movs	r0, #0
 80069d2:	f000 f835 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xF0); /* 设置SSD1963与CPU接口为16bit */
 80069d6:	20f0      	movs	r0, #240	@ 0xf0
 80069d8:	f000 f846 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 80069dc:	2003      	movs	r0, #3
 80069de:	f000 f82f 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0x29); /* 开启显示 */
 80069e2:	2029      	movs	r0, #41	@ 0x29
 80069e4:	f000 f840 	bl	8006a68 <lcd_wr_regno>
    /* 设置PWM输出  背光通过占空比可调 */
    lcd_wr_regno(0xD0); /* 设置自动白平衡DBC */
 80069e8:	20d0      	movs	r0, #208	@ 0xd0
 80069ea:	f000 f83d 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 80069ee:	2000      	movs	r0, #0
 80069f0:	f000 f826 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* 配置PWM输出 */
 80069f4:	20be      	movs	r0, #190	@ 0xbe
 80069f6:	f000 f837 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1设置PWM频率 */
 80069fa:	2005      	movs	r0, #5
 80069fc:	f000 f820 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2设置PWM占空比 */
 8006a00:	20fe      	movs	r0, #254	@ 0xfe
 8006a02:	f000 f81d 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3设置C */
 8006a06:	2001      	movs	r0, #1
 8006a08:	f000 f81a 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4设置D */
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f000 f817 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5设置E */
 8006a12:	2000      	movs	r0, #0
 8006a14:	f000 f814 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6设置F */
 8006a18:	2000      	movs	r0, #0
 8006a1a:	f000 f811 	bl	8006a40 <lcd_wr_data>

    lcd_wr_regno(0xB8); /* 设置GPIO配置 */
 8006a1e:	20b8      	movs	r0, #184	@ 0xb8
 8006a20:	f000 f822 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 2个IO口设置成输出 */
 8006a24:	2003      	movs	r0, #3
 8006a26:	f000 f80b 	bl	8006a40 <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO使用正常的IO功能 */
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	f000 f808 	bl	8006a40 <lcd_wr_data>
    lcd_wr_regno(0xBA);
 8006a30:	20ba      	movs	r0, #186	@ 0xba
 8006a32:	f000 f819 	bl	8006a68 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* GPIO[1:0]=01,控制LCD方向 */
 8006a36:	2001      	movs	r0, #1
 8006a38:	f000 f802 	bl	8006a40 <lcd_wr_data>
}
 8006a3c:	bf00      	nop
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <lcd_wr_data>:
/**
 * @brief       LCD写数据
 * @param       data: 要写入的数据
 * @retval      无
 */
void lcd_wr_data(volatile uint16_t data) {
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	80fb      	strh	r3, [r7, #6]
	data = data; /* 使用-O2优化的时候,必须插入的延时 */
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8006a50:	4b04      	ldr	r3, [pc, #16]	@ (8006a64 <lcd_wr_data+0x24>)
 8006a52:	88fa      	ldrh	r2, [r7, #6]
 8006a54:	b292      	uxth	r2, r2
 8006a56:	805a      	strh	r2, [r3, #2]
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	6c00007e 	.word	0x6c00007e

08006a68 <lcd_wr_regno>:
/**
 * @brief       LCD写寄存器编号/地址函数
 * @param       regno: 寄存器编号/地址
 * @retval      无
 */
void lcd_wr_regno(volatile uint16_t regno) {
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	80fb      	strh	r3, [r7, #6]
	regno = regno; /* 使用-O2优化的时候,必须插入的延时 */
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = regno; /* 写入要写的寄存器序号 */
 8006a78:	4b04      	ldr	r3, [pc, #16]	@ (8006a8c <lcd_wr_regno+0x24>)
 8006a7a:	88fa      	ldrh	r2, [r7, #6]
 8006a7c:	b292      	uxth	r2, r2
 8006a7e:	801a      	strh	r2, [r3, #0]
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	6c00007e 	.word	0x6c00007e

08006a90 <lcd_write_reg>:
 * @brief       LCD写寄存器
 * @param       regno:寄存器编号/地址
 * @param       data:要写入的数据
 * @retval      无
 */
void lcd_write_reg(uint16_t regno, uint16_t data) {
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	460a      	mov	r2, r1
 8006a9a:	80fb      	strh	r3, [r7, #6]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = regno; /* 写入要写的寄存器序号 */
 8006aa0:	4a05      	ldr	r2, [pc, #20]	@ (8006ab8 <lcd_write_reg+0x28>)
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = data; /* 写入数据 */
 8006aa6:	4a04      	ldr	r2, [pc, #16]	@ (8006ab8 <lcd_write_reg+0x28>)
 8006aa8:	88bb      	ldrh	r3, [r7, #4]
 8006aaa:	8053      	strh	r3, [r2, #2]
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	6c00007e 	.word	0x6c00007e

08006abc <lcd_rd_data>:
/**
 * @brief       LCD读数据
 * @param       无
 * @retval      读取到的数据
 */
static uint16_t lcd_rd_data(void) {
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
	volatile uint16_t ram; /* 防止被优化 */
	ram = LCD->LCD_RAM;
 8006ac2:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <lcd_rd_data+0x20>)
 8006ac4:	885b      	ldrh	r3, [r3, #2]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	80fb      	strh	r3, [r7, #6]
	return ram;
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	b29b      	uxth	r3, r3
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	6c00007e 	.word	0x6c00007e

08006ae0 <lcd_write_ram_prepare>:
/**
 * @brief       准备写GRAM
 * @param       无
 * @retval      无
 */
void lcd_write_ram_prepare(void) {
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
	LCD->LCD_REG = lcddev.wramcmd;
 8006ae4:	4b04      	ldr	r3, [pc, #16]	@ (8006af8 <lcd_write_ram_prepare+0x18>)
 8006ae6:	4a05      	ldr	r2, [pc, #20]	@ (8006afc <lcd_write_ram_prepare+0x1c>)
 8006ae8:	8912      	ldrh	r2, [r2, #8]
 8006aea:	801a      	strh	r2, [r3, #0]
}
 8006aec:	bf00      	nop
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	6c00007e 	.word	0x6c00007e
 8006afc:	200003ec 	.word	0x200003ec

08006b00 <lcd_set_cursor>:
/**
 * @brief       设置光标位置(对RGB屏无效)
 * @param       x,y: 坐标
 * @retval      无
 */
void lcd_set_cursor(uint16_t x, uint16_t y) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	460a      	mov	r2, r1
 8006b0a:	80fb      	strh	r3, [r7, #6]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0x1963) {
 8006b10:	4b65      	ldr	r3, [pc, #404]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006b12:	889b      	ldrh	r3, [r3, #4]
 8006b14:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d167      	bne.n	8006bec <lcd_set_cursor+0xec>
		if (lcddev.dir == 0) /* 竖屏模式, x坐标需要变换 */
 8006b1c:	4b62      	ldr	r3, [pc, #392]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006b1e:	799b      	ldrb	r3, [r3, #6]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11e      	bne.n	8006b62 <lcd_set_cursor+0x62>
		{
			x = lcddev.width - 1 - x;
 8006b24:	4b60      	ldr	r3, [pc, #384]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006b26:	881a      	ldrh	r2, [r3, #0]
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	80fb      	strh	r3, [r7, #6]
			lcd_wr_regno(lcddev.setxcmd);
 8006b32:	4b5d      	ldr	r3, [pc, #372]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006b34:	895b      	ldrh	r3, [r3, #10]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff ff96 	bl	8006a68 <lcd_wr_regno>
			lcd_wr_data(0);
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	f7ff ff7f 	bl	8006a40 <lcd_wr_data>
			lcd_wr_data(0);
 8006b42:	2000      	movs	r0, #0
 8006b44:	f7ff ff7c 	bl	8006a40 <lcd_wr_data>
			lcd_wr_data(x >> 8);
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff ff76 	bl	8006a40 <lcd_wr_data>
			lcd_wr_data(x & 0xFF);
 8006b54:	88fb      	ldrh	r3, [r7, #6]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff ff70 	bl	8006a40 <lcd_wr_data>
 8006b60:	e021      	b.n	8006ba6 <lcd_set_cursor+0xa6>
		} else /* 横屏模式 */
		{
			lcd_wr_regno(lcddev.setxcmd);
 8006b62:	4b51      	ldr	r3, [pc, #324]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006b64:	895b      	ldrh	r3, [r3, #10]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff ff7e 	bl	8006a68 <lcd_wr_regno>
			lcd_wr_data(x >> 8);
 8006b6c:	88fb      	ldrh	r3, [r7, #6]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff ff64 	bl	8006a40 <lcd_wr_data>
			lcd_wr_data(x & 0xFF);
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff ff5e 	bl	8006a40 <lcd_wr_data>
			lcd_wr_data((lcddev.width - 1) >> 8);
 8006b84:	4b48      	ldr	r3, [pc, #288]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	121b      	asrs	r3, r3, #8
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff ff56 	bl	8006a40 <lcd_wr_data>
			lcd_wr_data((lcddev.width - 1) & 0xFF);
 8006b94:	4b44      	ldr	r3, [pc, #272]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff ff4d 	bl	8006a40 <lcd_wr_data>
		}

		lcd_wr_regno(lcddev.setycmd);
 8006ba6:	4b40      	ldr	r3, [pc, #256]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006ba8:	899b      	ldrh	r3, [r3, #12]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff ff5c 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(y >> 8);
 8006bb0:	88bb      	ldrh	r3, [r7, #4]
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff ff42 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data(y & 0xFF);
 8006bbc:	88bb      	ldrh	r3, [r7, #4]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff ff3c 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data((lcddev.height - 1) >> 8);
 8006bc8:	4b37      	ldr	r3, [pc, #220]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006bca:	885b      	ldrh	r3, [r3, #2]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	121b      	asrs	r3, r3, #8
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff ff34 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data((lcddev.height - 1) & 0xFF);
 8006bd8:	4b33      	ldr	r3, [pc, #204]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006bda:	885b      	ldrh	r3, [r3, #2]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff ff2b 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data(x & 0xFF);
		lcd_wr_regno(lcddev.setycmd);
		lcd_wr_data(y >> 8);
		lcd_wr_data(y & 0xFF);
	}
}
 8006bea:	e058      	b.n	8006c9e <lcd_set_cursor+0x19e>
	} else if (lcddev.id == 0x5510) {
 8006bec:	4b2e      	ldr	r3, [pc, #184]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006bee:	889b      	ldrh	r3, [r3, #4]
 8006bf0:	f245 5210 	movw	r2, #21776	@ 0x5510
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d130      	bne.n	8006c5a <lcd_set_cursor+0x15a>
		lcd_wr_regno(lcddev.setxcmd);
 8006bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006bfa:	895b      	ldrh	r3, [r3, #10]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff ff33 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(x >> 8);
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	0a1b      	lsrs	r3, r3, #8
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff ff19 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setxcmd + 1);
 8006c0e:	4b26      	ldr	r3, [pc, #152]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006c10:	895b      	ldrh	r3, [r3, #10]
 8006c12:	3301      	adds	r3, #1
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff ff26 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(x & 0xFF);
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff ff0c 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setycmd);
 8006c28:	4b1f      	ldr	r3, [pc, #124]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006c2a:	899b      	ldrh	r3, [r3, #12]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff ff1b 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(y >> 8);
 8006c32:	88bb      	ldrh	r3, [r7, #4]
 8006c34:	0a1b      	lsrs	r3, r3, #8
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff ff01 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setycmd + 1);
 8006c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006c40:	899b      	ldrh	r3, [r3, #12]
 8006c42:	3301      	adds	r3, #1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff ff0e 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(y & 0xFF);
 8006c4c:	88bb      	ldrh	r3, [r7, #4]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff fef4 	bl	8006a40 <lcd_wr_data>
}
 8006c58:	e021      	b.n	8006c9e <lcd_set_cursor+0x19e>
		lcd_wr_regno(lcddev.setxcmd);
 8006c5a:	4b13      	ldr	r3, [pc, #76]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006c5c:	895b      	ldrh	r3, [r3, #10]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff ff02 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(x >> 8);
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fee8 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data(x & 0xFF);
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fee2 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setycmd);
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca8 <lcd_set_cursor+0x1a8>)
 8006c7e:	899b      	ldrh	r3, [r3, #12]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fef1 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(y >> 8);
 8006c86:	88bb      	ldrh	r3, [r7, #4]
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff fed7 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data(y & 0xFF);
 8006c92:	88bb      	ldrh	r3, [r7, #4]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff fed1 	bl	8006a40 <lcd_wr_data>
}
 8006c9e:	bf00      	nop
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	200003ec 	.word	0x200003ec

08006cac <lcd_scan_dir>:
 *              所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
 *
 * @param       dir:0~7,代表8个方向(具体定义见lcd.h)
 * @retval      无
 */
void lcd_scan_dir(uint8_t dir) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;

	/* 横屏时，对1963不改变扫描方向！竖屏时1963改变方向(这里仅用于1963的特殊处理,对其他驱动IC无效) */
	if ((lcddev.dir == 1 && lcddev.id != 0x1963)
 8006cbe:	4b99      	ldr	r3, [pc, #612]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006cc0:	799b      	ldrb	r3, [r3, #6]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d105      	bne.n	8006cd2 <lcd_scan_dir+0x26>
 8006cc6:	4b97      	ldr	r3, [pc, #604]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006cc8:	889b      	ldrh	r3, [r3, #4]
 8006cca:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d109      	bne.n	8006ce6 <lcd_scan_dir+0x3a>
			|| (lcddev.dir == 0 && lcddev.id == 0x1963)) {
 8006cd2:	4b94      	ldr	r3, [pc, #592]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006cd4:	799b      	ldrb	r3, [r3, #6]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d134      	bne.n	8006d44 <lcd_scan_dir+0x98>
 8006cda:	4b92      	ldr	r3, [pc, #584]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006cdc:	889b      	ldrh	r3, [r3, #4]
 8006cde:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d12e      	bne.n	8006d44 <lcd_scan_dir+0x98>
		switch (dir) /* 方向转换 */
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	2b07      	cmp	r3, #7
 8006cea:	d82b      	bhi.n	8006d44 <lcd_scan_dir+0x98>
 8006cec:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf4 <lcd_scan_dir+0x48>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d15 	.word	0x08006d15
 8006cf8:	08006d1b 	.word	0x08006d1b
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d27 	.word	0x08006d27
 8006d04:	08006d2d 	.word	0x08006d2d
 8006d08:	08006d33 	.word	0x08006d33
 8006d0c:	08006d39 	.word	0x08006d39
 8006d10:	08006d3f 	.word	0x08006d3f
		{
		case 0:
			dir = 6;
 8006d14:	2306      	movs	r3, #6
 8006d16:	71fb      	strb	r3, [r7, #7]
			break;
 8006d18:	e014      	b.n	8006d44 <lcd_scan_dir+0x98>

		case 1:
			dir = 7;
 8006d1a:	2307      	movs	r3, #7
 8006d1c:	71fb      	strb	r3, [r7, #7]
			break;
 8006d1e:	e011      	b.n	8006d44 <lcd_scan_dir+0x98>

		case 2:
			dir = 4;
 8006d20:	2304      	movs	r3, #4
 8006d22:	71fb      	strb	r3, [r7, #7]
			break;
 8006d24:	e00e      	b.n	8006d44 <lcd_scan_dir+0x98>

		case 3:
			dir = 5;
 8006d26:	2305      	movs	r3, #5
 8006d28:	71fb      	strb	r3, [r7, #7]
			break;
 8006d2a:	e00b      	b.n	8006d44 <lcd_scan_dir+0x98>

		case 4:
			dir = 1;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	71fb      	strb	r3, [r7, #7]
			break;
 8006d30:	e008      	b.n	8006d44 <lcd_scan_dir+0x98>

		case 5:
			dir = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	71fb      	strb	r3, [r7, #7]
			break;
 8006d36:	e005      	b.n	8006d44 <lcd_scan_dir+0x98>

		case 6:
			dir = 3;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	71fb      	strb	r3, [r7, #7]
			break;
 8006d3c:	e002      	b.n	8006d44 <lcd_scan_dir+0x98>

		case 7:
			dir = 2;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	71fb      	strb	r3, [r7, #7]
			break;
 8006d42:	bf00      	nop
		}
	}

	/* 根据扫描方式 设置 0x36/0x3600 寄存器 bit 5,6,7 位的值 */
	switch (dir) {
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b07      	cmp	r3, #7
 8006d48:	d835      	bhi.n	8006db6 <lcd_scan_dir+0x10a>
 8006d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <lcd_scan_dir+0xa4>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006db7 	.word	0x08006db7
 8006d54:	08006d71 	.word	0x08006d71
 8006d58:	08006d7b 	.word	0x08006d7b
 8006d5c:	08006d85 	.word	0x08006d85
 8006d60:	08006d8f 	.word	0x08006d8f
 8006d64:	08006d99 	.word	0x08006d99
 8006d68:	08006da3 	.word	0x08006da3
 8006d6c:	08006dad 	.word	0x08006dad
	case L2R_U2D:/* 从左到右,从上到下 */
		regval |= (0 << 7) | (0 << 6) | (0 << 5);
		break;

	case L2R_D2U:/* 从左到右,从下到上 */
		regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8006d70:	89fb      	ldrh	r3, [r7, #14]
 8006d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d76:	81fb      	strh	r3, [r7, #14]
		break;
 8006d78:	e01d      	b.n	8006db6 <lcd_scan_dir+0x10a>

	case R2L_U2D:/* 从右到左,从上到下 */
		regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8006d7a:	89fb      	ldrh	r3, [r7, #14]
 8006d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d80:	81fb      	strh	r3, [r7, #14]
		break;
 8006d82:	e018      	b.n	8006db6 <lcd_scan_dir+0x10a>

	case R2L_D2U:/* 从右到左,从下到上 */
		regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8006d84:	89fb      	ldrh	r3, [r7, #14]
 8006d86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006d8a:	81fb      	strh	r3, [r7, #14]
		break;
 8006d8c:	e013      	b.n	8006db6 <lcd_scan_dir+0x10a>

	case U2D_L2R:/* 从上到下,从左到右 */
		regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8006d8e:	89fb      	ldrh	r3, [r7, #14]
 8006d90:	f043 0320 	orr.w	r3, r3, #32
 8006d94:	81fb      	strh	r3, [r7, #14]
		break;
 8006d96:	e00e      	b.n	8006db6 <lcd_scan_dir+0x10a>

	case U2D_R2L:/* 从上到下,从右到左 */
		regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8006d98:	89fb      	ldrh	r3, [r7, #14]
 8006d9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006d9e:	81fb      	strh	r3, [r7, #14]
		break;
 8006da0:	e009      	b.n	8006db6 <lcd_scan_dir+0x10a>

	case D2U_L2R:/* 从下到上,从左到右 */
		regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8006da2:	89fb      	ldrh	r3, [r7, #14]
 8006da4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8006da8:	81fb      	strh	r3, [r7, #14]
		break;
 8006daa:	e004      	b.n	8006db6 <lcd_scan_dir+0x10a>

	case D2U_R2L:/* 从下到上,从右到左 */
		regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8006dac:	89fb      	ldrh	r3, [r7, #14]
 8006dae:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8006db2:	81fb      	strh	r3, [r7, #14]
		break;
 8006db4:	bf00      	nop
	}

	dirreg = 0x36; /* 对绝大部分驱动IC, 由0x36寄存器控制 */
 8006db6:	2336      	movs	r3, #54	@ 0x36
 8006db8:	81bb      	strh	r3, [r7, #12]

	if (lcddev.id == 0x5510) {
 8006dba:	4b5a      	ldr	r3, [pc, #360]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006dbc:	889b      	ldrh	r3, [r3, #4]
 8006dbe:	f245 5210 	movw	r2, #21776	@ 0x5510
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d102      	bne.n	8006dcc <lcd_scan_dir+0x120>
		dirreg = 0x3600; /* 对于5510, 和其他驱动ic的寄存器有差异 */
 8006dc6:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 8006dca:	81bb      	strh	r3, [r7, #12]
	}

	/* 9341 & 7789 要设置BGR位 */
	if (lcddev.id == 0x9341 || lcddev.id == 0x7789) {
 8006dcc:	4b55      	ldr	r3, [pc, #340]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006dce:	889b      	ldrh	r3, [r3, #4]
 8006dd0:	f249 3241 	movw	r2, #37697	@ 0x9341
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d005      	beq.n	8006de4 <lcd_scan_dir+0x138>
 8006dd8:	4b52      	ldr	r3, [pc, #328]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006dda:	889b      	ldrh	r3, [r3, #4]
 8006ddc:	f247 7289 	movw	r2, #30601	@ 0x7789
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d103      	bne.n	8006dec <lcd_scan_dir+0x140>
		regval |= 0x08;
 8006de4:	89fb      	ldrh	r3, [r7, #14]
 8006de6:	f043 0308 	orr.w	r3, r3, #8
 8006dea:	81fb      	strh	r3, [r7, #14]
	}

	lcd_write_reg(dirreg, regval);
 8006dec:	89fa      	ldrh	r2, [r7, #14]
 8006dee:	89bb      	ldrh	r3, [r7, #12]
 8006df0:	4611      	mov	r1, r2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fe4c 	bl	8006a90 <lcd_write_reg>

	if (lcddev.id != 0x1963) /* 1963不做坐标处理 */
 8006df8:	4b4a      	ldr	r3, [pc, #296]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006dfa:	889b      	ldrh	r3, [r3, #4]
 8006dfc:	f641 1263 	movw	r2, #6499	@ 0x1963
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d025      	beq.n	8006e50 <lcd_scan_dir+0x1a4>
	{
		if (regval & 0x20) {
 8006e04:	89fb      	ldrh	r3, [r7, #14]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d010      	beq.n	8006e30 <lcd_scan_dir+0x184>
			if (lcddev.width < lcddev.height) /* 交换X,Y */
 8006e0e:	4b45      	ldr	r3, [pc, #276]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e10:	881a      	ldrh	r2, [r3, #0]
 8006e12:	4b44      	ldr	r3, [pc, #272]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d21a      	bcs.n	8006e50 <lcd_scan_dir+0x1a4>
			{
				temp = lcddev.width;
 8006e1a:	4b42      	ldr	r3, [pc, #264]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	817b      	strh	r3, [r7, #10]
				lcddev.width = lcddev.height;
 8006e20:	4b40      	ldr	r3, [pc, #256]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e22:	885a      	ldrh	r2, [r3, #2]
 8006e24:	4b3f      	ldr	r3, [pc, #252]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e26:	801a      	strh	r2, [r3, #0]
				lcddev.height = temp;
 8006e28:	4a3e      	ldr	r2, [pc, #248]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e2a:	897b      	ldrh	r3, [r7, #10]
 8006e2c:	8053      	strh	r3, [r2, #2]
 8006e2e:	e00f      	b.n	8006e50 <lcd_scan_dir+0x1a4>
			}
		} else {
			if (lcddev.width > lcddev.height) /* 交换X,Y */
 8006e30:	4b3c      	ldr	r3, [pc, #240]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e32:	881a      	ldrh	r2, [r3, #0]
 8006e34:	4b3b      	ldr	r3, [pc, #236]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e36:	885b      	ldrh	r3, [r3, #2]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d909      	bls.n	8006e50 <lcd_scan_dir+0x1a4>
			{
				temp = lcddev.width;
 8006e3c:	4b39      	ldr	r3, [pc, #228]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	817b      	strh	r3, [r7, #10]
				lcddev.width = lcddev.height;
 8006e42:	4b38      	ldr	r3, [pc, #224]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e44:	885a      	ldrh	r2, [r3, #2]
 8006e46:	4b37      	ldr	r3, [pc, #220]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e48:	801a      	strh	r2, [r3, #0]
				lcddev.height = temp;
 8006e4a:	4a36      	ldr	r2, [pc, #216]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e4c:	897b      	ldrh	r3, [r7, #10]
 8006e4e:	8053      	strh	r3, [r2, #2]
			}
		}
	}

	/* 设置显示区域(开窗)大小 */
	if (lcddev.id == 0x5510) {
 8006e50:	4b34      	ldr	r3, [pc, #208]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e52:	889b      	ldrh	r3, [r3, #4]
 8006e54:	f245 5210 	movw	r2, #21776	@ 0x5510
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d165      	bne.n	8006f28 <lcd_scan_dir+0x27c>
		lcd_wr_regno(lcddev.setxcmd);
 8006e5c:	4b31      	ldr	r3, [pc, #196]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e5e:	895b      	ldrh	r3, [r3, #10]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fe01 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(0);
 8006e66:	2000      	movs	r0, #0
 8006e68:	f7ff fdea 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setxcmd + 1);
 8006e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e6e:	895b      	ldrh	r3, [r3, #10]
 8006e70:	3301      	adds	r3, #1
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fdf7 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(0);
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	f7ff fde0 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setxcmd + 2);
 8006e80:	4b28      	ldr	r3, [pc, #160]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e82:	895b      	ldrh	r3, [r3, #10]
 8006e84:	3302      	adds	r3, #2
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fded 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data((lcddev.width - 1) >> 8);
 8006e8e:	4b25      	ldr	r3, [pc, #148]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	121b      	asrs	r3, r3, #8
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff fdd1 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setxcmd + 3);
 8006e9e:	4b21      	ldr	r3, [pc, #132]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006ea0:	895b      	ldrh	r3, [r3, #10]
 8006ea2:	3303      	adds	r3, #3
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fdde 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data((lcddev.width - 1) & 0xFF);
 8006eac:	4b1d      	ldr	r3, [pc, #116]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fdc1 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setycmd);
 8006ebe:	4b19      	ldr	r3, [pc, #100]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006ec0:	899b      	ldrh	r3, [r3, #12]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff fdd0 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(0);
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f7ff fdb9 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setycmd + 1);
 8006ece:	4b15      	ldr	r3, [pc, #84]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006ed0:	899b      	ldrh	r3, [r3, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fdc6 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(0);
 8006edc:	2000      	movs	r0, #0
 8006ede:	f7ff fdaf 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setycmd + 2);
 8006ee2:	4b10      	ldr	r3, [pc, #64]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006ee4:	899b      	ldrh	r3, [r3, #12]
 8006ee6:	3302      	adds	r3, #2
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fdbc 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data((lcddev.height - 1) >> 8);
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006ef2:	885b      	ldrh	r3, [r3, #2]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	121b      	asrs	r3, r3, #8
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fda0 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setycmd + 3);
 8006f00:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006f02:	899b      	ldrh	r3, [r3, #12]
 8006f04:	3303      	adds	r3, #3
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fdad 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data((lcddev.height - 1) & 0xFF);
 8006f0e:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <lcd_scan_dir+0x278>)
 8006f10:	885b      	ldrh	r3, [r3, #2]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff fd90 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data(0);
		lcd_wr_data(0);
		lcd_wr_data((lcddev.height - 1) >> 8);
		lcd_wr_data((lcddev.height - 1) & 0xFF);
	}
}
 8006f20:	e03a      	b.n	8006f98 <lcd_scan_dir+0x2ec>
 8006f22:	bf00      	nop
 8006f24:	200003ec 	.word	0x200003ec
		lcd_wr_regno(lcddev.setxcmd);
 8006f28:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa0 <lcd_scan_dir+0x2f4>)
 8006f2a:	895b      	ldrh	r3, [r3, #10]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff fd9b 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(0);
 8006f32:	2000      	movs	r0, #0
 8006f34:	f7ff fd84 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data(0);
 8006f38:	2000      	movs	r0, #0
 8006f3a:	f7ff fd81 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data((lcddev.width - 1) >> 8);
 8006f3e:	4b18      	ldr	r3, [pc, #96]	@ (8006fa0 <lcd_scan_dir+0x2f4>)
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	121b      	asrs	r3, r3, #8
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fd79 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data((lcddev.width - 1) & 0xFF);
 8006f4e:	4b14      	ldr	r3, [pc, #80]	@ (8006fa0 <lcd_scan_dir+0x2f4>)
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fd70 	bl	8006a40 <lcd_wr_data>
		lcd_wr_regno(lcddev.setycmd);
 8006f60:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa0 <lcd_scan_dir+0x2f4>)
 8006f62:	899b      	ldrh	r3, [r3, #12]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff fd7f 	bl	8006a68 <lcd_wr_regno>
		lcd_wr_data(0);
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f7ff fd68 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data(0);
 8006f70:	2000      	movs	r0, #0
 8006f72:	f7ff fd65 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data((lcddev.height - 1) >> 8);
 8006f76:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa0 <lcd_scan_dir+0x2f4>)
 8006f78:	885b      	ldrh	r3, [r3, #2]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	121b      	asrs	r3, r3, #8
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fd5d 	bl	8006a40 <lcd_wr_data>
		lcd_wr_data((lcddev.height - 1) & 0xFF);
 8006f86:	4b06      	ldr	r3, [pc, #24]	@ (8006fa0 <lcd_scan_dir+0x2f4>)
 8006f88:	885b      	ldrh	r3, [r3, #2]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff fd54 	bl	8006a40 <lcd_wr_data>
}
 8006f98:	bf00      	nop
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	200003ec 	.word	0x200003ec

08006fa4 <lcd_draw_point>:
 * @brief       画点
 * @param       x,y: 坐标
 * @param       color: 点的颜色(32位颜色,方便兼容LTDC)
 * @retval      无
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color) {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	603a      	str	r2, [r7, #0]
 8006fae:	80fb      	strh	r3, [r7, #6]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	80bb      	strh	r3, [r7, #4]
	lcd_set_cursor(x, y); /* 设置光标位置 */
 8006fb4:	88ba      	ldrh	r2, [r7, #4]
 8006fb6:	88fb      	ldrh	r3, [r7, #6]
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff fda0 	bl	8006b00 <lcd_set_cursor>
	lcd_write_ram_prepare(); /* 开始写入GRAM */
 8006fc0:	f7ff fd8e 	bl	8006ae0 <lcd_write_ram_prepare>
	LCD->LCD_RAM = color;
 8006fc4:	4b03      	ldr	r3, [pc, #12]	@ (8006fd4 <lcd_draw_point+0x30>)
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	805a      	strh	r2, [r3, #2]
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	6c00007e 	.word	0x6c00007e

08006fd8 <lcd_ssd_backlight_set>:
/**
 * @brief       SSD1963背光亮度设置函数
 * @param       pwm: 背光等级,0~100.越大越亮.
 * @retval      无
 */
void lcd_ssd_backlight_set(uint8_t pwm) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	71fb      	strb	r3, [r7, #7]
	lcd_wr_regno(0xBE); /* 配置PWM输出 */
 8006fe2:	20be      	movs	r0, #190	@ 0xbe
 8006fe4:	f7ff fd40 	bl	8006a68 <lcd_wr_regno>
	lcd_wr_data(0x05); /* 1设置PWM频率 */
 8006fe8:	2005      	movs	r0, #5
 8006fea:	f7ff fd29 	bl	8006a40 <lcd_wr_data>
	lcd_wr_data(pwm * 2.55); /* 2设置PWM占空比 */
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7f9 fa97 	bl	8000524 <__aeabi_i2d>
 8006ff6:	a310      	add	r3, pc, #64	@ (adr r3, 8007038 <lcd_ssd_backlight_set+0x60>)
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	f7f9 fafc 	bl	80005f8 <__aeabi_dmul>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4610      	mov	r0, r2
 8007006:	4619      	mov	r1, r3
 8007008:	f7f9 fdce 	bl	8000ba8 <__aeabi_d2uiz>
 800700c:	4603      	mov	r3, r0
 800700e:	b29b      	uxth	r3, r3
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff fd15 	bl	8006a40 <lcd_wr_data>
	lcd_wr_data(0x01); /* 3设置C */
 8007016:	2001      	movs	r0, #1
 8007018:	f7ff fd12 	bl	8006a40 <lcd_wr_data>
	lcd_wr_data(0xFF); /* 4设置D */
 800701c:	20ff      	movs	r0, #255	@ 0xff
 800701e:	f7ff fd0f 	bl	8006a40 <lcd_wr_data>
	lcd_wr_data(0x00); /* 5设置E */
 8007022:	2000      	movs	r0, #0
 8007024:	f7ff fd0c 	bl	8006a40 <lcd_wr_data>
	lcd_wr_data(0x00); /* 6设置F */
 8007028:	2000      	movs	r0, #0
 800702a:	f7ff fd09 	bl	8006a40 <lcd_wr_data>
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	66666666 	.word	0x66666666
 800703c:	40046666 	.word	0x40046666

08007040 <lcd_display_dir>:
/**
 * @brief       设置LCD显示方向
 * @param       dir:0,竖屏; 1,横屏
 * @retval      无
 */
void lcd_display_dir(uint8_t dir) {
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	71fb      	strb	r3, [r7, #7]
	lcddev.dir = dir; /* 竖屏/横屏 */
 800704a:	4a58      	ldr	r2, [pc, #352]	@ (80071ac <lcd_display_dir+0x16c>)
 800704c:	79fb      	ldrb	r3, [r7, #7]
 800704e:	7193      	strb	r3, [r2, #6]

	if (dir == 0) /* 竖屏 */
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d151      	bne.n	80070fa <lcd_display_dir+0xba>
	{
		lcddev.width = 240;
 8007056:	4b55      	ldr	r3, [pc, #340]	@ (80071ac <lcd_display_dir+0x16c>)
 8007058:	22f0      	movs	r2, #240	@ 0xf0
 800705a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 800705c:	4b53      	ldr	r3, [pc, #332]	@ (80071ac <lcd_display_dir+0x16c>)
 800705e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007062:	805a      	strh	r2, [r3, #2]

		if (lcddev.id == 0x5510) {
 8007064:	4b51      	ldr	r3, [pc, #324]	@ (80071ac <lcd_display_dir+0x16c>)
 8007066:	889b      	ldrh	r3, [r3, #4]
 8007068:	f245 5210 	movw	r2, #21776	@ 0x5510
 800706c:	4293      	cmp	r3, r2
 800706e:	d114      	bne.n	800709a <lcd_display_dir+0x5a>
			lcddev.wramcmd = 0x2C00;
 8007070:	4b4e      	ldr	r3, [pc, #312]	@ (80071ac <lcd_display_dir+0x16c>)
 8007072:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8007076:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0x2A00;
 8007078:	4b4c      	ldr	r3, [pc, #304]	@ (80071ac <lcd_display_dir+0x16c>)
 800707a:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 800707e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0x2B00;
 8007080:	4b4a      	ldr	r3, [pc, #296]	@ (80071ac <lcd_display_dir+0x16c>)
 8007082:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8007086:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8007088:	4b48      	ldr	r3, [pc, #288]	@ (80071ac <lcd_display_dir+0x16c>)
 800708a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800708e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8007090:	4b46      	ldr	r3, [pc, #280]	@ (80071ac <lcd_display_dir+0x16c>)
 8007092:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8007096:	805a      	strh	r2, [r3, #2]
 8007098:	e020      	b.n	80070dc <lcd_display_dir+0x9c>
		} else if (lcddev.id == 0x1963) {
 800709a:	4b44      	ldr	r3, [pc, #272]	@ (80071ac <lcd_display_dir+0x16c>)
 800709c:	889b      	ldrh	r3, [r3, #4]
 800709e:	f641 1263 	movw	r2, #6499	@ 0x1963
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d111      	bne.n	80070ca <lcd_display_dir+0x8a>
			lcddev.wramcmd = 0x2C; /* 设置写入GRAM的指令 */
 80070a6:	4b41      	ldr	r3, [pc, #260]	@ (80071ac <lcd_display_dir+0x16c>)
 80070a8:	222c      	movs	r2, #44	@ 0x2c
 80070aa:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0x2B; /* 设置写X坐标指令 */
 80070ac:	4b3f      	ldr	r3, [pc, #252]	@ (80071ac <lcd_display_dir+0x16c>)
 80070ae:	222b      	movs	r2, #43	@ 0x2b
 80070b0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0x2A; /* 设置写Y坐标指令 */
 80070b2:	4b3e      	ldr	r3, [pc, #248]	@ (80071ac <lcd_display_dir+0x16c>)
 80070b4:	222a      	movs	r2, #42	@ 0x2a
 80070b6:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480; /* 设置宽度480 */
 80070b8:	4b3c      	ldr	r3, [pc, #240]	@ (80071ac <lcd_display_dir+0x16c>)
 80070ba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80070be:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800; /* 设置高度800 */
 80070c0:	4b3a      	ldr	r3, [pc, #232]	@ (80071ac <lcd_display_dir+0x16c>)
 80070c2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80070c6:	805a      	strh	r2, [r3, #2]
 80070c8:	e008      	b.n	80070dc <lcd_display_dir+0x9c>
		} else /* 其他IC, 包括: 9341 / 5310 / 7789等IC */
		{
			lcddev.wramcmd = 0x2C;
 80070ca:	4b38      	ldr	r3, [pc, #224]	@ (80071ac <lcd_display_dir+0x16c>)
 80070cc:	222c      	movs	r2, #44	@ 0x2c
 80070ce:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0x2A;
 80070d0:	4b36      	ldr	r3, [pc, #216]	@ (80071ac <lcd_display_dir+0x16c>)
 80070d2:	222a      	movs	r2, #42	@ 0x2a
 80070d4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0x2B;
 80070d6:	4b35      	ldr	r3, [pc, #212]	@ (80071ac <lcd_display_dir+0x16c>)
 80070d8:	222b      	movs	r2, #43	@ 0x2b
 80070da:	819a      	strh	r2, [r3, #12]
		}

		if (lcddev.id == 0x5310) /* 如果是5310 则表示是 320*480分辨率 */
 80070dc:	4b33      	ldr	r3, [pc, #204]	@ (80071ac <lcd_display_dir+0x16c>)
 80070de:	889b      	ldrh	r3, [r3, #4]
 80070e0:	f245 3210 	movw	r2, #21264	@ 0x5310
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d159      	bne.n	800719c <lcd_display_dir+0x15c>
		{
			lcddev.width = 320;
 80070e8:	4b30      	ldr	r3, [pc, #192]	@ (80071ac <lcd_display_dir+0x16c>)
 80070ea:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80070ee:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80070f0:	4b2e      	ldr	r3, [pc, #184]	@ (80071ac <lcd_display_dir+0x16c>)
 80070f2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80070f6:	805a      	strh	r2, [r3, #2]
 80070f8:	e050      	b.n	800719c <lcd_display_dir+0x15c>
		}
	}/*dir = 0*/
	else /* 横屏 */
	{
		lcddev.width = 320; /* 默认宽度 */
 80070fa:	4b2c      	ldr	r3, [pc, #176]	@ (80071ac <lcd_display_dir+0x16c>)
 80070fc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007100:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240; /* 默认高度 */
 8007102:	4b2a      	ldr	r3, [pc, #168]	@ (80071ac <lcd_display_dir+0x16c>)
 8007104:	22f0      	movs	r2, #240	@ 0xf0
 8007106:	805a      	strh	r2, [r3, #2]

		if (lcddev.id == 0x5510) {
 8007108:	4b28      	ldr	r3, [pc, #160]	@ (80071ac <lcd_display_dir+0x16c>)
 800710a:	889b      	ldrh	r3, [r3, #4]
 800710c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8007110:	4293      	cmp	r3, r2
 8007112:	d114      	bne.n	800713e <lcd_display_dir+0xfe>
			lcddev.wramcmd = 0x2C00;
 8007114:	4b25      	ldr	r3, [pc, #148]	@ (80071ac <lcd_display_dir+0x16c>)
 8007116:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 800711a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0x2A00;
 800711c:	4b23      	ldr	r3, [pc, #140]	@ (80071ac <lcd_display_dir+0x16c>)
 800711e:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8007122:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0x2B00;
 8007124:	4b21      	ldr	r3, [pc, #132]	@ (80071ac <lcd_display_dir+0x16c>)
 8007126:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 800712a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 800712c:	4b1f      	ldr	r3, [pc, #124]	@ (80071ac <lcd_display_dir+0x16c>)
 800712e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8007132:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8007134:	4b1d      	ldr	r3, [pc, #116]	@ (80071ac <lcd_display_dir+0x16c>)
 8007136:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800713a:	805a      	strh	r2, [r3, #2]
 800713c:	e020      	b.n	8007180 <lcd_display_dir+0x140>
		} else if (lcddev.id == 0x1963) {
 800713e:	4b1b      	ldr	r3, [pc, #108]	@ (80071ac <lcd_display_dir+0x16c>)
 8007140:	889b      	ldrh	r3, [r3, #4]
 8007142:	f641 1263 	movw	r2, #6499	@ 0x1963
 8007146:	4293      	cmp	r3, r2
 8007148:	d111      	bne.n	800716e <lcd_display_dir+0x12e>
			lcddev.wramcmd = 0x2C; /* 设置写入GRAM的指令 */
 800714a:	4b18      	ldr	r3, [pc, #96]	@ (80071ac <lcd_display_dir+0x16c>)
 800714c:	222c      	movs	r2, #44	@ 0x2c
 800714e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0x2A; /* 设置写X坐标指令 */
 8007150:	4b16      	ldr	r3, [pc, #88]	@ (80071ac <lcd_display_dir+0x16c>)
 8007152:	222a      	movs	r2, #42	@ 0x2a
 8007154:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0x2B; /* 设置写Y坐标指令 */
 8007156:	4b15      	ldr	r3, [pc, #84]	@ (80071ac <lcd_display_dir+0x16c>)
 8007158:	222b      	movs	r2, #43	@ 0x2b
 800715a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800; /* 设置宽度800 */
 800715c:	4b13      	ldr	r3, [pc, #76]	@ (80071ac <lcd_display_dir+0x16c>)
 800715e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8007162:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480; /* 设置高度480 */
 8007164:	4b11      	ldr	r3, [pc, #68]	@ (80071ac <lcd_display_dir+0x16c>)
 8007166:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800716a:	805a      	strh	r2, [r3, #2]
 800716c:	e008      	b.n	8007180 <lcd_display_dir+0x140>
		} else /* 其他IC, 包括:9341/5310/7789等IC */
		{
			lcddev.wramcmd = 0x2C;
 800716e:	4b0f      	ldr	r3, [pc, #60]	@ (80071ac <lcd_display_dir+0x16c>)
 8007170:	222c      	movs	r2, #44	@ 0x2c
 8007172:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0x2A;
 8007174:	4b0d      	ldr	r3, [pc, #52]	@ (80071ac <lcd_display_dir+0x16c>)
 8007176:	222a      	movs	r2, #42	@ 0x2a
 8007178:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0x2B;
 800717a:	4b0c      	ldr	r3, [pc, #48]	@ (80071ac <lcd_display_dir+0x16c>)
 800717c:	222b      	movs	r2, #43	@ 0x2b
 800717e:	819a      	strh	r2, [r3, #12]
		}

		if (lcddev.id == 0x5310) {
 8007180:	4b0a      	ldr	r3, [pc, #40]	@ (80071ac <lcd_display_dir+0x16c>)
 8007182:	889b      	ldrh	r3, [r3, #4]
 8007184:	f245 3210 	movw	r2, #21264	@ 0x5310
 8007188:	4293      	cmp	r3, r2
 800718a:	d107      	bne.n	800719c <lcd_display_dir+0x15c>
			lcddev.width = 480;
 800718c:	4b07      	ldr	r3, [pc, #28]	@ (80071ac <lcd_display_dir+0x16c>)
 800718e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007192:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8007194:	4b05      	ldr	r3, [pc, #20]	@ (80071ac <lcd_display_dir+0x16c>)
 8007196:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800719a:	805a      	strh	r2, [r3, #2]
		}
	}

	lcd_scan_dir(DFT_SCAN_DIR); /* 默认扫描方向 */
 800719c:	2000      	movs	r0, #0
 800719e:	f7ff fd85 	bl	8006cac <lcd_scan_dir>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	200003ec 	.word	0x200003ec

080071b0 <lcd_init>:
 *   @note      该初始化函数可以初始化各种型号的LCD(详见本.c文件最前面的描述)
 *
 * @param       无
 * @retval      无
 */
void lcd_init(void) {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
	FSMC_NORSRAM_TimingTypeDef fsmc_write_handle;

	/* 尝试9341 ID的读取 */
	lcd_wr_regno(0xD3);
 80071b6:	20d3      	movs	r0, #211	@ 0xd3
 80071b8:	f7ff fc56 	bl	8006a68 <lcd_wr_regno>
	lcddev.id = lcd_rd_data(); /* dummy read */
 80071bc:	f7ff fc7e 	bl	8006abc <lcd_rd_data>
 80071c0:	4603      	mov	r3, r0
 80071c2:	461a      	mov	r2, r3
 80071c4:	4b89      	ldr	r3, [pc, #548]	@ (80073ec <lcd_init+0x23c>)
 80071c6:	809a      	strh	r2, [r3, #4]
	lcddev.id = lcd_rd_data(); /* 读到0x00 */
 80071c8:	f7ff fc78 	bl	8006abc <lcd_rd_data>
 80071cc:	4603      	mov	r3, r0
 80071ce:	461a      	mov	r2, r3
 80071d0:	4b86      	ldr	r3, [pc, #536]	@ (80073ec <lcd_init+0x23c>)
 80071d2:	809a      	strh	r2, [r3, #4]
	lcddev.id = lcd_rd_data(); /* 读取93 */
 80071d4:	f7ff fc72 	bl	8006abc <lcd_rd_data>
 80071d8:	4603      	mov	r3, r0
 80071da:	461a      	mov	r2, r3
 80071dc:	4b83      	ldr	r3, [pc, #524]	@ (80073ec <lcd_init+0x23c>)
 80071de:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 80071e0:	4b82      	ldr	r3, [pc, #520]	@ (80073ec <lcd_init+0x23c>)
 80071e2:	889b      	ldrh	r3, [r3, #4]
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	4b80      	ldr	r3, [pc, #512]	@ (80073ec <lcd_init+0x23c>)
 80071ea:	809a      	strh	r2, [r3, #4]
	lcddev.id |= lcd_rd_data(); /* 读取41 */
 80071ec:	f7ff fc66 	bl	8006abc <lcd_rd_data>
 80071f0:	4603      	mov	r3, r0
 80071f2:	461a      	mov	r2, r3
 80071f4:	4b7d      	ldr	r3, [pc, #500]	@ (80073ec <lcd_init+0x23c>)
 80071f6:	889b      	ldrh	r3, [r3, #4]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	4b7b      	ldr	r3, [pc, #492]	@ (80073ec <lcd_init+0x23c>)
 80071fe:	809a      	strh	r2, [r3, #4]

	if (lcddev.id != 0x9341) /* 不是 9341 , 尝试看看是不是 ST7789 */
 8007200:	4b7a      	ldr	r3, [pc, #488]	@ (80073ec <lcd_init+0x23c>)
 8007202:	889b      	ldrh	r3, [r3, #4]
 8007204:	f249 3241 	movw	r2, #37697	@ 0x9341
 8007208:	4293      	cmp	r3, r2
 800720a:	f000 80ca 	beq.w	80073a2 <lcd_init+0x1f2>
	{
		lcd_wr_regno(0x04);
 800720e:	2004      	movs	r0, #4
 8007210:	f7ff fc2a 	bl	8006a68 <lcd_wr_regno>
		lcddev.id = lcd_rd_data(); /* dummy read */
 8007214:	f7ff fc52 	bl	8006abc <lcd_rd_data>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	4b73      	ldr	r3, [pc, #460]	@ (80073ec <lcd_init+0x23c>)
 800721e:	809a      	strh	r2, [r3, #4]
		lcddev.id = lcd_rd_data(); /* 读到0x85 */
 8007220:	f7ff fc4c 	bl	8006abc <lcd_rd_data>
 8007224:	4603      	mov	r3, r0
 8007226:	461a      	mov	r2, r3
 8007228:	4b70      	ldr	r3, [pc, #448]	@ (80073ec <lcd_init+0x23c>)
 800722a:	809a      	strh	r2, [r3, #4]
		lcddev.id = lcd_rd_data(); /* 读取0x85 */
 800722c:	f7ff fc46 	bl	8006abc <lcd_rd_data>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	4b6d      	ldr	r3, [pc, #436]	@ (80073ec <lcd_init+0x23c>)
 8007236:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8007238:	4b6c      	ldr	r3, [pc, #432]	@ (80073ec <lcd_init+0x23c>)
 800723a:	889b      	ldrh	r3, [r3, #4]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	b29a      	uxth	r2, r3
 8007240:	4b6a      	ldr	r3, [pc, #424]	@ (80073ec <lcd_init+0x23c>)
 8007242:	809a      	strh	r2, [r3, #4]
		lcddev.id |= lcd_rd_data(); /* 读取0x52 */
 8007244:	f7ff fc3a 	bl	8006abc <lcd_rd_data>
 8007248:	4603      	mov	r3, r0
 800724a:	461a      	mov	r2, r3
 800724c:	4b67      	ldr	r3, [pc, #412]	@ (80073ec <lcd_init+0x23c>)
 800724e:	889b      	ldrh	r3, [r3, #4]
 8007250:	4313      	orrs	r3, r2
 8007252:	b29a      	uxth	r2, r3
 8007254:	4b65      	ldr	r3, [pc, #404]	@ (80073ec <lcd_init+0x23c>)
 8007256:	809a      	strh	r2, [r3, #4]

		if (lcddev.id == 0x8552) /* 将8552的ID转换成7789 */
 8007258:	4b64      	ldr	r3, [pc, #400]	@ (80073ec <lcd_init+0x23c>)
 800725a:	889b      	ldrh	r3, [r3, #4]
 800725c:	f248 5252 	movw	r2, #34130	@ 0x8552
 8007260:	4293      	cmp	r3, r2
 8007262:	d103      	bne.n	800726c <lcd_init+0xbc>
		{
			lcddev.id = 0x7789;
 8007264:	4b61      	ldr	r3, [pc, #388]	@ (80073ec <lcd_init+0x23c>)
 8007266:	f247 7289 	movw	r2, #30601	@ 0x7789
 800726a:	809a      	strh	r2, [r3, #4]
		}

		if (lcddev.id != 0x7789) /* 也不是ST7789, 尝试是不是 NT35310 */
 800726c:	4b5f      	ldr	r3, [pc, #380]	@ (80073ec <lcd_init+0x23c>)
 800726e:	889b      	ldrh	r3, [r3, #4]
 8007270:	f247 7289 	movw	r2, #30601	@ 0x7789
 8007274:	4293      	cmp	r3, r2
 8007276:	f000 8094 	beq.w	80073a2 <lcd_init+0x1f2>
		{
			lcd_wr_regno(0xD4);
 800727a:	20d4      	movs	r0, #212	@ 0xd4
 800727c:	f7ff fbf4 	bl	8006a68 <lcd_wr_regno>
			lcddev.id = lcd_rd_data(); /* dummy read */
 8007280:	f7ff fc1c 	bl	8006abc <lcd_rd_data>
 8007284:	4603      	mov	r3, r0
 8007286:	461a      	mov	r2, r3
 8007288:	4b58      	ldr	r3, [pc, #352]	@ (80073ec <lcd_init+0x23c>)
 800728a:	809a      	strh	r2, [r3, #4]
			lcddev.id = lcd_rd_data(); /* 读回0x01 */
 800728c:	f7ff fc16 	bl	8006abc <lcd_rd_data>
 8007290:	4603      	mov	r3, r0
 8007292:	461a      	mov	r2, r3
 8007294:	4b55      	ldr	r3, [pc, #340]	@ (80073ec <lcd_init+0x23c>)
 8007296:	809a      	strh	r2, [r3, #4]
			lcddev.id = lcd_rd_data(); /* 读回0x53 */
 8007298:	f7ff fc10 	bl	8006abc <lcd_rd_data>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	4b52      	ldr	r3, [pc, #328]	@ (80073ec <lcd_init+0x23c>)
 80072a2:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 80072a4:	4b51      	ldr	r3, [pc, #324]	@ (80073ec <lcd_init+0x23c>)
 80072a6:	889b      	ldrh	r3, [r3, #4]
 80072a8:	021b      	lsls	r3, r3, #8
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	4b4f      	ldr	r3, [pc, #316]	@ (80073ec <lcd_init+0x23c>)
 80072ae:	809a      	strh	r2, [r3, #4]
			lcddev.id |= lcd_rd_data(); /* 这里读回0x10 */
 80072b0:	f7ff fc04 	bl	8006abc <lcd_rd_data>
 80072b4:	4603      	mov	r3, r0
 80072b6:	461a      	mov	r2, r3
 80072b8:	4b4c      	ldr	r3, [pc, #304]	@ (80073ec <lcd_init+0x23c>)
 80072ba:	889b      	ldrh	r3, [r3, #4]
 80072bc:	4313      	orrs	r3, r2
 80072be:	b29a      	uxth	r2, r3
 80072c0:	4b4a      	ldr	r3, [pc, #296]	@ (80073ec <lcd_init+0x23c>)
 80072c2:	809a      	strh	r2, [r3, #4]

			if (lcddev.id != 0x5310) /* 也不是NT35310,尝试看看是不是NT35510 */
 80072c4:	4b49      	ldr	r3, [pc, #292]	@ (80073ec <lcd_init+0x23c>)
 80072c6:	889b      	ldrh	r3, [r3, #4]
 80072c8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d068      	beq.n	80073a2 <lcd_init+0x1f2>
			{
				/* 发送密钥（厂家提供） */
				lcd_write_reg(0xF000, 0x0055);
 80072d0:	2155      	movs	r1, #85	@ 0x55
 80072d2:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80072d6:	f7ff fbdb 	bl	8006a90 <lcd_write_reg>
				lcd_write_reg(0xF001, 0x00AA);
 80072da:	21aa      	movs	r1, #170	@ 0xaa
 80072dc:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80072e0:	f7ff fbd6 	bl	8006a90 <lcd_write_reg>
				lcd_write_reg(0xF002, 0x0052);
 80072e4:	2152      	movs	r1, #82	@ 0x52
 80072e6:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80072ea:	f7ff fbd1 	bl	8006a90 <lcd_write_reg>
				lcd_write_reg(0xF003, 0x0008);
 80072ee:	2108      	movs	r1, #8
 80072f0:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80072f4:	f7ff fbcc 	bl	8006a90 <lcd_write_reg>
				lcd_write_reg(0xF004, 0x0001);
 80072f8:	2101      	movs	r1, #1
 80072fa:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80072fe:	f7ff fbc7 	bl	8006a90 <lcd_write_reg>

				lcd_wr_regno(0xC500); /* 读取ID低八位 */
 8007302:	f44f 4045 	mov.w	r0, #50432	@ 0xc500
 8007306:	f7ff fbaf 	bl	8006a68 <lcd_wr_regno>
				lcddev.id = lcd_rd_data(); /* 读回0x80 */
 800730a:	f7ff fbd7 	bl	8006abc <lcd_rd_data>
 800730e:	4603      	mov	r3, r0
 8007310:	461a      	mov	r2, r3
 8007312:	4b36      	ldr	r3, [pc, #216]	@ (80073ec <lcd_init+0x23c>)
 8007314:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8007316:	4b35      	ldr	r3, [pc, #212]	@ (80073ec <lcd_init+0x23c>)
 8007318:	889b      	ldrh	r3, [r3, #4]
 800731a:	021b      	lsls	r3, r3, #8
 800731c:	b29a      	uxth	r2, r3
 800731e:	4b33      	ldr	r3, [pc, #204]	@ (80073ec <lcd_init+0x23c>)
 8007320:	809a      	strh	r2, [r3, #4]

				lcd_wr_regno(0xC501); /* 读取ID高八位 */
 8007322:	f24c 5001 	movw	r0, #50433	@ 0xc501
 8007326:	f7ff fb9f 	bl	8006a68 <lcd_wr_regno>
				lcddev.id |= lcd_rd_data(); /* 读回0x00 */
 800732a:	f7ff fbc7 	bl	8006abc <lcd_rd_data>
 800732e:	4603      	mov	r3, r0
 8007330:	461a      	mov	r2, r3
 8007332:	4b2e      	ldr	r3, [pc, #184]	@ (80073ec <lcd_init+0x23c>)
 8007334:	889b      	ldrh	r3, [r3, #4]
 8007336:	4313      	orrs	r3, r2
 8007338:	b29a      	uxth	r2, r3
 800733a:	4b2c      	ldr	r3, [pc, #176]	@ (80073ec <lcd_init+0x23c>)
 800733c:	809a      	strh	r2, [r3, #4]
				HAL_Delay(5); /* 等待5ms, 因为0XC501指令对1963来说就是软件复位指令, 等待5ms让1963复位完成再操作 */
 800733e:	2005      	movs	r0, #5
 8007340:	f7fa fe5e 	bl	8002000 <HAL_Delay>

				if (lcddev.id != 0x5510) /* 也不是NT5510,尝试看看是不是SSD1963 */
 8007344:	4b29      	ldr	r3, [pc, #164]	@ (80073ec <lcd_init+0x23c>)
 8007346:	889b      	ldrh	r3, [r3, #4]
 8007348:	f245 5210 	movw	r2, #21776	@ 0x5510
 800734c:	4293      	cmp	r3, r2
 800734e:	d028      	beq.n	80073a2 <lcd_init+0x1f2>
				{
					lcd_wr_regno(0xA1);
 8007350:	20a1      	movs	r0, #161	@ 0xa1
 8007352:	f7ff fb89 	bl	8006a68 <lcd_wr_regno>
					lcddev.id = lcd_rd_data();
 8007356:	f7ff fbb1 	bl	8006abc <lcd_rd_data>
 800735a:	4603      	mov	r3, r0
 800735c:	461a      	mov	r2, r3
 800735e:	4b23      	ldr	r3, [pc, #140]	@ (80073ec <lcd_init+0x23c>)
 8007360:	809a      	strh	r2, [r3, #4]
					lcddev.id = lcd_rd_data(); /* 读回0x57 */
 8007362:	f7ff fbab 	bl	8006abc <lcd_rd_data>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	4b20      	ldr	r3, [pc, #128]	@ (80073ec <lcd_init+0x23c>)
 800736c:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 800736e:	4b1f      	ldr	r3, [pc, #124]	@ (80073ec <lcd_init+0x23c>)
 8007370:	889b      	ldrh	r3, [r3, #4]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	b29a      	uxth	r2, r3
 8007376:	4b1d      	ldr	r3, [pc, #116]	@ (80073ec <lcd_init+0x23c>)
 8007378:	809a      	strh	r2, [r3, #4]
					lcddev.id |= lcd_rd_data(); /* 读回0x61 */
 800737a:	f7ff fb9f 	bl	8006abc <lcd_rd_data>
 800737e:	4603      	mov	r3, r0
 8007380:	461a      	mov	r2, r3
 8007382:	4b1a      	ldr	r3, [pc, #104]	@ (80073ec <lcd_init+0x23c>)
 8007384:	889b      	ldrh	r3, [r3, #4]
 8007386:	4313      	orrs	r3, r2
 8007388:	b29a      	uxth	r2, r3
 800738a:	4b18      	ldr	r3, [pc, #96]	@ (80073ec <lcd_init+0x23c>)
 800738c:	809a      	strh	r2, [r3, #4]

					if (lcddev.id == 0x5761)
 800738e:	4b17      	ldr	r3, [pc, #92]	@ (80073ec <lcd_init+0x23c>)
 8007390:	889b      	ldrh	r3, [r3, #4]
 8007392:	f245 7261 	movw	r2, #22369	@ 0x5761
 8007396:	4293      	cmp	r3, r2
 8007398:	d103      	bne.n	80073a2 <lcd_init+0x1f2>
						lcddev.id = 0x1963; /* SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963 */
 800739a:	4b14      	ldr	r3, [pc, #80]	@ (80073ec <lcd_init+0x23c>)
 800739c:	f641 1263 	movw	r2, #6499	@ 0x1963
 80073a0:	809a      	strh	r2, [r3, #4]
	/* 特别注意, 如果在main函数里面屏蔽串口1初始化, 则会卡死在printf
	 * 里面(卡死在f_putc函数), 所以, 必须初始化串口1, 或者屏蔽掉下面
	 * 这行 printf 语句 !!!!!!!
	 */
	//printf("LCD ID:%x\r\n", lcddev.id); /* 打印LCD ID */
	if (lcddev.id == 0x7789) {
 80073a2:	4b12      	ldr	r3, [pc, #72]	@ (80073ec <lcd_init+0x23c>)
 80073a4:	889b      	ldrh	r3, [r3, #4]
 80073a6:	f247 7289 	movw	r2, #30601	@ 0x7789
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d102      	bne.n	80073b4 <lcd_init+0x204>
		lcd_ex_st7789_reginit(); /* 执行ST7789初始化 */
 80073ae:	f7fd f9a5 	bl	80046fc <lcd_ex_st7789_reginit>
 80073b2:	e028      	b.n	8007406 <lcd_init+0x256>
	} else if (lcddev.id == 0x9341) {
 80073b4:	4b0d      	ldr	r3, [pc, #52]	@ (80073ec <lcd_init+0x23c>)
 80073b6:	889b      	ldrh	r3, [r3, #4]
 80073b8:	f249 3241 	movw	r2, #37697	@ 0x9341
 80073bc:	4293      	cmp	r3, r2
 80073be:	d102      	bne.n	80073c6 <lcd_init+0x216>
		lcd_ex_ili9341_reginit(); /* 执行ILI9341初始化 */
 80073c0:	f7fd fa72 	bl	80048a8 <lcd_ex_ili9341_reginit>
 80073c4:	e01f      	b.n	8007406 <lcd_init+0x256>
	} else if (lcddev.id == 0x5310) {
 80073c6:	4b09      	ldr	r3, [pc, #36]	@ (80073ec <lcd_init+0x23c>)
 80073c8:	889b      	ldrh	r3, [r3, #4]
 80073ca:	f245 3210 	movw	r2, #21264	@ 0x5310
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d102      	bne.n	80073d8 <lcd_init+0x228>
		lcd_ex_nt35310_reginit(); /* 执行NT35310初始化 */
 80073d2:	f7fd fb81 	bl	8004ad8 <lcd_ex_nt35310_reginit>
 80073d6:	e016      	b.n	8007406 <lcd_init+0x256>
	} else if (lcddev.id == 0x5510) {
 80073d8:	4b04      	ldr	r3, [pc, #16]	@ (80073ec <lcd_init+0x23c>)
 80073da:	889b      	ldrh	r3, [r3, #4]
 80073dc:	f245 5210 	movw	r2, #21776	@ 0x5510
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d105      	bne.n	80073f0 <lcd_init+0x240>
		lcd_ex_nt35510_reginit(); /* 执行NT35510初始化 */
 80073e4:	f7fe faf3 	bl	80059ce <lcd_ex_nt35510_reginit>
 80073e8:	e00d      	b.n	8007406 <lcd_init+0x256>
 80073ea:	bf00      	nop
 80073ec:	200003ec 	.word	0x200003ec
	} else if (lcddev.id == 0x1963) {
 80073f0:	4b29      	ldr	r3, [pc, #164]	@ (8007498 <lcd_init+0x2e8>)
 80073f2:	889b      	ldrh	r3, [r3, #4]
 80073f4:	f641 1263 	movw	r2, #6499	@ 0x1963
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d104      	bne.n	8007406 <lcd_init+0x256>
		lcd_ex_ssd1963_reginit(); /* 执行SSD1963初始化 */
 80073fc:	f7ff fa67 	bl	80068ce <lcd_ex_ssd1963_reginit>
		lcd_ssd_backlight_set(100); /* 背光设置为最亮 */
 8007400:	2064      	movs	r0, #100	@ 0x64
 8007402:	f7ff fde9 	bl	8006fd8 <lcd_ssd_backlight_set>
	}

	/* 初始化完成以后,提速 */
	if (lcddev.id == 0x9341 || lcddev.id == 0x1963 || lcddev.id == 0x7789) /* 如果是这几个IC, 则设置WR时序为最快 */
 8007406:	4b24      	ldr	r3, [pc, #144]	@ (8007498 <lcd_init+0x2e8>)
 8007408:	889b      	ldrh	r3, [r3, #4]
 800740a:	f249 3241 	movw	r2, #37697	@ 0x9341
 800740e:	4293      	cmp	r3, r2
 8007410:	d00b      	beq.n	800742a <lcd_init+0x27a>
 8007412:	4b21      	ldr	r3, [pc, #132]	@ (8007498 <lcd_init+0x2e8>)
 8007414:	889b      	ldrh	r3, [r3, #4]
 8007416:	f641 1263 	movw	r2, #6499	@ 0x1963
 800741a:	4293      	cmp	r3, r2
 800741c:	d005      	beq.n	800742a <lcd_init+0x27a>
 800741e:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <lcd_init+0x2e8>)
 8007420:	889b      	ldrh	r3, [r3, #4]
 8007422:	f247 7289 	movw	r2, #30601	@ 0x7789
 8007426:	4293      	cmp	r3, r2
 8007428:	d10c      	bne.n	8007444 <lcd_init+0x294>
	{
		/* 重新配置写时序控制寄存器的时序 */
		fsmc_write_handle.AddressSetupTime = 3;
 800742a:	2303      	movs	r3, #3
 800742c:	607b      	str	r3, [r7, #4]
		fsmc_write_handle.DataSetupTime = 3;
 800742e:	2303      	movs	r3, #3
 8007430:	60fb      	str	r3, [r7, #12]
		FSMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended,
 8007432:	4b1a      	ldr	r3, [pc, #104]	@ (800749c <lcd_init+0x2ec>)
 8007434:	6858      	ldr	r0, [r3, #4]
 8007436:	4b19      	ldr	r3, [pc, #100]	@ (800749c <lcd_init+0x2ec>)
 8007438:	689a      	ldr	r2, [r3, #8]
 800743a:	4b18      	ldr	r3, [pc, #96]	@ (800749c <lcd_init+0x2ec>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743e:	1d39      	adds	r1, r7, #4
 8007440:	f7fd f924 	bl	800468c <FSMC_NORSRAM_Extended_Timing_Init>
				&fsmc_write_handle, g_sram_handle.Init.NSBank,
				g_sram_handle.Init.ExtendedMode);
	}

	if (lcddev.id == 0x5310 || lcddev.id == 0x5510) /* 如果是这几个IC, 则设置WR时序为最快 */
 8007444:	4b14      	ldr	r3, [pc, #80]	@ (8007498 <lcd_init+0x2e8>)
 8007446:	889b      	ldrh	r3, [r3, #4]
 8007448:	f245 3210 	movw	r2, #21264	@ 0x5310
 800744c:	4293      	cmp	r3, r2
 800744e:	d005      	beq.n	800745c <lcd_init+0x2ac>
 8007450:	4b11      	ldr	r3, [pc, #68]	@ (8007498 <lcd_init+0x2e8>)
 8007452:	889b      	ldrh	r3, [r3, #4]
 8007454:	f245 5210 	movw	r2, #21776	@ 0x5510
 8007458:	4293      	cmp	r3, r2
 800745a:	d10c      	bne.n	8007476 <lcd_init+0x2c6>
	{
		/* 重新配置写时序控制寄存器的时序 */
		fsmc_write_handle.AddressSetupTime = 2;
 800745c:	2302      	movs	r3, #2
 800745e:	607b      	str	r3, [r7, #4]
		fsmc_write_handle.DataSetupTime = 2;
 8007460:	2302      	movs	r3, #2
 8007462:	60fb      	str	r3, [r7, #12]
		FSMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended,
 8007464:	4b0d      	ldr	r3, [pc, #52]	@ (800749c <lcd_init+0x2ec>)
 8007466:	6858      	ldr	r0, [r3, #4]
 8007468:	4b0c      	ldr	r3, [pc, #48]	@ (800749c <lcd_init+0x2ec>)
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	4b0b      	ldr	r3, [pc, #44]	@ (800749c <lcd_init+0x2ec>)
 800746e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007470:	1d39      	adds	r1, r7, #4
 8007472:	f7fd f90b 	bl	800468c <FSMC_NORSRAM_Extended_Timing_Init>
				&fsmc_write_handle, g_sram_handle.Init.NSBank,
				g_sram_handle.Init.ExtendedMode);
	}

	lcd_display_dir(0); /* 默认为竖屏 */
 8007476:	2000      	movs	r0, #0
 8007478:	f7ff fde2 	bl	8007040 <lcd_display_dir>
	LCD_BL(1); /* 点亮背光 */
 800747c:	2201      	movs	r2, #1
 800747e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007482:	4807      	ldr	r0, [pc, #28]	@ (80074a0 <lcd_init+0x2f0>)
 8007484:	f7fb f968 	bl	8002758 <HAL_GPIO_WritePin>
	lcd_clear(WHITE);
 8007488:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800748c:	f000 f80a 	bl	80074a4 <lcd_clear>
}
 8007490:	bf00      	nop
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	200003ec 	.word	0x200003ec
 800749c:	2000039c 	.word	0x2000039c
 80074a0:	40020400 	.word	0x40020400

080074a4 <lcd_clear>:
/**
 * @brief       清屏函数
 * @param       color: 要清屏的颜色
 * @retval      无
 */
void lcd_clear(uint16_t color) {
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 80074b2:	4b11      	ldr	r3, [pc, #68]	@ (80074f8 <lcd_clear+0x54>)
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	60bb      	str	r3, [r7, #8]

	totalpoint *= lcddev.height; /* 得到总点数 */
 80074b8:	4b0f      	ldr	r3, [pc, #60]	@ (80074f8 <lcd_clear+0x54>)
 80074ba:	885b      	ldrh	r3, [r3, #2]
 80074bc:	461a      	mov	r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	fb02 f303 	mul.w	r3, r2, r3
 80074c4:	60bb      	str	r3, [r7, #8]
	lcd_set_cursor(0x00, 0x0000); /* 设置光标位置 */
 80074c6:	2100      	movs	r1, #0
 80074c8:	2000      	movs	r0, #0
 80074ca:	f7ff fb19 	bl	8006b00 <lcd_set_cursor>
	lcd_write_ram_prepare(); /* 开始写入GRAM */
 80074ce:	f7ff fb07 	bl	8006ae0 <lcd_write_ram_prepare>

	for (index = 0; index < totalpoint; index++) {
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e005      	b.n	80074e4 <lcd_clear+0x40>
		LCD->LCD_RAM = color;
 80074d8:	4a08      	ldr	r2, [pc, #32]	@ (80074fc <lcd_clear+0x58>)
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	8053      	strh	r3, [r2, #2]
	for (index = 0; index < totalpoint; index++) {
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d3f5      	bcc.n	80074d8 <lcd_clear+0x34>
	}
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200003ec 	.word	0x200003ec
 80074fc:	6c00007e 	.word	0x6c00007e

08007500 <lcd_show_char>:
 * @param       size : 字体大小 12/16/24/32
 * @param       mode : 叠加方式(1); 非叠加方式(0);
 * @retval      无
 */
void lcd_show_char(uint16_t x, uint16_t y, uint8_t chr, uint8_t size,
		uint8_t mode, uint16_t color) {
 8007500:	b590      	push	{r4, r7, lr}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	4604      	mov	r4, r0
 8007508:	4608      	mov	r0, r1
 800750a:	4611      	mov	r1, r2
 800750c:	461a      	mov	r2, r3
 800750e:	4623      	mov	r3, r4
 8007510:	80fb      	strh	r3, [r7, #6]
 8007512:	4603      	mov	r3, r0
 8007514:	80bb      	strh	r3, [r7, #4]
 8007516:	460b      	mov	r3, r1
 8007518:	70fb      	strb	r3, [r7, #3]
 800751a:	4613      	mov	r3, r2
 800751c:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800751e:	88bb      	ldrh	r3, [r7, #4]
 8007520:	81fb      	strh	r3, [r7, #14]
	uint8_t csize = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	737b      	strb	r3, [r7, #13]
	uint8_t *pfont = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]

	csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* 得到字体一个字符对应点阵集所占的字节数 */
 800752a:	78bb      	ldrb	r3, [r7, #2]
 800752c:	08db      	lsrs	r3, r3, #3
 800752e:	b2db      	uxtb	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	78bb      	ldrb	r3, [r7, #2]
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	b2db      	uxtb	r3, r3
 800753a:	2b00      	cmp	r3, #0
 800753c:	bf14      	ite	ne
 800753e:	2301      	movne	r3, #1
 8007540:	2300      	moveq	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	4413      	add	r3, r2
 8007546:	b2da      	uxtb	r2, r3
 8007548:	78bb      	ldrb	r3, [r7, #2]
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	b2db      	uxtb	r3, r3
 800754e:	fb12 f303 	smulbb	r3, r2, r3
 8007552:	737b      	strb	r3, [r7, #13]
	chr = chr - ' '; /* 得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库） */
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	3b20      	subs	r3, #32
 8007558:	70fb      	strb	r3, [r7, #3]

	switch (size) {
 800755a:	78bb      	ldrb	r3, [r7, #2]
 800755c:	3b0c      	subs	r3, #12
 800755e:	2b14      	cmp	r3, #20
 8007560:	f200 8099 	bhi.w	8007696 <lcd_show_char+0x196>
 8007564:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <lcd_show_char+0x6c>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	080075c1 	.word	0x080075c1
 8007570:	08007697 	.word	0x08007697
 8007574:	08007697 	.word	0x08007697
 8007578:	08007697 	.word	0x08007697
 800757c:	080075d3 	.word	0x080075d3
 8007580:	08007697 	.word	0x08007697
 8007584:	08007697 	.word	0x08007697
 8007588:	08007697 	.word	0x08007697
 800758c:	08007697 	.word	0x08007697
 8007590:	08007697 	.word	0x08007697
 8007594:	08007697 	.word	0x08007697
 8007598:	08007697 	.word	0x08007697
 800759c:	080075df 	.word	0x080075df
 80075a0:	08007697 	.word	0x08007697
 80075a4:	08007697 	.word	0x08007697
 80075a8:	08007697 	.word	0x08007697
 80075ac:	08007697 	.word	0x08007697
 80075b0:	08007697 	.word	0x08007697
 80075b4:	08007697 	.word	0x08007697
 80075b8:	08007697 	.word	0x08007697
 80075bc:	080075f1 	.word	0x080075f1
	case 12:
		pfont = (uint8_t*) asc2_1206[chr]; /* 调用1206字体 */
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	4613      	mov	r3, r2
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4a36      	ldr	r2, [pc, #216]	@ (80076a4 <lcd_show_char+0x1a4>)
 80075cc:	4413      	add	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
		break;
 80075d0:	e014      	b.n	80075fc <lcd_show_char+0xfc>

	case 16:
		pfont = (uint8_t*) asc2_1608[chr]; /* 调用1608字体 */
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	4a34      	ldr	r2, [pc, #208]	@ (80076a8 <lcd_show_char+0x1a8>)
 80075d8:	4413      	add	r3, r2
 80075da:	613b      	str	r3, [r7, #16]
		break;
 80075dc:	e00e      	b.n	80075fc <lcd_show_char+0xfc>

	case 24:
		pfont = (uint8_t*) asc2_2412[chr]; /* 调用2412字体 */
 80075de:	78fa      	ldrb	r2, [r7, #3]
 80075e0:	4613      	mov	r3, r2
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4a30      	ldr	r2, [pc, #192]	@ (80076ac <lcd_show_char+0x1ac>)
 80075ea:	4413      	add	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]
		break;
 80075ee:	e005      	b.n	80075fc <lcd_show_char+0xfc>

	case 32:
		pfont = (uint8_t*) asc2_3216[chr]; /* 调用3216字体 */
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	019b      	lsls	r3, r3, #6
 80075f4:	4a2e      	ldr	r2, [pc, #184]	@ (80076b0 <lcd_show_char+0x1b0>)
 80075f6:	4413      	add	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]
		break;
 80075fa:	bf00      	nop

	default:
		return;
	}

	for (t = 0; t < csize; t++) {
 80075fc:	2300      	movs	r3, #0
 80075fe:	757b      	strb	r3, [r7, #21]
 8007600:	e044      	b.n	800768c <lcd_show_char+0x18c>
		temp = pfont[t]; /* 获取字符的点阵数据 */
 8007602:	7d7b      	ldrb	r3, [r7, #21]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4413      	add	r3, r2
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	75fb      	strb	r3, [r7, #23]

		for (t1 = 0; t1 < 8; t1++) /* 一个字节8个点 */
 800760c:	2300      	movs	r3, #0
 800760e:	75bb      	strb	r3, [r7, #22]
 8007610:	e034      	b.n	800767c <lcd_show_char+0x17c>
		{
			if (temp & 0x80) /* 有效点,需要显示 */
 8007612:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007616:	2b00      	cmp	r3, #0
 8007618:	da06      	bge.n	8007628 <lcd_show_char+0x128>
			{
				lcd_draw_point(x, y, color); /* 画点出来,要显示这个点 */
 800761a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800761c:	88b9      	ldrh	r1, [r7, #4]
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff fcbf 	bl	8006fa4 <lcd_draw_point>
 8007626:	e00a      	b.n	800763e <lcd_show_char+0x13e>
			} else if (mode == 0) /* 无效点,不显示 */
 8007628:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <lcd_show_char+0x13e>
			{
				lcd_draw_point(x, y, g_back_color); /* 画背景色,相当于这个点不显示(注意背景色由全局变量控制) */
 8007630:	4b20      	ldr	r3, [pc, #128]	@ (80076b4 <lcd_show_char+0x1b4>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	88b9      	ldrh	r1, [r7, #4]
 8007636:	88fb      	ldrh	r3, [r7, #6]
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fcb3 	bl	8006fa4 <lcd_draw_point>
			}

			temp <<= 1; /* 移位, 以便获取下一个位的状态 */
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	75fb      	strb	r3, [r7, #23]
			y++;
 8007644:	88bb      	ldrh	r3, [r7, #4]
 8007646:	3301      	adds	r3, #1
 8007648:	80bb      	strh	r3, [r7, #4]

			if (y >= lcddev.height)
 800764a:	4b1b      	ldr	r3, [pc, #108]	@ (80076b8 <lcd_show_char+0x1b8>)
 800764c:	885b      	ldrh	r3, [r3, #2]
 800764e:	88ba      	ldrh	r2, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d222      	bcs.n	800769a <lcd_show_char+0x19a>
				return; /* 超区域了 */

			if ((y - y0) == size) /* 显示完一列了? */
 8007654:	88ba      	ldrh	r2, [r7, #4]
 8007656:	89fb      	ldrh	r3, [r7, #14]
 8007658:	1ad2      	subs	r2, r2, r3
 800765a:	78bb      	ldrb	r3, [r7, #2]
 800765c:	429a      	cmp	r2, r3
 800765e:	d10a      	bne.n	8007676 <lcd_show_char+0x176>
			{
				y = y0; /* y坐标复位 */
 8007660:	89fb      	ldrh	r3, [r7, #14]
 8007662:	80bb      	strh	r3, [r7, #4]
				x++; /* x坐标递增 */
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	3301      	adds	r3, #1
 8007668:	80fb      	strh	r3, [r7, #6]

				if (x >= lcddev.width) {
 800766a:	4b13      	ldr	r3, [pc, #76]	@ (80076b8 <lcd_show_char+0x1b8>)
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	429a      	cmp	r2, r3
 8007672:	d307      	bcc.n	8007684 <lcd_show_char+0x184>
					return; /* x坐标超区域了 */
 8007674:	e012      	b.n	800769c <lcd_show_char+0x19c>
		for (t1 = 0; t1 < 8; t1++) /* 一个字节8个点 */
 8007676:	7dbb      	ldrb	r3, [r7, #22]
 8007678:	3301      	adds	r3, #1
 800767a:	75bb      	strb	r3, [r7, #22]
 800767c:	7dbb      	ldrb	r3, [r7, #22]
 800767e:	2b07      	cmp	r3, #7
 8007680:	d9c7      	bls.n	8007612 <lcd_show_char+0x112>
 8007682:	e000      	b.n	8007686 <lcd_show_char+0x186>
				}

				break;
 8007684:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8007686:	7d7b      	ldrb	r3, [r7, #21]
 8007688:	3301      	adds	r3, #1
 800768a:	757b      	strb	r3, [r7, #21]
 800768c:	7d7a      	ldrb	r2, [r7, #21]
 800768e:	7b7b      	ldrb	r3, [r7, #13]
 8007690:	429a      	cmp	r2, r3
 8007692:	d3b6      	bcc.n	8007602 <lcd_show_char+0x102>
 8007694:	e002      	b.n	800769c <lcd_show_char+0x19c>
		return;
 8007696:	bf00      	nop
 8007698:	e000      	b.n	800769c <lcd_show_char+0x19c>
				return; /* 超区域了 */
 800769a:	bf00      	nop
			}
		}
	}
}
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd90      	pop	{r4, r7, pc}
 80076a2:	bf00      	nop
 80076a4:	0800a63c 	.word	0x0800a63c
 80076a8:	0800aab0 	.word	0x0800aab0
 80076ac:	0800b0a0 	.word	0x0800b0a0
 80076b0:	0800bdfc 	.word	0x0800bdfc
 80076b4:	2000000c 	.word	0x2000000c
 80076b8:	200003ec 	.word	0x200003ec

080076bc <lcd_show_str>:
 * @param       x,y         : 起始坐标
 * @param       size        : 选择字体 12/16/24/32
 * @param       p           : 字符串首地址
 * @retval      无
 */
void lcd_show_str(uint16_t x, uint16_t y, uint8_t size, char *p, uint16_t color) {
 80076bc:	b590      	push	{r4, r7, lr}
 80076be:	b089      	sub	sp, #36	@ 0x24
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	607b      	str	r3, [r7, #4]
 80076c4:	4603      	mov	r3, r0
 80076c6:	81fb      	strh	r3, [r7, #14]
 80076c8:	460b      	mov	r3, r1
 80076ca:	81bb      	strh	r3, [r7, #12]
 80076cc:	4613      	mov	r3, r2
 80076ce:	72fb      	strb	r3, [r7, #11]
	uint8_t x0 = x;
 80076d0:	89fb      	ldrh	r3, [r7, #14]
 80076d2:	75fb      	strb	r3, [r7, #23]

	uint16_t width = x + size / 2 * strlen(p);
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	461c      	mov	r4, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7f8 fdc7 	bl	8000270 <strlen>
 80076e2:	4603      	mov	r3, r0
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	fb14 f303 	smulbb	r3, r4, r3
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	89fb      	ldrh	r3, [r7, #14]
 80076ee:	4413      	add	r3, r2
 80076f0:	82bb      	strh	r3, [r7, #20]
	uint16_t height = y + size;
 80076f2:	7afb      	ldrb	r3, [r7, #11]
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	89bb      	ldrh	r3, [r7, #12]
 80076f8:	4413      	add	r3, r2
 80076fa:	827b      	strh	r3, [r7, #18]

	while ((*p <= '~') && (*p >= ' ')) /* 判断是不是非法字符! */
 80076fc:	e024      	b.n	8007748 <lcd_show_str+0x8c>
	{
		if (x >= width) {
 80076fe:	89fa      	ldrh	r2, [r7, #14]
 8007700:	8abb      	ldrh	r3, [r7, #20]
 8007702:	429a      	cmp	r2, r3
 8007704:	d306      	bcc.n	8007714 <lcd_show_str+0x58>
			x = x0;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	81fb      	strh	r3, [r7, #14]
			y += size;
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	b29a      	uxth	r2, r3
 800770e:	89bb      	ldrh	r3, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	81bb      	strh	r3, [r7, #12]
		}

		if (y >= height) {
 8007714:	89ba      	ldrh	r2, [r7, #12]
 8007716:	8a7b      	ldrh	r3, [r7, #18]
 8007718:	429a      	cmp	r2, r3
 800771a:	d21e      	bcs.n	800775a <lcd_show_str+0x9e>
			break; /* 退出 */
		}

		lcd_show_char(x, y, *p, size, 0, color);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	781a      	ldrb	r2, [r3, #0]
 8007720:	7afc      	ldrb	r4, [r7, #11]
 8007722:	89b9      	ldrh	r1, [r7, #12]
 8007724:	89f8      	ldrh	r0, [r7, #14]
 8007726:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	2300      	movs	r3, #0
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	4623      	mov	r3, r4
 8007730:	f7ff fee6 	bl	8007500 <lcd_show_char>
		x += size / 2;
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	085b      	lsrs	r3, r3, #1
 8007738:	b2db      	uxtb	r3, r3
 800773a:	461a      	mov	r2, r3
 800773c:	89fb      	ldrh	r3, [r7, #14]
 800773e:	4413      	add	r3, r2
 8007740:	81fb      	strh	r3, [r7, #14]
		p++;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3301      	adds	r3, #1
 8007746:	607b      	str	r3, [r7, #4]
	while ((*p <= '~') && (*p >= ' ')) /* 判断是不是非法字符! */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b7e      	cmp	r3, #126	@ 0x7e
 800774e:	d805      	bhi.n	800775c <lcd_show_str+0xa0>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b1f      	cmp	r3, #31
 8007756:	d8d2      	bhi.n	80076fe <lcd_show_str+0x42>
	}
}
 8007758:	e000      	b.n	800775c <lcd_show_str+0xa0>
			break; /* 退出 */
 800775a:	bf00      	nop
}
 800775c:	bf00      	nop
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	bd90      	pop	{r4, r7, pc}

08007764 <HAL_UART_MspInit>:
  * 返 回 值: 无
  * 说    明: 该函数被HAL库内部调用
  */

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==DEBUG_USARTx)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a17      	ldr	r2, [pc, #92]	@ (80077d0 <HAL_UART_MspInit+0x6c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d127      	bne.n	80077c6 <HAL_UART_MspInit+0x62>
  {
    /* 串口外设时钟使能 */
    DEBUG_USART_RCC_CLK_ENABLE();
 8007776:	2300      	movs	r3, #0
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	4b16      	ldr	r3, [pc, #88]	@ (80077d4 <HAL_UART_MspInit+0x70>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777e:	4a15      	ldr	r2, [pc, #84]	@ (80077d4 <HAL_UART_MspInit+0x70>)
 8007780:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007784:	6413      	str	r3, [r2, #64]	@ 0x40
 8007786:	4b13      	ldr	r3, [pc, #76]	@ (80077d4 <HAL_UART_MspInit+0x70>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800778e:	60bb      	str	r3, [r7, #8]
 8007790:	68bb      	ldr	r3, [r7, #8]
  
    /* 串口外设功能GPIO配置 */
    GPIO_InitStruct.Pin = DEBUG_USARTx_Tx_GPIO_PIN;
 8007792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007796:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007798:	2302      	movs	r3, #2
 800779a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800779c:	2301      	movs	r3, #1
 800779e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077a0:	2303      	movs	r3, #3
 80077a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = DEBUG_USARTx_AFx;
 80077a4:	2308      	movs	r3, #8
 80077a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DEBUG_USARTx_Tx_GPIO, &GPIO_InitStruct);
 80077a8:	f107 030c 	add.w	r3, r7, #12
 80077ac:	4619      	mov	r1, r3
 80077ae:	480a      	ldr	r0, [pc, #40]	@ (80077d8 <HAL_UART_MspInit+0x74>)
 80077b0:	f7fa fe36 	bl	8002420 <HAL_GPIO_Init>
    
    GPIO_InitStruct.Pin = DEBUG_USARTx_Rx_GPIO_PIN;  
 80077b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80077b8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DEBUG_USARTx_Rx_GPIO, &GPIO_InitStruct);       
 80077ba:	f107 030c 	add.w	r3, r7, #12
 80077be:	4619      	mov	r1, r3
 80077c0:	4805      	ldr	r0, [pc, #20]	@ (80077d8 <HAL_UART_MspInit+0x74>)
 80077c2:	f7fa fe2d 	bl	8002420 <HAL_GPIO_Init>
  }  
}
 80077c6:	bf00      	nop
 80077c8:	3720      	adds	r7, #32
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40004c00 	.word	0x40004c00
 80077d4:	40023800 	.word	0x40023800
 80077d8:	40020800 	.word	0x40020800

080077dc <MX_DEBUG_USART_Init>:
  * 输入参数: 无
  * 返 回 值: 无
  * 说    明：无
  */
void MX_DEBUG_USART_Init(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
  /* 使能串口功能引脚GPIO时钟 */
  DEBUG_USARTx_GPIO_ClK_ENABLE();
 80077e2:	2300      	movs	r3, #0
 80077e4:	607b      	str	r3, [r7, #4]
 80077e6:	4b16      	ldr	r3, [pc, #88]	@ (8007840 <MX_DEBUG_USART_Init+0x64>)
 80077e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ea:	4a15      	ldr	r2, [pc, #84]	@ (8007840 <MX_DEBUG_USART_Init+0x64>)
 80077ec:	f043 0304 	orr.w	r3, r3, #4
 80077f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80077f2:	4b13      	ldr	r3, [pc, #76]	@ (8007840 <MX_DEBUG_USART_Init+0x64>)
 80077f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	607b      	str	r3, [r7, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
  
  husart_debug.Instance = DEBUG_USARTx;
 80077fe:	4b11      	ldr	r3, [pc, #68]	@ (8007844 <MX_DEBUG_USART_Init+0x68>)
 8007800:	4a11      	ldr	r2, [pc, #68]	@ (8007848 <MX_DEBUG_USART_Init+0x6c>)
 8007802:	601a      	str	r2, [r3, #0]
  husart_debug.Init.BaudRate = DEBUG_USARTx_BAUDRATE;
 8007804:	4b0f      	ldr	r3, [pc, #60]	@ (8007844 <MX_DEBUG_USART_Init+0x68>)
 8007806:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800780a:	605a      	str	r2, [r3, #4]
  husart_debug.Init.WordLength = UART_WORDLENGTH_8B;
 800780c:	4b0d      	ldr	r3, [pc, #52]	@ (8007844 <MX_DEBUG_USART_Init+0x68>)
 800780e:	2200      	movs	r2, #0
 8007810:	609a      	str	r2, [r3, #8]
  husart_debug.Init.StopBits = UART_STOPBITS_1;
 8007812:	4b0c      	ldr	r3, [pc, #48]	@ (8007844 <MX_DEBUG_USART_Init+0x68>)
 8007814:	2200      	movs	r2, #0
 8007816:	60da      	str	r2, [r3, #12]
  husart_debug.Init.Parity = UART_PARITY_NONE;
 8007818:	4b0a      	ldr	r3, [pc, #40]	@ (8007844 <MX_DEBUG_USART_Init+0x68>)
 800781a:	2200      	movs	r2, #0
 800781c:	611a      	str	r2, [r3, #16]
  husart_debug.Init.Mode = UART_MODE_TX_RX;
 800781e:	4b09      	ldr	r3, [pc, #36]	@ (8007844 <MX_DEBUG_USART_Init+0x68>)
 8007820:	220c      	movs	r2, #12
 8007822:	615a      	str	r2, [r3, #20]
  husart_debug.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007824:	4b07      	ldr	r3, [pc, #28]	@ (8007844 <MX_DEBUG_USART_Init+0x68>)
 8007826:	2200      	movs	r2, #0
 8007828:	619a      	str	r2, [r3, #24]
  husart_debug.Init.OverSampling = UART_OVERSAMPLING_16;
 800782a:	4b06      	ldr	r3, [pc, #24]	@ (8007844 <MX_DEBUG_USART_Init+0x68>)
 800782c:	2200      	movs	r2, #0
 800782e:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&husart_debug);
 8007830:	4804      	ldr	r0, [pc, #16]	@ (8007844 <MX_DEBUG_USART_Init+0x68>)
 8007832:	f7fc fbcf 	bl	8003fd4 <HAL_UART_Init>
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	40023800 	.word	0x40023800
 8007844:	200003fc 	.word	0x200003fc
 8007848:	40004c00 	.word	0x40004c00

0800784c <__cvt>:
 800784c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	ec57 6b10 	vmov	r6, r7, d0
 8007854:	2f00      	cmp	r7, #0
 8007856:	460c      	mov	r4, r1
 8007858:	4619      	mov	r1, r3
 800785a:	463b      	mov	r3, r7
 800785c:	bfbb      	ittet	lt
 800785e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007862:	461f      	movlt	r7, r3
 8007864:	2300      	movge	r3, #0
 8007866:	232d      	movlt	r3, #45	@ 0x2d
 8007868:	700b      	strb	r3, [r1, #0]
 800786a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800786c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007870:	4691      	mov	r9, r2
 8007872:	f023 0820 	bic.w	r8, r3, #32
 8007876:	bfbc      	itt	lt
 8007878:	4632      	movlt	r2, r6
 800787a:	4616      	movlt	r6, r2
 800787c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007880:	d005      	beq.n	800788e <__cvt+0x42>
 8007882:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007886:	d100      	bne.n	800788a <__cvt+0x3e>
 8007888:	3401      	adds	r4, #1
 800788a:	2102      	movs	r1, #2
 800788c:	e000      	b.n	8007890 <__cvt+0x44>
 800788e:	2103      	movs	r1, #3
 8007890:	ab03      	add	r3, sp, #12
 8007892:	9301      	str	r3, [sp, #4]
 8007894:	ab02      	add	r3, sp, #8
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	ec47 6b10 	vmov	d0, r6, r7
 800789c:	4653      	mov	r3, sl
 800789e:	4622      	mov	r2, r4
 80078a0:	f000 ff5e 	bl	8008760 <_dtoa_r>
 80078a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80078a8:	4605      	mov	r5, r0
 80078aa:	d119      	bne.n	80078e0 <__cvt+0x94>
 80078ac:	f019 0f01 	tst.w	r9, #1
 80078b0:	d00e      	beq.n	80078d0 <__cvt+0x84>
 80078b2:	eb00 0904 	add.w	r9, r0, r4
 80078b6:	2200      	movs	r2, #0
 80078b8:	2300      	movs	r3, #0
 80078ba:	4630      	mov	r0, r6
 80078bc:	4639      	mov	r1, r7
 80078be:	f7f9 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80078c2:	b108      	cbz	r0, 80078c8 <__cvt+0x7c>
 80078c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80078c8:	2230      	movs	r2, #48	@ 0x30
 80078ca:	9b03      	ldr	r3, [sp, #12]
 80078cc:	454b      	cmp	r3, r9
 80078ce:	d31e      	bcc.n	800790e <__cvt+0xc2>
 80078d0:	9b03      	ldr	r3, [sp, #12]
 80078d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078d4:	1b5b      	subs	r3, r3, r5
 80078d6:	4628      	mov	r0, r5
 80078d8:	6013      	str	r3, [r2, #0]
 80078da:	b004      	add	sp, #16
 80078dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078e4:	eb00 0904 	add.w	r9, r0, r4
 80078e8:	d1e5      	bne.n	80078b6 <__cvt+0x6a>
 80078ea:	7803      	ldrb	r3, [r0, #0]
 80078ec:	2b30      	cmp	r3, #48	@ 0x30
 80078ee:	d10a      	bne.n	8007906 <__cvt+0xba>
 80078f0:	2200      	movs	r2, #0
 80078f2:	2300      	movs	r3, #0
 80078f4:	4630      	mov	r0, r6
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f9 f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80078fc:	b918      	cbnz	r0, 8007906 <__cvt+0xba>
 80078fe:	f1c4 0401 	rsb	r4, r4, #1
 8007902:	f8ca 4000 	str.w	r4, [sl]
 8007906:	f8da 3000 	ldr.w	r3, [sl]
 800790a:	4499      	add	r9, r3
 800790c:	e7d3      	b.n	80078b6 <__cvt+0x6a>
 800790e:	1c59      	adds	r1, r3, #1
 8007910:	9103      	str	r1, [sp, #12]
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e7d9      	b.n	80078ca <__cvt+0x7e>

08007916 <__exponent>:
 8007916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007918:	2900      	cmp	r1, #0
 800791a:	bfba      	itte	lt
 800791c:	4249      	neglt	r1, r1
 800791e:	232d      	movlt	r3, #45	@ 0x2d
 8007920:	232b      	movge	r3, #43	@ 0x2b
 8007922:	2909      	cmp	r1, #9
 8007924:	7002      	strb	r2, [r0, #0]
 8007926:	7043      	strb	r3, [r0, #1]
 8007928:	dd29      	ble.n	800797e <__exponent+0x68>
 800792a:	f10d 0307 	add.w	r3, sp, #7
 800792e:	461d      	mov	r5, r3
 8007930:	270a      	movs	r7, #10
 8007932:	461a      	mov	r2, r3
 8007934:	fbb1 f6f7 	udiv	r6, r1, r7
 8007938:	fb07 1416 	mls	r4, r7, r6, r1
 800793c:	3430      	adds	r4, #48	@ 0x30
 800793e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007942:	460c      	mov	r4, r1
 8007944:	2c63      	cmp	r4, #99	@ 0x63
 8007946:	f103 33ff 	add.w	r3, r3, #4294967295
 800794a:	4631      	mov	r1, r6
 800794c:	dcf1      	bgt.n	8007932 <__exponent+0x1c>
 800794e:	3130      	adds	r1, #48	@ 0x30
 8007950:	1e94      	subs	r4, r2, #2
 8007952:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007956:	1c41      	adds	r1, r0, #1
 8007958:	4623      	mov	r3, r4
 800795a:	42ab      	cmp	r3, r5
 800795c:	d30a      	bcc.n	8007974 <__exponent+0x5e>
 800795e:	f10d 0309 	add.w	r3, sp, #9
 8007962:	1a9b      	subs	r3, r3, r2
 8007964:	42ac      	cmp	r4, r5
 8007966:	bf88      	it	hi
 8007968:	2300      	movhi	r3, #0
 800796a:	3302      	adds	r3, #2
 800796c:	4403      	add	r3, r0
 800796e:	1a18      	subs	r0, r3, r0
 8007970:	b003      	add	sp, #12
 8007972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007974:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007978:	f801 6f01 	strb.w	r6, [r1, #1]!
 800797c:	e7ed      	b.n	800795a <__exponent+0x44>
 800797e:	2330      	movs	r3, #48	@ 0x30
 8007980:	3130      	adds	r1, #48	@ 0x30
 8007982:	7083      	strb	r3, [r0, #2]
 8007984:	70c1      	strb	r1, [r0, #3]
 8007986:	1d03      	adds	r3, r0, #4
 8007988:	e7f1      	b.n	800796e <__exponent+0x58>
	...

0800798c <_printf_float>:
 800798c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007990:	b08d      	sub	sp, #52	@ 0x34
 8007992:	460c      	mov	r4, r1
 8007994:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007998:	4616      	mov	r6, r2
 800799a:	461f      	mov	r7, r3
 800799c:	4605      	mov	r5, r0
 800799e:	f000 fddf 	bl	8008560 <_localeconv_r>
 80079a2:	6803      	ldr	r3, [r0, #0]
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7f8 fc62 	bl	8000270 <strlen>
 80079ac:	2300      	movs	r3, #0
 80079ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b0:	f8d8 3000 	ldr.w	r3, [r8]
 80079b4:	9005      	str	r0, [sp, #20]
 80079b6:	3307      	adds	r3, #7
 80079b8:	f023 0307 	bic.w	r3, r3, #7
 80079bc:	f103 0208 	add.w	r2, r3, #8
 80079c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079c4:	f8d4 b000 	ldr.w	fp, [r4]
 80079c8:	f8c8 2000 	str.w	r2, [r8]
 80079cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80079d4:	9307      	str	r3, [sp, #28]
 80079d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80079da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80079de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079e2:	4b9c      	ldr	r3, [pc, #624]	@ (8007c54 <_printf_float+0x2c8>)
 80079e4:	f04f 32ff 	mov.w	r2, #4294967295
 80079e8:	f7f9 f8a0 	bl	8000b2c <__aeabi_dcmpun>
 80079ec:	bb70      	cbnz	r0, 8007a4c <_printf_float+0xc0>
 80079ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079f2:	4b98      	ldr	r3, [pc, #608]	@ (8007c54 <_printf_float+0x2c8>)
 80079f4:	f04f 32ff 	mov.w	r2, #4294967295
 80079f8:	f7f9 f87a 	bl	8000af0 <__aeabi_dcmple>
 80079fc:	bb30      	cbnz	r0, 8007a4c <_printf_float+0xc0>
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	4640      	mov	r0, r8
 8007a04:	4649      	mov	r1, r9
 8007a06:	f7f9 f869 	bl	8000adc <__aeabi_dcmplt>
 8007a0a:	b110      	cbz	r0, 8007a12 <_printf_float+0x86>
 8007a0c:	232d      	movs	r3, #45	@ 0x2d
 8007a0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a12:	4a91      	ldr	r2, [pc, #580]	@ (8007c58 <_printf_float+0x2cc>)
 8007a14:	4b91      	ldr	r3, [pc, #580]	@ (8007c5c <_printf_float+0x2d0>)
 8007a16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007a1a:	bf8c      	ite	hi
 8007a1c:	4690      	movhi	r8, r2
 8007a1e:	4698      	movls	r8, r3
 8007a20:	2303      	movs	r3, #3
 8007a22:	6123      	str	r3, [r4, #16]
 8007a24:	f02b 0304 	bic.w	r3, fp, #4
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	f04f 0900 	mov.w	r9, #0
 8007a2e:	9700      	str	r7, [sp, #0]
 8007a30:	4633      	mov	r3, r6
 8007a32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007a34:	4621      	mov	r1, r4
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 f9d2 	bl	8007de0 <_printf_common>
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	f040 808d 	bne.w	8007b5c <_printf_float+0x1d0>
 8007a42:	f04f 30ff 	mov.w	r0, #4294967295
 8007a46:	b00d      	add	sp, #52	@ 0x34
 8007a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	4640      	mov	r0, r8
 8007a52:	4649      	mov	r1, r9
 8007a54:	f7f9 f86a 	bl	8000b2c <__aeabi_dcmpun>
 8007a58:	b140      	cbz	r0, 8007a6c <_printf_float+0xe0>
 8007a5a:	464b      	mov	r3, r9
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bfbc      	itt	lt
 8007a60:	232d      	movlt	r3, #45	@ 0x2d
 8007a62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a66:	4a7e      	ldr	r2, [pc, #504]	@ (8007c60 <_printf_float+0x2d4>)
 8007a68:	4b7e      	ldr	r3, [pc, #504]	@ (8007c64 <_printf_float+0x2d8>)
 8007a6a:	e7d4      	b.n	8007a16 <_printf_float+0x8a>
 8007a6c:	6863      	ldr	r3, [r4, #4]
 8007a6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a72:	9206      	str	r2, [sp, #24]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	d13b      	bne.n	8007af0 <_printf_float+0x164>
 8007a78:	2306      	movs	r3, #6
 8007a7a:	6063      	str	r3, [r4, #4]
 8007a7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a80:	2300      	movs	r3, #0
 8007a82:	6022      	str	r2, [r4, #0]
 8007a84:	9303      	str	r3, [sp, #12]
 8007a86:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a8c:	ab09      	add	r3, sp, #36	@ 0x24
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	6861      	ldr	r1, [r4, #4]
 8007a92:	ec49 8b10 	vmov	d0, r8, r9
 8007a96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f7ff fed6 	bl	800784c <__cvt>
 8007aa0:	9b06      	ldr	r3, [sp, #24]
 8007aa2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007aa4:	2b47      	cmp	r3, #71	@ 0x47
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	d129      	bne.n	8007afe <_printf_float+0x172>
 8007aaa:	1cc8      	adds	r0, r1, #3
 8007aac:	db02      	blt.n	8007ab4 <_printf_float+0x128>
 8007aae:	6863      	ldr	r3, [r4, #4]
 8007ab0:	4299      	cmp	r1, r3
 8007ab2:	dd41      	ble.n	8007b38 <_printf_float+0x1ac>
 8007ab4:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ab8:	fa5f fa8a 	uxtb.w	sl, sl
 8007abc:	3901      	subs	r1, #1
 8007abe:	4652      	mov	r2, sl
 8007ac0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ac4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ac6:	f7ff ff26 	bl	8007916 <__exponent>
 8007aca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007acc:	1813      	adds	r3, r2, r0
 8007ace:	2a01      	cmp	r2, #1
 8007ad0:	4681      	mov	r9, r0
 8007ad2:	6123      	str	r3, [r4, #16]
 8007ad4:	dc02      	bgt.n	8007adc <_printf_float+0x150>
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	07d2      	lsls	r2, r2, #31
 8007ada:	d501      	bpl.n	8007ae0 <_printf_float+0x154>
 8007adc:	3301      	adds	r3, #1
 8007ade:	6123      	str	r3, [r4, #16]
 8007ae0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d0a2      	beq.n	8007a2e <_printf_float+0xa2>
 8007ae8:	232d      	movs	r3, #45	@ 0x2d
 8007aea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aee:	e79e      	b.n	8007a2e <_printf_float+0xa2>
 8007af0:	9a06      	ldr	r2, [sp, #24]
 8007af2:	2a47      	cmp	r2, #71	@ 0x47
 8007af4:	d1c2      	bne.n	8007a7c <_printf_float+0xf0>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1c0      	bne.n	8007a7c <_printf_float+0xf0>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e7bd      	b.n	8007a7a <_printf_float+0xee>
 8007afe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b02:	d9db      	bls.n	8007abc <_printf_float+0x130>
 8007b04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b08:	d118      	bne.n	8007b3c <_printf_float+0x1b0>
 8007b0a:	2900      	cmp	r1, #0
 8007b0c:	6863      	ldr	r3, [r4, #4]
 8007b0e:	dd0b      	ble.n	8007b28 <_printf_float+0x19c>
 8007b10:	6121      	str	r1, [r4, #16]
 8007b12:	b913      	cbnz	r3, 8007b1a <_printf_float+0x18e>
 8007b14:	6822      	ldr	r2, [r4, #0]
 8007b16:	07d0      	lsls	r0, r2, #31
 8007b18:	d502      	bpl.n	8007b20 <_printf_float+0x194>
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	440b      	add	r3, r1
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b22:	f04f 0900 	mov.w	r9, #0
 8007b26:	e7db      	b.n	8007ae0 <_printf_float+0x154>
 8007b28:	b913      	cbnz	r3, 8007b30 <_printf_float+0x1a4>
 8007b2a:	6822      	ldr	r2, [r4, #0]
 8007b2c:	07d2      	lsls	r2, r2, #31
 8007b2e:	d501      	bpl.n	8007b34 <_printf_float+0x1a8>
 8007b30:	3302      	adds	r3, #2
 8007b32:	e7f4      	b.n	8007b1e <_printf_float+0x192>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e7f2      	b.n	8007b1e <_printf_float+0x192>
 8007b38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b3e:	4299      	cmp	r1, r3
 8007b40:	db05      	blt.n	8007b4e <_printf_float+0x1c2>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	6121      	str	r1, [r4, #16]
 8007b46:	07d8      	lsls	r0, r3, #31
 8007b48:	d5ea      	bpl.n	8007b20 <_printf_float+0x194>
 8007b4a:	1c4b      	adds	r3, r1, #1
 8007b4c:	e7e7      	b.n	8007b1e <_printf_float+0x192>
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	bfd4      	ite	le
 8007b52:	f1c1 0202 	rsble	r2, r1, #2
 8007b56:	2201      	movgt	r2, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	e7e0      	b.n	8007b1e <_printf_float+0x192>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	055a      	lsls	r2, r3, #21
 8007b60:	d407      	bmi.n	8007b72 <_printf_float+0x1e6>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	4642      	mov	r2, r8
 8007b66:	4631      	mov	r1, r6
 8007b68:	4628      	mov	r0, r5
 8007b6a:	47b8      	blx	r7
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d12b      	bne.n	8007bc8 <_printf_float+0x23c>
 8007b70:	e767      	b.n	8007a42 <_printf_float+0xb6>
 8007b72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b76:	f240 80dd 	bls.w	8007d34 <_printf_float+0x3a8>
 8007b7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2300      	movs	r3, #0
 8007b82:	f7f8 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d033      	beq.n	8007bf2 <_printf_float+0x266>
 8007b8a:	4a37      	ldr	r2, [pc, #220]	@ (8007c68 <_printf_float+0x2dc>)
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4628      	mov	r0, r5
 8007b92:	47b8      	blx	r7
 8007b94:	3001      	adds	r0, #1
 8007b96:	f43f af54 	beq.w	8007a42 <_printf_float+0xb6>
 8007b9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b9e:	4543      	cmp	r3, r8
 8007ba0:	db02      	blt.n	8007ba8 <_printf_float+0x21c>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	07d8      	lsls	r0, r3, #31
 8007ba6:	d50f      	bpl.n	8007bc8 <_printf_float+0x23c>
 8007ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bac:	4631      	mov	r1, r6
 8007bae:	4628      	mov	r0, r5
 8007bb0:	47b8      	blx	r7
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	f43f af45 	beq.w	8007a42 <_printf_float+0xb6>
 8007bb8:	f04f 0900 	mov.w	r9, #0
 8007bbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bc0:	f104 0a1a 	add.w	sl, r4, #26
 8007bc4:	45c8      	cmp	r8, r9
 8007bc6:	dc09      	bgt.n	8007bdc <_printf_float+0x250>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	079b      	lsls	r3, r3, #30
 8007bcc:	f100 8103 	bmi.w	8007dd6 <_printf_float+0x44a>
 8007bd0:	68e0      	ldr	r0, [r4, #12]
 8007bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bd4:	4298      	cmp	r0, r3
 8007bd6:	bfb8      	it	lt
 8007bd8:	4618      	movlt	r0, r3
 8007bda:	e734      	b.n	8007a46 <_printf_float+0xba>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	4652      	mov	r2, sl
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	f43f af2b 	beq.w	8007a42 <_printf_float+0xb6>
 8007bec:	f109 0901 	add.w	r9, r9, #1
 8007bf0:	e7e8      	b.n	8007bc4 <_printf_float+0x238>
 8007bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dc39      	bgt.n	8007c6c <_printf_float+0x2e0>
 8007bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c68 <_printf_float+0x2dc>)
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	f43f af1d 	beq.w	8007a42 <_printf_float+0xb6>
 8007c08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007c0c:	ea59 0303 	orrs.w	r3, r9, r3
 8007c10:	d102      	bne.n	8007c18 <_printf_float+0x28c>
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	07d9      	lsls	r1, r3, #31
 8007c16:	d5d7      	bpl.n	8007bc8 <_printf_float+0x23c>
 8007c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4628      	mov	r0, r5
 8007c20:	47b8      	blx	r7
 8007c22:	3001      	adds	r0, #1
 8007c24:	f43f af0d 	beq.w	8007a42 <_printf_float+0xb6>
 8007c28:	f04f 0a00 	mov.w	sl, #0
 8007c2c:	f104 0b1a 	add.w	fp, r4, #26
 8007c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c32:	425b      	negs	r3, r3
 8007c34:	4553      	cmp	r3, sl
 8007c36:	dc01      	bgt.n	8007c3c <_printf_float+0x2b0>
 8007c38:	464b      	mov	r3, r9
 8007c3a:	e793      	b.n	8007b64 <_printf_float+0x1d8>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	465a      	mov	r2, fp
 8007c40:	4631      	mov	r1, r6
 8007c42:	4628      	mov	r0, r5
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	f43f aefb 	beq.w	8007a42 <_printf_float+0xb6>
 8007c4c:	f10a 0a01 	add.w	sl, sl, #1
 8007c50:	e7ee      	b.n	8007c30 <_printf_float+0x2a4>
 8007c52:	bf00      	nop
 8007c54:	7fefffff 	.word	0x7fefffff
 8007c58:	0800d5c0 	.word	0x0800d5c0
 8007c5c:	0800d5bc 	.word	0x0800d5bc
 8007c60:	0800d5c8 	.word	0x0800d5c8
 8007c64:	0800d5c4 	.word	0x0800d5c4
 8007c68:	0800d5cc 	.word	0x0800d5cc
 8007c6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c72:	4553      	cmp	r3, sl
 8007c74:	bfa8      	it	ge
 8007c76:	4653      	movge	r3, sl
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	4699      	mov	r9, r3
 8007c7c:	dc36      	bgt.n	8007cec <_printf_float+0x360>
 8007c7e:	f04f 0b00 	mov.w	fp, #0
 8007c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c86:	f104 021a 	add.w	r2, r4, #26
 8007c8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c8c:	9306      	str	r3, [sp, #24]
 8007c8e:	eba3 0309 	sub.w	r3, r3, r9
 8007c92:	455b      	cmp	r3, fp
 8007c94:	dc31      	bgt.n	8007cfa <_printf_float+0x36e>
 8007c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c98:	459a      	cmp	sl, r3
 8007c9a:	dc3a      	bgt.n	8007d12 <_printf_float+0x386>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	07da      	lsls	r2, r3, #31
 8007ca0:	d437      	bmi.n	8007d12 <_printf_float+0x386>
 8007ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca4:	ebaa 0903 	sub.w	r9, sl, r3
 8007ca8:	9b06      	ldr	r3, [sp, #24]
 8007caa:	ebaa 0303 	sub.w	r3, sl, r3
 8007cae:	4599      	cmp	r9, r3
 8007cb0:	bfa8      	it	ge
 8007cb2:	4699      	movge	r9, r3
 8007cb4:	f1b9 0f00 	cmp.w	r9, #0
 8007cb8:	dc33      	bgt.n	8007d22 <_printf_float+0x396>
 8007cba:	f04f 0800 	mov.w	r8, #0
 8007cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cc2:	f104 0b1a 	add.w	fp, r4, #26
 8007cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc8:	ebaa 0303 	sub.w	r3, sl, r3
 8007ccc:	eba3 0309 	sub.w	r3, r3, r9
 8007cd0:	4543      	cmp	r3, r8
 8007cd2:	f77f af79 	ble.w	8007bc8 <_printf_float+0x23c>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	465a      	mov	r2, fp
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b8      	blx	r7
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	f43f aeae 	beq.w	8007a42 <_printf_float+0xb6>
 8007ce6:	f108 0801 	add.w	r8, r8, #1
 8007cea:	e7ec      	b.n	8007cc6 <_printf_float+0x33a>
 8007cec:	4642      	mov	r2, r8
 8007cee:	4631      	mov	r1, r6
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b8      	blx	r7
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d1c2      	bne.n	8007c7e <_printf_float+0x2f2>
 8007cf8:	e6a3      	b.n	8007a42 <_printf_float+0xb6>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4628      	mov	r0, r5
 8007d00:	9206      	str	r2, [sp, #24]
 8007d02:	47b8      	blx	r7
 8007d04:	3001      	adds	r0, #1
 8007d06:	f43f ae9c 	beq.w	8007a42 <_printf_float+0xb6>
 8007d0a:	9a06      	ldr	r2, [sp, #24]
 8007d0c:	f10b 0b01 	add.w	fp, fp, #1
 8007d10:	e7bb      	b.n	8007c8a <_printf_float+0x2fe>
 8007d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d1c0      	bne.n	8007ca2 <_printf_float+0x316>
 8007d20:	e68f      	b.n	8007a42 <_printf_float+0xb6>
 8007d22:	9a06      	ldr	r2, [sp, #24]
 8007d24:	464b      	mov	r3, r9
 8007d26:	4442      	add	r2, r8
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d1c3      	bne.n	8007cba <_printf_float+0x32e>
 8007d32:	e686      	b.n	8007a42 <_printf_float+0xb6>
 8007d34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d38:	f1ba 0f01 	cmp.w	sl, #1
 8007d3c:	dc01      	bgt.n	8007d42 <_printf_float+0x3b6>
 8007d3e:	07db      	lsls	r3, r3, #31
 8007d40:	d536      	bpl.n	8007db0 <_printf_float+0x424>
 8007d42:	2301      	movs	r3, #1
 8007d44:	4642      	mov	r2, r8
 8007d46:	4631      	mov	r1, r6
 8007d48:	4628      	mov	r0, r5
 8007d4a:	47b8      	blx	r7
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	f43f ae78 	beq.w	8007a42 <_printf_float+0xb6>
 8007d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d56:	4631      	mov	r1, r6
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47b8      	blx	r7
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	f43f ae70 	beq.w	8007a42 <_printf_float+0xb6>
 8007d62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d66:	2200      	movs	r2, #0
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d6e:	f7f8 feab 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d72:	b9c0      	cbnz	r0, 8007da6 <_printf_float+0x41a>
 8007d74:	4653      	mov	r3, sl
 8007d76:	f108 0201 	add.w	r2, r8, #1
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	47b8      	blx	r7
 8007d80:	3001      	adds	r0, #1
 8007d82:	d10c      	bne.n	8007d9e <_printf_float+0x412>
 8007d84:	e65d      	b.n	8007a42 <_printf_float+0xb6>
 8007d86:	2301      	movs	r3, #1
 8007d88:	465a      	mov	r2, fp
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	47b8      	blx	r7
 8007d90:	3001      	adds	r0, #1
 8007d92:	f43f ae56 	beq.w	8007a42 <_printf_float+0xb6>
 8007d96:	f108 0801 	add.w	r8, r8, #1
 8007d9a:	45d0      	cmp	r8, sl
 8007d9c:	dbf3      	blt.n	8007d86 <_printf_float+0x3fa>
 8007d9e:	464b      	mov	r3, r9
 8007da0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007da4:	e6df      	b.n	8007b66 <_printf_float+0x1da>
 8007da6:	f04f 0800 	mov.w	r8, #0
 8007daa:	f104 0b1a 	add.w	fp, r4, #26
 8007dae:	e7f4      	b.n	8007d9a <_printf_float+0x40e>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4642      	mov	r2, r8
 8007db4:	e7e1      	b.n	8007d7a <_printf_float+0x3ee>
 8007db6:	2301      	movs	r3, #1
 8007db8:	464a      	mov	r2, r9
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b8      	blx	r7
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	f43f ae3e 	beq.w	8007a42 <_printf_float+0xb6>
 8007dc6:	f108 0801 	add.w	r8, r8, #1
 8007dca:	68e3      	ldr	r3, [r4, #12]
 8007dcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007dce:	1a5b      	subs	r3, r3, r1
 8007dd0:	4543      	cmp	r3, r8
 8007dd2:	dcf0      	bgt.n	8007db6 <_printf_float+0x42a>
 8007dd4:	e6fc      	b.n	8007bd0 <_printf_float+0x244>
 8007dd6:	f04f 0800 	mov.w	r8, #0
 8007dda:	f104 0919 	add.w	r9, r4, #25
 8007dde:	e7f4      	b.n	8007dca <_printf_float+0x43e>

08007de0 <_printf_common>:
 8007de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de4:	4616      	mov	r6, r2
 8007de6:	4698      	mov	r8, r3
 8007de8:	688a      	ldr	r2, [r1, #8]
 8007dea:	690b      	ldr	r3, [r1, #16]
 8007dec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007df0:	4293      	cmp	r3, r2
 8007df2:	bfb8      	it	lt
 8007df4:	4613      	movlt	r3, r2
 8007df6:	6033      	str	r3, [r6, #0]
 8007df8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	b10a      	cbz	r2, 8007e06 <_printf_common+0x26>
 8007e02:	3301      	adds	r3, #1
 8007e04:	6033      	str	r3, [r6, #0]
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	0699      	lsls	r1, r3, #26
 8007e0a:	bf42      	ittt	mi
 8007e0c:	6833      	ldrmi	r3, [r6, #0]
 8007e0e:	3302      	addmi	r3, #2
 8007e10:	6033      	strmi	r3, [r6, #0]
 8007e12:	6825      	ldr	r5, [r4, #0]
 8007e14:	f015 0506 	ands.w	r5, r5, #6
 8007e18:	d106      	bne.n	8007e28 <_printf_common+0x48>
 8007e1a:	f104 0a19 	add.w	sl, r4, #25
 8007e1e:	68e3      	ldr	r3, [r4, #12]
 8007e20:	6832      	ldr	r2, [r6, #0]
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	42ab      	cmp	r3, r5
 8007e26:	dc26      	bgt.n	8007e76 <_printf_common+0x96>
 8007e28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e2c:	6822      	ldr	r2, [r4, #0]
 8007e2e:	3b00      	subs	r3, #0
 8007e30:	bf18      	it	ne
 8007e32:	2301      	movne	r3, #1
 8007e34:	0692      	lsls	r2, r2, #26
 8007e36:	d42b      	bmi.n	8007e90 <_printf_common+0xb0>
 8007e38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	4638      	mov	r0, r7
 8007e40:	47c8      	blx	r9
 8007e42:	3001      	adds	r0, #1
 8007e44:	d01e      	beq.n	8007e84 <_printf_common+0xa4>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	6922      	ldr	r2, [r4, #16]
 8007e4a:	f003 0306 	and.w	r3, r3, #6
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	bf02      	ittt	eq
 8007e52:	68e5      	ldreq	r5, [r4, #12]
 8007e54:	6833      	ldreq	r3, [r6, #0]
 8007e56:	1aed      	subeq	r5, r5, r3
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	bf0c      	ite	eq
 8007e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e60:	2500      	movne	r5, #0
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bfc4      	itt	gt
 8007e66:	1a9b      	subgt	r3, r3, r2
 8007e68:	18ed      	addgt	r5, r5, r3
 8007e6a:	2600      	movs	r6, #0
 8007e6c:	341a      	adds	r4, #26
 8007e6e:	42b5      	cmp	r5, r6
 8007e70:	d11a      	bne.n	8007ea8 <_printf_common+0xc8>
 8007e72:	2000      	movs	r0, #0
 8007e74:	e008      	b.n	8007e88 <_printf_common+0xa8>
 8007e76:	2301      	movs	r3, #1
 8007e78:	4652      	mov	r2, sl
 8007e7a:	4641      	mov	r1, r8
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	47c8      	blx	r9
 8007e80:	3001      	adds	r0, #1
 8007e82:	d103      	bne.n	8007e8c <_printf_common+0xac>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	e7c6      	b.n	8007e1e <_printf_common+0x3e>
 8007e90:	18e1      	adds	r1, r4, r3
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	2030      	movs	r0, #48	@ 0x30
 8007e96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e9a:	4422      	add	r2, r4
 8007e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ea0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	e7c7      	b.n	8007e38 <_printf_common+0x58>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4641      	mov	r1, r8
 8007eae:	4638      	mov	r0, r7
 8007eb0:	47c8      	blx	r9
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d0e6      	beq.n	8007e84 <_printf_common+0xa4>
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7d9      	b.n	8007e6e <_printf_common+0x8e>
	...

08007ebc <_printf_i>:
 8007ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	7e0f      	ldrb	r7, [r1, #24]
 8007ec2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ec4:	2f78      	cmp	r7, #120	@ 0x78
 8007ec6:	4691      	mov	r9, r2
 8007ec8:	4680      	mov	r8, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	469a      	mov	sl, r3
 8007ece:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ed2:	d807      	bhi.n	8007ee4 <_printf_i+0x28>
 8007ed4:	2f62      	cmp	r7, #98	@ 0x62
 8007ed6:	d80a      	bhi.n	8007eee <_printf_i+0x32>
 8007ed8:	2f00      	cmp	r7, #0
 8007eda:	f000 80d1 	beq.w	8008080 <_printf_i+0x1c4>
 8007ede:	2f58      	cmp	r7, #88	@ 0x58
 8007ee0:	f000 80b8 	beq.w	8008054 <_printf_i+0x198>
 8007ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ee8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007eec:	e03a      	b.n	8007f64 <_printf_i+0xa8>
 8007eee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ef2:	2b15      	cmp	r3, #21
 8007ef4:	d8f6      	bhi.n	8007ee4 <_printf_i+0x28>
 8007ef6:	a101      	add	r1, pc, #4	@ (adr r1, 8007efc <_printf_i+0x40>)
 8007ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007efc:	08007f55 	.word	0x08007f55
 8007f00:	08007f69 	.word	0x08007f69
 8007f04:	08007ee5 	.word	0x08007ee5
 8007f08:	08007ee5 	.word	0x08007ee5
 8007f0c:	08007ee5 	.word	0x08007ee5
 8007f10:	08007ee5 	.word	0x08007ee5
 8007f14:	08007f69 	.word	0x08007f69
 8007f18:	08007ee5 	.word	0x08007ee5
 8007f1c:	08007ee5 	.word	0x08007ee5
 8007f20:	08007ee5 	.word	0x08007ee5
 8007f24:	08007ee5 	.word	0x08007ee5
 8007f28:	08008067 	.word	0x08008067
 8007f2c:	08007f93 	.word	0x08007f93
 8007f30:	08008021 	.word	0x08008021
 8007f34:	08007ee5 	.word	0x08007ee5
 8007f38:	08007ee5 	.word	0x08007ee5
 8007f3c:	08008089 	.word	0x08008089
 8007f40:	08007ee5 	.word	0x08007ee5
 8007f44:	08007f93 	.word	0x08007f93
 8007f48:	08007ee5 	.word	0x08007ee5
 8007f4c:	08007ee5 	.word	0x08007ee5
 8007f50:	08008029 	.word	0x08008029
 8007f54:	6833      	ldr	r3, [r6, #0]
 8007f56:	1d1a      	adds	r2, r3, #4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	6032      	str	r2, [r6, #0]
 8007f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f64:	2301      	movs	r3, #1
 8007f66:	e09c      	b.n	80080a2 <_printf_i+0x1e6>
 8007f68:	6833      	ldr	r3, [r6, #0]
 8007f6a:	6820      	ldr	r0, [r4, #0]
 8007f6c:	1d19      	adds	r1, r3, #4
 8007f6e:	6031      	str	r1, [r6, #0]
 8007f70:	0606      	lsls	r6, r0, #24
 8007f72:	d501      	bpl.n	8007f78 <_printf_i+0xbc>
 8007f74:	681d      	ldr	r5, [r3, #0]
 8007f76:	e003      	b.n	8007f80 <_printf_i+0xc4>
 8007f78:	0645      	lsls	r5, r0, #25
 8007f7a:	d5fb      	bpl.n	8007f74 <_printf_i+0xb8>
 8007f7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f80:	2d00      	cmp	r5, #0
 8007f82:	da03      	bge.n	8007f8c <_printf_i+0xd0>
 8007f84:	232d      	movs	r3, #45	@ 0x2d
 8007f86:	426d      	negs	r5, r5
 8007f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f8c:	4858      	ldr	r0, [pc, #352]	@ (80080f0 <_printf_i+0x234>)
 8007f8e:	230a      	movs	r3, #10
 8007f90:	e011      	b.n	8007fb6 <_printf_i+0xfa>
 8007f92:	6821      	ldr	r1, [r4, #0]
 8007f94:	6833      	ldr	r3, [r6, #0]
 8007f96:	0608      	lsls	r0, r1, #24
 8007f98:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f9c:	d402      	bmi.n	8007fa4 <_printf_i+0xe8>
 8007f9e:	0649      	lsls	r1, r1, #25
 8007fa0:	bf48      	it	mi
 8007fa2:	b2ad      	uxthmi	r5, r5
 8007fa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fa6:	4852      	ldr	r0, [pc, #328]	@ (80080f0 <_printf_i+0x234>)
 8007fa8:	6033      	str	r3, [r6, #0]
 8007faa:	bf14      	ite	ne
 8007fac:	230a      	movne	r3, #10
 8007fae:	2308      	moveq	r3, #8
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fb6:	6866      	ldr	r6, [r4, #4]
 8007fb8:	60a6      	str	r6, [r4, #8]
 8007fba:	2e00      	cmp	r6, #0
 8007fbc:	db05      	blt.n	8007fca <_printf_i+0x10e>
 8007fbe:	6821      	ldr	r1, [r4, #0]
 8007fc0:	432e      	orrs	r6, r5
 8007fc2:	f021 0104 	bic.w	r1, r1, #4
 8007fc6:	6021      	str	r1, [r4, #0]
 8007fc8:	d04b      	beq.n	8008062 <_printf_i+0x1a6>
 8007fca:	4616      	mov	r6, r2
 8007fcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fd0:	fb03 5711 	mls	r7, r3, r1, r5
 8007fd4:	5dc7      	ldrb	r7, [r0, r7]
 8007fd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fda:	462f      	mov	r7, r5
 8007fdc:	42bb      	cmp	r3, r7
 8007fde:	460d      	mov	r5, r1
 8007fe0:	d9f4      	bls.n	8007fcc <_printf_i+0x110>
 8007fe2:	2b08      	cmp	r3, #8
 8007fe4:	d10b      	bne.n	8007ffe <_printf_i+0x142>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	07df      	lsls	r7, r3, #31
 8007fea:	d508      	bpl.n	8007ffe <_printf_i+0x142>
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	6861      	ldr	r1, [r4, #4]
 8007ff0:	4299      	cmp	r1, r3
 8007ff2:	bfde      	ittt	le
 8007ff4:	2330      	movle	r3, #48	@ 0x30
 8007ff6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ffa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ffe:	1b92      	subs	r2, r2, r6
 8008000:	6122      	str	r2, [r4, #16]
 8008002:	f8cd a000 	str.w	sl, [sp]
 8008006:	464b      	mov	r3, r9
 8008008:	aa03      	add	r2, sp, #12
 800800a:	4621      	mov	r1, r4
 800800c:	4640      	mov	r0, r8
 800800e:	f7ff fee7 	bl	8007de0 <_printf_common>
 8008012:	3001      	adds	r0, #1
 8008014:	d14a      	bne.n	80080ac <_printf_i+0x1f0>
 8008016:	f04f 30ff 	mov.w	r0, #4294967295
 800801a:	b004      	add	sp, #16
 800801c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	f043 0320 	orr.w	r3, r3, #32
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	4832      	ldr	r0, [pc, #200]	@ (80080f4 <_printf_i+0x238>)
 800802a:	2778      	movs	r7, #120	@ 0x78
 800802c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008030:	6823      	ldr	r3, [r4, #0]
 8008032:	6831      	ldr	r1, [r6, #0]
 8008034:	061f      	lsls	r7, r3, #24
 8008036:	f851 5b04 	ldr.w	r5, [r1], #4
 800803a:	d402      	bmi.n	8008042 <_printf_i+0x186>
 800803c:	065f      	lsls	r7, r3, #25
 800803e:	bf48      	it	mi
 8008040:	b2ad      	uxthmi	r5, r5
 8008042:	6031      	str	r1, [r6, #0]
 8008044:	07d9      	lsls	r1, r3, #31
 8008046:	bf44      	itt	mi
 8008048:	f043 0320 	orrmi.w	r3, r3, #32
 800804c:	6023      	strmi	r3, [r4, #0]
 800804e:	b11d      	cbz	r5, 8008058 <_printf_i+0x19c>
 8008050:	2310      	movs	r3, #16
 8008052:	e7ad      	b.n	8007fb0 <_printf_i+0xf4>
 8008054:	4826      	ldr	r0, [pc, #152]	@ (80080f0 <_printf_i+0x234>)
 8008056:	e7e9      	b.n	800802c <_printf_i+0x170>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	f023 0320 	bic.w	r3, r3, #32
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	e7f6      	b.n	8008050 <_printf_i+0x194>
 8008062:	4616      	mov	r6, r2
 8008064:	e7bd      	b.n	8007fe2 <_printf_i+0x126>
 8008066:	6833      	ldr	r3, [r6, #0]
 8008068:	6825      	ldr	r5, [r4, #0]
 800806a:	6961      	ldr	r1, [r4, #20]
 800806c:	1d18      	adds	r0, r3, #4
 800806e:	6030      	str	r0, [r6, #0]
 8008070:	062e      	lsls	r6, r5, #24
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	d501      	bpl.n	800807a <_printf_i+0x1be>
 8008076:	6019      	str	r1, [r3, #0]
 8008078:	e002      	b.n	8008080 <_printf_i+0x1c4>
 800807a:	0668      	lsls	r0, r5, #25
 800807c:	d5fb      	bpl.n	8008076 <_printf_i+0x1ba>
 800807e:	8019      	strh	r1, [r3, #0]
 8008080:	2300      	movs	r3, #0
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	4616      	mov	r6, r2
 8008086:	e7bc      	b.n	8008002 <_printf_i+0x146>
 8008088:	6833      	ldr	r3, [r6, #0]
 800808a:	1d1a      	adds	r2, r3, #4
 800808c:	6032      	str	r2, [r6, #0]
 800808e:	681e      	ldr	r6, [r3, #0]
 8008090:	6862      	ldr	r2, [r4, #4]
 8008092:	2100      	movs	r1, #0
 8008094:	4630      	mov	r0, r6
 8008096:	f7f8 f89b 	bl	80001d0 <memchr>
 800809a:	b108      	cbz	r0, 80080a0 <_printf_i+0x1e4>
 800809c:	1b80      	subs	r0, r0, r6
 800809e:	6060      	str	r0, [r4, #4]
 80080a0:	6863      	ldr	r3, [r4, #4]
 80080a2:	6123      	str	r3, [r4, #16]
 80080a4:	2300      	movs	r3, #0
 80080a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080aa:	e7aa      	b.n	8008002 <_printf_i+0x146>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	4632      	mov	r2, r6
 80080b0:	4649      	mov	r1, r9
 80080b2:	4640      	mov	r0, r8
 80080b4:	47d0      	blx	sl
 80080b6:	3001      	adds	r0, #1
 80080b8:	d0ad      	beq.n	8008016 <_printf_i+0x15a>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	079b      	lsls	r3, r3, #30
 80080be:	d413      	bmi.n	80080e8 <_printf_i+0x22c>
 80080c0:	68e0      	ldr	r0, [r4, #12]
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	4298      	cmp	r0, r3
 80080c6:	bfb8      	it	lt
 80080c8:	4618      	movlt	r0, r3
 80080ca:	e7a6      	b.n	800801a <_printf_i+0x15e>
 80080cc:	2301      	movs	r3, #1
 80080ce:	4632      	mov	r2, r6
 80080d0:	4649      	mov	r1, r9
 80080d2:	4640      	mov	r0, r8
 80080d4:	47d0      	blx	sl
 80080d6:	3001      	adds	r0, #1
 80080d8:	d09d      	beq.n	8008016 <_printf_i+0x15a>
 80080da:	3501      	adds	r5, #1
 80080dc:	68e3      	ldr	r3, [r4, #12]
 80080de:	9903      	ldr	r1, [sp, #12]
 80080e0:	1a5b      	subs	r3, r3, r1
 80080e2:	42ab      	cmp	r3, r5
 80080e4:	dcf2      	bgt.n	80080cc <_printf_i+0x210>
 80080e6:	e7eb      	b.n	80080c0 <_printf_i+0x204>
 80080e8:	2500      	movs	r5, #0
 80080ea:	f104 0619 	add.w	r6, r4, #25
 80080ee:	e7f5      	b.n	80080dc <_printf_i+0x220>
 80080f0:	0800d5ce 	.word	0x0800d5ce
 80080f4:	0800d5df 	.word	0x0800d5df

080080f8 <std>:
 80080f8:	2300      	movs	r3, #0
 80080fa:	b510      	push	{r4, lr}
 80080fc:	4604      	mov	r4, r0
 80080fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008106:	6083      	str	r3, [r0, #8]
 8008108:	8181      	strh	r1, [r0, #12]
 800810a:	6643      	str	r3, [r0, #100]	@ 0x64
 800810c:	81c2      	strh	r2, [r0, #14]
 800810e:	6183      	str	r3, [r0, #24]
 8008110:	4619      	mov	r1, r3
 8008112:	2208      	movs	r2, #8
 8008114:	305c      	adds	r0, #92	@ 0x5c
 8008116:	f000 fa1b 	bl	8008550 <memset>
 800811a:	4b0d      	ldr	r3, [pc, #52]	@ (8008150 <std+0x58>)
 800811c:	6263      	str	r3, [r4, #36]	@ 0x24
 800811e:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <std+0x5c>)
 8008120:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008122:	4b0d      	ldr	r3, [pc, #52]	@ (8008158 <std+0x60>)
 8008124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008126:	4b0d      	ldr	r3, [pc, #52]	@ (800815c <std+0x64>)
 8008128:	6323      	str	r3, [r4, #48]	@ 0x30
 800812a:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <std+0x68>)
 800812c:	6224      	str	r4, [r4, #32]
 800812e:	429c      	cmp	r4, r3
 8008130:	d006      	beq.n	8008140 <std+0x48>
 8008132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008136:	4294      	cmp	r4, r2
 8008138:	d002      	beq.n	8008140 <std+0x48>
 800813a:	33d0      	adds	r3, #208	@ 0xd0
 800813c:	429c      	cmp	r4, r3
 800813e:	d105      	bne.n	800814c <std+0x54>
 8008140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008148:	f000 ba7e 	b.w	8008648 <__retarget_lock_init_recursive>
 800814c:	bd10      	pop	{r4, pc}
 800814e:	bf00      	nop
 8008150:	080083a1 	.word	0x080083a1
 8008154:	080083c3 	.word	0x080083c3
 8008158:	080083fb 	.word	0x080083fb
 800815c:	0800841f 	.word	0x0800841f
 8008160:	20000444 	.word	0x20000444

08008164 <stdio_exit_handler>:
 8008164:	4a02      	ldr	r2, [pc, #8]	@ (8008170 <stdio_exit_handler+0xc>)
 8008166:	4903      	ldr	r1, [pc, #12]	@ (8008174 <stdio_exit_handler+0x10>)
 8008168:	4803      	ldr	r0, [pc, #12]	@ (8008178 <stdio_exit_handler+0x14>)
 800816a:	f000 b869 	b.w	8008240 <_fwalk_sglue>
 800816e:	bf00      	nop
 8008170:	20000010 	.word	0x20000010
 8008174:	0800a231 	.word	0x0800a231
 8008178:	20000020 	.word	0x20000020

0800817c <cleanup_stdio>:
 800817c:	6841      	ldr	r1, [r0, #4]
 800817e:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <cleanup_stdio+0x34>)
 8008180:	4299      	cmp	r1, r3
 8008182:	b510      	push	{r4, lr}
 8008184:	4604      	mov	r4, r0
 8008186:	d001      	beq.n	800818c <cleanup_stdio+0x10>
 8008188:	f002 f852 	bl	800a230 <_fflush_r>
 800818c:	68a1      	ldr	r1, [r4, #8]
 800818e:	4b09      	ldr	r3, [pc, #36]	@ (80081b4 <cleanup_stdio+0x38>)
 8008190:	4299      	cmp	r1, r3
 8008192:	d002      	beq.n	800819a <cleanup_stdio+0x1e>
 8008194:	4620      	mov	r0, r4
 8008196:	f002 f84b 	bl	800a230 <_fflush_r>
 800819a:	68e1      	ldr	r1, [r4, #12]
 800819c:	4b06      	ldr	r3, [pc, #24]	@ (80081b8 <cleanup_stdio+0x3c>)
 800819e:	4299      	cmp	r1, r3
 80081a0:	d004      	beq.n	80081ac <cleanup_stdio+0x30>
 80081a2:	4620      	mov	r0, r4
 80081a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a8:	f002 b842 	b.w	800a230 <_fflush_r>
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	bf00      	nop
 80081b0:	20000444 	.word	0x20000444
 80081b4:	200004ac 	.word	0x200004ac
 80081b8:	20000514 	.word	0x20000514

080081bc <global_stdio_init.part.0>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	4b0b      	ldr	r3, [pc, #44]	@ (80081ec <global_stdio_init.part.0+0x30>)
 80081c0:	4c0b      	ldr	r4, [pc, #44]	@ (80081f0 <global_stdio_init.part.0+0x34>)
 80081c2:	4a0c      	ldr	r2, [pc, #48]	@ (80081f4 <global_stdio_init.part.0+0x38>)
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	4620      	mov	r0, r4
 80081c8:	2200      	movs	r2, #0
 80081ca:	2104      	movs	r1, #4
 80081cc:	f7ff ff94 	bl	80080f8 <std>
 80081d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081d4:	2201      	movs	r2, #1
 80081d6:	2109      	movs	r1, #9
 80081d8:	f7ff ff8e 	bl	80080f8 <std>
 80081dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081e0:	2202      	movs	r2, #2
 80081e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e6:	2112      	movs	r1, #18
 80081e8:	f7ff bf86 	b.w	80080f8 <std>
 80081ec:	2000057c 	.word	0x2000057c
 80081f0:	20000444 	.word	0x20000444
 80081f4:	08008165 	.word	0x08008165

080081f8 <__sfp_lock_acquire>:
 80081f8:	4801      	ldr	r0, [pc, #4]	@ (8008200 <__sfp_lock_acquire+0x8>)
 80081fa:	f000 ba26 	b.w	800864a <__retarget_lock_acquire_recursive>
 80081fe:	bf00      	nop
 8008200:	20000585 	.word	0x20000585

08008204 <__sfp_lock_release>:
 8008204:	4801      	ldr	r0, [pc, #4]	@ (800820c <__sfp_lock_release+0x8>)
 8008206:	f000 ba21 	b.w	800864c <__retarget_lock_release_recursive>
 800820a:	bf00      	nop
 800820c:	20000585 	.word	0x20000585

08008210 <__sinit>:
 8008210:	b510      	push	{r4, lr}
 8008212:	4604      	mov	r4, r0
 8008214:	f7ff fff0 	bl	80081f8 <__sfp_lock_acquire>
 8008218:	6a23      	ldr	r3, [r4, #32]
 800821a:	b11b      	cbz	r3, 8008224 <__sinit+0x14>
 800821c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008220:	f7ff bff0 	b.w	8008204 <__sfp_lock_release>
 8008224:	4b04      	ldr	r3, [pc, #16]	@ (8008238 <__sinit+0x28>)
 8008226:	6223      	str	r3, [r4, #32]
 8008228:	4b04      	ldr	r3, [pc, #16]	@ (800823c <__sinit+0x2c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f5      	bne.n	800821c <__sinit+0xc>
 8008230:	f7ff ffc4 	bl	80081bc <global_stdio_init.part.0>
 8008234:	e7f2      	b.n	800821c <__sinit+0xc>
 8008236:	bf00      	nop
 8008238:	0800817d 	.word	0x0800817d
 800823c:	2000057c 	.word	0x2000057c

08008240 <_fwalk_sglue>:
 8008240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008244:	4607      	mov	r7, r0
 8008246:	4688      	mov	r8, r1
 8008248:	4614      	mov	r4, r2
 800824a:	2600      	movs	r6, #0
 800824c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008250:	f1b9 0901 	subs.w	r9, r9, #1
 8008254:	d505      	bpl.n	8008262 <_fwalk_sglue+0x22>
 8008256:	6824      	ldr	r4, [r4, #0]
 8008258:	2c00      	cmp	r4, #0
 800825a:	d1f7      	bne.n	800824c <_fwalk_sglue+0xc>
 800825c:	4630      	mov	r0, r6
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d907      	bls.n	8008278 <_fwalk_sglue+0x38>
 8008268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800826c:	3301      	adds	r3, #1
 800826e:	d003      	beq.n	8008278 <_fwalk_sglue+0x38>
 8008270:	4629      	mov	r1, r5
 8008272:	4638      	mov	r0, r7
 8008274:	47c0      	blx	r8
 8008276:	4306      	orrs	r6, r0
 8008278:	3568      	adds	r5, #104	@ 0x68
 800827a:	e7e9      	b.n	8008250 <_fwalk_sglue+0x10>

0800827c <iprintf>:
 800827c:	b40f      	push	{r0, r1, r2, r3}
 800827e:	b507      	push	{r0, r1, r2, lr}
 8008280:	4906      	ldr	r1, [pc, #24]	@ (800829c <iprintf+0x20>)
 8008282:	ab04      	add	r3, sp, #16
 8008284:	6808      	ldr	r0, [r1, #0]
 8008286:	f853 2b04 	ldr.w	r2, [r3], #4
 800828a:	6881      	ldr	r1, [r0, #8]
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	f001 fe33 	bl	8009ef8 <_vfiprintf_r>
 8008292:	b003      	add	sp, #12
 8008294:	f85d eb04 	ldr.w	lr, [sp], #4
 8008298:	b004      	add	sp, #16
 800829a:	4770      	bx	lr
 800829c:	2000001c 	.word	0x2000001c

080082a0 <_puts_r>:
 80082a0:	6a03      	ldr	r3, [r0, #32]
 80082a2:	b570      	push	{r4, r5, r6, lr}
 80082a4:	6884      	ldr	r4, [r0, #8]
 80082a6:	4605      	mov	r5, r0
 80082a8:	460e      	mov	r6, r1
 80082aa:	b90b      	cbnz	r3, 80082b0 <_puts_r+0x10>
 80082ac:	f7ff ffb0 	bl	8008210 <__sinit>
 80082b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082b2:	07db      	lsls	r3, r3, #31
 80082b4:	d405      	bmi.n	80082c2 <_puts_r+0x22>
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	0598      	lsls	r0, r3, #22
 80082ba:	d402      	bmi.n	80082c2 <_puts_r+0x22>
 80082bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082be:	f000 f9c4 	bl	800864a <__retarget_lock_acquire_recursive>
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	0719      	lsls	r1, r3, #28
 80082c6:	d502      	bpl.n	80082ce <_puts_r+0x2e>
 80082c8:	6923      	ldr	r3, [r4, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d135      	bne.n	800833a <_puts_r+0x9a>
 80082ce:	4621      	mov	r1, r4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f000 f8e7 	bl	80084a4 <__swsetup_r>
 80082d6:	b380      	cbz	r0, 800833a <_puts_r+0x9a>
 80082d8:	f04f 35ff 	mov.w	r5, #4294967295
 80082dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082de:	07da      	lsls	r2, r3, #31
 80082e0:	d405      	bmi.n	80082ee <_puts_r+0x4e>
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	059b      	lsls	r3, r3, #22
 80082e6:	d402      	bmi.n	80082ee <_puts_r+0x4e>
 80082e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ea:	f000 f9af 	bl	800864c <__retarget_lock_release_recursive>
 80082ee:	4628      	mov	r0, r5
 80082f0:	bd70      	pop	{r4, r5, r6, pc}
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	da04      	bge.n	8008300 <_puts_r+0x60>
 80082f6:	69a2      	ldr	r2, [r4, #24]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	dc17      	bgt.n	800832c <_puts_r+0x8c>
 80082fc:	290a      	cmp	r1, #10
 80082fe:	d015      	beq.n	800832c <_puts_r+0x8c>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	6022      	str	r2, [r4, #0]
 8008306:	7019      	strb	r1, [r3, #0]
 8008308:	68a3      	ldr	r3, [r4, #8]
 800830a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800830e:	3b01      	subs	r3, #1
 8008310:	60a3      	str	r3, [r4, #8]
 8008312:	2900      	cmp	r1, #0
 8008314:	d1ed      	bne.n	80082f2 <_puts_r+0x52>
 8008316:	2b00      	cmp	r3, #0
 8008318:	da11      	bge.n	800833e <_puts_r+0x9e>
 800831a:	4622      	mov	r2, r4
 800831c:	210a      	movs	r1, #10
 800831e:	4628      	mov	r0, r5
 8008320:	f000 f881 	bl	8008426 <__swbuf_r>
 8008324:	3001      	adds	r0, #1
 8008326:	d0d7      	beq.n	80082d8 <_puts_r+0x38>
 8008328:	250a      	movs	r5, #10
 800832a:	e7d7      	b.n	80082dc <_puts_r+0x3c>
 800832c:	4622      	mov	r2, r4
 800832e:	4628      	mov	r0, r5
 8008330:	f000 f879 	bl	8008426 <__swbuf_r>
 8008334:	3001      	adds	r0, #1
 8008336:	d1e7      	bne.n	8008308 <_puts_r+0x68>
 8008338:	e7ce      	b.n	80082d8 <_puts_r+0x38>
 800833a:	3e01      	subs	r6, #1
 800833c:	e7e4      	b.n	8008308 <_puts_r+0x68>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	6022      	str	r2, [r4, #0]
 8008344:	220a      	movs	r2, #10
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	e7ee      	b.n	8008328 <_puts_r+0x88>
	...

0800834c <puts>:
 800834c:	4b02      	ldr	r3, [pc, #8]	@ (8008358 <puts+0xc>)
 800834e:	4601      	mov	r1, r0
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	f7ff bfa5 	b.w	80082a0 <_puts_r>
 8008356:	bf00      	nop
 8008358:	2000001c 	.word	0x2000001c

0800835c <siprintf>:
 800835c:	b40e      	push	{r1, r2, r3}
 800835e:	b510      	push	{r4, lr}
 8008360:	b09d      	sub	sp, #116	@ 0x74
 8008362:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008364:	9002      	str	r0, [sp, #8]
 8008366:	9006      	str	r0, [sp, #24]
 8008368:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800836c:	480a      	ldr	r0, [pc, #40]	@ (8008398 <siprintf+0x3c>)
 800836e:	9107      	str	r1, [sp, #28]
 8008370:	9104      	str	r1, [sp, #16]
 8008372:	490a      	ldr	r1, [pc, #40]	@ (800839c <siprintf+0x40>)
 8008374:	f853 2b04 	ldr.w	r2, [r3], #4
 8008378:	9105      	str	r1, [sp, #20]
 800837a:	2400      	movs	r4, #0
 800837c:	a902      	add	r1, sp, #8
 800837e:	6800      	ldr	r0, [r0, #0]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008384:	f001 fc92 	bl	8009cac <_svfiprintf_r>
 8008388:	9b02      	ldr	r3, [sp, #8]
 800838a:	701c      	strb	r4, [r3, #0]
 800838c:	b01d      	add	sp, #116	@ 0x74
 800838e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008392:	b003      	add	sp, #12
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	2000001c 	.word	0x2000001c
 800839c:	ffff0208 	.word	0xffff0208

080083a0 <__sread>:
 80083a0:	b510      	push	{r4, lr}
 80083a2:	460c      	mov	r4, r1
 80083a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a8:	f000 f900 	bl	80085ac <_read_r>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	bfab      	itete	ge
 80083b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083b2:	89a3      	ldrhlt	r3, [r4, #12]
 80083b4:	181b      	addge	r3, r3, r0
 80083b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083ba:	bfac      	ite	ge
 80083bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083be:	81a3      	strhlt	r3, [r4, #12]
 80083c0:	bd10      	pop	{r4, pc}

080083c2 <__swrite>:
 80083c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c6:	461f      	mov	r7, r3
 80083c8:	898b      	ldrh	r3, [r1, #12]
 80083ca:	05db      	lsls	r3, r3, #23
 80083cc:	4605      	mov	r5, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	4616      	mov	r6, r2
 80083d2:	d505      	bpl.n	80083e0 <__swrite+0x1e>
 80083d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d8:	2302      	movs	r3, #2
 80083da:	2200      	movs	r2, #0
 80083dc:	f000 f8d4 	bl	8008588 <_lseek_r>
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	4632      	mov	r2, r6
 80083ee:	463b      	mov	r3, r7
 80083f0:	4628      	mov	r0, r5
 80083f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083f6:	f000 b8eb 	b.w	80085d0 <_write_r>

080083fa <__sseek>:
 80083fa:	b510      	push	{r4, lr}
 80083fc:	460c      	mov	r4, r1
 80083fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008402:	f000 f8c1 	bl	8008588 <_lseek_r>
 8008406:	1c43      	adds	r3, r0, #1
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	bf15      	itete	ne
 800840c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800840e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008412:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008416:	81a3      	strheq	r3, [r4, #12]
 8008418:	bf18      	it	ne
 800841a:	81a3      	strhne	r3, [r4, #12]
 800841c:	bd10      	pop	{r4, pc}

0800841e <__sclose>:
 800841e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008422:	f000 b8a1 	b.w	8008568 <_close_r>

08008426 <__swbuf_r>:
 8008426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008428:	460e      	mov	r6, r1
 800842a:	4614      	mov	r4, r2
 800842c:	4605      	mov	r5, r0
 800842e:	b118      	cbz	r0, 8008438 <__swbuf_r+0x12>
 8008430:	6a03      	ldr	r3, [r0, #32]
 8008432:	b90b      	cbnz	r3, 8008438 <__swbuf_r+0x12>
 8008434:	f7ff feec 	bl	8008210 <__sinit>
 8008438:	69a3      	ldr	r3, [r4, #24]
 800843a:	60a3      	str	r3, [r4, #8]
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	071a      	lsls	r2, r3, #28
 8008440:	d501      	bpl.n	8008446 <__swbuf_r+0x20>
 8008442:	6923      	ldr	r3, [r4, #16]
 8008444:	b943      	cbnz	r3, 8008458 <__swbuf_r+0x32>
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	f000 f82b 	bl	80084a4 <__swsetup_r>
 800844e:	b118      	cbz	r0, 8008458 <__swbuf_r+0x32>
 8008450:	f04f 37ff 	mov.w	r7, #4294967295
 8008454:	4638      	mov	r0, r7
 8008456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	6922      	ldr	r2, [r4, #16]
 800845c:	1a98      	subs	r0, r3, r2
 800845e:	6963      	ldr	r3, [r4, #20]
 8008460:	b2f6      	uxtb	r6, r6
 8008462:	4283      	cmp	r3, r0
 8008464:	4637      	mov	r7, r6
 8008466:	dc05      	bgt.n	8008474 <__swbuf_r+0x4e>
 8008468:	4621      	mov	r1, r4
 800846a:	4628      	mov	r0, r5
 800846c:	f001 fee0 	bl	800a230 <_fflush_r>
 8008470:	2800      	cmp	r0, #0
 8008472:	d1ed      	bne.n	8008450 <__swbuf_r+0x2a>
 8008474:	68a3      	ldr	r3, [r4, #8]
 8008476:	3b01      	subs	r3, #1
 8008478:	60a3      	str	r3, [r4, #8]
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	6022      	str	r2, [r4, #0]
 8008480:	701e      	strb	r6, [r3, #0]
 8008482:	6962      	ldr	r2, [r4, #20]
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	429a      	cmp	r2, r3
 8008488:	d004      	beq.n	8008494 <__swbuf_r+0x6e>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	07db      	lsls	r3, r3, #31
 800848e:	d5e1      	bpl.n	8008454 <__swbuf_r+0x2e>
 8008490:	2e0a      	cmp	r6, #10
 8008492:	d1df      	bne.n	8008454 <__swbuf_r+0x2e>
 8008494:	4621      	mov	r1, r4
 8008496:	4628      	mov	r0, r5
 8008498:	f001 feca 	bl	800a230 <_fflush_r>
 800849c:	2800      	cmp	r0, #0
 800849e:	d0d9      	beq.n	8008454 <__swbuf_r+0x2e>
 80084a0:	e7d6      	b.n	8008450 <__swbuf_r+0x2a>
	...

080084a4 <__swsetup_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4b29      	ldr	r3, [pc, #164]	@ (800854c <__swsetup_r+0xa8>)
 80084a8:	4605      	mov	r5, r0
 80084aa:	6818      	ldr	r0, [r3, #0]
 80084ac:	460c      	mov	r4, r1
 80084ae:	b118      	cbz	r0, 80084b8 <__swsetup_r+0x14>
 80084b0:	6a03      	ldr	r3, [r0, #32]
 80084b2:	b90b      	cbnz	r3, 80084b8 <__swsetup_r+0x14>
 80084b4:	f7ff feac 	bl	8008210 <__sinit>
 80084b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084bc:	0719      	lsls	r1, r3, #28
 80084be:	d422      	bmi.n	8008506 <__swsetup_r+0x62>
 80084c0:	06da      	lsls	r2, r3, #27
 80084c2:	d407      	bmi.n	80084d4 <__swsetup_r+0x30>
 80084c4:	2209      	movs	r2, #9
 80084c6:	602a      	str	r2, [r5, #0]
 80084c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	e033      	b.n	800853c <__swsetup_r+0x98>
 80084d4:	0758      	lsls	r0, r3, #29
 80084d6:	d512      	bpl.n	80084fe <__swsetup_r+0x5a>
 80084d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084da:	b141      	cbz	r1, 80084ee <__swsetup_r+0x4a>
 80084dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084e0:	4299      	cmp	r1, r3
 80084e2:	d002      	beq.n	80084ea <__swsetup_r+0x46>
 80084e4:	4628      	mov	r0, r5
 80084e6:	f000 ff0b 	bl	8009300 <_free_r>
 80084ea:	2300      	movs	r3, #0
 80084ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80084ee:	89a3      	ldrh	r3, [r4, #12]
 80084f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	2300      	movs	r3, #0
 80084f8:	6063      	str	r3, [r4, #4]
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f043 0308 	orr.w	r3, r3, #8
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	b94b      	cbnz	r3, 800851e <__swsetup_r+0x7a>
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008514:	d003      	beq.n	800851e <__swsetup_r+0x7a>
 8008516:	4621      	mov	r1, r4
 8008518:	4628      	mov	r0, r5
 800851a:	f001 fed7 	bl	800a2cc <__smakebuf_r>
 800851e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008522:	f013 0201 	ands.w	r2, r3, #1
 8008526:	d00a      	beq.n	800853e <__swsetup_r+0x9a>
 8008528:	2200      	movs	r2, #0
 800852a:	60a2      	str	r2, [r4, #8]
 800852c:	6962      	ldr	r2, [r4, #20]
 800852e:	4252      	negs	r2, r2
 8008530:	61a2      	str	r2, [r4, #24]
 8008532:	6922      	ldr	r2, [r4, #16]
 8008534:	b942      	cbnz	r2, 8008548 <__swsetup_r+0xa4>
 8008536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800853a:	d1c5      	bne.n	80084c8 <__swsetup_r+0x24>
 800853c:	bd38      	pop	{r3, r4, r5, pc}
 800853e:	0799      	lsls	r1, r3, #30
 8008540:	bf58      	it	pl
 8008542:	6962      	ldrpl	r2, [r4, #20]
 8008544:	60a2      	str	r2, [r4, #8]
 8008546:	e7f4      	b.n	8008532 <__swsetup_r+0x8e>
 8008548:	2000      	movs	r0, #0
 800854a:	e7f7      	b.n	800853c <__swsetup_r+0x98>
 800854c:	2000001c 	.word	0x2000001c

08008550 <memset>:
 8008550:	4402      	add	r2, r0
 8008552:	4603      	mov	r3, r0
 8008554:	4293      	cmp	r3, r2
 8008556:	d100      	bne.n	800855a <memset+0xa>
 8008558:	4770      	bx	lr
 800855a:	f803 1b01 	strb.w	r1, [r3], #1
 800855e:	e7f9      	b.n	8008554 <memset+0x4>

08008560 <_localeconv_r>:
 8008560:	4800      	ldr	r0, [pc, #0]	@ (8008564 <_localeconv_r+0x4>)
 8008562:	4770      	bx	lr
 8008564:	2000015c 	.word	0x2000015c

08008568 <_close_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4d06      	ldr	r5, [pc, #24]	@ (8008584 <_close_r+0x1c>)
 800856c:	2300      	movs	r3, #0
 800856e:	4604      	mov	r4, r0
 8008570:	4608      	mov	r0, r1
 8008572:	602b      	str	r3, [r5, #0]
 8008574:	f7f9 fc2c 	bl	8001dd0 <_close>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_close_r+0x1a>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_close_r+0x1a>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	20000580 	.word	0x20000580

08008588 <_lseek_r>:
 8008588:	b538      	push	{r3, r4, r5, lr}
 800858a:	4d07      	ldr	r5, [pc, #28]	@ (80085a8 <_lseek_r+0x20>)
 800858c:	4604      	mov	r4, r0
 800858e:	4608      	mov	r0, r1
 8008590:	4611      	mov	r1, r2
 8008592:	2200      	movs	r2, #0
 8008594:	602a      	str	r2, [r5, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	f7f9 fc41 	bl	8001e1e <_lseek>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	d102      	bne.n	80085a6 <_lseek_r+0x1e>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	b103      	cbz	r3, 80085a6 <_lseek_r+0x1e>
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	bd38      	pop	{r3, r4, r5, pc}
 80085a8:	20000580 	.word	0x20000580

080085ac <_read_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d07      	ldr	r5, [pc, #28]	@ (80085cc <_read_r+0x20>)
 80085b0:	4604      	mov	r4, r0
 80085b2:	4608      	mov	r0, r1
 80085b4:	4611      	mov	r1, r2
 80085b6:	2200      	movs	r2, #0
 80085b8:	602a      	str	r2, [r5, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	f7f9 fbcf 	bl	8001d5e <_read>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_read_r+0x1e>
 80085c4:	682b      	ldr	r3, [r5, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_read_r+0x1e>
 80085c8:	6023      	str	r3, [r4, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	20000580 	.word	0x20000580

080085d0 <_write_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d07      	ldr	r5, [pc, #28]	@ (80085f0 <_write_r+0x20>)
 80085d4:	4604      	mov	r4, r0
 80085d6:	4608      	mov	r0, r1
 80085d8:	4611      	mov	r1, r2
 80085da:	2200      	movs	r2, #0
 80085dc:	602a      	str	r2, [r5, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	f7f9 fbda 	bl	8001d98 <_write>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_write_r+0x1e>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_write_r+0x1e>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	20000580 	.word	0x20000580

080085f4 <__errno>:
 80085f4:	4b01      	ldr	r3, [pc, #4]	@ (80085fc <__errno+0x8>)
 80085f6:	6818      	ldr	r0, [r3, #0]
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	2000001c 	.word	0x2000001c

08008600 <__libc_init_array>:
 8008600:	b570      	push	{r4, r5, r6, lr}
 8008602:	4d0d      	ldr	r5, [pc, #52]	@ (8008638 <__libc_init_array+0x38>)
 8008604:	4c0d      	ldr	r4, [pc, #52]	@ (800863c <__libc_init_array+0x3c>)
 8008606:	1b64      	subs	r4, r4, r5
 8008608:	10a4      	asrs	r4, r4, #2
 800860a:	2600      	movs	r6, #0
 800860c:	42a6      	cmp	r6, r4
 800860e:	d109      	bne.n	8008624 <__libc_init_array+0x24>
 8008610:	4d0b      	ldr	r5, [pc, #44]	@ (8008640 <__libc_init_array+0x40>)
 8008612:	4c0c      	ldr	r4, [pc, #48]	@ (8008644 <__libc_init_array+0x44>)
 8008614:	f001 ffd6 	bl	800a5c4 <_init>
 8008618:	1b64      	subs	r4, r4, r5
 800861a:	10a4      	asrs	r4, r4, #2
 800861c:	2600      	movs	r6, #0
 800861e:	42a6      	cmp	r6, r4
 8008620:	d105      	bne.n	800862e <__libc_init_array+0x2e>
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	f855 3b04 	ldr.w	r3, [r5], #4
 8008628:	4798      	blx	r3
 800862a:	3601      	adds	r6, #1
 800862c:	e7ee      	b.n	800860c <__libc_init_array+0xc>
 800862e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008632:	4798      	blx	r3
 8008634:	3601      	adds	r6, #1
 8008636:	e7f2      	b.n	800861e <__libc_init_array+0x1e>
 8008638:	0800d93c 	.word	0x0800d93c
 800863c:	0800d93c 	.word	0x0800d93c
 8008640:	0800d93c 	.word	0x0800d93c
 8008644:	0800d940 	.word	0x0800d940

08008648 <__retarget_lock_init_recursive>:
 8008648:	4770      	bx	lr

0800864a <__retarget_lock_acquire_recursive>:
 800864a:	4770      	bx	lr

0800864c <__retarget_lock_release_recursive>:
 800864c:	4770      	bx	lr

0800864e <quorem>:
 800864e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008652:	6903      	ldr	r3, [r0, #16]
 8008654:	690c      	ldr	r4, [r1, #16]
 8008656:	42a3      	cmp	r3, r4
 8008658:	4607      	mov	r7, r0
 800865a:	db7e      	blt.n	800875a <quorem+0x10c>
 800865c:	3c01      	subs	r4, #1
 800865e:	f101 0814 	add.w	r8, r1, #20
 8008662:	00a3      	lsls	r3, r4, #2
 8008664:	f100 0514 	add.w	r5, r0, #20
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800866e:	9301      	str	r3, [sp, #4]
 8008670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008678:	3301      	adds	r3, #1
 800867a:	429a      	cmp	r2, r3
 800867c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008680:	fbb2 f6f3 	udiv	r6, r2, r3
 8008684:	d32e      	bcc.n	80086e4 <quorem+0x96>
 8008686:	f04f 0a00 	mov.w	sl, #0
 800868a:	46c4      	mov	ip, r8
 800868c:	46ae      	mov	lr, r5
 800868e:	46d3      	mov	fp, sl
 8008690:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008694:	b298      	uxth	r0, r3
 8008696:	fb06 a000 	mla	r0, r6, r0, sl
 800869a:	0c02      	lsrs	r2, r0, #16
 800869c:	0c1b      	lsrs	r3, r3, #16
 800869e:	fb06 2303 	mla	r3, r6, r3, r2
 80086a2:	f8de 2000 	ldr.w	r2, [lr]
 80086a6:	b280      	uxth	r0, r0
 80086a8:	b292      	uxth	r2, r2
 80086aa:	1a12      	subs	r2, r2, r0
 80086ac:	445a      	add	r2, fp
 80086ae:	f8de 0000 	ldr.w	r0, [lr]
 80086b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80086bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80086c0:	b292      	uxth	r2, r2
 80086c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80086c6:	45e1      	cmp	r9, ip
 80086c8:	f84e 2b04 	str.w	r2, [lr], #4
 80086cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80086d0:	d2de      	bcs.n	8008690 <quorem+0x42>
 80086d2:	9b00      	ldr	r3, [sp, #0]
 80086d4:	58eb      	ldr	r3, [r5, r3]
 80086d6:	b92b      	cbnz	r3, 80086e4 <quorem+0x96>
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	3b04      	subs	r3, #4
 80086dc:	429d      	cmp	r5, r3
 80086de:	461a      	mov	r2, r3
 80086e0:	d32f      	bcc.n	8008742 <quorem+0xf4>
 80086e2:	613c      	str	r4, [r7, #16]
 80086e4:	4638      	mov	r0, r7
 80086e6:	f001 f97d 	bl	80099e4 <__mcmp>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	db25      	blt.n	800873a <quorem+0xec>
 80086ee:	4629      	mov	r1, r5
 80086f0:	2000      	movs	r0, #0
 80086f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80086f6:	f8d1 c000 	ldr.w	ip, [r1]
 80086fa:	fa1f fe82 	uxth.w	lr, r2
 80086fe:	fa1f f38c 	uxth.w	r3, ip
 8008702:	eba3 030e 	sub.w	r3, r3, lr
 8008706:	4403      	add	r3, r0
 8008708:	0c12      	lsrs	r2, r2, #16
 800870a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800870e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008712:	b29b      	uxth	r3, r3
 8008714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008718:	45c1      	cmp	r9, r8
 800871a:	f841 3b04 	str.w	r3, [r1], #4
 800871e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008722:	d2e6      	bcs.n	80086f2 <quorem+0xa4>
 8008724:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008728:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800872c:	b922      	cbnz	r2, 8008738 <quorem+0xea>
 800872e:	3b04      	subs	r3, #4
 8008730:	429d      	cmp	r5, r3
 8008732:	461a      	mov	r2, r3
 8008734:	d30b      	bcc.n	800874e <quorem+0x100>
 8008736:	613c      	str	r4, [r7, #16]
 8008738:	3601      	adds	r6, #1
 800873a:	4630      	mov	r0, r6
 800873c:	b003      	add	sp, #12
 800873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008742:	6812      	ldr	r2, [r2, #0]
 8008744:	3b04      	subs	r3, #4
 8008746:	2a00      	cmp	r2, #0
 8008748:	d1cb      	bne.n	80086e2 <quorem+0x94>
 800874a:	3c01      	subs	r4, #1
 800874c:	e7c6      	b.n	80086dc <quorem+0x8e>
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	3b04      	subs	r3, #4
 8008752:	2a00      	cmp	r2, #0
 8008754:	d1ef      	bne.n	8008736 <quorem+0xe8>
 8008756:	3c01      	subs	r4, #1
 8008758:	e7ea      	b.n	8008730 <quorem+0xe2>
 800875a:	2000      	movs	r0, #0
 800875c:	e7ee      	b.n	800873c <quorem+0xee>
	...

08008760 <_dtoa_r>:
 8008760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008764:	69c7      	ldr	r7, [r0, #28]
 8008766:	b097      	sub	sp, #92	@ 0x5c
 8008768:	ed8d 0b04 	vstr	d0, [sp, #16]
 800876c:	ec55 4b10 	vmov	r4, r5, d0
 8008770:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008772:	9107      	str	r1, [sp, #28]
 8008774:	4681      	mov	r9, r0
 8008776:	920c      	str	r2, [sp, #48]	@ 0x30
 8008778:	9311      	str	r3, [sp, #68]	@ 0x44
 800877a:	b97f      	cbnz	r7, 800879c <_dtoa_r+0x3c>
 800877c:	2010      	movs	r0, #16
 800877e:	f000 fe09 	bl	8009394 <malloc>
 8008782:	4602      	mov	r2, r0
 8008784:	f8c9 001c 	str.w	r0, [r9, #28]
 8008788:	b920      	cbnz	r0, 8008794 <_dtoa_r+0x34>
 800878a:	4ba9      	ldr	r3, [pc, #676]	@ (8008a30 <_dtoa_r+0x2d0>)
 800878c:	21ef      	movs	r1, #239	@ 0xef
 800878e:	48a9      	ldr	r0, [pc, #676]	@ (8008a34 <_dtoa_r+0x2d4>)
 8008790:	f001 fe32 	bl	800a3f8 <__assert_func>
 8008794:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008798:	6007      	str	r7, [r0, #0]
 800879a:	60c7      	str	r7, [r0, #12]
 800879c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087a0:	6819      	ldr	r1, [r3, #0]
 80087a2:	b159      	cbz	r1, 80087bc <_dtoa_r+0x5c>
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	604a      	str	r2, [r1, #4]
 80087a8:	2301      	movs	r3, #1
 80087aa:	4093      	lsls	r3, r2
 80087ac:	608b      	str	r3, [r1, #8]
 80087ae:	4648      	mov	r0, r9
 80087b0:	f000 fee6 	bl	8009580 <_Bfree>
 80087b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	1e2b      	subs	r3, r5, #0
 80087be:	bfb9      	ittee	lt
 80087c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80087c4:	9305      	strlt	r3, [sp, #20]
 80087c6:	2300      	movge	r3, #0
 80087c8:	6033      	strge	r3, [r6, #0]
 80087ca:	9f05      	ldr	r7, [sp, #20]
 80087cc:	4b9a      	ldr	r3, [pc, #616]	@ (8008a38 <_dtoa_r+0x2d8>)
 80087ce:	bfbc      	itt	lt
 80087d0:	2201      	movlt	r2, #1
 80087d2:	6032      	strlt	r2, [r6, #0]
 80087d4:	43bb      	bics	r3, r7
 80087d6:	d112      	bne.n	80087fe <_dtoa_r+0x9e>
 80087d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80087da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087e4:	4323      	orrs	r3, r4
 80087e6:	f000 855a 	beq.w	800929e <_dtoa_r+0xb3e>
 80087ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008a4c <_dtoa_r+0x2ec>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 855c 	beq.w	80092ae <_dtoa_r+0xb4e>
 80087f6:	f10a 0303 	add.w	r3, sl, #3
 80087fa:	f000 bd56 	b.w	80092aa <_dtoa_r+0xb4a>
 80087fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008802:	2200      	movs	r2, #0
 8008804:	ec51 0b17 	vmov	r0, r1, d7
 8008808:	2300      	movs	r3, #0
 800880a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800880e:	f7f8 f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008812:	4680      	mov	r8, r0
 8008814:	b158      	cbz	r0, 800882e <_dtoa_r+0xce>
 8008816:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008818:	2301      	movs	r3, #1
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800881e:	b113      	cbz	r3, 8008826 <_dtoa_r+0xc6>
 8008820:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008822:	4b86      	ldr	r3, [pc, #536]	@ (8008a3c <_dtoa_r+0x2dc>)
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008a50 <_dtoa_r+0x2f0>
 800882a:	f000 bd40 	b.w	80092ae <_dtoa_r+0xb4e>
 800882e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008832:	aa14      	add	r2, sp, #80	@ 0x50
 8008834:	a915      	add	r1, sp, #84	@ 0x54
 8008836:	4648      	mov	r0, r9
 8008838:	f001 f984 	bl	8009b44 <__d2b>
 800883c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008840:	9002      	str	r0, [sp, #8]
 8008842:	2e00      	cmp	r6, #0
 8008844:	d078      	beq.n	8008938 <_dtoa_r+0x1d8>
 8008846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008848:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800884c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008850:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008854:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008858:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800885c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008860:	4619      	mov	r1, r3
 8008862:	2200      	movs	r2, #0
 8008864:	4b76      	ldr	r3, [pc, #472]	@ (8008a40 <_dtoa_r+0x2e0>)
 8008866:	f7f7 fd0f 	bl	8000288 <__aeabi_dsub>
 800886a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008a18 <_dtoa_r+0x2b8>)
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	f7f7 fec2 	bl	80005f8 <__aeabi_dmul>
 8008874:	a36a      	add	r3, pc, #424	@ (adr r3, 8008a20 <_dtoa_r+0x2c0>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	f7f7 fd07 	bl	800028c <__adddf3>
 800887e:	4604      	mov	r4, r0
 8008880:	4630      	mov	r0, r6
 8008882:	460d      	mov	r5, r1
 8008884:	f7f7 fe4e 	bl	8000524 <__aeabi_i2d>
 8008888:	a367      	add	r3, pc, #412	@ (adr r3, 8008a28 <_dtoa_r+0x2c8>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 feb3 	bl	80005f8 <__aeabi_dmul>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4620      	mov	r0, r4
 8008898:	4629      	mov	r1, r5
 800889a:	f7f7 fcf7 	bl	800028c <__adddf3>
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	f7f8 f959 	bl	8000b58 <__aeabi_d2iz>
 80088a6:	2200      	movs	r2, #0
 80088a8:	4607      	mov	r7, r0
 80088aa:	2300      	movs	r3, #0
 80088ac:	4620      	mov	r0, r4
 80088ae:	4629      	mov	r1, r5
 80088b0:	f7f8 f914 	bl	8000adc <__aeabi_dcmplt>
 80088b4:	b140      	cbz	r0, 80088c8 <_dtoa_r+0x168>
 80088b6:	4638      	mov	r0, r7
 80088b8:	f7f7 fe34 	bl	8000524 <__aeabi_i2d>
 80088bc:	4622      	mov	r2, r4
 80088be:	462b      	mov	r3, r5
 80088c0:	f7f8 f902 	bl	8000ac8 <__aeabi_dcmpeq>
 80088c4:	b900      	cbnz	r0, 80088c8 <_dtoa_r+0x168>
 80088c6:	3f01      	subs	r7, #1
 80088c8:	2f16      	cmp	r7, #22
 80088ca:	d852      	bhi.n	8008972 <_dtoa_r+0x212>
 80088cc:	4b5d      	ldr	r3, [pc, #372]	@ (8008a44 <_dtoa_r+0x2e4>)
 80088ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088da:	f7f8 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d049      	beq.n	8008976 <_dtoa_r+0x216>
 80088e2:	3f01      	subs	r7, #1
 80088e4:	2300      	movs	r3, #0
 80088e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80088e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088ea:	1b9b      	subs	r3, r3, r6
 80088ec:	1e5a      	subs	r2, r3, #1
 80088ee:	bf45      	ittet	mi
 80088f0:	f1c3 0301 	rsbmi	r3, r3, #1
 80088f4:	9300      	strmi	r3, [sp, #0]
 80088f6:	2300      	movpl	r3, #0
 80088f8:	2300      	movmi	r3, #0
 80088fa:	9206      	str	r2, [sp, #24]
 80088fc:	bf54      	ite	pl
 80088fe:	9300      	strpl	r3, [sp, #0]
 8008900:	9306      	strmi	r3, [sp, #24]
 8008902:	2f00      	cmp	r7, #0
 8008904:	db39      	blt.n	800897a <_dtoa_r+0x21a>
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	970d      	str	r7, [sp, #52]	@ 0x34
 800890a:	443b      	add	r3, r7
 800890c:	9306      	str	r3, [sp, #24]
 800890e:	2300      	movs	r3, #0
 8008910:	9308      	str	r3, [sp, #32]
 8008912:	9b07      	ldr	r3, [sp, #28]
 8008914:	2b09      	cmp	r3, #9
 8008916:	d863      	bhi.n	80089e0 <_dtoa_r+0x280>
 8008918:	2b05      	cmp	r3, #5
 800891a:	bfc4      	itt	gt
 800891c:	3b04      	subgt	r3, #4
 800891e:	9307      	strgt	r3, [sp, #28]
 8008920:	9b07      	ldr	r3, [sp, #28]
 8008922:	f1a3 0302 	sub.w	r3, r3, #2
 8008926:	bfcc      	ite	gt
 8008928:	2400      	movgt	r4, #0
 800892a:	2401      	movle	r4, #1
 800892c:	2b03      	cmp	r3, #3
 800892e:	d863      	bhi.n	80089f8 <_dtoa_r+0x298>
 8008930:	e8df f003 	tbb	[pc, r3]
 8008934:	2b375452 	.word	0x2b375452
 8008938:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800893c:	441e      	add	r6, r3
 800893e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008942:	2b20      	cmp	r3, #32
 8008944:	bfc1      	itttt	gt
 8008946:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800894a:	409f      	lslgt	r7, r3
 800894c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008950:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008954:	bfd6      	itet	le
 8008956:	f1c3 0320 	rsble	r3, r3, #32
 800895a:	ea47 0003 	orrgt.w	r0, r7, r3
 800895e:	fa04 f003 	lslle.w	r0, r4, r3
 8008962:	f7f7 fdcf 	bl	8000504 <__aeabi_ui2d>
 8008966:	2201      	movs	r2, #1
 8008968:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800896c:	3e01      	subs	r6, #1
 800896e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008970:	e776      	b.n	8008860 <_dtoa_r+0x100>
 8008972:	2301      	movs	r3, #1
 8008974:	e7b7      	b.n	80088e6 <_dtoa_r+0x186>
 8008976:	9010      	str	r0, [sp, #64]	@ 0x40
 8008978:	e7b6      	b.n	80088e8 <_dtoa_r+0x188>
 800897a:	9b00      	ldr	r3, [sp, #0]
 800897c:	1bdb      	subs	r3, r3, r7
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	427b      	negs	r3, r7
 8008982:	9308      	str	r3, [sp, #32]
 8008984:	2300      	movs	r3, #0
 8008986:	930d      	str	r3, [sp, #52]	@ 0x34
 8008988:	e7c3      	b.n	8008912 <_dtoa_r+0x1b2>
 800898a:	2301      	movs	r3, #1
 800898c:	9309      	str	r3, [sp, #36]	@ 0x24
 800898e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008990:	eb07 0b03 	add.w	fp, r7, r3
 8008994:	f10b 0301 	add.w	r3, fp, #1
 8008998:	2b01      	cmp	r3, #1
 800899a:	9303      	str	r3, [sp, #12]
 800899c:	bfb8      	it	lt
 800899e:	2301      	movlt	r3, #1
 80089a0:	e006      	b.n	80089b0 <_dtoa_r+0x250>
 80089a2:	2301      	movs	r3, #1
 80089a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	dd28      	ble.n	80089fe <_dtoa_r+0x29e>
 80089ac:	469b      	mov	fp, r3
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80089b4:	2100      	movs	r1, #0
 80089b6:	2204      	movs	r2, #4
 80089b8:	f102 0514 	add.w	r5, r2, #20
 80089bc:	429d      	cmp	r5, r3
 80089be:	d926      	bls.n	8008a0e <_dtoa_r+0x2ae>
 80089c0:	6041      	str	r1, [r0, #4]
 80089c2:	4648      	mov	r0, r9
 80089c4:	f000 fd9c 	bl	8009500 <_Balloc>
 80089c8:	4682      	mov	sl, r0
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d142      	bne.n	8008a54 <_dtoa_r+0x2f4>
 80089ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008a48 <_dtoa_r+0x2e8>)
 80089d0:	4602      	mov	r2, r0
 80089d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80089d6:	e6da      	b.n	800878e <_dtoa_r+0x2e>
 80089d8:	2300      	movs	r3, #0
 80089da:	e7e3      	b.n	80089a4 <_dtoa_r+0x244>
 80089dc:	2300      	movs	r3, #0
 80089de:	e7d5      	b.n	800898c <_dtoa_r+0x22c>
 80089e0:	2401      	movs	r4, #1
 80089e2:	2300      	movs	r3, #0
 80089e4:	9307      	str	r3, [sp, #28]
 80089e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80089e8:	f04f 3bff 	mov.w	fp, #4294967295
 80089ec:	2200      	movs	r2, #0
 80089ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80089f2:	2312      	movs	r3, #18
 80089f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80089f6:	e7db      	b.n	80089b0 <_dtoa_r+0x250>
 80089f8:	2301      	movs	r3, #1
 80089fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fc:	e7f4      	b.n	80089e8 <_dtoa_r+0x288>
 80089fe:	f04f 0b01 	mov.w	fp, #1
 8008a02:	f8cd b00c 	str.w	fp, [sp, #12]
 8008a06:	465b      	mov	r3, fp
 8008a08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008a0c:	e7d0      	b.n	80089b0 <_dtoa_r+0x250>
 8008a0e:	3101      	adds	r1, #1
 8008a10:	0052      	lsls	r2, r2, #1
 8008a12:	e7d1      	b.n	80089b8 <_dtoa_r+0x258>
 8008a14:	f3af 8000 	nop.w
 8008a18:	636f4361 	.word	0x636f4361
 8008a1c:	3fd287a7 	.word	0x3fd287a7
 8008a20:	8b60c8b3 	.word	0x8b60c8b3
 8008a24:	3fc68a28 	.word	0x3fc68a28
 8008a28:	509f79fb 	.word	0x509f79fb
 8008a2c:	3fd34413 	.word	0x3fd34413
 8008a30:	0800d5fd 	.word	0x0800d5fd
 8008a34:	0800d614 	.word	0x0800d614
 8008a38:	7ff00000 	.word	0x7ff00000
 8008a3c:	0800d5cd 	.word	0x0800d5cd
 8008a40:	3ff80000 	.word	0x3ff80000
 8008a44:	0800d768 	.word	0x0800d768
 8008a48:	0800d66c 	.word	0x0800d66c
 8008a4c:	0800d5f9 	.word	0x0800d5f9
 8008a50:	0800d5cc 	.word	0x0800d5cc
 8008a54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008a58:	6018      	str	r0, [r3, #0]
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	2b0e      	cmp	r3, #14
 8008a5e:	f200 80a1 	bhi.w	8008ba4 <_dtoa_r+0x444>
 8008a62:	2c00      	cmp	r4, #0
 8008a64:	f000 809e 	beq.w	8008ba4 <_dtoa_r+0x444>
 8008a68:	2f00      	cmp	r7, #0
 8008a6a:	dd33      	ble.n	8008ad4 <_dtoa_r+0x374>
 8008a6c:	4b9c      	ldr	r3, [pc, #624]	@ (8008ce0 <_dtoa_r+0x580>)
 8008a6e:	f007 020f 	and.w	r2, r7, #15
 8008a72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a76:	ed93 7b00 	vldr	d7, [r3]
 8008a7a:	05f8      	lsls	r0, r7, #23
 8008a7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008a80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008a84:	d516      	bpl.n	8008ab4 <_dtoa_r+0x354>
 8008a86:	4b97      	ldr	r3, [pc, #604]	@ (8008ce4 <_dtoa_r+0x584>)
 8008a88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a90:	f7f7 fedc 	bl	800084c <__aeabi_ddiv>
 8008a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a98:	f004 040f 	and.w	r4, r4, #15
 8008a9c:	2603      	movs	r6, #3
 8008a9e:	4d91      	ldr	r5, [pc, #580]	@ (8008ce4 <_dtoa_r+0x584>)
 8008aa0:	b954      	cbnz	r4, 8008ab8 <_dtoa_r+0x358>
 8008aa2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aaa:	f7f7 fecf 	bl	800084c <__aeabi_ddiv>
 8008aae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ab2:	e028      	b.n	8008b06 <_dtoa_r+0x3a6>
 8008ab4:	2602      	movs	r6, #2
 8008ab6:	e7f2      	b.n	8008a9e <_dtoa_r+0x33e>
 8008ab8:	07e1      	lsls	r1, r4, #31
 8008aba:	d508      	bpl.n	8008ace <_dtoa_r+0x36e>
 8008abc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ac0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ac4:	f7f7 fd98 	bl	80005f8 <__aeabi_dmul>
 8008ac8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008acc:	3601      	adds	r6, #1
 8008ace:	1064      	asrs	r4, r4, #1
 8008ad0:	3508      	adds	r5, #8
 8008ad2:	e7e5      	b.n	8008aa0 <_dtoa_r+0x340>
 8008ad4:	f000 80af 	beq.w	8008c36 <_dtoa_r+0x4d6>
 8008ad8:	427c      	negs	r4, r7
 8008ada:	4b81      	ldr	r3, [pc, #516]	@ (8008ce0 <_dtoa_r+0x580>)
 8008adc:	4d81      	ldr	r5, [pc, #516]	@ (8008ce4 <_dtoa_r+0x584>)
 8008ade:	f004 020f 	and.w	r2, r4, #15
 8008ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008aee:	f7f7 fd83 	bl	80005f8 <__aeabi_dmul>
 8008af2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008af6:	1124      	asrs	r4, r4, #4
 8008af8:	2300      	movs	r3, #0
 8008afa:	2602      	movs	r6, #2
 8008afc:	2c00      	cmp	r4, #0
 8008afe:	f040 808f 	bne.w	8008c20 <_dtoa_r+0x4c0>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1d3      	bne.n	8008aae <_dtoa_r+0x34e>
 8008b06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b08:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 8094 	beq.w	8008c3a <_dtoa_r+0x4da>
 8008b12:	4b75      	ldr	r3, [pc, #468]	@ (8008ce8 <_dtoa_r+0x588>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	4620      	mov	r0, r4
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7f7 ffdf 	bl	8000adc <__aeabi_dcmplt>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f000 808b 	beq.w	8008c3a <_dtoa_r+0x4da>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f000 8087 	beq.w	8008c3a <_dtoa_r+0x4da>
 8008b2c:	f1bb 0f00 	cmp.w	fp, #0
 8008b30:	dd34      	ble.n	8008b9c <_dtoa_r+0x43c>
 8008b32:	4620      	mov	r0, r4
 8008b34:	4b6d      	ldr	r3, [pc, #436]	@ (8008cec <_dtoa_r+0x58c>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	4629      	mov	r1, r5
 8008b3a:	f7f7 fd5d 	bl	80005f8 <__aeabi_dmul>
 8008b3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b42:	f107 38ff 	add.w	r8, r7, #4294967295
 8008b46:	3601      	adds	r6, #1
 8008b48:	465c      	mov	r4, fp
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7f7 fcea 	bl	8000524 <__aeabi_i2d>
 8008b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b54:	f7f7 fd50 	bl	80005f8 <__aeabi_dmul>
 8008b58:	4b65      	ldr	r3, [pc, #404]	@ (8008cf0 <_dtoa_r+0x590>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f7f7 fb96 	bl	800028c <__adddf3>
 8008b60:	4605      	mov	r5, r0
 8008b62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008b66:	2c00      	cmp	r4, #0
 8008b68:	d16a      	bne.n	8008c40 <_dtoa_r+0x4e0>
 8008b6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b6e:	4b61      	ldr	r3, [pc, #388]	@ (8008cf4 <_dtoa_r+0x594>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	f7f7 fb89 	bl	8000288 <__aeabi_dsub>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b7e:	462a      	mov	r2, r5
 8008b80:	4633      	mov	r3, r6
 8008b82:	f7f7 ffc9 	bl	8000b18 <__aeabi_dcmpgt>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	f040 8298 	bne.w	80090bc <_dtoa_r+0x95c>
 8008b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b90:	462a      	mov	r2, r5
 8008b92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008b96:	f7f7 ffa1 	bl	8000adc <__aeabi_dcmplt>
 8008b9a:	bb38      	cbnz	r0, 8008bec <_dtoa_r+0x48c>
 8008b9c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008ba0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ba4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f2c0 8157 	blt.w	8008e5a <_dtoa_r+0x6fa>
 8008bac:	2f0e      	cmp	r7, #14
 8008bae:	f300 8154 	bgt.w	8008e5a <_dtoa_r+0x6fa>
 8008bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ce0 <_dtoa_r+0x580>)
 8008bb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008bb8:	ed93 7b00 	vldr	d7, [r3]
 8008bbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	ed8d 7b00 	vstr	d7, [sp]
 8008bc4:	f280 80e5 	bge.w	8008d92 <_dtoa_r+0x632>
 8008bc8:	9b03      	ldr	r3, [sp, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f300 80e1 	bgt.w	8008d92 <_dtoa_r+0x632>
 8008bd0:	d10c      	bne.n	8008bec <_dtoa_r+0x48c>
 8008bd2:	4b48      	ldr	r3, [pc, #288]	@ (8008cf4 <_dtoa_r+0x594>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	ec51 0b17 	vmov	r0, r1, d7
 8008bda:	f7f7 fd0d 	bl	80005f8 <__aeabi_dmul>
 8008bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008be2:	f7f7 ff8f 	bl	8000b04 <__aeabi_dcmpge>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f000 8266 	beq.w	80090b8 <_dtoa_r+0x958>
 8008bec:	2400      	movs	r4, #0
 8008bee:	4625      	mov	r5, r4
 8008bf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bf2:	4656      	mov	r6, sl
 8008bf4:	ea6f 0803 	mvn.w	r8, r3
 8008bf8:	2700      	movs	r7, #0
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	4648      	mov	r0, r9
 8008bfe:	f000 fcbf 	bl	8009580 <_Bfree>
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	f000 80bd 	beq.w	8008d82 <_dtoa_r+0x622>
 8008c08:	b12f      	cbz	r7, 8008c16 <_dtoa_r+0x4b6>
 8008c0a:	42af      	cmp	r7, r5
 8008c0c:	d003      	beq.n	8008c16 <_dtoa_r+0x4b6>
 8008c0e:	4639      	mov	r1, r7
 8008c10:	4648      	mov	r0, r9
 8008c12:	f000 fcb5 	bl	8009580 <_Bfree>
 8008c16:	4629      	mov	r1, r5
 8008c18:	4648      	mov	r0, r9
 8008c1a:	f000 fcb1 	bl	8009580 <_Bfree>
 8008c1e:	e0b0      	b.n	8008d82 <_dtoa_r+0x622>
 8008c20:	07e2      	lsls	r2, r4, #31
 8008c22:	d505      	bpl.n	8008c30 <_dtoa_r+0x4d0>
 8008c24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c28:	f7f7 fce6 	bl	80005f8 <__aeabi_dmul>
 8008c2c:	3601      	adds	r6, #1
 8008c2e:	2301      	movs	r3, #1
 8008c30:	1064      	asrs	r4, r4, #1
 8008c32:	3508      	adds	r5, #8
 8008c34:	e762      	b.n	8008afc <_dtoa_r+0x39c>
 8008c36:	2602      	movs	r6, #2
 8008c38:	e765      	b.n	8008b06 <_dtoa_r+0x3a6>
 8008c3a:	9c03      	ldr	r4, [sp, #12]
 8008c3c:	46b8      	mov	r8, r7
 8008c3e:	e784      	b.n	8008b4a <_dtoa_r+0x3ea>
 8008c40:	4b27      	ldr	r3, [pc, #156]	@ (8008ce0 <_dtoa_r+0x580>)
 8008c42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c4c:	4454      	add	r4, sl
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	d054      	beq.n	8008cfc <_dtoa_r+0x59c>
 8008c52:	4929      	ldr	r1, [pc, #164]	@ (8008cf8 <_dtoa_r+0x598>)
 8008c54:	2000      	movs	r0, #0
 8008c56:	f7f7 fdf9 	bl	800084c <__aeabi_ddiv>
 8008c5a:	4633      	mov	r3, r6
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	f7f7 fb13 	bl	8000288 <__aeabi_dsub>
 8008c62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008c66:	4656      	mov	r6, sl
 8008c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c6c:	f7f7 ff74 	bl	8000b58 <__aeabi_d2iz>
 8008c70:	4605      	mov	r5, r0
 8008c72:	f7f7 fc57 	bl	8000524 <__aeabi_i2d>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c7e:	f7f7 fb03 	bl	8000288 <__aeabi_dsub>
 8008c82:	3530      	adds	r5, #48	@ 0x30
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008c8c:	f806 5b01 	strb.w	r5, [r6], #1
 8008c90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008c94:	f7f7 ff22 	bl	8000adc <__aeabi_dcmplt>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d172      	bne.n	8008d82 <_dtoa_r+0x622>
 8008c9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ca0:	4911      	ldr	r1, [pc, #68]	@ (8008ce8 <_dtoa_r+0x588>)
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	f7f7 faf0 	bl	8000288 <__aeabi_dsub>
 8008ca8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008cac:	f7f7 ff16 	bl	8000adc <__aeabi_dcmplt>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f040 80b4 	bne.w	8008e1e <_dtoa_r+0x6be>
 8008cb6:	42a6      	cmp	r6, r4
 8008cb8:	f43f af70 	beq.w	8008b9c <_dtoa_r+0x43c>
 8008cbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8008cec <_dtoa_r+0x58c>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	4b08      	ldr	r3, [pc, #32]	@ (8008cec <_dtoa_r+0x58c>)
 8008cca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008cce:	2200      	movs	r2, #0
 8008cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cd4:	f7f7 fc90 	bl	80005f8 <__aeabi_dmul>
 8008cd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cdc:	e7c4      	b.n	8008c68 <_dtoa_r+0x508>
 8008cde:	bf00      	nop
 8008ce0:	0800d768 	.word	0x0800d768
 8008ce4:	0800d740 	.word	0x0800d740
 8008ce8:	3ff00000 	.word	0x3ff00000
 8008cec:	40240000 	.word	0x40240000
 8008cf0:	401c0000 	.word	0x401c0000
 8008cf4:	40140000 	.word	0x40140000
 8008cf8:	3fe00000 	.word	0x3fe00000
 8008cfc:	4631      	mov	r1, r6
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f7f7 fc7a 	bl	80005f8 <__aeabi_dmul>
 8008d04:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008d08:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008d0a:	4656      	mov	r6, sl
 8008d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d10:	f7f7 ff22 	bl	8000b58 <__aeabi_d2iz>
 8008d14:	4605      	mov	r5, r0
 8008d16:	f7f7 fc05 	bl	8000524 <__aeabi_i2d>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d22:	f7f7 fab1 	bl	8000288 <__aeabi_dsub>
 8008d26:	3530      	adds	r5, #48	@ 0x30
 8008d28:	f806 5b01 	strb.w	r5, [r6], #1
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	42a6      	cmp	r6, r4
 8008d32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d36:	f04f 0200 	mov.w	r2, #0
 8008d3a:	d124      	bne.n	8008d86 <_dtoa_r+0x626>
 8008d3c:	4baf      	ldr	r3, [pc, #700]	@ (8008ffc <_dtoa_r+0x89c>)
 8008d3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008d42:	f7f7 faa3 	bl	800028c <__adddf3>
 8008d46:	4602      	mov	r2, r0
 8008d48:	460b      	mov	r3, r1
 8008d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d4e:	f7f7 fee3 	bl	8000b18 <__aeabi_dcmpgt>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d163      	bne.n	8008e1e <_dtoa_r+0x6be>
 8008d56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008d5a:	49a8      	ldr	r1, [pc, #672]	@ (8008ffc <_dtoa_r+0x89c>)
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	f7f7 fa93 	bl	8000288 <__aeabi_dsub>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d6a:	f7f7 feb7 	bl	8000adc <__aeabi_dcmplt>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	f43f af14 	beq.w	8008b9c <_dtoa_r+0x43c>
 8008d74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008d76:	1e73      	subs	r3, r6, #1
 8008d78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d7e:	2b30      	cmp	r3, #48	@ 0x30
 8008d80:	d0f8      	beq.n	8008d74 <_dtoa_r+0x614>
 8008d82:	4647      	mov	r7, r8
 8008d84:	e03b      	b.n	8008dfe <_dtoa_r+0x69e>
 8008d86:	4b9e      	ldr	r3, [pc, #632]	@ (8009000 <_dtoa_r+0x8a0>)
 8008d88:	f7f7 fc36 	bl	80005f8 <__aeabi_dmul>
 8008d8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d90:	e7bc      	b.n	8008d0c <_dtoa_r+0x5ac>
 8008d92:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008d96:	4656      	mov	r6, sl
 8008d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f7f7 fd54 	bl	800084c <__aeabi_ddiv>
 8008da4:	f7f7 fed8 	bl	8000b58 <__aeabi_d2iz>
 8008da8:	4680      	mov	r8, r0
 8008daa:	f7f7 fbbb 	bl	8000524 <__aeabi_i2d>
 8008dae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008db2:	f7f7 fc21 	bl	80005f8 <__aeabi_dmul>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008dc2:	f7f7 fa61 	bl	8000288 <__aeabi_dsub>
 8008dc6:	f806 4b01 	strb.w	r4, [r6], #1
 8008dca:	9d03      	ldr	r5, [sp, #12]
 8008dcc:	eba6 040a 	sub.w	r4, r6, sl
 8008dd0:	42a5      	cmp	r5, r4
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	d133      	bne.n	8008e40 <_dtoa_r+0x6e0>
 8008dd8:	f7f7 fa58 	bl	800028c <__adddf3>
 8008ddc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008de0:	4604      	mov	r4, r0
 8008de2:	460d      	mov	r5, r1
 8008de4:	f7f7 fe98 	bl	8000b18 <__aeabi_dcmpgt>
 8008de8:	b9c0      	cbnz	r0, 8008e1c <_dtoa_r+0x6bc>
 8008dea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7f7 fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 8008df6:	b110      	cbz	r0, 8008dfe <_dtoa_r+0x69e>
 8008df8:	f018 0f01 	tst.w	r8, #1
 8008dfc:	d10e      	bne.n	8008e1c <_dtoa_r+0x6bc>
 8008dfe:	9902      	ldr	r1, [sp, #8]
 8008e00:	4648      	mov	r0, r9
 8008e02:	f000 fbbd 	bl	8009580 <_Bfree>
 8008e06:	2300      	movs	r3, #0
 8008e08:	7033      	strb	r3, [r6, #0]
 8008e0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e0c:	3701      	adds	r7, #1
 8008e0e:	601f      	str	r7, [r3, #0]
 8008e10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 824b 	beq.w	80092ae <_dtoa_r+0xb4e>
 8008e18:	601e      	str	r6, [r3, #0]
 8008e1a:	e248      	b.n	80092ae <_dtoa_r+0xb4e>
 8008e1c:	46b8      	mov	r8, r7
 8008e1e:	4633      	mov	r3, r6
 8008e20:	461e      	mov	r6, r3
 8008e22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e26:	2a39      	cmp	r2, #57	@ 0x39
 8008e28:	d106      	bne.n	8008e38 <_dtoa_r+0x6d8>
 8008e2a:	459a      	cmp	sl, r3
 8008e2c:	d1f8      	bne.n	8008e20 <_dtoa_r+0x6c0>
 8008e2e:	2230      	movs	r2, #48	@ 0x30
 8008e30:	f108 0801 	add.w	r8, r8, #1
 8008e34:	f88a 2000 	strb.w	r2, [sl]
 8008e38:	781a      	ldrb	r2, [r3, #0]
 8008e3a:	3201      	adds	r2, #1
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e7a0      	b.n	8008d82 <_dtoa_r+0x622>
 8008e40:	4b6f      	ldr	r3, [pc, #444]	@ (8009000 <_dtoa_r+0x8a0>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	f7f7 fbd8 	bl	80005f8 <__aeabi_dmul>
 8008e48:	2200      	movs	r2, #0
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	460d      	mov	r5, r1
 8008e50:	f7f7 fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d09f      	beq.n	8008d98 <_dtoa_r+0x638>
 8008e58:	e7d1      	b.n	8008dfe <_dtoa_r+0x69e>
 8008e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e5c:	2a00      	cmp	r2, #0
 8008e5e:	f000 80ea 	beq.w	8009036 <_dtoa_r+0x8d6>
 8008e62:	9a07      	ldr	r2, [sp, #28]
 8008e64:	2a01      	cmp	r2, #1
 8008e66:	f300 80cd 	bgt.w	8009004 <_dtoa_r+0x8a4>
 8008e6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e6c:	2a00      	cmp	r2, #0
 8008e6e:	f000 80c1 	beq.w	8008ff4 <_dtoa_r+0x894>
 8008e72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008e76:	9c08      	ldr	r4, [sp, #32]
 8008e78:	9e00      	ldr	r6, [sp, #0]
 8008e7a:	9a00      	ldr	r2, [sp, #0]
 8008e7c:	441a      	add	r2, r3
 8008e7e:	9200      	str	r2, [sp, #0]
 8008e80:	9a06      	ldr	r2, [sp, #24]
 8008e82:	2101      	movs	r1, #1
 8008e84:	441a      	add	r2, r3
 8008e86:	4648      	mov	r0, r9
 8008e88:	9206      	str	r2, [sp, #24]
 8008e8a:	f000 fc2d 	bl	80096e8 <__i2b>
 8008e8e:	4605      	mov	r5, r0
 8008e90:	b166      	cbz	r6, 8008eac <_dtoa_r+0x74c>
 8008e92:	9b06      	ldr	r3, [sp, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	dd09      	ble.n	8008eac <_dtoa_r+0x74c>
 8008e98:	42b3      	cmp	r3, r6
 8008e9a:	9a00      	ldr	r2, [sp, #0]
 8008e9c:	bfa8      	it	ge
 8008e9e:	4633      	movge	r3, r6
 8008ea0:	1ad2      	subs	r2, r2, r3
 8008ea2:	9200      	str	r2, [sp, #0]
 8008ea4:	9a06      	ldr	r2, [sp, #24]
 8008ea6:	1af6      	subs	r6, r6, r3
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	9306      	str	r3, [sp, #24]
 8008eac:	9b08      	ldr	r3, [sp, #32]
 8008eae:	b30b      	cbz	r3, 8008ef4 <_dtoa_r+0x794>
 8008eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 80c6 	beq.w	8009044 <_dtoa_r+0x8e4>
 8008eb8:	2c00      	cmp	r4, #0
 8008eba:	f000 80c0 	beq.w	800903e <_dtoa_r+0x8de>
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4648      	mov	r0, r9
 8008ec4:	f000 fcc8 	bl	8009858 <__pow5mult>
 8008ec8:	9a02      	ldr	r2, [sp, #8]
 8008eca:	4601      	mov	r1, r0
 8008ecc:	4605      	mov	r5, r0
 8008ece:	4648      	mov	r0, r9
 8008ed0:	f000 fc20 	bl	8009714 <__multiply>
 8008ed4:	9902      	ldr	r1, [sp, #8]
 8008ed6:	4680      	mov	r8, r0
 8008ed8:	4648      	mov	r0, r9
 8008eda:	f000 fb51 	bl	8009580 <_Bfree>
 8008ede:	9b08      	ldr	r3, [sp, #32]
 8008ee0:	1b1b      	subs	r3, r3, r4
 8008ee2:	9308      	str	r3, [sp, #32]
 8008ee4:	f000 80b1 	beq.w	800904a <_dtoa_r+0x8ea>
 8008ee8:	9a08      	ldr	r2, [sp, #32]
 8008eea:	4641      	mov	r1, r8
 8008eec:	4648      	mov	r0, r9
 8008eee:	f000 fcb3 	bl	8009858 <__pow5mult>
 8008ef2:	9002      	str	r0, [sp, #8]
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	4648      	mov	r0, r9
 8008ef8:	f000 fbf6 	bl	80096e8 <__i2b>
 8008efc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008efe:	4604      	mov	r4, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 81d8 	beq.w	80092b6 <_dtoa_r+0xb56>
 8008f06:	461a      	mov	r2, r3
 8008f08:	4601      	mov	r1, r0
 8008f0a:	4648      	mov	r0, r9
 8008f0c:	f000 fca4 	bl	8009858 <__pow5mult>
 8008f10:	9b07      	ldr	r3, [sp, #28]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	4604      	mov	r4, r0
 8008f16:	f300 809f 	bgt.w	8009058 <_dtoa_r+0x8f8>
 8008f1a:	9b04      	ldr	r3, [sp, #16]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 8097 	bne.w	8009050 <_dtoa_r+0x8f0>
 8008f22:	9b05      	ldr	r3, [sp, #20]
 8008f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f040 8093 	bne.w	8009054 <_dtoa_r+0x8f4>
 8008f2e:	9b05      	ldr	r3, [sp, #20]
 8008f30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f34:	0d1b      	lsrs	r3, r3, #20
 8008f36:	051b      	lsls	r3, r3, #20
 8008f38:	b133      	cbz	r3, 8008f48 <_dtoa_r+0x7e8>
 8008f3a:	9b00      	ldr	r3, [sp, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	9b06      	ldr	r3, [sp, #24]
 8008f42:	3301      	adds	r3, #1
 8008f44:	9306      	str	r3, [sp, #24]
 8008f46:	2301      	movs	r3, #1
 8008f48:	9308      	str	r3, [sp, #32]
 8008f4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 81b8 	beq.w	80092c2 <_dtoa_r+0xb62>
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f58:	6918      	ldr	r0, [r3, #16]
 8008f5a:	f000 fb79 	bl	8009650 <__hi0bits>
 8008f5e:	f1c0 0020 	rsb	r0, r0, #32
 8008f62:	9b06      	ldr	r3, [sp, #24]
 8008f64:	4418      	add	r0, r3
 8008f66:	f010 001f 	ands.w	r0, r0, #31
 8008f6a:	f000 8082 	beq.w	8009072 <_dtoa_r+0x912>
 8008f6e:	f1c0 0320 	rsb	r3, r0, #32
 8008f72:	2b04      	cmp	r3, #4
 8008f74:	dd73      	ble.n	800905e <_dtoa_r+0x8fe>
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	f1c0 001c 	rsb	r0, r0, #28
 8008f7c:	4403      	add	r3, r0
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	9b06      	ldr	r3, [sp, #24]
 8008f82:	4403      	add	r3, r0
 8008f84:	4406      	add	r6, r0
 8008f86:	9306      	str	r3, [sp, #24]
 8008f88:	9b00      	ldr	r3, [sp, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dd05      	ble.n	8008f9a <_dtoa_r+0x83a>
 8008f8e:	9902      	ldr	r1, [sp, #8]
 8008f90:	461a      	mov	r2, r3
 8008f92:	4648      	mov	r0, r9
 8008f94:	f000 fcba 	bl	800990c <__lshift>
 8008f98:	9002      	str	r0, [sp, #8]
 8008f9a:	9b06      	ldr	r3, [sp, #24]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	dd05      	ble.n	8008fac <_dtoa_r+0x84c>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	4648      	mov	r0, r9
 8008fa6:	f000 fcb1 	bl	800990c <__lshift>
 8008faa:	4604      	mov	r4, r0
 8008fac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d061      	beq.n	8009076 <_dtoa_r+0x916>
 8008fb2:	9802      	ldr	r0, [sp, #8]
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	f000 fd15 	bl	80099e4 <__mcmp>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	da5b      	bge.n	8009076 <_dtoa_r+0x916>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	9902      	ldr	r1, [sp, #8]
 8008fc2:	220a      	movs	r2, #10
 8008fc4:	4648      	mov	r0, r9
 8008fc6:	f000 fafd 	bl	80095c4 <__multadd>
 8008fca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fcc:	9002      	str	r0, [sp, #8]
 8008fce:	f107 38ff 	add.w	r8, r7, #4294967295
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 8177 	beq.w	80092c6 <_dtoa_r+0xb66>
 8008fd8:	4629      	mov	r1, r5
 8008fda:	2300      	movs	r3, #0
 8008fdc:	220a      	movs	r2, #10
 8008fde:	4648      	mov	r0, r9
 8008fe0:	f000 faf0 	bl	80095c4 <__multadd>
 8008fe4:	f1bb 0f00 	cmp.w	fp, #0
 8008fe8:	4605      	mov	r5, r0
 8008fea:	dc6f      	bgt.n	80090cc <_dtoa_r+0x96c>
 8008fec:	9b07      	ldr	r3, [sp, #28]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	dc49      	bgt.n	8009086 <_dtoa_r+0x926>
 8008ff2:	e06b      	b.n	80090cc <_dtoa_r+0x96c>
 8008ff4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ff6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008ffa:	e73c      	b.n	8008e76 <_dtoa_r+0x716>
 8008ffc:	3fe00000 	.word	0x3fe00000
 8009000:	40240000 	.word	0x40240000
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	1e5c      	subs	r4, r3, #1
 8009008:	9b08      	ldr	r3, [sp, #32]
 800900a:	42a3      	cmp	r3, r4
 800900c:	db09      	blt.n	8009022 <_dtoa_r+0x8c2>
 800900e:	1b1c      	subs	r4, r3, r4
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	f6bf af30 	bge.w	8008e78 <_dtoa_r+0x718>
 8009018:	9b00      	ldr	r3, [sp, #0]
 800901a:	9a03      	ldr	r2, [sp, #12]
 800901c:	1a9e      	subs	r6, r3, r2
 800901e:	2300      	movs	r3, #0
 8009020:	e72b      	b.n	8008e7a <_dtoa_r+0x71a>
 8009022:	9b08      	ldr	r3, [sp, #32]
 8009024:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009026:	9408      	str	r4, [sp, #32]
 8009028:	1ae3      	subs	r3, r4, r3
 800902a:	441a      	add	r2, r3
 800902c:	9e00      	ldr	r6, [sp, #0]
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	920d      	str	r2, [sp, #52]	@ 0x34
 8009032:	2400      	movs	r4, #0
 8009034:	e721      	b.n	8008e7a <_dtoa_r+0x71a>
 8009036:	9c08      	ldr	r4, [sp, #32]
 8009038:	9e00      	ldr	r6, [sp, #0]
 800903a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800903c:	e728      	b.n	8008e90 <_dtoa_r+0x730>
 800903e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009042:	e751      	b.n	8008ee8 <_dtoa_r+0x788>
 8009044:	9a08      	ldr	r2, [sp, #32]
 8009046:	9902      	ldr	r1, [sp, #8]
 8009048:	e750      	b.n	8008eec <_dtoa_r+0x78c>
 800904a:	f8cd 8008 	str.w	r8, [sp, #8]
 800904e:	e751      	b.n	8008ef4 <_dtoa_r+0x794>
 8009050:	2300      	movs	r3, #0
 8009052:	e779      	b.n	8008f48 <_dtoa_r+0x7e8>
 8009054:	9b04      	ldr	r3, [sp, #16]
 8009056:	e777      	b.n	8008f48 <_dtoa_r+0x7e8>
 8009058:	2300      	movs	r3, #0
 800905a:	9308      	str	r3, [sp, #32]
 800905c:	e779      	b.n	8008f52 <_dtoa_r+0x7f2>
 800905e:	d093      	beq.n	8008f88 <_dtoa_r+0x828>
 8009060:	9a00      	ldr	r2, [sp, #0]
 8009062:	331c      	adds	r3, #28
 8009064:	441a      	add	r2, r3
 8009066:	9200      	str	r2, [sp, #0]
 8009068:	9a06      	ldr	r2, [sp, #24]
 800906a:	441a      	add	r2, r3
 800906c:	441e      	add	r6, r3
 800906e:	9206      	str	r2, [sp, #24]
 8009070:	e78a      	b.n	8008f88 <_dtoa_r+0x828>
 8009072:	4603      	mov	r3, r0
 8009074:	e7f4      	b.n	8009060 <_dtoa_r+0x900>
 8009076:	9b03      	ldr	r3, [sp, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	46b8      	mov	r8, r7
 800907c:	dc20      	bgt.n	80090c0 <_dtoa_r+0x960>
 800907e:	469b      	mov	fp, r3
 8009080:	9b07      	ldr	r3, [sp, #28]
 8009082:	2b02      	cmp	r3, #2
 8009084:	dd1e      	ble.n	80090c4 <_dtoa_r+0x964>
 8009086:	f1bb 0f00 	cmp.w	fp, #0
 800908a:	f47f adb1 	bne.w	8008bf0 <_dtoa_r+0x490>
 800908e:	4621      	mov	r1, r4
 8009090:	465b      	mov	r3, fp
 8009092:	2205      	movs	r2, #5
 8009094:	4648      	mov	r0, r9
 8009096:	f000 fa95 	bl	80095c4 <__multadd>
 800909a:	4601      	mov	r1, r0
 800909c:	4604      	mov	r4, r0
 800909e:	9802      	ldr	r0, [sp, #8]
 80090a0:	f000 fca0 	bl	80099e4 <__mcmp>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	f77f ada3 	ble.w	8008bf0 <_dtoa_r+0x490>
 80090aa:	4656      	mov	r6, sl
 80090ac:	2331      	movs	r3, #49	@ 0x31
 80090ae:	f806 3b01 	strb.w	r3, [r6], #1
 80090b2:	f108 0801 	add.w	r8, r8, #1
 80090b6:	e59f      	b.n	8008bf8 <_dtoa_r+0x498>
 80090b8:	9c03      	ldr	r4, [sp, #12]
 80090ba:	46b8      	mov	r8, r7
 80090bc:	4625      	mov	r5, r4
 80090be:	e7f4      	b.n	80090aa <_dtoa_r+0x94a>
 80090c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80090c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 8101 	beq.w	80092ce <_dtoa_r+0xb6e>
 80090cc:	2e00      	cmp	r6, #0
 80090ce:	dd05      	ble.n	80090dc <_dtoa_r+0x97c>
 80090d0:	4629      	mov	r1, r5
 80090d2:	4632      	mov	r2, r6
 80090d4:	4648      	mov	r0, r9
 80090d6:	f000 fc19 	bl	800990c <__lshift>
 80090da:	4605      	mov	r5, r0
 80090dc:	9b08      	ldr	r3, [sp, #32]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d05c      	beq.n	800919c <_dtoa_r+0xa3c>
 80090e2:	6869      	ldr	r1, [r5, #4]
 80090e4:	4648      	mov	r0, r9
 80090e6:	f000 fa0b 	bl	8009500 <_Balloc>
 80090ea:	4606      	mov	r6, r0
 80090ec:	b928      	cbnz	r0, 80090fa <_dtoa_r+0x99a>
 80090ee:	4b82      	ldr	r3, [pc, #520]	@ (80092f8 <_dtoa_r+0xb98>)
 80090f0:	4602      	mov	r2, r0
 80090f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80090f6:	f7ff bb4a 	b.w	800878e <_dtoa_r+0x2e>
 80090fa:	692a      	ldr	r2, [r5, #16]
 80090fc:	3202      	adds	r2, #2
 80090fe:	0092      	lsls	r2, r2, #2
 8009100:	f105 010c 	add.w	r1, r5, #12
 8009104:	300c      	adds	r0, #12
 8009106:	f001 f969 	bl	800a3dc <memcpy>
 800910a:	2201      	movs	r2, #1
 800910c:	4631      	mov	r1, r6
 800910e:	4648      	mov	r0, r9
 8009110:	f000 fbfc 	bl	800990c <__lshift>
 8009114:	f10a 0301 	add.w	r3, sl, #1
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	eb0a 030b 	add.w	r3, sl, fp
 800911e:	9308      	str	r3, [sp, #32]
 8009120:	9b04      	ldr	r3, [sp, #16]
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	462f      	mov	r7, r5
 8009128:	9306      	str	r3, [sp, #24]
 800912a:	4605      	mov	r5, r0
 800912c:	9b00      	ldr	r3, [sp, #0]
 800912e:	9802      	ldr	r0, [sp, #8]
 8009130:	4621      	mov	r1, r4
 8009132:	f103 3bff 	add.w	fp, r3, #4294967295
 8009136:	f7ff fa8a 	bl	800864e <quorem>
 800913a:	4603      	mov	r3, r0
 800913c:	3330      	adds	r3, #48	@ 0x30
 800913e:	9003      	str	r0, [sp, #12]
 8009140:	4639      	mov	r1, r7
 8009142:	9802      	ldr	r0, [sp, #8]
 8009144:	9309      	str	r3, [sp, #36]	@ 0x24
 8009146:	f000 fc4d 	bl	80099e4 <__mcmp>
 800914a:	462a      	mov	r2, r5
 800914c:	9004      	str	r0, [sp, #16]
 800914e:	4621      	mov	r1, r4
 8009150:	4648      	mov	r0, r9
 8009152:	f000 fc63 	bl	8009a1c <__mdiff>
 8009156:	68c2      	ldr	r2, [r0, #12]
 8009158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915a:	4606      	mov	r6, r0
 800915c:	bb02      	cbnz	r2, 80091a0 <_dtoa_r+0xa40>
 800915e:	4601      	mov	r1, r0
 8009160:	9802      	ldr	r0, [sp, #8]
 8009162:	f000 fc3f 	bl	80099e4 <__mcmp>
 8009166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009168:	4602      	mov	r2, r0
 800916a:	4631      	mov	r1, r6
 800916c:	4648      	mov	r0, r9
 800916e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009170:	9309      	str	r3, [sp, #36]	@ 0x24
 8009172:	f000 fa05 	bl	8009580 <_Bfree>
 8009176:	9b07      	ldr	r3, [sp, #28]
 8009178:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800917a:	9e00      	ldr	r6, [sp, #0]
 800917c:	ea42 0103 	orr.w	r1, r2, r3
 8009180:	9b06      	ldr	r3, [sp, #24]
 8009182:	4319      	orrs	r1, r3
 8009184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009186:	d10d      	bne.n	80091a4 <_dtoa_r+0xa44>
 8009188:	2b39      	cmp	r3, #57	@ 0x39
 800918a:	d027      	beq.n	80091dc <_dtoa_r+0xa7c>
 800918c:	9a04      	ldr	r2, [sp, #16]
 800918e:	2a00      	cmp	r2, #0
 8009190:	dd01      	ble.n	8009196 <_dtoa_r+0xa36>
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	3331      	adds	r3, #49	@ 0x31
 8009196:	f88b 3000 	strb.w	r3, [fp]
 800919a:	e52e      	b.n	8008bfa <_dtoa_r+0x49a>
 800919c:	4628      	mov	r0, r5
 800919e:	e7b9      	b.n	8009114 <_dtoa_r+0x9b4>
 80091a0:	2201      	movs	r2, #1
 80091a2:	e7e2      	b.n	800916a <_dtoa_r+0xa0a>
 80091a4:	9904      	ldr	r1, [sp, #16]
 80091a6:	2900      	cmp	r1, #0
 80091a8:	db04      	blt.n	80091b4 <_dtoa_r+0xa54>
 80091aa:	9807      	ldr	r0, [sp, #28]
 80091ac:	4301      	orrs	r1, r0
 80091ae:	9806      	ldr	r0, [sp, #24]
 80091b0:	4301      	orrs	r1, r0
 80091b2:	d120      	bne.n	80091f6 <_dtoa_r+0xa96>
 80091b4:	2a00      	cmp	r2, #0
 80091b6:	ddee      	ble.n	8009196 <_dtoa_r+0xa36>
 80091b8:	9902      	ldr	r1, [sp, #8]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	2201      	movs	r2, #1
 80091be:	4648      	mov	r0, r9
 80091c0:	f000 fba4 	bl	800990c <__lshift>
 80091c4:	4621      	mov	r1, r4
 80091c6:	9002      	str	r0, [sp, #8]
 80091c8:	f000 fc0c 	bl	80099e4 <__mcmp>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	9b00      	ldr	r3, [sp, #0]
 80091d0:	dc02      	bgt.n	80091d8 <_dtoa_r+0xa78>
 80091d2:	d1e0      	bne.n	8009196 <_dtoa_r+0xa36>
 80091d4:	07da      	lsls	r2, r3, #31
 80091d6:	d5de      	bpl.n	8009196 <_dtoa_r+0xa36>
 80091d8:	2b39      	cmp	r3, #57	@ 0x39
 80091da:	d1da      	bne.n	8009192 <_dtoa_r+0xa32>
 80091dc:	2339      	movs	r3, #57	@ 0x39
 80091de:	f88b 3000 	strb.w	r3, [fp]
 80091e2:	4633      	mov	r3, r6
 80091e4:	461e      	mov	r6, r3
 80091e6:	3b01      	subs	r3, #1
 80091e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80091ec:	2a39      	cmp	r2, #57	@ 0x39
 80091ee:	d04e      	beq.n	800928e <_dtoa_r+0xb2e>
 80091f0:	3201      	adds	r2, #1
 80091f2:	701a      	strb	r2, [r3, #0]
 80091f4:	e501      	b.n	8008bfa <_dtoa_r+0x49a>
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	dd03      	ble.n	8009202 <_dtoa_r+0xaa2>
 80091fa:	2b39      	cmp	r3, #57	@ 0x39
 80091fc:	d0ee      	beq.n	80091dc <_dtoa_r+0xa7c>
 80091fe:	3301      	adds	r3, #1
 8009200:	e7c9      	b.n	8009196 <_dtoa_r+0xa36>
 8009202:	9a00      	ldr	r2, [sp, #0]
 8009204:	9908      	ldr	r1, [sp, #32]
 8009206:	f802 3c01 	strb.w	r3, [r2, #-1]
 800920a:	428a      	cmp	r2, r1
 800920c:	d028      	beq.n	8009260 <_dtoa_r+0xb00>
 800920e:	9902      	ldr	r1, [sp, #8]
 8009210:	2300      	movs	r3, #0
 8009212:	220a      	movs	r2, #10
 8009214:	4648      	mov	r0, r9
 8009216:	f000 f9d5 	bl	80095c4 <__multadd>
 800921a:	42af      	cmp	r7, r5
 800921c:	9002      	str	r0, [sp, #8]
 800921e:	f04f 0300 	mov.w	r3, #0
 8009222:	f04f 020a 	mov.w	r2, #10
 8009226:	4639      	mov	r1, r7
 8009228:	4648      	mov	r0, r9
 800922a:	d107      	bne.n	800923c <_dtoa_r+0xadc>
 800922c:	f000 f9ca 	bl	80095c4 <__multadd>
 8009230:	4607      	mov	r7, r0
 8009232:	4605      	mov	r5, r0
 8009234:	9b00      	ldr	r3, [sp, #0]
 8009236:	3301      	adds	r3, #1
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	e777      	b.n	800912c <_dtoa_r+0x9cc>
 800923c:	f000 f9c2 	bl	80095c4 <__multadd>
 8009240:	4629      	mov	r1, r5
 8009242:	4607      	mov	r7, r0
 8009244:	2300      	movs	r3, #0
 8009246:	220a      	movs	r2, #10
 8009248:	4648      	mov	r0, r9
 800924a:	f000 f9bb 	bl	80095c4 <__multadd>
 800924e:	4605      	mov	r5, r0
 8009250:	e7f0      	b.n	8009234 <_dtoa_r+0xad4>
 8009252:	f1bb 0f00 	cmp.w	fp, #0
 8009256:	bfcc      	ite	gt
 8009258:	465e      	movgt	r6, fp
 800925a:	2601      	movle	r6, #1
 800925c:	4456      	add	r6, sl
 800925e:	2700      	movs	r7, #0
 8009260:	9902      	ldr	r1, [sp, #8]
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	2201      	movs	r2, #1
 8009266:	4648      	mov	r0, r9
 8009268:	f000 fb50 	bl	800990c <__lshift>
 800926c:	4621      	mov	r1, r4
 800926e:	9002      	str	r0, [sp, #8]
 8009270:	f000 fbb8 	bl	80099e4 <__mcmp>
 8009274:	2800      	cmp	r0, #0
 8009276:	dcb4      	bgt.n	80091e2 <_dtoa_r+0xa82>
 8009278:	d102      	bne.n	8009280 <_dtoa_r+0xb20>
 800927a:	9b00      	ldr	r3, [sp, #0]
 800927c:	07db      	lsls	r3, r3, #31
 800927e:	d4b0      	bmi.n	80091e2 <_dtoa_r+0xa82>
 8009280:	4633      	mov	r3, r6
 8009282:	461e      	mov	r6, r3
 8009284:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009288:	2a30      	cmp	r2, #48	@ 0x30
 800928a:	d0fa      	beq.n	8009282 <_dtoa_r+0xb22>
 800928c:	e4b5      	b.n	8008bfa <_dtoa_r+0x49a>
 800928e:	459a      	cmp	sl, r3
 8009290:	d1a8      	bne.n	80091e4 <_dtoa_r+0xa84>
 8009292:	2331      	movs	r3, #49	@ 0x31
 8009294:	f108 0801 	add.w	r8, r8, #1
 8009298:	f88a 3000 	strb.w	r3, [sl]
 800929c:	e4ad      	b.n	8008bfa <_dtoa_r+0x49a>
 800929e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80092a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80092fc <_dtoa_r+0xb9c>
 80092a4:	b11b      	cbz	r3, 80092ae <_dtoa_r+0xb4e>
 80092a6:	f10a 0308 	add.w	r3, sl, #8
 80092aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80092ac:	6013      	str	r3, [r2, #0]
 80092ae:	4650      	mov	r0, sl
 80092b0:	b017      	add	sp, #92	@ 0x5c
 80092b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b6:	9b07      	ldr	r3, [sp, #28]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	f77f ae2e 	ble.w	8008f1a <_dtoa_r+0x7ba>
 80092be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092c0:	9308      	str	r3, [sp, #32]
 80092c2:	2001      	movs	r0, #1
 80092c4:	e64d      	b.n	8008f62 <_dtoa_r+0x802>
 80092c6:	f1bb 0f00 	cmp.w	fp, #0
 80092ca:	f77f aed9 	ble.w	8009080 <_dtoa_r+0x920>
 80092ce:	4656      	mov	r6, sl
 80092d0:	9802      	ldr	r0, [sp, #8]
 80092d2:	4621      	mov	r1, r4
 80092d4:	f7ff f9bb 	bl	800864e <quorem>
 80092d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80092dc:	f806 3b01 	strb.w	r3, [r6], #1
 80092e0:	eba6 020a 	sub.w	r2, r6, sl
 80092e4:	4593      	cmp	fp, r2
 80092e6:	ddb4      	ble.n	8009252 <_dtoa_r+0xaf2>
 80092e8:	9902      	ldr	r1, [sp, #8]
 80092ea:	2300      	movs	r3, #0
 80092ec:	220a      	movs	r2, #10
 80092ee:	4648      	mov	r0, r9
 80092f0:	f000 f968 	bl	80095c4 <__multadd>
 80092f4:	9002      	str	r0, [sp, #8]
 80092f6:	e7eb      	b.n	80092d0 <_dtoa_r+0xb70>
 80092f8:	0800d66c 	.word	0x0800d66c
 80092fc:	0800d5f0 	.word	0x0800d5f0

08009300 <_free_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	4605      	mov	r5, r0
 8009304:	2900      	cmp	r1, #0
 8009306:	d041      	beq.n	800938c <_free_r+0x8c>
 8009308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800930c:	1f0c      	subs	r4, r1, #4
 800930e:	2b00      	cmp	r3, #0
 8009310:	bfb8      	it	lt
 8009312:	18e4      	addlt	r4, r4, r3
 8009314:	f000 f8e8 	bl	80094e8 <__malloc_lock>
 8009318:	4a1d      	ldr	r2, [pc, #116]	@ (8009390 <_free_r+0x90>)
 800931a:	6813      	ldr	r3, [r2, #0]
 800931c:	b933      	cbnz	r3, 800932c <_free_r+0x2c>
 800931e:	6063      	str	r3, [r4, #4]
 8009320:	6014      	str	r4, [r2, #0]
 8009322:	4628      	mov	r0, r5
 8009324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009328:	f000 b8e4 	b.w	80094f4 <__malloc_unlock>
 800932c:	42a3      	cmp	r3, r4
 800932e:	d908      	bls.n	8009342 <_free_r+0x42>
 8009330:	6820      	ldr	r0, [r4, #0]
 8009332:	1821      	adds	r1, r4, r0
 8009334:	428b      	cmp	r3, r1
 8009336:	bf01      	itttt	eq
 8009338:	6819      	ldreq	r1, [r3, #0]
 800933a:	685b      	ldreq	r3, [r3, #4]
 800933c:	1809      	addeq	r1, r1, r0
 800933e:	6021      	streq	r1, [r4, #0]
 8009340:	e7ed      	b.n	800931e <_free_r+0x1e>
 8009342:	461a      	mov	r2, r3
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	b10b      	cbz	r3, 800934c <_free_r+0x4c>
 8009348:	42a3      	cmp	r3, r4
 800934a:	d9fa      	bls.n	8009342 <_free_r+0x42>
 800934c:	6811      	ldr	r1, [r2, #0]
 800934e:	1850      	adds	r0, r2, r1
 8009350:	42a0      	cmp	r0, r4
 8009352:	d10b      	bne.n	800936c <_free_r+0x6c>
 8009354:	6820      	ldr	r0, [r4, #0]
 8009356:	4401      	add	r1, r0
 8009358:	1850      	adds	r0, r2, r1
 800935a:	4283      	cmp	r3, r0
 800935c:	6011      	str	r1, [r2, #0]
 800935e:	d1e0      	bne.n	8009322 <_free_r+0x22>
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	6053      	str	r3, [r2, #4]
 8009366:	4408      	add	r0, r1
 8009368:	6010      	str	r0, [r2, #0]
 800936a:	e7da      	b.n	8009322 <_free_r+0x22>
 800936c:	d902      	bls.n	8009374 <_free_r+0x74>
 800936e:	230c      	movs	r3, #12
 8009370:	602b      	str	r3, [r5, #0]
 8009372:	e7d6      	b.n	8009322 <_free_r+0x22>
 8009374:	6820      	ldr	r0, [r4, #0]
 8009376:	1821      	adds	r1, r4, r0
 8009378:	428b      	cmp	r3, r1
 800937a:	bf04      	itt	eq
 800937c:	6819      	ldreq	r1, [r3, #0]
 800937e:	685b      	ldreq	r3, [r3, #4]
 8009380:	6063      	str	r3, [r4, #4]
 8009382:	bf04      	itt	eq
 8009384:	1809      	addeq	r1, r1, r0
 8009386:	6021      	streq	r1, [r4, #0]
 8009388:	6054      	str	r4, [r2, #4]
 800938a:	e7ca      	b.n	8009322 <_free_r+0x22>
 800938c:	bd38      	pop	{r3, r4, r5, pc}
 800938e:	bf00      	nop
 8009390:	2000058c 	.word	0x2000058c

08009394 <malloc>:
 8009394:	4b02      	ldr	r3, [pc, #8]	@ (80093a0 <malloc+0xc>)
 8009396:	4601      	mov	r1, r0
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	f000 b825 	b.w	80093e8 <_malloc_r>
 800939e:	bf00      	nop
 80093a0:	2000001c 	.word	0x2000001c

080093a4 <sbrk_aligned>:
 80093a4:	b570      	push	{r4, r5, r6, lr}
 80093a6:	4e0f      	ldr	r6, [pc, #60]	@ (80093e4 <sbrk_aligned+0x40>)
 80093a8:	460c      	mov	r4, r1
 80093aa:	6831      	ldr	r1, [r6, #0]
 80093ac:	4605      	mov	r5, r0
 80093ae:	b911      	cbnz	r1, 80093b6 <sbrk_aligned+0x12>
 80093b0:	f001 f804 	bl	800a3bc <_sbrk_r>
 80093b4:	6030      	str	r0, [r6, #0]
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	f000 ffff 	bl	800a3bc <_sbrk_r>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	d103      	bne.n	80093ca <sbrk_aligned+0x26>
 80093c2:	f04f 34ff 	mov.w	r4, #4294967295
 80093c6:	4620      	mov	r0, r4
 80093c8:	bd70      	pop	{r4, r5, r6, pc}
 80093ca:	1cc4      	adds	r4, r0, #3
 80093cc:	f024 0403 	bic.w	r4, r4, #3
 80093d0:	42a0      	cmp	r0, r4
 80093d2:	d0f8      	beq.n	80093c6 <sbrk_aligned+0x22>
 80093d4:	1a21      	subs	r1, r4, r0
 80093d6:	4628      	mov	r0, r5
 80093d8:	f000 fff0 	bl	800a3bc <_sbrk_r>
 80093dc:	3001      	adds	r0, #1
 80093de:	d1f2      	bne.n	80093c6 <sbrk_aligned+0x22>
 80093e0:	e7ef      	b.n	80093c2 <sbrk_aligned+0x1e>
 80093e2:	bf00      	nop
 80093e4:	20000588 	.word	0x20000588

080093e8 <_malloc_r>:
 80093e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ec:	1ccd      	adds	r5, r1, #3
 80093ee:	f025 0503 	bic.w	r5, r5, #3
 80093f2:	3508      	adds	r5, #8
 80093f4:	2d0c      	cmp	r5, #12
 80093f6:	bf38      	it	cc
 80093f8:	250c      	movcc	r5, #12
 80093fa:	2d00      	cmp	r5, #0
 80093fc:	4606      	mov	r6, r0
 80093fe:	db01      	blt.n	8009404 <_malloc_r+0x1c>
 8009400:	42a9      	cmp	r1, r5
 8009402:	d904      	bls.n	800940e <_malloc_r+0x26>
 8009404:	230c      	movs	r3, #12
 8009406:	6033      	str	r3, [r6, #0]
 8009408:	2000      	movs	r0, #0
 800940a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094e4 <_malloc_r+0xfc>
 8009412:	f000 f869 	bl	80094e8 <__malloc_lock>
 8009416:	f8d8 3000 	ldr.w	r3, [r8]
 800941a:	461c      	mov	r4, r3
 800941c:	bb44      	cbnz	r4, 8009470 <_malloc_r+0x88>
 800941e:	4629      	mov	r1, r5
 8009420:	4630      	mov	r0, r6
 8009422:	f7ff ffbf 	bl	80093a4 <sbrk_aligned>
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	4604      	mov	r4, r0
 800942a:	d158      	bne.n	80094de <_malloc_r+0xf6>
 800942c:	f8d8 4000 	ldr.w	r4, [r8]
 8009430:	4627      	mov	r7, r4
 8009432:	2f00      	cmp	r7, #0
 8009434:	d143      	bne.n	80094be <_malloc_r+0xd6>
 8009436:	2c00      	cmp	r4, #0
 8009438:	d04b      	beq.n	80094d2 <_malloc_r+0xea>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	4639      	mov	r1, r7
 800943e:	4630      	mov	r0, r6
 8009440:	eb04 0903 	add.w	r9, r4, r3
 8009444:	f000 ffba 	bl	800a3bc <_sbrk_r>
 8009448:	4581      	cmp	r9, r0
 800944a:	d142      	bne.n	80094d2 <_malloc_r+0xea>
 800944c:	6821      	ldr	r1, [r4, #0]
 800944e:	1a6d      	subs	r5, r5, r1
 8009450:	4629      	mov	r1, r5
 8009452:	4630      	mov	r0, r6
 8009454:	f7ff ffa6 	bl	80093a4 <sbrk_aligned>
 8009458:	3001      	adds	r0, #1
 800945a:	d03a      	beq.n	80094d2 <_malloc_r+0xea>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	442b      	add	r3, r5
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	f8d8 3000 	ldr.w	r3, [r8]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	bb62      	cbnz	r2, 80094c4 <_malloc_r+0xdc>
 800946a:	f8c8 7000 	str.w	r7, [r8]
 800946e:	e00f      	b.n	8009490 <_malloc_r+0xa8>
 8009470:	6822      	ldr	r2, [r4, #0]
 8009472:	1b52      	subs	r2, r2, r5
 8009474:	d420      	bmi.n	80094b8 <_malloc_r+0xd0>
 8009476:	2a0b      	cmp	r2, #11
 8009478:	d917      	bls.n	80094aa <_malloc_r+0xc2>
 800947a:	1961      	adds	r1, r4, r5
 800947c:	42a3      	cmp	r3, r4
 800947e:	6025      	str	r5, [r4, #0]
 8009480:	bf18      	it	ne
 8009482:	6059      	strne	r1, [r3, #4]
 8009484:	6863      	ldr	r3, [r4, #4]
 8009486:	bf08      	it	eq
 8009488:	f8c8 1000 	streq.w	r1, [r8]
 800948c:	5162      	str	r2, [r4, r5]
 800948e:	604b      	str	r3, [r1, #4]
 8009490:	4630      	mov	r0, r6
 8009492:	f000 f82f 	bl	80094f4 <__malloc_unlock>
 8009496:	f104 000b 	add.w	r0, r4, #11
 800949a:	1d23      	adds	r3, r4, #4
 800949c:	f020 0007 	bic.w	r0, r0, #7
 80094a0:	1ac2      	subs	r2, r0, r3
 80094a2:	bf1c      	itt	ne
 80094a4:	1a1b      	subne	r3, r3, r0
 80094a6:	50a3      	strne	r3, [r4, r2]
 80094a8:	e7af      	b.n	800940a <_malloc_r+0x22>
 80094aa:	6862      	ldr	r2, [r4, #4]
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	bf0c      	ite	eq
 80094b0:	f8c8 2000 	streq.w	r2, [r8]
 80094b4:	605a      	strne	r2, [r3, #4]
 80094b6:	e7eb      	b.n	8009490 <_malloc_r+0xa8>
 80094b8:	4623      	mov	r3, r4
 80094ba:	6864      	ldr	r4, [r4, #4]
 80094bc:	e7ae      	b.n	800941c <_malloc_r+0x34>
 80094be:	463c      	mov	r4, r7
 80094c0:	687f      	ldr	r7, [r7, #4]
 80094c2:	e7b6      	b.n	8009432 <_malloc_r+0x4a>
 80094c4:	461a      	mov	r2, r3
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	d1fb      	bne.n	80094c4 <_malloc_r+0xdc>
 80094cc:	2300      	movs	r3, #0
 80094ce:	6053      	str	r3, [r2, #4]
 80094d0:	e7de      	b.n	8009490 <_malloc_r+0xa8>
 80094d2:	230c      	movs	r3, #12
 80094d4:	6033      	str	r3, [r6, #0]
 80094d6:	4630      	mov	r0, r6
 80094d8:	f000 f80c 	bl	80094f4 <__malloc_unlock>
 80094dc:	e794      	b.n	8009408 <_malloc_r+0x20>
 80094de:	6005      	str	r5, [r0, #0]
 80094e0:	e7d6      	b.n	8009490 <_malloc_r+0xa8>
 80094e2:	bf00      	nop
 80094e4:	2000058c 	.word	0x2000058c

080094e8 <__malloc_lock>:
 80094e8:	4801      	ldr	r0, [pc, #4]	@ (80094f0 <__malloc_lock+0x8>)
 80094ea:	f7ff b8ae 	b.w	800864a <__retarget_lock_acquire_recursive>
 80094ee:	bf00      	nop
 80094f0:	20000584 	.word	0x20000584

080094f4 <__malloc_unlock>:
 80094f4:	4801      	ldr	r0, [pc, #4]	@ (80094fc <__malloc_unlock+0x8>)
 80094f6:	f7ff b8a9 	b.w	800864c <__retarget_lock_release_recursive>
 80094fa:	bf00      	nop
 80094fc:	20000584 	.word	0x20000584

08009500 <_Balloc>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	69c6      	ldr	r6, [r0, #28]
 8009504:	4604      	mov	r4, r0
 8009506:	460d      	mov	r5, r1
 8009508:	b976      	cbnz	r6, 8009528 <_Balloc+0x28>
 800950a:	2010      	movs	r0, #16
 800950c:	f7ff ff42 	bl	8009394 <malloc>
 8009510:	4602      	mov	r2, r0
 8009512:	61e0      	str	r0, [r4, #28]
 8009514:	b920      	cbnz	r0, 8009520 <_Balloc+0x20>
 8009516:	4b18      	ldr	r3, [pc, #96]	@ (8009578 <_Balloc+0x78>)
 8009518:	4818      	ldr	r0, [pc, #96]	@ (800957c <_Balloc+0x7c>)
 800951a:	216b      	movs	r1, #107	@ 0x6b
 800951c:	f000 ff6c 	bl	800a3f8 <__assert_func>
 8009520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009524:	6006      	str	r6, [r0, #0]
 8009526:	60c6      	str	r6, [r0, #12]
 8009528:	69e6      	ldr	r6, [r4, #28]
 800952a:	68f3      	ldr	r3, [r6, #12]
 800952c:	b183      	cbz	r3, 8009550 <_Balloc+0x50>
 800952e:	69e3      	ldr	r3, [r4, #28]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009536:	b9b8      	cbnz	r0, 8009568 <_Balloc+0x68>
 8009538:	2101      	movs	r1, #1
 800953a:	fa01 f605 	lsl.w	r6, r1, r5
 800953e:	1d72      	adds	r2, r6, #5
 8009540:	0092      	lsls	r2, r2, #2
 8009542:	4620      	mov	r0, r4
 8009544:	f000 ff76 	bl	800a434 <_calloc_r>
 8009548:	b160      	cbz	r0, 8009564 <_Balloc+0x64>
 800954a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800954e:	e00e      	b.n	800956e <_Balloc+0x6e>
 8009550:	2221      	movs	r2, #33	@ 0x21
 8009552:	2104      	movs	r1, #4
 8009554:	4620      	mov	r0, r4
 8009556:	f000 ff6d 	bl	800a434 <_calloc_r>
 800955a:	69e3      	ldr	r3, [r4, #28]
 800955c:	60f0      	str	r0, [r6, #12]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e4      	bne.n	800952e <_Balloc+0x2e>
 8009564:	2000      	movs	r0, #0
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	6802      	ldr	r2, [r0, #0]
 800956a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800956e:	2300      	movs	r3, #0
 8009570:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009574:	e7f7      	b.n	8009566 <_Balloc+0x66>
 8009576:	bf00      	nop
 8009578:	0800d5fd 	.word	0x0800d5fd
 800957c:	0800d67d 	.word	0x0800d67d

08009580 <_Bfree>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	69c6      	ldr	r6, [r0, #28]
 8009584:	4605      	mov	r5, r0
 8009586:	460c      	mov	r4, r1
 8009588:	b976      	cbnz	r6, 80095a8 <_Bfree+0x28>
 800958a:	2010      	movs	r0, #16
 800958c:	f7ff ff02 	bl	8009394 <malloc>
 8009590:	4602      	mov	r2, r0
 8009592:	61e8      	str	r0, [r5, #28]
 8009594:	b920      	cbnz	r0, 80095a0 <_Bfree+0x20>
 8009596:	4b09      	ldr	r3, [pc, #36]	@ (80095bc <_Bfree+0x3c>)
 8009598:	4809      	ldr	r0, [pc, #36]	@ (80095c0 <_Bfree+0x40>)
 800959a:	218f      	movs	r1, #143	@ 0x8f
 800959c:	f000 ff2c 	bl	800a3f8 <__assert_func>
 80095a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095a4:	6006      	str	r6, [r0, #0]
 80095a6:	60c6      	str	r6, [r0, #12]
 80095a8:	b13c      	cbz	r4, 80095ba <_Bfree+0x3a>
 80095aa:	69eb      	ldr	r3, [r5, #28]
 80095ac:	6862      	ldr	r2, [r4, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095b4:	6021      	str	r1, [r4, #0]
 80095b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	0800d5fd 	.word	0x0800d5fd
 80095c0:	0800d67d 	.word	0x0800d67d

080095c4 <__multadd>:
 80095c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c8:	690d      	ldr	r5, [r1, #16]
 80095ca:	4607      	mov	r7, r0
 80095cc:	460c      	mov	r4, r1
 80095ce:	461e      	mov	r6, r3
 80095d0:	f101 0c14 	add.w	ip, r1, #20
 80095d4:	2000      	movs	r0, #0
 80095d6:	f8dc 3000 	ldr.w	r3, [ip]
 80095da:	b299      	uxth	r1, r3
 80095dc:	fb02 6101 	mla	r1, r2, r1, r6
 80095e0:	0c1e      	lsrs	r6, r3, #16
 80095e2:	0c0b      	lsrs	r3, r1, #16
 80095e4:	fb02 3306 	mla	r3, r2, r6, r3
 80095e8:	b289      	uxth	r1, r1
 80095ea:	3001      	adds	r0, #1
 80095ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80095f0:	4285      	cmp	r5, r0
 80095f2:	f84c 1b04 	str.w	r1, [ip], #4
 80095f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095fa:	dcec      	bgt.n	80095d6 <__multadd+0x12>
 80095fc:	b30e      	cbz	r6, 8009642 <__multadd+0x7e>
 80095fe:	68a3      	ldr	r3, [r4, #8]
 8009600:	42ab      	cmp	r3, r5
 8009602:	dc19      	bgt.n	8009638 <__multadd+0x74>
 8009604:	6861      	ldr	r1, [r4, #4]
 8009606:	4638      	mov	r0, r7
 8009608:	3101      	adds	r1, #1
 800960a:	f7ff ff79 	bl	8009500 <_Balloc>
 800960e:	4680      	mov	r8, r0
 8009610:	b928      	cbnz	r0, 800961e <__multadd+0x5a>
 8009612:	4602      	mov	r2, r0
 8009614:	4b0c      	ldr	r3, [pc, #48]	@ (8009648 <__multadd+0x84>)
 8009616:	480d      	ldr	r0, [pc, #52]	@ (800964c <__multadd+0x88>)
 8009618:	21ba      	movs	r1, #186	@ 0xba
 800961a:	f000 feed 	bl	800a3f8 <__assert_func>
 800961e:	6922      	ldr	r2, [r4, #16]
 8009620:	3202      	adds	r2, #2
 8009622:	f104 010c 	add.w	r1, r4, #12
 8009626:	0092      	lsls	r2, r2, #2
 8009628:	300c      	adds	r0, #12
 800962a:	f000 fed7 	bl	800a3dc <memcpy>
 800962e:	4621      	mov	r1, r4
 8009630:	4638      	mov	r0, r7
 8009632:	f7ff ffa5 	bl	8009580 <_Bfree>
 8009636:	4644      	mov	r4, r8
 8009638:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800963c:	3501      	adds	r5, #1
 800963e:	615e      	str	r6, [r3, #20]
 8009640:	6125      	str	r5, [r4, #16]
 8009642:	4620      	mov	r0, r4
 8009644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009648:	0800d66c 	.word	0x0800d66c
 800964c:	0800d67d 	.word	0x0800d67d

08009650 <__hi0bits>:
 8009650:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009654:	4603      	mov	r3, r0
 8009656:	bf36      	itet	cc
 8009658:	0403      	lslcc	r3, r0, #16
 800965a:	2000      	movcs	r0, #0
 800965c:	2010      	movcc	r0, #16
 800965e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009662:	bf3c      	itt	cc
 8009664:	021b      	lslcc	r3, r3, #8
 8009666:	3008      	addcc	r0, #8
 8009668:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800966c:	bf3c      	itt	cc
 800966e:	011b      	lslcc	r3, r3, #4
 8009670:	3004      	addcc	r0, #4
 8009672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009676:	bf3c      	itt	cc
 8009678:	009b      	lslcc	r3, r3, #2
 800967a:	3002      	addcc	r0, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	db05      	blt.n	800968c <__hi0bits+0x3c>
 8009680:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009684:	f100 0001 	add.w	r0, r0, #1
 8009688:	bf08      	it	eq
 800968a:	2020      	moveq	r0, #32
 800968c:	4770      	bx	lr

0800968e <__lo0bits>:
 800968e:	6803      	ldr	r3, [r0, #0]
 8009690:	4602      	mov	r2, r0
 8009692:	f013 0007 	ands.w	r0, r3, #7
 8009696:	d00b      	beq.n	80096b0 <__lo0bits+0x22>
 8009698:	07d9      	lsls	r1, r3, #31
 800969a:	d421      	bmi.n	80096e0 <__lo0bits+0x52>
 800969c:	0798      	lsls	r0, r3, #30
 800969e:	bf49      	itett	mi
 80096a0:	085b      	lsrmi	r3, r3, #1
 80096a2:	089b      	lsrpl	r3, r3, #2
 80096a4:	2001      	movmi	r0, #1
 80096a6:	6013      	strmi	r3, [r2, #0]
 80096a8:	bf5c      	itt	pl
 80096aa:	6013      	strpl	r3, [r2, #0]
 80096ac:	2002      	movpl	r0, #2
 80096ae:	4770      	bx	lr
 80096b0:	b299      	uxth	r1, r3
 80096b2:	b909      	cbnz	r1, 80096b8 <__lo0bits+0x2a>
 80096b4:	0c1b      	lsrs	r3, r3, #16
 80096b6:	2010      	movs	r0, #16
 80096b8:	b2d9      	uxtb	r1, r3
 80096ba:	b909      	cbnz	r1, 80096c0 <__lo0bits+0x32>
 80096bc:	3008      	adds	r0, #8
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	0719      	lsls	r1, r3, #28
 80096c2:	bf04      	itt	eq
 80096c4:	091b      	lsreq	r3, r3, #4
 80096c6:	3004      	addeq	r0, #4
 80096c8:	0799      	lsls	r1, r3, #30
 80096ca:	bf04      	itt	eq
 80096cc:	089b      	lsreq	r3, r3, #2
 80096ce:	3002      	addeq	r0, #2
 80096d0:	07d9      	lsls	r1, r3, #31
 80096d2:	d403      	bmi.n	80096dc <__lo0bits+0x4e>
 80096d4:	085b      	lsrs	r3, r3, #1
 80096d6:	f100 0001 	add.w	r0, r0, #1
 80096da:	d003      	beq.n	80096e4 <__lo0bits+0x56>
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	4770      	bx	lr
 80096e0:	2000      	movs	r0, #0
 80096e2:	4770      	bx	lr
 80096e4:	2020      	movs	r0, #32
 80096e6:	4770      	bx	lr

080096e8 <__i2b>:
 80096e8:	b510      	push	{r4, lr}
 80096ea:	460c      	mov	r4, r1
 80096ec:	2101      	movs	r1, #1
 80096ee:	f7ff ff07 	bl	8009500 <_Balloc>
 80096f2:	4602      	mov	r2, r0
 80096f4:	b928      	cbnz	r0, 8009702 <__i2b+0x1a>
 80096f6:	4b05      	ldr	r3, [pc, #20]	@ (800970c <__i2b+0x24>)
 80096f8:	4805      	ldr	r0, [pc, #20]	@ (8009710 <__i2b+0x28>)
 80096fa:	f240 1145 	movw	r1, #325	@ 0x145
 80096fe:	f000 fe7b 	bl	800a3f8 <__assert_func>
 8009702:	2301      	movs	r3, #1
 8009704:	6144      	str	r4, [r0, #20]
 8009706:	6103      	str	r3, [r0, #16]
 8009708:	bd10      	pop	{r4, pc}
 800970a:	bf00      	nop
 800970c:	0800d66c 	.word	0x0800d66c
 8009710:	0800d67d 	.word	0x0800d67d

08009714 <__multiply>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	4617      	mov	r7, r2
 800971a:	690a      	ldr	r2, [r1, #16]
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	429a      	cmp	r2, r3
 8009720:	bfa8      	it	ge
 8009722:	463b      	movge	r3, r7
 8009724:	4689      	mov	r9, r1
 8009726:	bfa4      	itt	ge
 8009728:	460f      	movge	r7, r1
 800972a:	4699      	movge	r9, r3
 800972c:	693d      	ldr	r5, [r7, #16]
 800972e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	6879      	ldr	r1, [r7, #4]
 8009736:	eb05 060a 	add.w	r6, r5, sl
 800973a:	42b3      	cmp	r3, r6
 800973c:	b085      	sub	sp, #20
 800973e:	bfb8      	it	lt
 8009740:	3101      	addlt	r1, #1
 8009742:	f7ff fedd 	bl	8009500 <_Balloc>
 8009746:	b930      	cbnz	r0, 8009756 <__multiply+0x42>
 8009748:	4602      	mov	r2, r0
 800974a:	4b41      	ldr	r3, [pc, #260]	@ (8009850 <__multiply+0x13c>)
 800974c:	4841      	ldr	r0, [pc, #260]	@ (8009854 <__multiply+0x140>)
 800974e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009752:	f000 fe51 	bl	800a3f8 <__assert_func>
 8009756:	f100 0414 	add.w	r4, r0, #20
 800975a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800975e:	4623      	mov	r3, r4
 8009760:	2200      	movs	r2, #0
 8009762:	4573      	cmp	r3, lr
 8009764:	d320      	bcc.n	80097a8 <__multiply+0x94>
 8009766:	f107 0814 	add.w	r8, r7, #20
 800976a:	f109 0114 	add.w	r1, r9, #20
 800976e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009772:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009776:	9302      	str	r3, [sp, #8]
 8009778:	1beb      	subs	r3, r5, r7
 800977a:	3b15      	subs	r3, #21
 800977c:	f023 0303 	bic.w	r3, r3, #3
 8009780:	3304      	adds	r3, #4
 8009782:	3715      	adds	r7, #21
 8009784:	42bd      	cmp	r5, r7
 8009786:	bf38      	it	cc
 8009788:	2304      	movcc	r3, #4
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	9b02      	ldr	r3, [sp, #8]
 800978e:	9103      	str	r1, [sp, #12]
 8009790:	428b      	cmp	r3, r1
 8009792:	d80c      	bhi.n	80097ae <__multiply+0x9a>
 8009794:	2e00      	cmp	r6, #0
 8009796:	dd03      	ble.n	80097a0 <__multiply+0x8c>
 8009798:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800979c:	2b00      	cmp	r3, #0
 800979e:	d055      	beq.n	800984c <__multiply+0x138>
 80097a0:	6106      	str	r6, [r0, #16]
 80097a2:	b005      	add	sp, #20
 80097a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a8:	f843 2b04 	str.w	r2, [r3], #4
 80097ac:	e7d9      	b.n	8009762 <__multiply+0x4e>
 80097ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80097b2:	f1ba 0f00 	cmp.w	sl, #0
 80097b6:	d01f      	beq.n	80097f8 <__multiply+0xe4>
 80097b8:	46c4      	mov	ip, r8
 80097ba:	46a1      	mov	r9, r4
 80097bc:	2700      	movs	r7, #0
 80097be:	f85c 2b04 	ldr.w	r2, [ip], #4
 80097c2:	f8d9 3000 	ldr.w	r3, [r9]
 80097c6:	fa1f fb82 	uxth.w	fp, r2
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	fb0a 330b 	mla	r3, sl, fp, r3
 80097d0:	443b      	add	r3, r7
 80097d2:	f8d9 7000 	ldr.w	r7, [r9]
 80097d6:	0c12      	lsrs	r2, r2, #16
 80097d8:	0c3f      	lsrs	r7, r7, #16
 80097da:	fb0a 7202 	mla	r2, sl, r2, r7
 80097de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097e8:	4565      	cmp	r5, ip
 80097ea:	f849 3b04 	str.w	r3, [r9], #4
 80097ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80097f2:	d8e4      	bhi.n	80097be <__multiply+0xaa>
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	50e7      	str	r7, [r4, r3]
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80097fe:	3104      	adds	r1, #4
 8009800:	f1b9 0f00 	cmp.w	r9, #0
 8009804:	d020      	beq.n	8009848 <__multiply+0x134>
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	4647      	mov	r7, r8
 800980a:	46a4      	mov	ip, r4
 800980c:	f04f 0a00 	mov.w	sl, #0
 8009810:	f8b7 b000 	ldrh.w	fp, [r7]
 8009814:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009818:	fb09 220b 	mla	r2, r9, fp, r2
 800981c:	4452      	add	r2, sl
 800981e:	b29b      	uxth	r3, r3
 8009820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009824:	f84c 3b04 	str.w	r3, [ip], #4
 8009828:	f857 3b04 	ldr.w	r3, [r7], #4
 800982c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009830:	f8bc 3000 	ldrh.w	r3, [ip]
 8009834:	fb09 330a 	mla	r3, r9, sl, r3
 8009838:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800983c:	42bd      	cmp	r5, r7
 800983e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009842:	d8e5      	bhi.n	8009810 <__multiply+0xfc>
 8009844:	9a01      	ldr	r2, [sp, #4]
 8009846:	50a3      	str	r3, [r4, r2]
 8009848:	3404      	adds	r4, #4
 800984a:	e79f      	b.n	800978c <__multiply+0x78>
 800984c:	3e01      	subs	r6, #1
 800984e:	e7a1      	b.n	8009794 <__multiply+0x80>
 8009850:	0800d66c 	.word	0x0800d66c
 8009854:	0800d67d 	.word	0x0800d67d

08009858 <__pow5mult>:
 8009858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800985c:	4615      	mov	r5, r2
 800985e:	f012 0203 	ands.w	r2, r2, #3
 8009862:	4607      	mov	r7, r0
 8009864:	460e      	mov	r6, r1
 8009866:	d007      	beq.n	8009878 <__pow5mult+0x20>
 8009868:	4c25      	ldr	r4, [pc, #148]	@ (8009900 <__pow5mult+0xa8>)
 800986a:	3a01      	subs	r2, #1
 800986c:	2300      	movs	r3, #0
 800986e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009872:	f7ff fea7 	bl	80095c4 <__multadd>
 8009876:	4606      	mov	r6, r0
 8009878:	10ad      	asrs	r5, r5, #2
 800987a:	d03d      	beq.n	80098f8 <__pow5mult+0xa0>
 800987c:	69fc      	ldr	r4, [r7, #28]
 800987e:	b97c      	cbnz	r4, 80098a0 <__pow5mult+0x48>
 8009880:	2010      	movs	r0, #16
 8009882:	f7ff fd87 	bl	8009394 <malloc>
 8009886:	4602      	mov	r2, r0
 8009888:	61f8      	str	r0, [r7, #28]
 800988a:	b928      	cbnz	r0, 8009898 <__pow5mult+0x40>
 800988c:	4b1d      	ldr	r3, [pc, #116]	@ (8009904 <__pow5mult+0xac>)
 800988e:	481e      	ldr	r0, [pc, #120]	@ (8009908 <__pow5mult+0xb0>)
 8009890:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009894:	f000 fdb0 	bl	800a3f8 <__assert_func>
 8009898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800989c:	6004      	str	r4, [r0, #0]
 800989e:	60c4      	str	r4, [r0, #12]
 80098a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80098a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098a8:	b94c      	cbnz	r4, 80098be <__pow5mult+0x66>
 80098aa:	f240 2171 	movw	r1, #625	@ 0x271
 80098ae:	4638      	mov	r0, r7
 80098b0:	f7ff ff1a 	bl	80096e8 <__i2b>
 80098b4:	2300      	movs	r3, #0
 80098b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80098ba:	4604      	mov	r4, r0
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	f04f 0900 	mov.w	r9, #0
 80098c2:	07eb      	lsls	r3, r5, #31
 80098c4:	d50a      	bpl.n	80098dc <__pow5mult+0x84>
 80098c6:	4631      	mov	r1, r6
 80098c8:	4622      	mov	r2, r4
 80098ca:	4638      	mov	r0, r7
 80098cc:	f7ff ff22 	bl	8009714 <__multiply>
 80098d0:	4631      	mov	r1, r6
 80098d2:	4680      	mov	r8, r0
 80098d4:	4638      	mov	r0, r7
 80098d6:	f7ff fe53 	bl	8009580 <_Bfree>
 80098da:	4646      	mov	r6, r8
 80098dc:	106d      	asrs	r5, r5, #1
 80098de:	d00b      	beq.n	80098f8 <__pow5mult+0xa0>
 80098e0:	6820      	ldr	r0, [r4, #0]
 80098e2:	b938      	cbnz	r0, 80098f4 <__pow5mult+0x9c>
 80098e4:	4622      	mov	r2, r4
 80098e6:	4621      	mov	r1, r4
 80098e8:	4638      	mov	r0, r7
 80098ea:	f7ff ff13 	bl	8009714 <__multiply>
 80098ee:	6020      	str	r0, [r4, #0]
 80098f0:	f8c0 9000 	str.w	r9, [r0]
 80098f4:	4604      	mov	r4, r0
 80098f6:	e7e4      	b.n	80098c2 <__pow5mult+0x6a>
 80098f8:	4630      	mov	r0, r6
 80098fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098fe:	bf00      	nop
 8009900:	0800d730 	.word	0x0800d730
 8009904:	0800d5fd 	.word	0x0800d5fd
 8009908:	0800d67d 	.word	0x0800d67d

0800990c <__lshift>:
 800990c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009910:	460c      	mov	r4, r1
 8009912:	6849      	ldr	r1, [r1, #4]
 8009914:	6923      	ldr	r3, [r4, #16]
 8009916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800991a:	68a3      	ldr	r3, [r4, #8]
 800991c:	4607      	mov	r7, r0
 800991e:	4691      	mov	r9, r2
 8009920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009924:	f108 0601 	add.w	r6, r8, #1
 8009928:	42b3      	cmp	r3, r6
 800992a:	db0b      	blt.n	8009944 <__lshift+0x38>
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff fde7 	bl	8009500 <_Balloc>
 8009932:	4605      	mov	r5, r0
 8009934:	b948      	cbnz	r0, 800994a <__lshift+0x3e>
 8009936:	4602      	mov	r2, r0
 8009938:	4b28      	ldr	r3, [pc, #160]	@ (80099dc <__lshift+0xd0>)
 800993a:	4829      	ldr	r0, [pc, #164]	@ (80099e0 <__lshift+0xd4>)
 800993c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009940:	f000 fd5a 	bl	800a3f8 <__assert_func>
 8009944:	3101      	adds	r1, #1
 8009946:	005b      	lsls	r3, r3, #1
 8009948:	e7ee      	b.n	8009928 <__lshift+0x1c>
 800994a:	2300      	movs	r3, #0
 800994c:	f100 0114 	add.w	r1, r0, #20
 8009950:	f100 0210 	add.w	r2, r0, #16
 8009954:	4618      	mov	r0, r3
 8009956:	4553      	cmp	r3, sl
 8009958:	db33      	blt.n	80099c2 <__lshift+0xb6>
 800995a:	6920      	ldr	r0, [r4, #16]
 800995c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009960:	f104 0314 	add.w	r3, r4, #20
 8009964:	f019 091f 	ands.w	r9, r9, #31
 8009968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800996c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009970:	d02b      	beq.n	80099ca <__lshift+0xbe>
 8009972:	f1c9 0e20 	rsb	lr, r9, #32
 8009976:	468a      	mov	sl, r1
 8009978:	2200      	movs	r2, #0
 800997a:	6818      	ldr	r0, [r3, #0]
 800997c:	fa00 f009 	lsl.w	r0, r0, r9
 8009980:	4310      	orrs	r0, r2
 8009982:	f84a 0b04 	str.w	r0, [sl], #4
 8009986:	f853 2b04 	ldr.w	r2, [r3], #4
 800998a:	459c      	cmp	ip, r3
 800998c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009990:	d8f3      	bhi.n	800997a <__lshift+0x6e>
 8009992:	ebac 0304 	sub.w	r3, ip, r4
 8009996:	3b15      	subs	r3, #21
 8009998:	f023 0303 	bic.w	r3, r3, #3
 800999c:	3304      	adds	r3, #4
 800999e:	f104 0015 	add.w	r0, r4, #21
 80099a2:	4560      	cmp	r0, ip
 80099a4:	bf88      	it	hi
 80099a6:	2304      	movhi	r3, #4
 80099a8:	50ca      	str	r2, [r1, r3]
 80099aa:	b10a      	cbz	r2, 80099b0 <__lshift+0xa4>
 80099ac:	f108 0602 	add.w	r6, r8, #2
 80099b0:	3e01      	subs	r6, #1
 80099b2:	4638      	mov	r0, r7
 80099b4:	612e      	str	r6, [r5, #16]
 80099b6:	4621      	mov	r1, r4
 80099b8:	f7ff fde2 	bl	8009580 <_Bfree>
 80099bc:	4628      	mov	r0, r5
 80099be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80099c6:	3301      	adds	r3, #1
 80099c8:	e7c5      	b.n	8009956 <__lshift+0x4a>
 80099ca:	3904      	subs	r1, #4
 80099cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80099d4:	459c      	cmp	ip, r3
 80099d6:	d8f9      	bhi.n	80099cc <__lshift+0xc0>
 80099d8:	e7ea      	b.n	80099b0 <__lshift+0xa4>
 80099da:	bf00      	nop
 80099dc:	0800d66c 	.word	0x0800d66c
 80099e0:	0800d67d 	.word	0x0800d67d

080099e4 <__mcmp>:
 80099e4:	690a      	ldr	r2, [r1, #16]
 80099e6:	4603      	mov	r3, r0
 80099e8:	6900      	ldr	r0, [r0, #16]
 80099ea:	1a80      	subs	r0, r0, r2
 80099ec:	b530      	push	{r4, r5, lr}
 80099ee:	d10e      	bne.n	8009a0e <__mcmp+0x2a>
 80099f0:	3314      	adds	r3, #20
 80099f2:	3114      	adds	r1, #20
 80099f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a04:	4295      	cmp	r5, r2
 8009a06:	d003      	beq.n	8009a10 <__mcmp+0x2c>
 8009a08:	d205      	bcs.n	8009a16 <__mcmp+0x32>
 8009a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0e:	bd30      	pop	{r4, r5, pc}
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	d3f3      	bcc.n	80099fc <__mcmp+0x18>
 8009a14:	e7fb      	b.n	8009a0e <__mcmp+0x2a>
 8009a16:	2001      	movs	r0, #1
 8009a18:	e7f9      	b.n	8009a0e <__mcmp+0x2a>
	...

08009a1c <__mdiff>:
 8009a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	4689      	mov	r9, r1
 8009a22:	4606      	mov	r6, r0
 8009a24:	4611      	mov	r1, r2
 8009a26:	4648      	mov	r0, r9
 8009a28:	4614      	mov	r4, r2
 8009a2a:	f7ff ffdb 	bl	80099e4 <__mcmp>
 8009a2e:	1e05      	subs	r5, r0, #0
 8009a30:	d112      	bne.n	8009a58 <__mdiff+0x3c>
 8009a32:	4629      	mov	r1, r5
 8009a34:	4630      	mov	r0, r6
 8009a36:	f7ff fd63 	bl	8009500 <_Balloc>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	b928      	cbnz	r0, 8009a4a <__mdiff+0x2e>
 8009a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8009b3c <__mdiff+0x120>)
 8009a40:	f240 2137 	movw	r1, #567	@ 0x237
 8009a44:	483e      	ldr	r0, [pc, #248]	@ (8009b40 <__mdiff+0x124>)
 8009a46:	f000 fcd7 	bl	800a3f8 <__assert_func>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a50:	4610      	mov	r0, r2
 8009a52:	b003      	add	sp, #12
 8009a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a58:	bfbc      	itt	lt
 8009a5a:	464b      	movlt	r3, r9
 8009a5c:	46a1      	movlt	r9, r4
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a64:	bfba      	itte	lt
 8009a66:	461c      	movlt	r4, r3
 8009a68:	2501      	movlt	r5, #1
 8009a6a:	2500      	movge	r5, #0
 8009a6c:	f7ff fd48 	bl	8009500 <_Balloc>
 8009a70:	4602      	mov	r2, r0
 8009a72:	b918      	cbnz	r0, 8009a7c <__mdiff+0x60>
 8009a74:	4b31      	ldr	r3, [pc, #196]	@ (8009b3c <__mdiff+0x120>)
 8009a76:	f240 2145 	movw	r1, #581	@ 0x245
 8009a7a:	e7e3      	b.n	8009a44 <__mdiff+0x28>
 8009a7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a80:	6926      	ldr	r6, [r4, #16]
 8009a82:	60c5      	str	r5, [r0, #12]
 8009a84:	f109 0310 	add.w	r3, r9, #16
 8009a88:	f109 0514 	add.w	r5, r9, #20
 8009a8c:	f104 0e14 	add.w	lr, r4, #20
 8009a90:	f100 0b14 	add.w	fp, r0, #20
 8009a94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	46d9      	mov	r9, fp
 8009aa0:	f04f 0c00 	mov.w	ip, #0
 8009aa4:	9b01      	ldr	r3, [sp, #4]
 8009aa6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009aaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	fa1f f38a 	uxth.w	r3, sl
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	b283      	uxth	r3, r0
 8009ab8:	1acb      	subs	r3, r1, r3
 8009aba:	0c00      	lsrs	r0, r0, #16
 8009abc:	4463      	add	r3, ip
 8009abe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ac2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009acc:	4576      	cmp	r6, lr
 8009ace:	f849 3b04 	str.w	r3, [r9], #4
 8009ad2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ad6:	d8e5      	bhi.n	8009aa4 <__mdiff+0x88>
 8009ad8:	1b33      	subs	r3, r6, r4
 8009ada:	3b15      	subs	r3, #21
 8009adc:	f023 0303 	bic.w	r3, r3, #3
 8009ae0:	3415      	adds	r4, #21
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	42a6      	cmp	r6, r4
 8009ae6:	bf38      	it	cc
 8009ae8:	2304      	movcc	r3, #4
 8009aea:	441d      	add	r5, r3
 8009aec:	445b      	add	r3, fp
 8009aee:	461e      	mov	r6, r3
 8009af0:	462c      	mov	r4, r5
 8009af2:	4544      	cmp	r4, r8
 8009af4:	d30e      	bcc.n	8009b14 <__mdiff+0xf8>
 8009af6:	f108 0103 	add.w	r1, r8, #3
 8009afa:	1b49      	subs	r1, r1, r5
 8009afc:	f021 0103 	bic.w	r1, r1, #3
 8009b00:	3d03      	subs	r5, #3
 8009b02:	45a8      	cmp	r8, r5
 8009b04:	bf38      	it	cc
 8009b06:	2100      	movcc	r1, #0
 8009b08:	440b      	add	r3, r1
 8009b0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b0e:	b191      	cbz	r1, 8009b36 <__mdiff+0x11a>
 8009b10:	6117      	str	r7, [r2, #16]
 8009b12:	e79d      	b.n	8009a50 <__mdiff+0x34>
 8009b14:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b18:	46e6      	mov	lr, ip
 8009b1a:	0c08      	lsrs	r0, r1, #16
 8009b1c:	fa1c fc81 	uxtah	ip, ip, r1
 8009b20:	4471      	add	r1, lr
 8009b22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b26:	b289      	uxth	r1, r1
 8009b28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b2c:	f846 1b04 	str.w	r1, [r6], #4
 8009b30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b34:	e7dd      	b.n	8009af2 <__mdiff+0xd6>
 8009b36:	3f01      	subs	r7, #1
 8009b38:	e7e7      	b.n	8009b0a <__mdiff+0xee>
 8009b3a:	bf00      	nop
 8009b3c:	0800d66c 	.word	0x0800d66c
 8009b40:	0800d67d 	.word	0x0800d67d

08009b44 <__d2b>:
 8009b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b48:	460f      	mov	r7, r1
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	ec59 8b10 	vmov	r8, r9, d0
 8009b50:	4616      	mov	r6, r2
 8009b52:	f7ff fcd5 	bl	8009500 <_Balloc>
 8009b56:	4604      	mov	r4, r0
 8009b58:	b930      	cbnz	r0, 8009b68 <__d2b+0x24>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	4b23      	ldr	r3, [pc, #140]	@ (8009bec <__d2b+0xa8>)
 8009b5e:	4824      	ldr	r0, [pc, #144]	@ (8009bf0 <__d2b+0xac>)
 8009b60:	f240 310f 	movw	r1, #783	@ 0x30f
 8009b64:	f000 fc48 	bl	800a3f8 <__assert_func>
 8009b68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b70:	b10d      	cbz	r5, 8009b76 <__d2b+0x32>
 8009b72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	f1b8 0300 	subs.w	r3, r8, #0
 8009b7c:	d023      	beq.n	8009bc6 <__d2b+0x82>
 8009b7e:	4668      	mov	r0, sp
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	f7ff fd84 	bl	800968e <__lo0bits>
 8009b86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b8a:	b1d0      	cbz	r0, 8009bc2 <__d2b+0x7e>
 8009b8c:	f1c0 0320 	rsb	r3, r0, #32
 8009b90:	fa02 f303 	lsl.w	r3, r2, r3
 8009b94:	430b      	orrs	r3, r1
 8009b96:	40c2      	lsrs	r2, r0
 8009b98:	6163      	str	r3, [r4, #20]
 8009b9a:	9201      	str	r2, [sp, #4]
 8009b9c:	9b01      	ldr	r3, [sp, #4]
 8009b9e:	61a3      	str	r3, [r4, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	bf0c      	ite	eq
 8009ba4:	2201      	moveq	r2, #1
 8009ba6:	2202      	movne	r2, #2
 8009ba8:	6122      	str	r2, [r4, #16]
 8009baa:	b1a5      	cbz	r5, 8009bd6 <__d2b+0x92>
 8009bac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009bb0:	4405      	add	r5, r0
 8009bb2:	603d      	str	r5, [r7, #0]
 8009bb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009bb8:	6030      	str	r0, [r6, #0]
 8009bba:	4620      	mov	r0, r4
 8009bbc:	b003      	add	sp, #12
 8009bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bc2:	6161      	str	r1, [r4, #20]
 8009bc4:	e7ea      	b.n	8009b9c <__d2b+0x58>
 8009bc6:	a801      	add	r0, sp, #4
 8009bc8:	f7ff fd61 	bl	800968e <__lo0bits>
 8009bcc:	9b01      	ldr	r3, [sp, #4]
 8009bce:	6163      	str	r3, [r4, #20]
 8009bd0:	3020      	adds	r0, #32
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	e7e8      	b.n	8009ba8 <__d2b+0x64>
 8009bd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009bde:	6038      	str	r0, [r7, #0]
 8009be0:	6918      	ldr	r0, [r3, #16]
 8009be2:	f7ff fd35 	bl	8009650 <__hi0bits>
 8009be6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bea:	e7e5      	b.n	8009bb8 <__d2b+0x74>
 8009bec:	0800d66c 	.word	0x0800d66c
 8009bf0:	0800d67d 	.word	0x0800d67d

08009bf4 <__ssputs_r>:
 8009bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	688e      	ldr	r6, [r1, #8]
 8009bfa:	461f      	mov	r7, r3
 8009bfc:	42be      	cmp	r6, r7
 8009bfe:	680b      	ldr	r3, [r1, #0]
 8009c00:	4682      	mov	sl, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	4690      	mov	r8, r2
 8009c06:	d82d      	bhi.n	8009c64 <__ssputs_r+0x70>
 8009c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c10:	d026      	beq.n	8009c60 <__ssputs_r+0x6c>
 8009c12:	6965      	ldr	r5, [r4, #20]
 8009c14:	6909      	ldr	r1, [r1, #16]
 8009c16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c1a:	eba3 0901 	sub.w	r9, r3, r1
 8009c1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c22:	1c7b      	adds	r3, r7, #1
 8009c24:	444b      	add	r3, r9
 8009c26:	106d      	asrs	r5, r5, #1
 8009c28:	429d      	cmp	r5, r3
 8009c2a:	bf38      	it	cc
 8009c2c:	461d      	movcc	r5, r3
 8009c2e:	0553      	lsls	r3, r2, #21
 8009c30:	d527      	bpl.n	8009c82 <__ssputs_r+0x8e>
 8009c32:	4629      	mov	r1, r5
 8009c34:	f7ff fbd8 	bl	80093e8 <_malloc_r>
 8009c38:	4606      	mov	r6, r0
 8009c3a:	b360      	cbz	r0, 8009c96 <__ssputs_r+0xa2>
 8009c3c:	6921      	ldr	r1, [r4, #16]
 8009c3e:	464a      	mov	r2, r9
 8009c40:	f000 fbcc 	bl	800a3dc <memcpy>
 8009c44:	89a3      	ldrh	r3, [r4, #12]
 8009c46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c4e:	81a3      	strh	r3, [r4, #12]
 8009c50:	6126      	str	r6, [r4, #16]
 8009c52:	6165      	str	r5, [r4, #20]
 8009c54:	444e      	add	r6, r9
 8009c56:	eba5 0509 	sub.w	r5, r5, r9
 8009c5a:	6026      	str	r6, [r4, #0]
 8009c5c:	60a5      	str	r5, [r4, #8]
 8009c5e:	463e      	mov	r6, r7
 8009c60:	42be      	cmp	r6, r7
 8009c62:	d900      	bls.n	8009c66 <__ssputs_r+0x72>
 8009c64:	463e      	mov	r6, r7
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	4632      	mov	r2, r6
 8009c6a:	4641      	mov	r1, r8
 8009c6c:	f000 fb6a 	bl	800a344 <memmove>
 8009c70:	68a3      	ldr	r3, [r4, #8]
 8009c72:	1b9b      	subs	r3, r3, r6
 8009c74:	60a3      	str	r3, [r4, #8]
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	4433      	add	r3, r6
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c82:	462a      	mov	r2, r5
 8009c84:	f000 fbfc 	bl	800a480 <_realloc_r>
 8009c88:	4606      	mov	r6, r0
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d1e0      	bne.n	8009c50 <__ssputs_r+0x5c>
 8009c8e:	6921      	ldr	r1, [r4, #16]
 8009c90:	4650      	mov	r0, sl
 8009c92:	f7ff fb35 	bl	8009300 <_free_r>
 8009c96:	230c      	movs	r3, #12
 8009c98:	f8ca 3000 	str.w	r3, [sl]
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ca2:	81a3      	strh	r3, [r4, #12]
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	e7e9      	b.n	8009c7e <__ssputs_r+0x8a>
	...

08009cac <_svfiprintf_r>:
 8009cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	4698      	mov	r8, r3
 8009cb2:	898b      	ldrh	r3, [r1, #12]
 8009cb4:	061b      	lsls	r3, r3, #24
 8009cb6:	b09d      	sub	sp, #116	@ 0x74
 8009cb8:	4607      	mov	r7, r0
 8009cba:	460d      	mov	r5, r1
 8009cbc:	4614      	mov	r4, r2
 8009cbe:	d510      	bpl.n	8009ce2 <_svfiprintf_r+0x36>
 8009cc0:	690b      	ldr	r3, [r1, #16]
 8009cc2:	b973      	cbnz	r3, 8009ce2 <_svfiprintf_r+0x36>
 8009cc4:	2140      	movs	r1, #64	@ 0x40
 8009cc6:	f7ff fb8f 	bl	80093e8 <_malloc_r>
 8009cca:	6028      	str	r0, [r5, #0]
 8009ccc:	6128      	str	r0, [r5, #16]
 8009cce:	b930      	cbnz	r0, 8009cde <_svfiprintf_r+0x32>
 8009cd0:	230c      	movs	r3, #12
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd8:	b01d      	add	sp, #116	@ 0x74
 8009cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cde:	2340      	movs	r3, #64	@ 0x40
 8009ce0:	616b      	str	r3, [r5, #20]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ce6:	2320      	movs	r3, #32
 8009ce8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cf0:	2330      	movs	r3, #48	@ 0x30
 8009cf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e90 <_svfiprintf_r+0x1e4>
 8009cf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cfa:	f04f 0901 	mov.w	r9, #1
 8009cfe:	4623      	mov	r3, r4
 8009d00:	469a      	mov	sl, r3
 8009d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d06:	b10a      	cbz	r2, 8009d0c <_svfiprintf_r+0x60>
 8009d08:	2a25      	cmp	r2, #37	@ 0x25
 8009d0a:	d1f9      	bne.n	8009d00 <_svfiprintf_r+0x54>
 8009d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d10:	d00b      	beq.n	8009d2a <_svfiprintf_r+0x7e>
 8009d12:	465b      	mov	r3, fp
 8009d14:	4622      	mov	r2, r4
 8009d16:	4629      	mov	r1, r5
 8009d18:	4638      	mov	r0, r7
 8009d1a:	f7ff ff6b 	bl	8009bf4 <__ssputs_r>
 8009d1e:	3001      	adds	r0, #1
 8009d20:	f000 80a7 	beq.w	8009e72 <_svfiprintf_r+0x1c6>
 8009d24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d26:	445a      	add	r2, fp
 8009d28:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 809f 	beq.w	8009e72 <_svfiprintf_r+0x1c6>
 8009d34:	2300      	movs	r3, #0
 8009d36:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d3e:	f10a 0a01 	add.w	sl, sl, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	9307      	str	r3, [sp, #28]
 8009d46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d4c:	4654      	mov	r4, sl
 8009d4e:	2205      	movs	r2, #5
 8009d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d54:	484e      	ldr	r0, [pc, #312]	@ (8009e90 <_svfiprintf_r+0x1e4>)
 8009d56:	f7f6 fa3b 	bl	80001d0 <memchr>
 8009d5a:	9a04      	ldr	r2, [sp, #16]
 8009d5c:	b9d8      	cbnz	r0, 8009d96 <_svfiprintf_r+0xea>
 8009d5e:	06d0      	lsls	r0, r2, #27
 8009d60:	bf44      	itt	mi
 8009d62:	2320      	movmi	r3, #32
 8009d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d68:	0711      	lsls	r1, r2, #28
 8009d6a:	bf44      	itt	mi
 8009d6c:	232b      	movmi	r3, #43	@ 0x2b
 8009d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d72:	f89a 3000 	ldrb.w	r3, [sl]
 8009d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d78:	d015      	beq.n	8009da6 <_svfiprintf_r+0xfa>
 8009d7a:	9a07      	ldr	r2, [sp, #28]
 8009d7c:	4654      	mov	r4, sl
 8009d7e:	2000      	movs	r0, #0
 8009d80:	f04f 0c0a 	mov.w	ip, #10
 8009d84:	4621      	mov	r1, r4
 8009d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d8a:	3b30      	subs	r3, #48	@ 0x30
 8009d8c:	2b09      	cmp	r3, #9
 8009d8e:	d94b      	bls.n	8009e28 <_svfiprintf_r+0x17c>
 8009d90:	b1b0      	cbz	r0, 8009dc0 <_svfiprintf_r+0x114>
 8009d92:	9207      	str	r2, [sp, #28]
 8009d94:	e014      	b.n	8009dc0 <_svfiprintf_r+0x114>
 8009d96:	eba0 0308 	sub.w	r3, r0, r8
 8009d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	46a2      	mov	sl, r4
 8009da4:	e7d2      	b.n	8009d4c <_svfiprintf_r+0xa0>
 8009da6:	9b03      	ldr	r3, [sp, #12]
 8009da8:	1d19      	adds	r1, r3, #4
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	9103      	str	r1, [sp, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	bfbb      	ittet	lt
 8009db2:	425b      	neglt	r3, r3
 8009db4:	f042 0202 	orrlt.w	r2, r2, #2
 8009db8:	9307      	strge	r3, [sp, #28]
 8009dba:	9307      	strlt	r3, [sp, #28]
 8009dbc:	bfb8      	it	lt
 8009dbe:	9204      	strlt	r2, [sp, #16]
 8009dc0:	7823      	ldrb	r3, [r4, #0]
 8009dc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dc4:	d10a      	bne.n	8009ddc <_svfiprintf_r+0x130>
 8009dc6:	7863      	ldrb	r3, [r4, #1]
 8009dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dca:	d132      	bne.n	8009e32 <_svfiprintf_r+0x186>
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	1d1a      	adds	r2, r3, #4
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	9203      	str	r2, [sp, #12]
 8009dd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009dd8:	3402      	adds	r4, #2
 8009dda:	9305      	str	r3, [sp, #20]
 8009ddc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ea0 <_svfiprintf_r+0x1f4>
 8009de0:	7821      	ldrb	r1, [r4, #0]
 8009de2:	2203      	movs	r2, #3
 8009de4:	4650      	mov	r0, sl
 8009de6:	f7f6 f9f3 	bl	80001d0 <memchr>
 8009dea:	b138      	cbz	r0, 8009dfc <_svfiprintf_r+0x150>
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	eba0 000a 	sub.w	r0, r0, sl
 8009df2:	2240      	movs	r2, #64	@ 0x40
 8009df4:	4082      	lsls	r2, r0
 8009df6:	4313      	orrs	r3, r2
 8009df8:	3401      	adds	r4, #1
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e00:	4824      	ldr	r0, [pc, #144]	@ (8009e94 <_svfiprintf_r+0x1e8>)
 8009e02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e06:	2206      	movs	r2, #6
 8009e08:	f7f6 f9e2 	bl	80001d0 <memchr>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d036      	beq.n	8009e7e <_svfiprintf_r+0x1d2>
 8009e10:	4b21      	ldr	r3, [pc, #132]	@ (8009e98 <_svfiprintf_r+0x1ec>)
 8009e12:	bb1b      	cbnz	r3, 8009e5c <_svfiprintf_r+0x1b0>
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	3307      	adds	r3, #7
 8009e18:	f023 0307 	bic.w	r3, r3, #7
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	9303      	str	r3, [sp, #12]
 8009e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e22:	4433      	add	r3, r6
 8009e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e26:	e76a      	b.n	8009cfe <_svfiprintf_r+0x52>
 8009e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	2001      	movs	r0, #1
 8009e30:	e7a8      	b.n	8009d84 <_svfiprintf_r+0xd8>
 8009e32:	2300      	movs	r3, #0
 8009e34:	3401      	adds	r4, #1
 8009e36:	9305      	str	r3, [sp, #20]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	f04f 0c0a 	mov.w	ip, #10
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e44:	3a30      	subs	r2, #48	@ 0x30
 8009e46:	2a09      	cmp	r2, #9
 8009e48:	d903      	bls.n	8009e52 <_svfiprintf_r+0x1a6>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0c6      	beq.n	8009ddc <_svfiprintf_r+0x130>
 8009e4e:	9105      	str	r1, [sp, #20]
 8009e50:	e7c4      	b.n	8009ddc <_svfiprintf_r+0x130>
 8009e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e56:	4604      	mov	r4, r0
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e7f0      	b.n	8009e3e <_svfiprintf_r+0x192>
 8009e5c:	ab03      	add	r3, sp, #12
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	462a      	mov	r2, r5
 8009e62:	4b0e      	ldr	r3, [pc, #56]	@ (8009e9c <_svfiprintf_r+0x1f0>)
 8009e64:	a904      	add	r1, sp, #16
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7fd fd90 	bl	800798c <_printf_float>
 8009e6c:	1c42      	adds	r2, r0, #1
 8009e6e:	4606      	mov	r6, r0
 8009e70:	d1d6      	bne.n	8009e20 <_svfiprintf_r+0x174>
 8009e72:	89ab      	ldrh	r3, [r5, #12]
 8009e74:	065b      	lsls	r3, r3, #25
 8009e76:	f53f af2d 	bmi.w	8009cd4 <_svfiprintf_r+0x28>
 8009e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e7c:	e72c      	b.n	8009cd8 <_svfiprintf_r+0x2c>
 8009e7e:	ab03      	add	r3, sp, #12
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	462a      	mov	r2, r5
 8009e84:	4b05      	ldr	r3, [pc, #20]	@ (8009e9c <_svfiprintf_r+0x1f0>)
 8009e86:	a904      	add	r1, sp, #16
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7fe f817 	bl	8007ebc <_printf_i>
 8009e8e:	e7ed      	b.n	8009e6c <_svfiprintf_r+0x1c0>
 8009e90:	0800d6d6 	.word	0x0800d6d6
 8009e94:	0800d6e0 	.word	0x0800d6e0
 8009e98:	0800798d 	.word	0x0800798d
 8009e9c:	08009bf5 	.word	0x08009bf5
 8009ea0:	0800d6dc 	.word	0x0800d6dc

08009ea4 <__sfputc_r>:
 8009ea4:	6893      	ldr	r3, [r2, #8]
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	b410      	push	{r4}
 8009eac:	6093      	str	r3, [r2, #8]
 8009eae:	da08      	bge.n	8009ec2 <__sfputc_r+0x1e>
 8009eb0:	6994      	ldr	r4, [r2, #24]
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	db01      	blt.n	8009eba <__sfputc_r+0x16>
 8009eb6:	290a      	cmp	r1, #10
 8009eb8:	d103      	bne.n	8009ec2 <__sfputc_r+0x1e>
 8009eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ebe:	f7fe bab2 	b.w	8008426 <__swbuf_r>
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	1c58      	adds	r0, r3, #1
 8009ec6:	6010      	str	r0, [r2, #0]
 8009ec8:	7019      	strb	r1, [r3, #0]
 8009eca:	4608      	mov	r0, r1
 8009ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <__sfputs_r>:
 8009ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	18d5      	adds	r5, r2, r3
 8009edc:	42ac      	cmp	r4, r5
 8009ede:	d101      	bne.n	8009ee4 <__sfputs_r+0x12>
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	e007      	b.n	8009ef4 <__sfputs_r+0x22>
 8009ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee8:	463a      	mov	r2, r7
 8009eea:	4630      	mov	r0, r6
 8009eec:	f7ff ffda 	bl	8009ea4 <__sfputc_r>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d1f3      	bne.n	8009edc <__sfputs_r+0xa>
 8009ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ef8 <_vfiprintf_r>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	460d      	mov	r5, r1
 8009efe:	b09d      	sub	sp, #116	@ 0x74
 8009f00:	4614      	mov	r4, r2
 8009f02:	4698      	mov	r8, r3
 8009f04:	4606      	mov	r6, r0
 8009f06:	b118      	cbz	r0, 8009f10 <_vfiprintf_r+0x18>
 8009f08:	6a03      	ldr	r3, [r0, #32]
 8009f0a:	b90b      	cbnz	r3, 8009f10 <_vfiprintf_r+0x18>
 8009f0c:	f7fe f980 	bl	8008210 <__sinit>
 8009f10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f12:	07d9      	lsls	r1, r3, #31
 8009f14:	d405      	bmi.n	8009f22 <_vfiprintf_r+0x2a>
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	059a      	lsls	r2, r3, #22
 8009f1a:	d402      	bmi.n	8009f22 <_vfiprintf_r+0x2a>
 8009f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f1e:	f7fe fb94 	bl	800864a <__retarget_lock_acquire_recursive>
 8009f22:	89ab      	ldrh	r3, [r5, #12]
 8009f24:	071b      	lsls	r3, r3, #28
 8009f26:	d501      	bpl.n	8009f2c <_vfiprintf_r+0x34>
 8009f28:	692b      	ldr	r3, [r5, #16]
 8009f2a:	b99b      	cbnz	r3, 8009f54 <_vfiprintf_r+0x5c>
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f7fe fab8 	bl	80084a4 <__swsetup_r>
 8009f34:	b170      	cbz	r0, 8009f54 <_vfiprintf_r+0x5c>
 8009f36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f38:	07dc      	lsls	r4, r3, #31
 8009f3a:	d504      	bpl.n	8009f46 <_vfiprintf_r+0x4e>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	b01d      	add	sp, #116	@ 0x74
 8009f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	0598      	lsls	r0, r3, #22
 8009f4a:	d4f7      	bmi.n	8009f3c <_vfiprintf_r+0x44>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f4e:	f7fe fb7d 	bl	800864c <__retarget_lock_release_recursive>
 8009f52:	e7f3      	b.n	8009f3c <_vfiprintf_r+0x44>
 8009f54:	2300      	movs	r3, #0
 8009f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f62:	2330      	movs	r3, #48	@ 0x30
 8009f64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a114 <_vfiprintf_r+0x21c>
 8009f68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f6c:	f04f 0901 	mov.w	r9, #1
 8009f70:	4623      	mov	r3, r4
 8009f72:	469a      	mov	sl, r3
 8009f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f78:	b10a      	cbz	r2, 8009f7e <_vfiprintf_r+0x86>
 8009f7a:	2a25      	cmp	r2, #37	@ 0x25
 8009f7c:	d1f9      	bne.n	8009f72 <_vfiprintf_r+0x7a>
 8009f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f82:	d00b      	beq.n	8009f9c <_vfiprintf_r+0xa4>
 8009f84:	465b      	mov	r3, fp
 8009f86:	4622      	mov	r2, r4
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f7ff ffa1 	bl	8009ed2 <__sfputs_r>
 8009f90:	3001      	adds	r0, #1
 8009f92:	f000 80a7 	beq.w	800a0e4 <_vfiprintf_r+0x1ec>
 8009f96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f98:	445a      	add	r2, fp
 8009f9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 809f 	beq.w	800a0e4 <_vfiprintf_r+0x1ec>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb0:	f10a 0a01 	add.w	sl, sl, #1
 8009fb4:	9304      	str	r3, [sp, #16]
 8009fb6:	9307      	str	r3, [sp, #28]
 8009fb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fbc:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fbe:	4654      	mov	r4, sl
 8009fc0:	2205      	movs	r2, #5
 8009fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fc6:	4853      	ldr	r0, [pc, #332]	@ (800a114 <_vfiprintf_r+0x21c>)
 8009fc8:	f7f6 f902 	bl	80001d0 <memchr>
 8009fcc:	9a04      	ldr	r2, [sp, #16]
 8009fce:	b9d8      	cbnz	r0, 800a008 <_vfiprintf_r+0x110>
 8009fd0:	06d1      	lsls	r1, r2, #27
 8009fd2:	bf44      	itt	mi
 8009fd4:	2320      	movmi	r3, #32
 8009fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fda:	0713      	lsls	r3, r2, #28
 8009fdc:	bf44      	itt	mi
 8009fde:	232b      	movmi	r3, #43	@ 0x2b
 8009fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fea:	d015      	beq.n	800a018 <_vfiprintf_r+0x120>
 8009fec:	9a07      	ldr	r2, [sp, #28]
 8009fee:	4654      	mov	r4, sl
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f04f 0c0a 	mov.w	ip, #10
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ffc:	3b30      	subs	r3, #48	@ 0x30
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d94b      	bls.n	800a09a <_vfiprintf_r+0x1a2>
 800a002:	b1b0      	cbz	r0, 800a032 <_vfiprintf_r+0x13a>
 800a004:	9207      	str	r2, [sp, #28]
 800a006:	e014      	b.n	800a032 <_vfiprintf_r+0x13a>
 800a008:	eba0 0308 	sub.w	r3, r0, r8
 800a00c:	fa09 f303 	lsl.w	r3, r9, r3
 800a010:	4313      	orrs	r3, r2
 800a012:	9304      	str	r3, [sp, #16]
 800a014:	46a2      	mov	sl, r4
 800a016:	e7d2      	b.n	8009fbe <_vfiprintf_r+0xc6>
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	1d19      	adds	r1, r3, #4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	9103      	str	r1, [sp, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	bfbb      	ittet	lt
 800a024:	425b      	neglt	r3, r3
 800a026:	f042 0202 	orrlt.w	r2, r2, #2
 800a02a:	9307      	strge	r3, [sp, #28]
 800a02c:	9307      	strlt	r3, [sp, #28]
 800a02e:	bfb8      	it	lt
 800a030:	9204      	strlt	r2, [sp, #16]
 800a032:	7823      	ldrb	r3, [r4, #0]
 800a034:	2b2e      	cmp	r3, #46	@ 0x2e
 800a036:	d10a      	bne.n	800a04e <_vfiprintf_r+0x156>
 800a038:	7863      	ldrb	r3, [r4, #1]
 800a03a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a03c:	d132      	bne.n	800a0a4 <_vfiprintf_r+0x1ac>
 800a03e:	9b03      	ldr	r3, [sp, #12]
 800a040:	1d1a      	adds	r2, r3, #4
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	9203      	str	r2, [sp, #12]
 800a046:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a04a:	3402      	adds	r4, #2
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a124 <_vfiprintf_r+0x22c>
 800a052:	7821      	ldrb	r1, [r4, #0]
 800a054:	2203      	movs	r2, #3
 800a056:	4650      	mov	r0, sl
 800a058:	f7f6 f8ba 	bl	80001d0 <memchr>
 800a05c:	b138      	cbz	r0, 800a06e <_vfiprintf_r+0x176>
 800a05e:	9b04      	ldr	r3, [sp, #16]
 800a060:	eba0 000a 	sub.w	r0, r0, sl
 800a064:	2240      	movs	r2, #64	@ 0x40
 800a066:	4082      	lsls	r2, r0
 800a068:	4313      	orrs	r3, r2
 800a06a:	3401      	adds	r4, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a072:	4829      	ldr	r0, [pc, #164]	@ (800a118 <_vfiprintf_r+0x220>)
 800a074:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a078:	2206      	movs	r2, #6
 800a07a:	f7f6 f8a9 	bl	80001d0 <memchr>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d03f      	beq.n	800a102 <_vfiprintf_r+0x20a>
 800a082:	4b26      	ldr	r3, [pc, #152]	@ (800a11c <_vfiprintf_r+0x224>)
 800a084:	bb1b      	cbnz	r3, 800a0ce <_vfiprintf_r+0x1d6>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	3307      	adds	r3, #7
 800a08a:	f023 0307 	bic.w	r3, r3, #7
 800a08e:	3308      	adds	r3, #8
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a094:	443b      	add	r3, r7
 800a096:	9309      	str	r3, [sp, #36]	@ 0x24
 800a098:	e76a      	b.n	8009f70 <_vfiprintf_r+0x78>
 800a09a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a09e:	460c      	mov	r4, r1
 800a0a0:	2001      	movs	r0, #1
 800a0a2:	e7a8      	b.n	8009ff6 <_vfiprintf_r+0xfe>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	3401      	adds	r4, #1
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	f04f 0c0a 	mov.w	ip, #10
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0b6:	3a30      	subs	r2, #48	@ 0x30
 800a0b8:	2a09      	cmp	r2, #9
 800a0ba:	d903      	bls.n	800a0c4 <_vfiprintf_r+0x1cc>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0c6      	beq.n	800a04e <_vfiprintf_r+0x156>
 800a0c0:	9105      	str	r1, [sp, #20]
 800a0c2:	e7c4      	b.n	800a04e <_vfiprintf_r+0x156>
 800a0c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e7f0      	b.n	800a0b0 <_vfiprintf_r+0x1b8>
 800a0ce:	ab03      	add	r3, sp, #12
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4b12      	ldr	r3, [pc, #72]	@ (800a120 <_vfiprintf_r+0x228>)
 800a0d6:	a904      	add	r1, sp, #16
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f7fd fc57 	bl	800798c <_printf_float>
 800a0de:	4607      	mov	r7, r0
 800a0e0:	1c78      	adds	r0, r7, #1
 800a0e2:	d1d6      	bne.n	800a092 <_vfiprintf_r+0x19a>
 800a0e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0e6:	07d9      	lsls	r1, r3, #31
 800a0e8:	d405      	bmi.n	800a0f6 <_vfiprintf_r+0x1fe>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_vfiprintf_r+0x1fe>
 800a0f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0f2:	f7fe faab 	bl	800864c <__retarget_lock_release_recursive>
 800a0f6:	89ab      	ldrh	r3, [r5, #12]
 800a0f8:	065b      	lsls	r3, r3, #25
 800a0fa:	f53f af1f 	bmi.w	8009f3c <_vfiprintf_r+0x44>
 800a0fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a100:	e71e      	b.n	8009f40 <_vfiprintf_r+0x48>
 800a102:	ab03      	add	r3, sp, #12
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	462a      	mov	r2, r5
 800a108:	4b05      	ldr	r3, [pc, #20]	@ (800a120 <_vfiprintf_r+0x228>)
 800a10a:	a904      	add	r1, sp, #16
 800a10c:	4630      	mov	r0, r6
 800a10e:	f7fd fed5 	bl	8007ebc <_printf_i>
 800a112:	e7e4      	b.n	800a0de <_vfiprintf_r+0x1e6>
 800a114:	0800d6d6 	.word	0x0800d6d6
 800a118:	0800d6e0 	.word	0x0800d6e0
 800a11c:	0800798d 	.word	0x0800798d
 800a120:	08009ed3 	.word	0x08009ed3
 800a124:	0800d6dc 	.word	0x0800d6dc

0800a128 <__sflush_r>:
 800a128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a130:	0716      	lsls	r6, r2, #28
 800a132:	4605      	mov	r5, r0
 800a134:	460c      	mov	r4, r1
 800a136:	d454      	bmi.n	800a1e2 <__sflush_r+0xba>
 800a138:	684b      	ldr	r3, [r1, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	dc02      	bgt.n	800a144 <__sflush_r+0x1c>
 800a13e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a140:	2b00      	cmp	r3, #0
 800a142:	dd48      	ble.n	800a1d6 <__sflush_r+0xae>
 800a144:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a146:	2e00      	cmp	r6, #0
 800a148:	d045      	beq.n	800a1d6 <__sflush_r+0xae>
 800a14a:	2300      	movs	r3, #0
 800a14c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a150:	682f      	ldr	r7, [r5, #0]
 800a152:	6a21      	ldr	r1, [r4, #32]
 800a154:	602b      	str	r3, [r5, #0]
 800a156:	d030      	beq.n	800a1ba <__sflush_r+0x92>
 800a158:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a15a:	89a3      	ldrh	r3, [r4, #12]
 800a15c:	0759      	lsls	r1, r3, #29
 800a15e:	d505      	bpl.n	800a16c <__sflush_r+0x44>
 800a160:	6863      	ldr	r3, [r4, #4]
 800a162:	1ad2      	subs	r2, r2, r3
 800a164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a166:	b10b      	cbz	r3, 800a16c <__sflush_r+0x44>
 800a168:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a16a:	1ad2      	subs	r2, r2, r3
 800a16c:	2300      	movs	r3, #0
 800a16e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a170:	6a21      	ldr	r1, [r4, #32]
 800a172:	4628      	mov	r0, r5
 800a174:	47b0      	blx	r6
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	d106      	bne.n	800a18a <__sflush_r+0x62>
 800a17c:	6829      	ldr	r1, [r5, #0]
 800a17e:	291d      	cmp	r1, #29
 800a180:	d82b      	bhi.n	800a1da <__sflush_r+0xb2>
 800a182:	4a2a      	ldr	r2, [pc, #168]	@ (800a22c <__sflush_r+0x104>)
 800a184:	40ca      	lsrs	r2, r1
 800a186:	07d6      	lsls	r6, r2, #31
 800a188:	d527      	bpl.n	800a1da <__sflush_r+0xb2>
 800a18a:	2200      	movs	r2, #0
 800a18c:	6062      	str	r2, [r4, #4]
 800a18e:	04d9      	lsls	r1, r3, #19
 800a190:	6922      	ldr	r2, [r4, #16]
 800a192:	6022      	str	r2, [r4, #0]
 800a194:	d504      	bpl.n	800a1a0 <__sflush_r+0x78>
 800a196:	1c42      	adds	r2, r0, #1
 800a198:	d101      	bne.n	800a19e <__sflush_r+0x76>
 800a19a:	682b      	ldr	r3, [r5, #0]
 800a19c:	b903      	cbnz	r3, 800a1a0 <__sflush_r+0x78>
 800a19e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1a2:	602f      	str	r7, [r5, #0]
 800a1a4:	b1b9      	cbz	r1, 800a1d6 <__sflush_r+0xae>
 800a1a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1aa:	4299      	cmp	r1, r3
 800a1ac:	d002      	beq.n	800a1b4 <__sflush_r+0x8c>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f7ff f8a6 	bl	8009300 <_free_r>
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a1b8:	e00d      	b.n	800a1d6 <__sflush_r+0xae>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b0      	blx	r6
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	1c50      	adds	r0, r2, #1
 800a1c4:	d1c9      	bne.n	800a15a <__sflush_r+0x32>
 800a1c6:	682b      	ldr	r3, [r5, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0c6      	beq.n	800a15a <__sflush_r+0x32>
 800a1cc:	2b1d      	cmp	r3, #29
 800a1ce:	d001      	beq.n	800a1d4 <__sflush_r+0xac>
 800a1d0:	2b16      	cmp	r3, #22
 800a1d2:	d11e      	bne.n	800a212 <__sflush_r+0xea>
 800a1d4:	602f      	str	r7, [r5, #0]
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	e022      	b.n	800a220 <__sflush_r+0xf8>
 800a1da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1de:	b21b      	sxth	r3, r3
 800a1e0:	e01b      	b.n	800a21a <__sflush_r+0xf2>
 800a1e2:	690f      	ldr	r7, [r1, #16]
 800a1e4:	2f00      	cmp	r7, #0
 800a1e6:	d0f6      	beq.n	800a1d6 <__sflush_r+0xae>
 800a1e8:	0793      	lsls	r3, r2, #30
 800a1ea:	680e      	ldr	r6, [r1, #0]
 800a1ec:	bf08      	it	eq
 800a1ee:	694b      	ldreq	r3, [r1, #20]
 800a1f0:	600f      	str	r7, [r1, #0]
 800a1f2:	bf18      	it	ne
 800a1f4:	2300      	movne	r3, #0
 800a1f6:	eba6 0807 	sub.w	r8, r6, r7
 800a1fa:	608b      	str	r3, [r1, #8]
 800a1fc:	f1b8 0f00 	cmp.w	r8, #0
 800a200:	dde9      	ble.n	800a1d6 <__sflush_r+0xae>
 800a202:	6a21      	ldr	r1, [r4, #32]
 800a204:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a206:	4643      	mov	r3, r8
 800a208:	463a      	mov	r2, r7
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b0      	blx	r6
 800a20e:	2800      	cmp	r0, #0
 800a210:	dc08      	bgt.n	800a224 <__sflush_r+0xfc>
 800a212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	f04f 30ff 	mov.w	r0, #4294967295
 800a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a224:	4407      	add	r7, r0
 800a226:	eba8 0800 	sub.w	r8, r8, r0
 800a22a:	e7e7      	b.n	800a1fc <__sflush_r+0xd4>
 800a22c:	20400001 	.word	0x20400001

0800a230 <_fflush_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	690b      	ldr	r3, [r1, #16]
 800a234:	4605      	mov	r5, r0
 800a236:	460c      	mov	r4, r1
 800a238:	b913      	cbnz	r3, 800a240 <_fflush_r+0x10>
 800a23a:	2500      	movs	r5, #0
 800a23c:	4628      	mov	r0, r5
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	b118      	cbz	r0, 800a24a <_fflush_r+0x1a>
 800a242:	6a03      	ldr	r3, [r0, #32]
 800a244:	b90b      	cbnz	r3, 800a24a <_fflush_r+0x1a>
 800a246:	f7fd ffe3 	bl	8008210 <__sinit>
 800a24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0f3      	beq.n	800a23a <_fflush_r+0xa>
 800a252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a254:	07d0      	lsls	r0, r2, #31
 800a256:	d404      	bmi.n	800a262 <_fflush_r+0x32>
 800a258:	0599      	lsls	r1, r3, #22
 800a25a:	d402      	bmi.n	800a262 <_fflush_r+0x32>
 800a25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a25e:	f7fe f9f4 	bl	800864a <__retarget_lock_acquire_recursive>
 800a262:	4628      	mov	r0, r5
 800a264:	4621      	mov	r1, r4
 800a266:	f7ff ff5f 	bl	800a128 <__sflush_r>
 800a26a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a26c:	07da      	lsls	r2, r3, #31
 800a26e:	4605      	mov	r5, r0
 800a270:	d4e4      	bmi.n	800a23c <_fflush_r+0xc>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	059b      	lsls	r3, r3, #22
 800a276:	d4e1      	bmi.n	800a23c <_fflush_r+0xc>
 800a278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a27a:	f7fe f9e7 	bl	800864c <__retarget_lock_release_recursive>
 800a27e:	e7dd      	b.n	800a23c <_fflush_r+0xc>

0800a280 <__swhatbuf_r>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	460c      	mov	r4, r1
 800a284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a288:	2900      	cmp	r1, #0
 800a28a:	b096      	sub	sp, #88	@ 0x58
 800a28c:	4615      	mov	r5, r2
 800a28e:	461e      	mov	r6, r3
 800a290:	da0d      	bge.n	800a2ae <__swhatbuf_r+0x2e>
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a298:	f04f 0100 	mov.w	r1, #0
 800a29c:	bf14      	ite	ne
 800a29e:	2340      	movne	r3, #64	@ 0x40
 800a2a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	6031      	str	r1, [r6, #0]
 800a2a8:	602b      	str	r3, [r5, #0]
 800a2aa:	b016      	add	sp, #88	@ 0x58
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
 800a2ae:	466a      	mov	r2, sp
 800a2b0:	f000 f862 	bl	800a378 <_fstat_r>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	dbec      	blt.n	800a292 <__swhatbuf_r+0x12>
 800a2b8:	9901      	ldr	r1, [sp, #4]
 800a2ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a2be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2c2:	4259      	negs	r1, r3
 800a2c4:	4159      	adcs	r1, r3
 800a2c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2ca:	e7eb      	b.n	800a2a4 <__swhatbuf_r+0x24>

0800a2cc <__smakebuf_r>:
 800a2cc:	898b      	ldrh	r3, [r1, #12]
 800a2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2d0:	079d      	lsls	r5, r3, #30
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	d507      	bpl.n	800a2e8 <__smakebuf_r+0x1c>
 800a2d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	6123      	str	r3, [r4, #16]
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	6163      	str	r3, [r4, #20]
 800a2e4:	b003      	add	sp, #12
 800a2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e8:	ab01      	add	r3, sp, #4
 800a2ea:	466a      	mov	r2, sp
 800a2ec:	f7ff ffc8 	bl	800a280 <__swhatbuf_r>
 800a2f0:	9f00      	ldr	r7, [sp, #0]
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7ff f876 	bl	80093e8 <_malloc_r>
 800a2fc:	b948      	cbnz	r0, 800a312 <__smakebuf_r+0x46>
 800a2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a302:	059a      	lsls	r2, r3, #22
 800a304:	d4ee      	bmi.n	800a2e4 <__smakebuf_r+0x18>
 800a306:	f023 0303 	bic.w	r3, r3, #3
 800a30a:	f043 0302 	orr.w	r3, r3, #2
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	e7e2      	b.n	800a2d8 <__smakebuf_r+0xc>
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	6020      	str	r0, [r4, #0]
 800a316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	9b01      	ldr	r3, [sp, #4]
 800a31e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a322:	b15b      	cbz	r3, 800a33c <__smakebuf_r+0x70>
 800a324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a328:	4630      	mov	r0, r6
 800a32a:	f000 f837 	bl	800a39c <_isatty_r>
 800a32e:	b128      	cbz	r0, 800a33c <__smakebuf_r+0x70>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	f023 0303 	bic.w	r3, r3, #3
 800a336:	f043 0301 	orr.w	r3, r3, #1
 800a33a:	81a3      	strh	r3, [r4, #12]
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	431d      	orrs	r5, r3
 800a340:	81a5      	strh	r5, [r4, #12]
 800a342:	e7cf      	b.n	800a2e4 <__smakebuf_r+0x18>

0800a344 <memmove>:
 800a344:	4288      	cmp	r0, r1
 800a346:	b510      	push	{r4, lr}
 800a348:	eb01 0402 	add.w	r4, r1, r2
 800a34c:	d902      	bls.n	800a354 <memmove+0x10>
 800a34e:	4284      	cmp	r4, r0
 800a350:	4623      	mov	r3, r4
 800a352:	d807      	bhi.n	800a364 <memmove+0x20>
 800a354:	1e43      	subs	r3, r0, #1
 800a356:	42a1      	cmp	r1, r4
 800a358:	d008      	beq.n	800a36c <memmove+0x28>
 800a35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a362:	e7f8      	b.n	800a356 <memmove+0x12>
 800a364:	4402      	add	r2, r0
 800a366:	4601      	mov	r1, r0
 800a368:	428a      	cmp	r2, r1
 800a36a:	d100      	bne.n	800a36e <memmove+0x2a>
 800a36c:	bd10      	pop	{r4, pc}
 800a36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a376:	e7f7      	b.n	800a368 <memmove+0x24>

0800a378 <_fstat_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d07      	ldr	r5, [pc, #28]	@ (800a398 <_fstat_r+0x20>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	4611      	mov	r1, r2
 800a384:	602b      	str	r3, [r5, #0]
 800a386:	f7f7 fd2f 	bl	8001de8 <_fstat>
 800a38a:	1c43      	adds	r3, r0, #1
 800a38c:	d102      	bne.n	800a394 <_fstat_r+0x1c>
 800a38e:	682b      	ldr	r3, [r5, #0]
 800a390:	b103      	cbz	r3, 800a394 <_fstat_r+0x1c>
 800a392:	6023      	str	r3, [r4, #0]
 800a394:	bd38      	pop	{r3, r4, r5, pc}
 800a396:	bf00      	nop
 800a398:	20000580 	.word	0x20000580

0800a39c <_isatty_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4d06      	ldr	r5, [pc, #24]	@ (800a3b8 <_isatty_r+0x1c>)
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	602b      	str	r3, [r5, #0]
 800a3a8:	f7f7 fd2e 	bl	8001e08 <_isatty>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_isatty_r+0x1a>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_isatty_r+0x1a>
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	20000580 	.word	0x20000580

0800a3bc <_sbrk_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d06      	ldr	r5, [pc, #24]	@ (800a3d8 <_sbrk_r+0x1c>)
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	602b      	str	r3, [r5, #0]
 800a3c8:	f7f7 fd36 	bl	8001e38 <_sbrk>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d102      	bne.n	800a3d6 <_sbrk_r+0x1a>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	b103      	cbz	r3, 800a3d6 <_sbrk_r+0x1a>
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	bd38      	pop	{r3, r4, r5, pc}
 800a3d8:	20000580 	.word	0x20000580

0800a3dc <memcpy>:
 800a3dc:	440a      	add	r2, r1
 800a3de:	4291      	cmp	r1, r2
 800a3e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3e4:	d100      	bne.n	800a3e8 <memcpy+0xc>
 800a3e6:	4770      	bx	lr
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3f2:	4291      	cmp	r1, r2
 800a3f4:	d1f9      	bne.n	800a3ea <memcpy+0xe>
 800a3f6:	bd10      	pop	{r4, pc}

0800a3f8 <__assert_func>:
 800a3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3fa:	4614      	mov	r4, r2
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	4b09      	ldr	r3, [pc, #36]	@ (800a424 <__assert_func+0x2c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4605      	mov	r5, r0
 800a404:	68d8      	ldr	r0, [r3, #12]
 800a406:	b14c      	cbz	r4, 800a41c <__assert_func+0x24>
 800a408:	4b07      	ldr	r3, [pc, #28]	@ (800a428 <__assert_func+0x30>)
 800a40a:	9100      	str	r1, [sp, #0]
 800a40c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a410:	4906      	ldr	r1, [pc, #24]	@ (800a42c <__assert_func+0x34>)
 800a412:	462b      	mov	r3, r5
 800a414:	f000 f870 	bl	800a4f8 <fiprintf>
 800a418:	f000 f880 	bl	800a51c <abort>
 800a41c:	4b04      	ldr	r3, [pc, #16]	@ (800a430 <__assert_func+0x38>)
 800a41e:	461c      	mov	r4, r3
 800a420:	e7f3      	b.n	800a40a <__assert_func+0x12>
 800a422:	bf00      	nop
 800a424:	2000001c 	.word	0x2000001c
 800a428:	0800d6f1 	.word	0x0800d6f1
 800a42c:	0800d6fe 	.word	0x0800d6fe
 800a430:	0800d72c 	.word	0x0800d72c

0800a434 <_calloc_r>:
 800a434:	b570      	push	{r4, r5, r6, lr}
 800a436:	fba1 5402 	umull	r5, r4, r1, r2
 800a43a:	b934      	cbnz	r4, 800a44a <_calloc_r+0x16>
 800a43c:	4629      	mov	r1, r5
 800a43e:	f7fe ffd3 	bl	80093e8 <_malloc_r>
 800a442:	4606      	mov	r6, r0
 800a444:	b928      	cbnz	r0, 800a452 <_calloc_r+0x1e>
 800a446:	4630      	mov	r0, r6
 800a448:	bd70      	pop	{r4, r5, r6, pc}
 800a44a:	220c      	movs	r2, #12
 800a44c:	6002      	str	r2, [r0, #0]
 800a44e:	2600      	movs	r6, #0
 800a450:	e7f9      	b.n	800a446 <_calloc_r+0x12>
 800a452:	462a      	mov	r2, r5
 800a454:	4621      	mov	r1, r4
 800a456:	f7fe f87b 	bl	8008550 <memset>
 800a45a:	e7f4      	b.n	800a446 <_calloc_r+0x12>

0800a45c <__ascii_mbtowc>:
 800a45c:	b082      	sub	sp, #8
 800a45e:	b901      	cbnz	r1, 800a462 <__ascii_mbtowc+0x6>
 800a460:	a901      	add	r1, sp, #4
 800a462:	b142      	cbz	r2, 800a476 <__ascii_mbtowc+0x1a>
 800a464:	b14b      	cbz	r3, 800a47a <__ascii_mbtowc+0x1e>
 800a466:	7813      	ldrb	r3, [r2, #0]
 800a468:	600b      	str	r3, [r1, #0]
 800a46a:	7812      	ldrb	r2, [r2, #0]
 800a46c:	1e10      	subs	r0, r2, #0
 800a46e:	bf18      	it	ne
 800a470:	2001      	movne	r0, #1
 800a472:	b002      	add	sp, #8
 800a474:	4770      	bx	lr
 800a476:	4610      	mov	r0, r2
 800a478:	e7fb      	b.n	800a472 <__ascii_mbtowc+0x16>
 800a47a:	f06f 0001 	mvn.w	r0, #1
 800a47e:	e7f8      	b.n	800a472 <__ascii_mbtowc+0x16>

0800a480 <_realloc_r>:
 800a480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a484:	4607      	mov	r7, r0
 800a486:	4614      	mov	r4, r2
 800a488:	460d      	mov	r5, r1
 800a48a:	b921      	cbnz	r1, 800a496 <_realloc_r+0x16>
 800a48c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	4611      	mov	r1, r2
 800a492:	f7fe bfa9 	b.w	80093e8 <_malloc_r>
 800a496:	b92a      	cbnz	r2, 800a4a4 <_realloc_r+0x24>
 800a498:	f7fe ff32 	bl	8009300 <_free_r>
 800a49c:	4625      	mov	r5, r4
 800a49e:	4628      	mov	r0, r5
 800a4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a4:	f000 f841 	bl	800a52a <_malloc_usable_size_r>
 800a4a8:	4284      	cmp	r4, r0
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	d802      	bhi.n	800a4b4 <_realloc_r+0x34>
 800a4ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4b2:	d8f4      	bhi.n	800a49e <_realloc_r+0x1e>
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	f7fe ff96 	bl	80093e8 <_malloc_r>
 800a4bc:	4680      	mov	r8, r0
 800a4be:	b908      	cbnz	r0, 800a4c4 <_realloc_r+0x44>
 800a4c0:	4645      	mov	r5, r8
 800a4c2:	e7ec      	b.n	800a49e <_realloc_r+0x1e>
 800a4c4:	42b4      	cmp	r4, r6
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	bf28      	it	cs
 800a4cc:	4632      	movcs	r2, r6
 800a4ce:	f7ff ff85 	bl	800a3dc <memcpy>
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	f7fe ff13 	bl	8009300 <_free_r>
 800a4da:	e7f1      	b.n	800a4c0 <_realloc_r+0x40>

0800a4dc <__ascii_wctomb>:
 800a4dc:	4603      	mov	r3, r0
 800a4de:	4608      	mov	r0, r1
 800a4e0:	b141      	cbz	r1, 800a4f4 <__ascii_wctomb+0x18>
 800a4e2:	2aff      	cmp	r2, #255	@ 0xff
 800a4e4:	d904      	bls.n	800a4f0 <__ascii_wctomb+0x14>
 800a4e6:	228a      	movs	r2, #138	@ 0x8a
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ee:	4770      	bx	lr
 800a4f0:	700a      	strb	r2, [r1, #0]
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	4770      	bx	lr
	...

0800a4f8 <fiprintf>:
 800a4f8:	b40e      	push	{r1, r2, r3}
 800a4fa:	b503      	push	{r0, r1, lr}
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	ab03      	add	r3, sp, #12
 800a500:	4805      	ldr	r0, [pc, #20]	@ (800a518 <fiprintf+0x20>)
 800a502:	f853 2b04 	ldr.w	r2, [r3], #4
 800a506:	6800      	ldr	r0, [r0, #0]
 800a508:	9301      	str	r3, [sp, #4]
 800a50a:	f7ff fcf5 	bl	8009ef8 <_vfiprintf_r>
 800a50e:	b002      	add	sp, #8
 800a510:	f85d eb04 	ldr.w	lr, [sp], #4
 800a514:	b003      	add	sp, #12
 800a516:	4770      	bx	lr
 800a518:	2000001c 	.word	0x2000001c

0800a51c <abort>:
 800a51c:	b508      	push	{r3, lr}
 800a51e:	2006      	movs	r0, #6
 800a520:	f000 f834 	bl	800a58c <raise>
 800a524:	2001      	movs	r0, #1
 800a526:	f7f7 fc0f 	bl	8001d48 <_exit>

0800a52a <_malloc_usable_size_r>:
 800a52a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a52e:	1f18      	subs	r0, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfbc      	itt	lt
 800a534:	580b      	ldrlt	r3, [r1, r0]
 800a536:	18c0      	addlt	r0, r0, r3
 800a538:	4770      	bx	lr

0800a53a <_raise_r>:
 800a53a:	291f      	cmp	r1, #31
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4605      	mov	r5, r0
 800a540:	460c      	mov	r4, r1
 800a542:	d904      	bls.n	800a54e <_raise_r+0x14>
 800a544:	2316      	movs	r3, #22
 800a546:	6003      	str	r3, [r0, #0]
 800a548:	f04f 30ff 	mov.w	r0, #4294967295
 800a54c:	bd38      	pop	{r3, r4, r5, pc}
 800a54e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a550:	b112      	cbz	r2, 800a558 <_raise_r+0x1e>
 800a552:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a556:	b94b      	cbnz	r3, 800a56c <_raise_r+0x32>
 800a558:	4628      	mov	r0, r5
 800a55a:	f000 f831 	bl	800a5c0 <_getpid_r>
 800a55e:	4622      	mov	r2, r4
 800a560:	4601      	mov	r1, r0
 800a562:	4628      	mov	r0, r5
 800a564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a568:	f000 b818 	b.w	800a59c <_kill_r>
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d00a      	beq.n	800a586 <_raise_r+0x4c>
 800a570:	1c59      	adds	r1, r3, #1
 800a572:	d103      	bne.n	800a57c <_raise_r+0x42>
 800a574:	2316      	movs	r3, #22
 800a576:	6003      	str	r3, [r0, #0]
 800a578:	2001      	movs	r0, #1
 800a57a:	e7e7      	b.n	800a54c <_raise_r+0x12>
 800a57c:	2100      	movs	r1, #0
 800a57e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a582:	4620      	mov	r0, r4
 800a584:	4798      	blx	r3
 800a586:	2000      	movs	r0, #0
 800a588:	e7e0      	b.n	800a54c <_raise_r+0x12>
	...

0800a58c <raise>:
 800a58c:	4b02      	ldr	r3, [pc, #8]	@ (800a598 <raise+0xc>)
 800a58e:	4601      	mov	r1, r0
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f7ff bfd2 	b.w	800a53a <_raise_r>
 800a596:	bf00      	nop
 800a598:	2000001c 	.word	0x2000001c

0800a59c <_kill_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	4d07      	ldr	r5, [pc, #28]	@ (800a5bc <_kill_r+0x20>)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	f7f7 fbbd 	bl	8001d28 <_kill>
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	d102      	bne.n	800a5b8 <_kill_r+0x1c>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	b103      	cbz	r3, 800a5b8 <_kill_r+0x1c>
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000580 	.word	0x20000580

0800a5c0 <_getpid_r>:
 800a5c0:	f7f7 bbaa 	b.w	8001d18 <_getpid>

0800a5c4 <_init>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	bf00      	nop
 800a5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ca:	bc08      	pop	{r3}
 800a5cc:	469e      	mov	lr, r3
 800a5ce:	4770      	bx	lr

0800a5d0 <_fini>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	bf00      	nop
 800a5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d6:	bc08      	pop	{r3}
 800a5d8:	469e      	mov	lr, r3
 800a5da:	4770      	bx	lr
