
stm32f407_Eth_Fsmc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d678  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bbc  0800d808  0800d808  0000e808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103c4  080103c4  00012070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080103c4  080103c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103cc  080103cc  00012070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103cc  080103cc  000113cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080103d0  080103d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080103d4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012070  2**0
                  CONTENTS
 10 .bss          00008490  20000070  20000070  00012070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008500  20008500  00012070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018997  00000000  00000000  000120a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000506f  00000000  00000000  0002aa37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  0002faa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edd  00000000  00000000  00030d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cd7a  00000000  00000000  00031c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021d00  00000000  00000000  0005e9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da9b0  00000000  00000000  000806cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015b07f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000531c  00000000  00000000  0015b0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  001603e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7f0 	.word	0x0800d7f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800d7f0 	.word	0x0800d7f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08e      	sub	sp, #56	@ 0x38
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
 80005c4:	615a      	str	r2, [r3, #20]
 80005c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 80005c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000688 <MX_FSMC_Init+0xec>)
 80005ca:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80005ce:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000688 <MX_FSMC_Init+0xec>)
 80005d2:	4a2e      	ldr	r2, [pc, #184]	@ (800068c <MX_FSMC_Init+0xf0>)
 80005d4:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 80005d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <MX_FSMC_Init+0xec>)
 80005d8:	2206      	movs	r2, #6
 80005da:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <MX_FSMC_Init+0xec>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80005e2:	4b29      	ldr	r3, [pc, #164]	@ (8000688 <MX_FSMC_Init+0xec>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <MX_FSMC_Init+0xec>)
 80005ea:	2210      	movs	r2, #16
 80005ec:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80005ee:	4b26      	ldr	r3, [pc, #152]	@ (8000688 <MX_FSMC_Init+0xec>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <MX_FSMC_Init+0xec>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80005fa:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <MX_FSMC_Init+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000600:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <MX_FSMC_Init+0xec>)
 8000602:	2200      	movs	r2, #0
 8000604:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000606:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <MX_FSMC_Init+0xec>)
 8000608:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800060c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800060e:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_FSMC_Init+0xec>)
 8000610:	2200      	movs	r2, #0
 8000612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000614:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <MX_FSMC_Init+0xec>)
 8000616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800061a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <MX_FSMC_Init+0xec>)
 800061e:	2200      	movs	r2, #0
 8000620:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <MX_FSMC_Init+0xec>)
 8000624:	2200      	movs	r2, #0
 8000626:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <MX_FSMC_Init+0xec>)
 800062a:	2200      	movs	r2, #0
 800062c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000632:	230f      	movs	r3, #15
 8000634:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 16;
 8000636:	2310      	movs	r3, #16
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 15;
 800063a:	230f      	movs	r3, #15
 800063c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800063e:	2310      	movs	r3, #16
 8000640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000642:	2311      	movs	r3, #17
 8000644:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000646:	2300      	movs	r3, #0
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 4;
 800064a:	2304      	movs	r3, #4
 800064c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800064e:	230f      	movs	r3, #15
 8000650:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000652:	2309      	movs	r3, #9
 8000654:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800065a:	2310      	movs	r3, #16
 800065c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800065e:	2311      	movs	r3, #17
 8000660:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8000666:	463a      	mov	r2, r7
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_FSMC_Init+0xec>)
 8000670:	f002 f96c 	bl	800294c <HAL_SRAM_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800067a:	f000 f9ef 	bl	8000a5c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800067e:	bf00      	nop
 8000680:	3738      	adds	r7, #56	@ 0x38
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000008c 	.word	0x2000008c
 800068c:	a0000104 	.word	0xa0000104

08000690 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <HAL_FSMC_MspInit+0xc8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d151      	bne.n	8000750 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80006ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <HAL_FSMC_MspInit+0xc8>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b29      	ldr	r3, [pc, #164]	@ (800075c <HAL_FSMC_MspInit+0xcc>)
 80006b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006ba:	4a28      	ldr	r2, [pc, #160]	@ (800075c <HAL_FSMC_MspInit+0xcc>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80006c2:	4b26      	ldr	r3, [pc, #152]	@ (800075c <HAL_FSMC_MspInit+0xcc>)
 80006c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006e0:	230c      	movs	r3, #12
 80006e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	481d      	ldr	r0, [pc, #116]	@ (8000760 <HAL_FSMC_MspInit+0xd0>)
 80006ea:	f001 f9cd 	bl	8001a88 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006ee:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80006f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000700:	230c      	movs	r3, #12
 8000702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4816      	ldr	r0, [pc, #88]	@ (8000764 <HAL_FSMC_MspInit+0xd4>)
 800070a:	f001 f9bd 	bl	8001a88 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800070e:	f24c 7333 	movw	r3, #50995	@ 0xc733
 8000712:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000720:	230c      	movs	r3, #12
 8000722:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	480f      	ldr	r0, [pc, #60]	@ (8000768 <HAL_FSMC_MspInit+0xd8>)
 800072a:	f001 f9ad 	bl	8001a88 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800072e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000732:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000740:	230c      	movs	r3, #12
 8000742:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4808      	ldr	r0, [pc, #32]	@ (800076c <HAL_FSMC_MspInit+0xdc>)
 800074a:	f001 f99d 	bl	8001a88 <HAL_GPIO_Init>
 800074e:	e000      	b.n	8000752 <HAL_FSMC_MspInit+0xc2>
    return;
 8000750:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000dc 	.word	0x200000dc
 800075c:	40023800 	.word	0x40023800
 8000760:	40021400 	.word	0x40021400
 8000764:	40021000 	.word	0x40021000
 8000768:	40020c00 	.word	0x40020c00
 800076c:	40021800 	.word	0x40021800

08000770 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000778:	f7ff ff8a 	bl	8000690 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC9   ------> RCC_MCO_2
*/
void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	@ 0x38
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
 800079e:	4b5c      	ldr	r3, [pc, #368]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a5b      	ldr	r2, [pc, #364]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b59      	ldr	r3, [pc, #356]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	4b55      	ldr	r3, [pc, #340]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a54      	ldr	r2, [pc, #336]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b52      	ldr	r3, [pc, #328]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a4d      	ldr	r2, [pc, #308]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b47      	ldr	r3, [pc, #284]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a46      	ldr	r2, [pc, #280]	@ (8000910 <MX_GPIO_Init+0x18c>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b44      	ldr	r3, [pc, #272]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b40      	ldr	r3, [pc, #256]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a3f      	ldr	r2, [pc, #252]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b3d      	ldr	r3, [pc, #244]	@ (8000910 <MX_GPIO_Init+0x18c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b39      	ldr	r3, [pc, #228]	@ (8000910 <MX_GPIO_Init+0x18c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a38      	ldr	r2, [pc, #224]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b36      	ldr	r3, [pc, #216]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a31      	ldr	r2, [pc, #196]	@ (8000910 <MX_GPIO_Init+0x18c>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b2f      	ldr	r3, [pc, #188]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b2b      	ldr	r3, [pc, #172]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a2a      	ldr	r2, [pc, #168]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <MX_GPIO_Init+0x18c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_RESET_GPIO_Port, ETH_RESET_Pin, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2108      	movs	r1, #8
 800087e:	4825      	ldr	r0, [pc, #148]	@ (8000914 <MX_GPIO_Init+0x190>)
 8000880:	f001 fa9e 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800088a:	4823      	ldr	r0, [pc, #140]	@ (8000918 <MX_GPIO_Init+0x194>)
 800088c:	f001 fa98 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KeyUp_Pin */
  GPIO_InitStruct.Pin = KeyUp_Pin;
 8000890:	2301      	movs	r3, #1
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000894:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800089a:	2302      	movs	r3, #2
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(KeyUp_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	481b      	ldr	r0, [pc, #108]	@ (8000914 <MX_GPIO_Init+0x190>)
 80008a6:	f001 f8ef 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_RESET_Pin */
  GPIO_InitStruct.Pin = ETH_RESET_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ETH_RESET_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008be:	4619      	mov	r1, r3
 80008c0:	4814      	ldr	r0, [pc, #80]	@ (8000914 <MX_GPIO_Init+0x190>)
 80008c2:	f001 f8e1 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80008c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	480e      	ldr	r0, [pc, #56]	@ (8000918 <MX_GPIO_Init+0x194>)
 80008e0:	f001 f8d2 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80008f6:	2300      	movs	r3, #0
 80008f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	4806      	ldr	r0, [pc, #24]	@ (800091c <MX_GPIO_Init+0x198>)
 8000902:	f001 f8c1 	bl	8001a88 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3738      	adds	r7, #56	@ 0x38
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800

08000920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000924:	f000 f9fe 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000928:	f000 f80a 	bl	8000940 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800092c:	f000 f87a 	bl	8000a24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000930:	f7ff ff28 	bl	8000784 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000934:	f7ff fe32 	bl	800059c <MX_FSMC_Init>
  MX_LWIP_Init();
 8000938:	f002 f920 	bl	8002b7c <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <main+0x1c>

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	@ 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	@ 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f00c f8ab 	bl	800caaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <SystemClock_Config+0xdc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a1c <SystemClock_Config+0xdc>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	@ 0x40
 8000974:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <SystemClock_Config+0xdc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <SystemClock_Config+0xe0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a25      	ldr	r2, [pc, #148]	@ (8000a20 <SystemClock_Config+0xe0>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <SystemClock_Config+0xe0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b0:	2310      	movs	r3, #16
 80009b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009be:	2304      	movs	r3, #4
 80009c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 fa14 	bl	8001df4 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009d2:	f000 f843 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2105      	movs	r1, #5
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fc75 	bl	80022e4 <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a00:	f000 f82c 	bl	8000a5c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLI2SCLK, RCC_MCODIV_2);
 8000a04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a08:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f001 fd4f 	bl	80024b0 <HAL_RCC_MCOConfig>
}
 8000a12:	bf00      	nop
 8000a14:	3750      	adds	r7, #80	@ 0x50
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S;
 8000a36:	2304      	movs	r3, #4
 8000a38:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000a3a:	23c8      	movs	r3, #200	@ 0xc8
 8000a3c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fe9f 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000a50:	f000 f804 	bl	8000a5c <Error_Handler>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <Error_Handler+0x8>

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <NMI_Handler+0x4>

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <UsageFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0e:	f000 f95b 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  return 1;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <_kill>:

int _kill(int pid, int sig)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <_kill+0x20>)
 8000b34:	2216      	movs	r2, #22
 8000b36:	601a      	str	r2, [r3, #0]
  return -1;
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	200084f0 	.word	0x200084f0

08000b4c <_exit>:

void _exit (int status)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ffe5 	bl	8000b28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b5e:	bf00      	nop
 8000b60:	e7fd      	b.n	8000b5e <_exit+0x12>

08000b62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e00a      	b.n	8000b8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b74:	f3af 8000 	nop.w
 8000b78:	4601      	mov	r1, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	60ba      	str	r2, [r7, #8]
 8000b80:	b2ca      	uxtb	r2, r1
 8000b82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3301      	adds	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	dbf0      	blt.n	8000b74 <_read+0x12>
  }

  return len;
 8000b92:	687b      	ldr	r3, [r7, #4]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	e009      	b.n	8000bc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	60ba      	str	r2, [r7, #8]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697a      	ldr	r2, [r7, #20]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	dbf1      	blt.n	8000bae <_write+0x12>
  }
  return len;
 8000bca:	687b      	ldr	r3, [r7, #4]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_close>:

int _close(int file)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bfc:	605a      	str	r2, [r3, #4]
  return 0;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_isatty>:

int _isatty(int file)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b085      	sub	sp, #20
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b087      	sub	sp, #28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	@ (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d205      	bcs.n	8000c78 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <_sbrk+0x6c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a06      	ldr	r2, [pc, #24]	@ (8000ca0 <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	20020000 	.word	0x20020000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	200000e0 	.word	0x200000e0
 8000ca4:	20008500 	.word	0x20008500
 8000ca8:	200084f0 	.word	0x200084f0

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cd4:	f7ff ffea 	bl	8000cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	@ (8000d10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f00b ff23 	bl	800cb48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fe0d 	bl	8000920 <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d14:	080103d4 	.word	0x080103d4
  ldr r2, =_sbss
 8000d18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d1c:	20008500 	.word	0x20008500

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f931 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fe86 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f93b 	bl	8001002 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f911 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	@ (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	200000e4 	.word	0x200000e4

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	@ (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000e4 	.word	0x200000e4

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	@ (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	@ (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	@ 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	@ 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	@ (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff47 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff5c 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffb0 	bl	8000f70 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e08a      	b.n	8001144 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001034:	2b00      	cmp	r3, #0
 8001036:	d106      	bne.n	8001046 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2220      	movs	r2, #32
 800103c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f887 	bl	8001154 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b40      	ldr	r3, [pc, #256]	@ (800114c <HAL_ETH_Init+0x130>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a3f      	ldr	r2, [pc, #252]	@ (800114c <HAL_ETH_Init+0x130>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b3d      	ldr	r3, [pc, #244]	@ (800114c <HAL_ETH_Init+0x130>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001062:	4b3b      	ldr	r3, [pc, #236]	@ (8001150 <HAL_ETH_Init+0x134>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4a3a      	ldr	r2, [pc, #232]	@ (8001150 <HAL_ETH_Init+0x134>)
 8001068:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800106c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800106e:	4b38      	ldr	r3, [pc, #224]	@ (8001150 <HAL_ETH_Init+0x134>)
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4936      	ldr	r1, [pc, #216]	@ (8001150 <HAL_ETH_Init+0x134>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800107c:	4b34      	ldr	r3, [pc, #208]	@ (8001150 <HAL_ETH_Init+0x134>)
 800107e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001096:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001098:	f7ff feaa 	bl	8000df0 <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800109e:	e011      	b.n	80010c4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010a0:	f7ff fea6 	bl	8000df0 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010ae:	d909      	bls.n	80010c4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2204      	movs	r2, #4
 80010b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	22e0      	movs	r2, #224	@ 0xe0
 80010bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e03f      	b.n	8001144 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1e4      	bne.n	80010a0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fa18 	bl	800150c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fac3 	bl	8001668 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fb19 	bl	800171a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	461a      	mov	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fa81 	bl	80015f8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001104:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001116:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800111a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800112e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2210      	movs	r2, #16
 800113e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40013800 	.word	0x40013800

08001154 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e07c      	b.n	8001288 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001194:	2b40      	cmp	r3, #64	@ 0x40
 8001196:	d176      	bne.n	8001286 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001198:	2200      	movs	r2, #0
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f000 fb2b 	bl	80017f8 <ETH_Prepare_Tx_Descriptors>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d009      	beq.n	80011bc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ae:	f043 0202 	orr.w	r2, r3, #2
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e065      	b.n	8001288 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80011bc:	f3bf 8f4f 	dsb	sy
}
 80011c0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3206      	adds	r2, #6
 80011ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ce:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d904      	bls.n	80011ec <HAL_ETH_Transmit+0x84>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e6:	1f1a      	subs	r2, r3, #4
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3106      	adds	r1, #6
 80011f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80011fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001200:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001202:	f7ff fdf5 	bl	8000df0 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001208:	e037      	b.n	800127a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d011      	beq.n	8001240 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001222:	f043 0208 	orr.w	r2, r3, #8
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e023      	b.n	8001288 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001246:	d018      	beq.n	800127a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001248:	f7ff fdd2 	bl	8000df0 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	d302      	bcc.n	800125e <HAL_ETH_Transmit+0xf6>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10d      	bne.n	800127a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001264:	f043 0204 	orr.w	r2, r3, #4
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001274:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e006      	b.n	8001288 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	dbc3      	blt.n	800120a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
  }
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4b53      	ldr	r3, [pc, #332]	@ (80013f4 <ETH_SetMACConfig+0x164>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	7b9b      	ldrb	r3, [r3, #14]
 80012ae:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	7c12      	ldrb	r2, [r2, #16]
 80012b4:	2a00      	cmp	r2, #0
 80012b6:	d102      	bne.n	80012be <ETH_SetMACConfig+0x2e>
 80012b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012bc:	e000      	b.n	80012c0 <ETH_SetMACConfig+0x30>
 80012be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80012c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	7c52      	ldrb	r2, [r2, #17]
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d102      	bne.n	80012d0 <ETH_SetMACConfig+0x40>
 80012ca:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012ce:	e000      	b.n	80012d2 <ETH_SetMACConfig+0x42>
 80012d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	7fdb      	ldrb	r3, [r3, #31]
 80012de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	7f92      	ldrb	r2, [r2, #30]
 80012ec:	2a00      	cmp	r2, #0
 80012ee:	d102      	bne.n	80012f6 <ETH_SetMACConfig+0x66>
 80012f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f4:	e000      	b.n	80012f8 <ETH_SetMACConfig+0x68>
 80012f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80012f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	7f1b      	ldrb	r3, [r3, #28]
 80012fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001300:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001306:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	791b      	ldrb	r3, [r3, #4]
 800130c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800130e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001316:	2a00      	cmp	r2, #0
 8001318:	d102      	bne.n	8001320 <ETH_SetMACConfig+0x90>
 800131a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800131e:	e000      	b.n	8001322 <ETH_SetMACConfig+0x92>
 8001320:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001322:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	7bdb      	ldrb	r3, [r3, #15]
 8001328:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800132a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001330:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001338:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800133a:	4313      	orrs	r3, r2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fd58 	bl	8000e08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001376:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800137e:	2a00      	cmp	r2, #0
 8001380:	d101      	bne.n	8001386 <ETH_SetMACConfig+0xf6>
 8001382:	2280      	movs	r2, #128	@ 0x80
 8001384:	e000      	b.n	8001388 <ETH_SetMACConfig+0xf8>
 8001386:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001388:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800138e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001396:	2a01      	cmp	r2, #1
 8001398:	d101      	bne.n	800139e <ETH_SetMACConfig+0x10e>
 800139a:	2208      	movs	r2, #8
 800139c:	e000      	b.n	80013a0 <ETH_SetMACConfig+0x110>
 800139e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80013a8:	2a01      	cmp	r2, #1
 80013aa:	d101      	bne.n	80013b0 <ETH_SetMACConfig+0x120>
 80013ac:	2204      	movs	r2, #4
 80013ae:	e000      	b.n	80013b2 <ETH_SetMACConfig+0x122>
 80013b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80013ba:	2a01      	cmp	r2, #1
 80013bc:	d101      	bne.n	80013c2 <ETH_SetMACConfig+0x132>
 80013be:	2202      	movs	r2, #2
 80013c0:	e000      	b.n	80013c4 <ETH_SetMACConfig+0x134>
 80013c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013c4:	4313      	orrs	r3, r2
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff fd13 	bl	8000e08 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	fd20810f 	.word	0xfd20810f

080013f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4b3d      	ldr	r3, [pc, #244]	@ (8001508 <ETH_SetDMAConfig+0x110>)
 8001412:	4013      	ands	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	7b1b      	ldrb	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <ETH_SetDMAConfig+0x2c>
 800141e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001422:	e000      	b.n	8001426 <ETH_SetDMAConfig+0x2e>
 8001424:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	7b5b      	ldrb	r3, [r3, #13]
 800142a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800142c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	7f52      	ldrb	r2, [r2, #29]
 8001432:	2a00      	cmp	r2, #0
 8001434:	d102      	bne.n	800143c <ETH_SetDMAConfig+0x44>
 8001436:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800143a:	e000      	b.n	800143e <ETH_SetDMAConfig+0x46>
 800143c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800143e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	7b9b      	ldrb	r3, [r3, #14]
 8001444:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001446:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800144c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	7f1b      	ldrb	r3, [r3, #28]
 8001452:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001454:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	7f9b      	ldrb	r3, [r3, #30]
 800145a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800145c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001462:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800146a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800146c:	4313      	orrs	r3, r2
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800148e:	2001      	movs	r0, #1
 8001490:	f7ff fcba 	bl	8000e08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800149c:	461a      	mov	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff fc8b 	bl	8000e08 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	f8de3f23 	.word	0xf8de3f23

0800150c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0a6      	sub	sp, #152	@ 0x98
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001514:	2301      	movs	r3, #1
 8001516:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800152a:	2301      	movs	r3, #1
 800152c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001536:	2301      	movs	r3, #1
 8001538:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800153c:	2301      	movs	r3, #1
 800153e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800154e:	2300      	movs	r3, #0
 8001550:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001558:	2300      	movs	r3, #0
 800155a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001574:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001578:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800157a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800157e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001586:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800158a:	4619      	mov	r1, r3
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fe7f 	bl	8001290 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001592:	2301      	movs	r3, #1
 8001594:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001596:	2301      	movs	r3, #1
 8001598:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800159a:	2301      	movs	r3, #1
 800159c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015be:	2301      	movs	r3, #1
 80015c0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015c8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015cc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015d4:	2301      	movs	r3, #1
 80015d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff05 	bl	80013f8 <ETH_SetDMAConfig>
}
 80015ee:	bf00      	nop
 80015f0:	3798      	adds	r7, #152	@ 0x98
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3305      	adds	r3, #5
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	3204      	adds	r2, #4
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	4313      	orrs	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <ETH_MACAddressConfig+0x68>)
 800161a:	4413      	add	r3, r2
 800161c:	461a      	mov	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3303      	adds	r3, #3
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	061a      	lsls	r2, r3, #24
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3302      	adds	r3, #2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3301      	adds	r3, #1
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	4313      	orrs	r3, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	4313      	orrs	r3, r2
 8001644:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <ETH_MACAddressConfig+0x6c>)
 800164a:	4413      	add	r3, r2
 800164c:	461a      	mov	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	6013      	str	r3, [r2, #0]
}
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40028040 	.word	0x40028040
 8001664:	40028044 	.word	0x40028044

08001668 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	e03e      	b.n	80016f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68d9      	ldr	r1, [r3, #12]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2200      	movs	r2, #0
 8001692:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	3206      	adds	r2, #6
 80016a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d80c      	bhi.n	80016d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68d9      	ldr	r1, [r3, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	461a      	mov	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	e004      	b.n	80016e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	461a      	mov	r2, r3
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3301      	adds	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d9bd      	bls.n	8001676 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800170c:	611a      	str	r2, [r3, #16]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e048      	b.n	80017ba <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6919      	ldr	r1, [r3, #16]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2200      	movs	r2, #0
 8001744:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001764:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800177e:	68b9      	ldr	r1, [r7, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	3212      	adds	r2, #18
 8001786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d80c      	bhi.n	80017aa <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6919      	ldr	r1, [r3, #16]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	e004      	b.n	80017b4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d9b3      	bls.n	8001728 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ea:	60da      	str	r2, [r3, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b091      	sub	sp, #68	@ 0x44
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3318      	adds	r3, #24
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800181e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001822:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800182e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800183a:	d007      	beq.n	800184c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800183c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001840:	3304      	adds	r3, #4
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800184c:	2302      	movs	r3, #2
 800184e:	e115      	b.n	8001a7c <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8001850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001852:	3301      	adds	r3, #1
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800185e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8001868:	f023 031f 	bic.w	r3, r3, #31
 800186c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800186e:	6852      	ldr	r2, [r2, #4]
 8001870:	431a      	orrs	r2, r3
 8001872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001874:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	431a      	orrs	r2, r3
 8001890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001892:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80018a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	431a      	orrs	r2, r3
 80018ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80018be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80018c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80018ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80018d6:	e084      	b.n	80019e2 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80018d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80018e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80018ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80018f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e005      	b.n	8001904 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80018f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001902:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001906:	3301      	adds	r3, #1
 8001908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800190a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800190c:	2b03      	cmp	r3, #3
 800190e:	d902      	bls.n	8001916 <ETH_Prepare_Tx_Descriptors+0x11e>
 8001910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001912:	3b04      	subs	r3, #4
 8001914:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800191a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001928:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800192c:	d007      	beq.n	800193e <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800192e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001932:	3304      	adds	r3, #4
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d029      	beq.n	8001992 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800194c:	2300      	movs	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001950:	e019      	b.n	8001986 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8001952:	f3bf 8f5f 	dmb	sy
}
 8001956:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001962:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001966:	3301      	adds	r3, #1
 8001968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800196a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800196c:	2b03      	cmp	r3, #3
 800196e:	d902      	bls.n	8001976 <ETH_Prepare_Tx_Descriptors+0x17e>
 8001970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001972:	3b04      	subs	r3, #4
 8001974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800197a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8001980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001982:	3301      	adds	r3, #1
 8001984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001986:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198a:	429a      	cmp	r2, r3
 800198c:	d3e1      	bcc.n	8001952 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 800198e:	2302      	movs	r3, #2
 8001990:	e074      	b.n	8001a7c <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800199a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800199c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800199e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019a0:	3301      	adds	r3, #1
 80019a2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80019a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80019aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80019b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80019bc:	f023 031f 	bic.w	r3, r3, #31
 80019c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019c2:	6852      	ldr	r2, [r2, #4]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c8:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80019ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019cc:	3301      	adds	r3, #1
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80019d0:	f3bf 8f5f 	dmb	sy
}
 80019d4:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80019d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80019e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f47f af76 	bne.w	80018d8 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80019f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80019fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e005      	b.n	8001a0c <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8001a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a16:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8001a22:	f3bf 8f5f 	dmb	sy
}
 8001a26:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a32:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a48:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a4e:	613b      	str	r3, [r7, #16]
  return(result);
 8001a50:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f383 8810 	msr	PRIMASK, r3
}
 8001a5e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a66:	4413      	add	r3, r2
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f383 8810 	msr	PRIMASK, r3
}
 8001a78:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3744      	adds	r7, #68	@ 0x44
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	@ 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e16b      	b.n	8001d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 815a 	bne.w	8001d76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d005      	beq.n	8001ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d130      	bne.n	8001b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0201 	and.w	r2, r3, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d017      	beq.n	8001b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d123      	bne.n	8001bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	69b9      	ldr	r1, [r7, #24]
 8001bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80b4 	beq.w	8001d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b60      	ldr	r3, [pc, #384]	@ (8001d94 <HAL_GPIO_Init+0x30c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	4a5f      	ldr	r2, [pc, #380]	@ (8001d94 <HAL_GPIO_Init+0x30c>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d94 <HAL_GPIO_Init+0x30c>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d98 <HAL_GPIO_Init+0x310>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a52      	ldr	r2, [pc, #328]	@ (8001d9c <HAL_GPIO_Init+0x314>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d02b      	beq.n	8001cae <HAL_GPIO_Init+0x226>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a51      	ldr	r2, [pc, #324]	@ (8001da0 <HAL_GPIO_Init+0x318>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d025      	beq.n	8001caa <HAL_GPIO_Init+0x222>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a50      	ldr	r2, [pc, #320]	@ (8001da4 <HAL_GPIO_Init+0x31c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_GPIO_Init+0x21e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4f      	ldr	r2, [pc, #316]	@ (8001da8 <HAL_GPIO_Init+0x320>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x21a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4e      	ldr	r2, [pc, #312]	@ (8001dac <HAL_GPIO_Init+0x324>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x216>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4d      	ldr	r2, [pc, #308]	@ (8001db0 <HAL_GPIO_Init+0x328>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x212>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4c      	ldr	r2, [pc, #304]	@ (8001db4 <HAL_GPIO_Init+0x32c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x20e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4b      	ldr	r2, [pc, #300]	@ (8001db8 <HAL_GPIO_Init+0x330>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x20a>
 8001c8e:	2307      	movs	r3, #7
 8001c90:	e00e      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001c92:	2308      	movs	r3, #8
 8001c94:	e00c      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001c96:	2306      	movs	r3, #6
 8001c98:	e00a      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	e008      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e004      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e002      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <HAL_GPIO_Init+0x228>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	f002 0203 	and.w	r2, r2, #3
 8001cb6:	0092      	lsls	r2, r2, #2
 8001cb8:	4093      	lsls	r3, r2
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc0:	4935      	ldr	r1, [pc, #212]	@ (8001d98 <HAL_GPIO_Init+0x310>)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	089b      	lsrs	r3, r3, #2
 8001cc6:	3302      	adds	r3, #2
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cce:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <HAL_GPIO_Init+0x334>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf2:	4a32      	ldr	r2, [pc, #200]	@ (8001dbc <HAL_GPIO_Init+0x334>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf8:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <HAL_GPIO_Init+0x334>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d1c:	4a27      	ldr	r2, [pc, #156]	@ (8001dbc <HAL_GPIO_Init+0x334>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d22:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <HAL_GPIO_Init+0x334>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d46:	4a1d      	ldr	r2, [pc, #116]	@ (8001dbc <HAL_GPIO_Init+0x334>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_GPIO_Init+0x334>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d70:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <HAL_GPIO_Init+0x334>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b0f      	cmp	r3, #15
 8001d80:	f67f ae90 	bls.w	8001aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40013800 	.word	0x40013800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40021400 	.word	0x40021400
 8001db4:	40021800 	.word	0x40021800
 8001db8:	40021c00 	.word	0x40021c00
 8001dbc:	40013c00 	.word	0x40013c00

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	619a      	str	r2, [r3, #24]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e267      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d075      	beq.n	8001efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e12:	4b88      	ldr	r3, [pc, #544]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d00c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1e:	4b85      	ldr	r3, [pc, #532]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d112      	bne.n	8001e50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2a:	4b82      	ldr	r3, [pc, #520]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e36:	d10b      	bne.n	8001e50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	4b7e      	ldr	r3, [pc, #504]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d05b      	beq.n	8001efc <HAL_RCC_OscConfig+0x108>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d157      	bne.n	8001efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e242      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e58:	d106      	bne.n	8001e68 <HAL_RCC_OscConfig+0x74>
 8001e5a:	4b76      	ldr	r3, [pc, #472]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a75      	ldr	r2, [pc, #468]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e01d      	b.n	8001ea4 <HAL_RCC_OscConfig+0xb0>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x98>
 8001e72:	4b70      	ldr	r3, [pc, #448]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6f      	ldr	r2, [pc, #444]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a6c      	ldr	r2, [pc, #432]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0xb0>
 8001e8c:	4b69      	ldr	r3, [pc, #420]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a68      	ldr	r2, [pc, #416]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b66      	ldr	r3, [pc, #408]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a65      	ldr	r2, [pc, #404]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7fe ffa0 	bl	8000df0 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7fe ff9c 	bl	8000df0 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e207      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xc0>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe ff8c 	bl	8000df0 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7fe ff88 	bl	8000df0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	@ 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e1f3      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b51      	ldr	r3, [pc, #324]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0xe8>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d063      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f16:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d11c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f22:	4b44      	ldr	r3, [pc, #272]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	4b41      	ldr	r3, [pc, #260]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_RCC_OscConfig+0x152>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e1c7      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	4b3b      	ldr	r3, [pc, #236]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4937      	ldr	r1, [pc, #220]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	e03a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f64:	4b34      	ldr	r3, [pc, #208]	@ (8002038 <HAL_RCC_OscConfig+0x244>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6a:	f7fe ff41 	bl	8000df0 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f72:	f7fe ff3d 	bl	8000df0 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1a8      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	4b2b      	ldr	r3, [pc, #172]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4925      	ldr	r1, [pc, #148]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <HAL_RCC_OscConfig+0x244>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7fe ff20 	bl	8000df0 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb4:	f7fe ff1c 	bl	8000df0 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e187      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d036      	beq.n	800204c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d016      	beq.n	8002014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_RCC_OscConfig+0x248>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7fe ff00 	bl	8000df0 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7fe fefc 	bl	8000df0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e167      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_RCC_OscConfig+0x240>)
 8002008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x200>
 8002012:	e01b      	b.n	800204c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <HAL_RCC_OscConfig+0x248>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7fe fee9 	bl	8000df0 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002020:	e00e      	b.n	8002040 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002022:	f7fe fee5 	bl	8000df0 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d907      	bls.n	8002040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e150      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
 8002034:	40023800 	.word	0x40023800
 8002038:	42470000 	.word	0x42470000
 800203c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	4b88      	ldr	r3, [pc, #544]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ea      	bne.n	8002022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8097 	beq.w	8002188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205e:	4b81      	ldr	r3, [pc, #516]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10f      	bne.n	800208a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	4b7d      	ldr	r3, [pc, #500]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	4a7c      	ldr	r2, [pc, #496]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002078:	6413      	str	r3, [r2, #64]	@ 0x40
 800207a:	4b7a      	ldr	r3, [pc, #488]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	2301      	movs	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b77      	ldr	r3, [pc, #476]	@ (8002268 <HAL_RCC_OscConfig+0x474>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002096:	4b74      	ldr	r3, [pc, #464]	@ (8002268 <HAL_RCC_OscConfig+0x474>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a73      	ldr	r2, [pc, #460]	@ (8002268 <HAL_RCC_OscConfig+0x474>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fea5 	bl	8000df0 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7fe fea1 	bl	8000df0 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e10c      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002268 <HAL_RCC_OscConfig+0x474>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x2ea>
 80020d0:	4b64      	ldr	r3, [pc, #400]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d4:	4a63      	ldr	r2, [pc, #396]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6713      	str	r3, [r2, #112]	@ 0x70
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x324>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x30c>
 80020e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0x324>
 8002100:	4b58      	ldr	r3, [pc, #352]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	4a57      	ldr	r2, [pc, #348]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	@ 0x70
 800210c:	4b55      	ldr	r3, [pc, #340]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002110:	4a54      	ldr	r2, [pc, #336]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7fe fe66 	bl	8000df0 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7fe fe62 	bl	8000df0 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0cb      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0ee      	beq.n	8002128 <HAL_RCC_OscConfig+0x334>
 800214a:	e014      	b.n	8002176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7fe fe50 	bl	8000df0 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7fe fe4c 	bl	8000df0 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0b5      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216a:	4b3e      	ldr	r3, [pc, #248]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ee      	bne.n	8002154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002176:	7dfb      	ldrb	r3, [r7, #23]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217c:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	4a38      	ldr	r2, [pc, #224]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002186:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80a1 	beq.w	80022d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002192:	4b34      	ldr	r3, [pc, #208]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d05c      	beq.n	8002258 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d141      	bne.n	800222a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b31      	ldr	r3, [pc, #196]	@ (800226c <HAL_RCC_OscConfig+0x478>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fe20 	bl	8000df0 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fe1c 	bl	8000df0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e087      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	019b      	lsls	r3, r3, #6
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	041b      	lsls	r3, r3, #16
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	491b      	ldr	r1, [pc, #108]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x478>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7fe fdf5 	bl	8000df0 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe fdf1 	bl	8000df0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e05c      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221c:	4b11      	ldr	r3, [pc, #68]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x416>
 8002228:	e054      	b.n	80022d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <HAL_RCC_OscConfig+0x478>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fdde 	bl	8000df0 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7fe fdda 	bl	8000df0 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e045      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_RCC_OscConfig+0x470>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x444>
 8002256:	e03d      	b.n	80022d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e038      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000
 800226c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002270:	4b1b      	ldr	r3, [pc, #108]	@ (80022e0 <HAL_RCC_OscConfig+0x4ec>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d028      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d121      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d11a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022a0:	4013      	ands	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d111      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b6:	085b      	lsrs	r3, r3, #1
 80022b8:	3b01      	subs	r3, #1
 80022ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022bc:	429a      	cmp	r2, r3
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800

080022e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0cc      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b68      	ldr	r3, [pc, #416]	@ (800249c <HAL_RCC_ClockConfig+0x1b8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d90c      	bls.n	8002320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b65      	ldr	r3, [pc, #404]	@ (800249c <HAL_RCC_ClockConfig+0x1b8>)
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b63      	ldr	r3, [pc, #396]	@ (800249c <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0b8      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002338:	4b59      	ldr	r3, [pc, #356]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a58      	ldr	r2, [pc, #352]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002342:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002350:	4b53      	ldr	r3, [pc, #332]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a52      	ldr	r2, [pc, #328]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800235a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235c:	4b50      	ldr	r3, [pc, #320]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	494d      	ldr	r1, [pc, #308]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d044      	beq.n	8002404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b47      	ldr	r3, [pc, #284]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d119      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e07f      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a2:	4b3f      	ldr	r3, [pc, #252]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e06f      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	4b3b      	ldr	r3, [pc, #236]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e067      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c2:	4b37      	ldr	r3, [pc, #220]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f023 0203 	bic.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4934      	ldr	r1, [pc, #208]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d4:	f7fe fd0c 	bl	8000df0 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023dc:	f7fe fd08 	bl	8000df0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e04f      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	4b2b      	ldr	r3, [pc, #172]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 020c 	and.w	r2, r3, #12
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	429a      	cmp	r2, r3
 8002402:	d1eb      	bne.n	80023dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002404:	4b25      	ldr	r3, [pc, #148]	@ (800249c <HAL_RCC_ClockConfig+0x1b8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d20c      	bcs.n	800242c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b22      	ldr	r3, [pc, #136]	@ (800249c <HAL_RCC_ClockConfig+0x1b8>)
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b20      	ldr	r3, [pc, #128]	@ (800249c <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e032      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4916      	ldr	r1, [pc, #88]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002456:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	490e      	ldr	r1, [pc, #56]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246a:	f000 f889 	bl	8002580 <HAL_RCC_GetSysClockFreq>
 800246e:	4602      	mov	r2, r0
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	490a      	ldr	r1, [pc, #40]	@ (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	5ccb      	ldrb	r3, [r1, r3]
 800247e:	fa22 f303 	lsr.w	r3, r2, r3
 8002482:	4a09      	ldr	r2, [pc, #36]	@ (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002486:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fc6c 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023c00 	.word	0x40023c00
 80024a0:	40023800 	.word	0x40023800
 80024a4:	080101e8 	.word	0x080101e8
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	@ 0x30
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d129      	bne.n	8002516 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d2:	4b28      	ldr	r3, [pc, #160]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80024de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	4619      	mov	r1, r3
 80024fa:	481f      	ldr	r0, [pc, #124]	@ (8002578 <HAL_RCC_MCOConfig+0xc8>)
 80024fc:	f7ff fac4 	bl	8001a88 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002500:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	430b      	orrs	r3, r1
 800250e:	4919      	ldr	r1, [pc, #100]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8002514:	e029      	b.n	800256a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a15      	ldr	r2, [pc, #84]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	480b      	ldr	r0, [pc, #44]	@ (800257c <HAL_RCC_MCOConfig+0xcc>)
 8002550:	f7ff fa9a 	bl	8001a88 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8002554:	4b07      	ldr	r3, [pc, #28]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	00d9      	lsls	r1, r3, #3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	430b      	orrs	r3, r1
 8002564:	4903      	ldr	r1, [pc, #12]	@ (8002574 <HAL_RCC_MCOConfig+0xc4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
}
 800256a:	bf00      	nop
 800256c:	3730      	adds	r7, #48	@ 0x30
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40020000 	.word	0x40020000
 800257c:	40020800 	.word	0x40020800

08002580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002584:	b094      	sub	sp, #80	@ 0x50
 8002586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002598:	4b79      	ldr	r3, [pc, #484]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f003 030c 	and.w	r3, r3, #12
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d00d      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x40>
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	f200 80e1 	bhi.w	800276c <HAL_RCC_GetSysClockFreq+0x1ec>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x34>
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d003      	beq.n	80025ba <HAL_RCC_GetSysClockFreq+0x3a>
 80025b2:	e0db      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b4:	4b73      	ldr	r3, [pc, #460]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x204>)
 80025b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025b8:	e0db      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ba:	4b72      	ldr	r3, [pc, #456]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x204>)
 80025bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025be:	e0d8      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d063      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	2200      	movs	r2, #0
 80025de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025f2:	4622      	mov	r2, r4
 80025f4:	462b      	mov	r3, r5
 80025f6:	f04f 0000 	mov.w	r0, #0
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	0159      	lsls	r1, r3, #5
 8002600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002604:	0150      	lsls	r0, r2, #5
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4621      	mov	r1, r4
 800260c:	1a51      	subs	r1, r2, r1
 800260e:	6139      	str	r1, [r7, #16]
 8002610:	4629      	mov	r1, r5
 8002612:	eb63 0301 	sbc.w	r3, r3, r1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002624:	4659      	mov	r1, fp
 8002626:	018b      	lsls	r3, r1, #6
 8002628:	4651      	mov	r1, sl
 800262a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262e:	4651      	mov	r1, sl
 8002630:	018a      	lsls	r2, r1, #6
 8002632:	4651      	mov	r1, sl
 8002634:	ebb2 0801 	subs.w	r8, r2, r1
 8002638:	4659      	mov	r1, fp
 800263a:	eb63 0901 	sbc.w	r9, r3, r1
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800264a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002652:	4690      	mov	r8, r2
 8002654:	4699      	mov	r9, r3
 8002656:	4623      	mov	r3, r4
 8002658:	eb18 0303 	adds.w	r3, r8, r3
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	462b      	mov	r3, r5
 8002660:	eb49 0303 	adc.w	r3, r9, r3
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002672:	4629      	mov	r1, r5
 8002674:	028b      	lsls	r3, r1, #10
 8002676:	4621      	mov	r1, r4
 8002678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800267c:	4621      	mov	r1, r4
 800267e:	028a      	lsls	r2, r1, #10
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800268a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800268c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002690:	f7fd fdee 	bl	8000270 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800269c:	e058      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269e:	4b38      	ldr	r3, [pc, #224]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	2200      	movs	r2, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	4611      	mov	r1, r2
 80026aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ae:	623b      	str	r3, [r7, #32]
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b8:	4642      	mov	r2, r8
 80026ba:	464b      	mov	r3, r9
 80026bc:	f04f 0000 	mov.w	r0, #0
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	0159      	lsls	r1, r3, #5
 80026c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ca:	0150      	lsls	r0, r2, #5
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4641      	mov	r1, r8
 80026d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80026d6:	4649      	mov	r1, r9
 80026d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026f0:	ebb2 040a 	subs.w	r4, r2, sl
 80026f4:	eb63 050b 	sbc.w	r5, r3, fp
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	00eb      	lsls	r3, r5, #3
 8002702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002706:	00e2      	lsls	r2, r4, #3
 8002708:	4614      	mov	r4, r2
 800270a:	461d      	mov	r5, r3
 800270c:	4643      	mov	r3, r8
 800270e:	18e3      	adds	r3, r4, r3
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	464b      	mov	r3, r9
 8002714:	eb45 0303 	adc.w	r3, r5, r3
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002726:	4629      	mov	r1, r5
 8002728:	028b      	lsls	r3, r1, #10
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002730:	4621      	mov	r1, r4
 8002732:	028a      	lsls	r2, r1, #10
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800273a:	2200      	movs	r2, #0
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	61fa      	str	r2, [r7, #28]
 8002740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002744:	f7fd fd94 	bl	8000270 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x200>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	3301      	adds	r3, #1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002760:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800276a:	e002      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_RCC_GetSysClockFreq+0x204>)
 800276e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002774:	4618      	mov	r0, r3
 8002776:	3750      	adds	r7, #80	@ 0x50
 8002778:	46bd      	mov	sp, r7
 800277a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	00f42400 	.word	0x00f42400

08002788 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d035      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027b0:	4b62      	ldr	r3, [pc, #392]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027b6:	f7fe fb1b 	bl	8000df0 <HAL_GetTick>
 80027ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027be:	f7fe fb17 	bl	8000df0 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0b0      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027d0:	4b5b      	ldr	r3, [pc, #364]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	019a      	lsls	r2, r3, #6
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	071b      	lsls	r3, r3, #28
 80027e8:	4955      	ldr	r1, [pc, #340]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027f0:	4b52      	ldr	r3, [pc, #328]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027f6:	f7fe fafb 	bl	8000df0 <HAL_GetTick>
 80027fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027fe:	f7fe faf7 	bl	8000df0 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e090      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002810:	4b4b      	ldr	r3, [pc, #300]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 8083 	beq.w	8002930 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b44      	ldr	r3, [pc, #272]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	4a43      	ldr	r2, [pc, #268]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002838:	6413      	str	r3, [r2, #64]	@ 0x40
 800283a:	4b41      	ldr	r3, [pc, #260]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002846:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a3e      	ldr	r2, [pc, #248]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002852:	f7fe facd 	bl	8000df0 <HAL_GetTick>
 8002856:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7fe fac9 	bl	8000df0 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e062      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800286c:	4b35      	ldr	r3, [pc, #212]	@ (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002878:	4b31      	ldr	r3, [pc, #196]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800287a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002880:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02f      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	429a      	cmp	r2, r3
 8002894:	d028      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002896:	4b2a      	ldr	r3, [pc, #168]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800289e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028a0:	4b29      	ldr	r3, [pc, #164]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028a6:	4b28      	ldr	r3, [pc, #160]	@ (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028ac:	4a24      	ldr	r2, [pc, #144]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028b2:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d114      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe fa97 	bl	8000df0 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe fa93 	bl	8000df0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e02a      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ee      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028f4:	d10d      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80028f6:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800290a:	490d      	ldr	r1, [pc, #52]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	608b      	str	r3, [r1, #8]
 8002910:	e005      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	4a0a      	ldr	r2, [pc, #40]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002918:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800291c:	6093      	str	r3, [r2, #8]
 800291e:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002920:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	4905      	ldr	r1, [pc, #20]	@ (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	42470068 	.word	0x42470068
 8002940:	40023800 	.word	0x40023800
 8002944:	40007000 	.word	0x40007000
 8002948:	42470e40 	.word	0x42470e40

0800294c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e038      	b.n	80029d4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f7fd fefa 	bl	8000770 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3308      	adds	r3, #8
 8002984:	4619      	mov	r1, r3
 8002986:	4610      	mov	r0, r2
 8002988:	f000 f828 	bl	80029dc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	461a      	mov	r2, r3
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	f000 f88a 	bl	8002ab0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6858      	ldr	r0, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	f000 f8af 	bl	8002b0c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	6892      	ldr	r2, [r2, #8]
 80029c2:	f041 0101 	orr.w	r1, r1, #1
 80029c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	f023 0101 	bic.w	r1, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d102      	bne.n	8002a0c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002a06:	2340      	movs	r3, #64	@ 0x40
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	e001      	b.n	8002a10 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002a1c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002a22:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002a28:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002a2e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002a34:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002a3a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8002a40:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8002a46:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8002a4c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8002a6a:	4b10      	ldr	r3, [pc, #64]	@ (8002aac <FSMC_NORSRAM_Init+0xd0>)
 8002a6c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a74:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8002a7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	ea02 0103 	and.w	r1, r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4319      	orrs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	0008fb7f 	.word	0x0008fb7f

08002ab0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8002ac6:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8002ace:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8002ad6:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8002ae0:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	3b02      	subs	r3, #2
 8002ae8:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8002aea:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8002af6:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b20:	d11d      	bne.n	8002b5e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b2a:	4b13      	ldr	r3, [pc, #76]	@ (8002b78 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	6811      	ldr	r1, [r2, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	6852      	ldr	r2, [r2, #4]
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	6892      	ldr	r2, [r2, #8]
 8002b3e:	0212      	lsls	r2, r2, #8
 8002b40:	4311      	orrs	r1, r2
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	6992      	ldr	r2, [r2, #24]
 8002b46:	4311      	orrs	r1, r2
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	68d2      	ldr	r2, [r2, #12]
 8002b4c:	0412      	lsls	r2, r2, #16
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	ea43 0102 	orr.w	r1, r3, r2
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002b5c:	e005      	b.n	8002b6a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8002b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	cff00000 	.word	0xcff00000

08002b7c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002b82:	4b87      	ldr	r3, [pc, #540]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002b84:	22c0      	movs	r2, #192	@ 0xc0
 8002b86:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002b88:	4b85      	ldr	r3, [pc, #532]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002b8a:	22a8      	movs	r2, #168	@ 0xa8
 8002b8c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8002b8e:	4b84      	ldr	r3, [pc, #528]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8002b94:	4b82      	ldr	r3, [pc, #520]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002b96:	220a      	movs	r2, #10
 8002b98:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002b9a:	4b82      	ldr	r3, [pc, #520]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002b9c:	22ff      	movs	r2, #255	@ 0xff
 8002b9e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002ba0:	4b80      	ldr	r3, [pc, #512]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002ba2:	22ff      	movs	r2, #255	@ 0xff
 8002ba4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002ba8:	22ff      	movs	r2, #255	@ 0xff
 8002baa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002bac:	4b7d      	ldr	r3, [pc, #500]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002bb2:	4b7d      	ldr	r3, [pc, #500]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002bb4:	22c0      	movs	r2, #192	@ 0xc0
 8002bb6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002bb8:	4b7b      	ldr	r3, [pc, #492]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002bba:	22a8      	movs	r2, #168	@ 0xa8
 8002bbc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8002bbe:	4b7a      	ldr	r3, [pc, #488]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002bc4:	4b78      	ldr	r3, [pc, #480]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8002bca:	f000 fa83 	bl	80030d4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002bce:	4b74      	ldr	r3, [pc, #464]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	061a      	lsls	r2, r3, #24
 8002bd4:	4b72      	ldr	r3, [pc, #456]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002bd6:	785b      	ldrb	r3, [r3, #1]
 8002bd8:	041b      	lsls	r3, r3, #16
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	4b70      	ldr	r3, [pc, #448]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002bde:	789b      	ldrb	r3, [r3, #2]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	4313      	orrs	r3, r2
 8002be4:	4a6e      	ldr	r2, [pc, #440]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002be6:	78d2      	ldrb	r2, [r2, #3]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	061a      	lsls	r2, r3, #24
 8002bec:	4b6c      	ldr	r3, [pc, #432]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	0619      	lsls	r1, r3, #24
 8002bf2:	4b6b      	ldr	r3, [pc, #428]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	4319      	orrs	r1, r3
 8002bfa:	4b69      	ldr	r3, [pc, #420]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002bfc:	789b      	ldrb	r3, [r3, #2]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	430b      	orrs	r3, r1
 8002c02:	4967      	ldr	r1, [pc, #412]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002c04:	78c9      	ldrb	r1, [r1, #3]
 8002c06:	430b      	orrs	r3, r1
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	4b63      	ldr	r3, [pc, #396]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	0619      	lsls	r1, r3, #24
 8002c16:	4b62      	ldr	r3, [pc, #392]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002c18:	785b      	ldrb	r3, [r3, #1]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	4319      	orrs	r1, r3
 8002c1e:	4b60      	ldr	r3, [pc, #384]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002c20:	789b      	ldrb	r3, [r3, #2]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	430b      	orrs	r3, r1
 8002c26:	495e      	ldr	r1, [pc, #376]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002c28:	78c9      	ldrb	r1, [r1, #3]
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002c32:	431a      	orrs	r2, r3
 8002c34:	4b5a      	ldr	r3, [pc, #360]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	0619      	lsls	r1, r3, #24
 8002c3a:	4b59      	ldr	r3, [pc, #356]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002c3c:	785b      	ldrb	r3, [r3, #1]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	4319      	orrs	r1, r3
 8002c42:	4b57      	ldr	r3, [pc, #348]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002c44:	789b      	ldrb	r3, [r3, #2]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	4955      	ldr	r1, [pc, #340]	@ (8002da0 <MX_LWIP_Init+0x224>)
 8002c4c:	78c9      	ldrb	r1, [r1, #3]
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	0e1b      	lsrs	r3, r3, #24
 8002c52:	4313      	orrs	r3, r2
 8002c54:	4a55      	ldr	r2, [pc, #340]	@ (8002dac <MX_LWIP_Init+0x230>)
 8002c56:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002c58:	4b52      	ldr	r3, [pc, #328]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	061a      	lsls	r2, r3, #24
 8002c5e:	4b51      	ldr	r3, [pc, #324]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002c60:	785b      	ldrb	r3, [r3, #1]
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	431a      	orrs	r2, r3
 8002c66:	4b4f      	ldr	r3, [pc, #316]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002c68:	789b      	ldrb	r3, [r3, #2]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002c70:	78d2      	ldrb	r2, [r2, #3]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	061a      	lsls	r2, r3, #24
 8002c76:	4b4b      	ldr	r3, [pc, #300]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	0619      	lsls	r1, r3, #24
 8002c7c:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002c7e:	785b      	ldrb	r3, [r3, #1]
 8002c80:	041b      	lsls	r3, r3, #16
 8002c82:	4319      	orrs	r1, r3
 8002c84:	4b47      	ldr	r3, [pc, #284]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002c86:	789b      	ldrb	r3, [r3, #2]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	4945      	ldr	r1, [pc, #276]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002c8e:	78c9      	ldrb	r1, [r1, #3]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	4b42      	ldr	r3, [pc, #264]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	0619      	lsls	r1, r3, #24
 8002ca0:	4b40      	ldr	r3, [pc, #256]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	4319      	orrs	r1, r3
 8002ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002caa:	789b      	ldrb	r3, [r3, #2]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	493c      	ldr	r1, [pc, #240]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002cb2:	78c9      	ldrb	r1, [r1, #3]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	4b39      	ldr	r3, [pc, #228]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	0619      	lsls	r1, r3, #24
 8002cc4:	4b37      	ldr	r3, [pc, #220]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	4319      	orrs	r1, r3
 8002ccc:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002cce:	789b      	ldrb	r3, [r3, #2]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	4933      	ldr	r1, [pc, #204]	@ (8002da4 <MX_LWIP_Init+0x228>)
 8002cd6:	78c9      	ldrb	r1, [r1, #3]
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	0e1b      	lsrs	r3, r3, #24
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	4a34      	ldr	r2, [pc, #208]	@ (8002db0 <MX_LWIP_Init+0x234>)
 8002ce0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002ce2:	4b31      	ldr	r3, [pc, #196]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	061a      	lsls	r2, r3, #24
 8002ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002cf2:	789b      	ldrb	r3, [r3, #2]
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002cfa:	78d2      	ldrb	r2, [r2, #3]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	061a      	lsls	r2, r3, #24
 8002d00:	4b29      	ldr	r3, [pc, #164]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	0619      	lsls	r1, r3, #24
 8002d06:	4b28      	ldr	r3, [pc, #160]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d08:	785b      	ldrb	r3, [r3, #1]
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	4319      	orrs	r1, r3
 8002d0e:	4b26      	ldr	r3, [pc, #152]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	430b      	orrs	r3, r1
 8002d16:	4924      	ldr	r1, [pc, #144]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d18:	78c9      	ldrb	r1, [r1, #3]
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002d22:	431a      	orrs	r2, r3
 8002d24:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	0619      	lsls	r1, r3, #24
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	4319      	orrs	r1, r3
 8002d32:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d34:	789b      	ldrb	r3, [r3, #2]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	491b      	ldr	r1, [pc, #108]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d3c:	78c9      	ldrb	r1, [r1, #3]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002d46:	431a      	orrs	r2, r3
 8002d48:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	0619      	lsls	r1, r3, #24
 8002d4e:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	4319      	orrs	r1, r3
 8002d56:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d58:	789b      	ldrb	r3, [r3, #2]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	4912      	ldr	r1, [pc, #72]	@ (8002da8 <MX_LWIP_Init+0x22c>)
 8002d60:	78c9      	ldrb	r1, [r1, #3]
 8002d62:	430b      	orrs	r3, r1
 8002d64:	0e1b      	lsrs	r3, r3, #24
 8002d66:	4313      	orrs	r3, r2
 8002d68:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <MX_LWIP_Init+0x238>)
 8002d6a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002d6c:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <MX_LWIP_Init+0x23c>)
 8002d6e:	9302      	str	r3, [sp, #8]
 8002d70:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <MX_LWIP_Init+0x240>)
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <MX_LWIP_Init+0x238>)
 8002d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <MX_LWIP_Init+0x234>)
 8002d7c:	490b      	ldr	r1, [pc, #44]	@ (8002dac <MX_LWIP_Init+0x230>)
 8002d7e:	4810      	ldr	r0, [pc, #64]	@ (8002dc0 <MX_LWIP_Init+0x244>)
 8002d80:	f000 fe4e 	bl	8003a20 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002d84:	480e      	ldr	r0, [pc, #56]	@ (8002dc0 <MX_LWIP_Init+0x244>)
 8002d86:	f001 f809 	bl	8003d9c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8002d8a:	480d      	ldr	r0, [pc, #52]	@ (8002dc0 <MX_LWIP_Init+0x244>)
 8002d8c:	f001 f816 	bl	8003dbc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8002d90:	490c      	ldr	r1, [pc, #48]	@ (8002dc4 <MX_LWIP_Init+0x248>)
 8002d92:	480b      	ldr	r0, [pc, #44]	@ (8002dc0 <MX_LWIP_Init+0x244>)
 8002d94:	f001 f886 	bl	8003ea4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000012c 	.word	0x2000012c
 8002da4:	20000130 	.word	0x20000130
 8002da8:	20000134 	.word	0x20000134
 8002dac:	20000120 	.word	0x20000120
 8002db0:	20000124 	.word	0x20000124
 8002db4:	20000128 	.word	0x20000128
 8002db8:	0800c635 	.word	0x0800c635
 8002dbc:	08002ff9 	.word	0x08002ff9
 8002dc0:	200000e8 	.word	0x200000e8
 8002dc4:	08002dc9 	.word	0x08002dc9

08002dc8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002de8:	4b3c      	ldr	r3, [pc, #240]	@ (8002edc <low_level_init+0x100>)
 8002dea:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee0 <low_level_init+0x104>)
 8002dec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002dee:	2300      	movs	r3, #0
 8002df0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002df6:	23e1      	movs	r3, #225	@ 0xe1
 8002df8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002e02:	2300      	movs	r3, #0
 8002e04:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002e06:	4a35      	ldr	r2, [pc, #212]	@ (8002edc <low_level_init+0x100>)
 8002e08:	f107 0308 	add.w	r3, r7, #8
 8002e0c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002e0e:	4b33      	ldr	r3, [pc, #204]	@ (8002edc <low_level_init+0x100>)
 8002e10:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e14:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002e16:	4b31      	ldr	r3, [pc, #196]	@ (8002edc <low_level_init+0x100>)
 8002e18:	4a32      	ldr	r2, [pc, #200]	@ (8002ee4 <low_level_init+0x108>)
 8002e1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002edc <low_level_init+0x100>)
 8002e1e:	4a32      	ldr	r2, [pc, #200]	@ (8002ee8 <low_level_init+0x10c>)
 8002e20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8002e22:	4b2e      	ldr	r3, [pc, #184]	@ (8002edc <low_level_init+0x100>)
 8002e24:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8002e28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002e2a:	482c      	ldr	r0, [pc, #176]	@ (8002edc <low_level_init+0x100>)
 8002e2c:	f7fe f8f6 	bl	800101c <HAL_ETH_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002e34:	2238      	movs	r2, #56	@ 0x38
 8002e36:	2100      	movs	r1, #0
 8002e38:	482c      	ldr	r0, [pc, #176]	@ (8002eec <low_level_init+0x110>)
 8002e3a:	f009 fe36 	bl	800caaa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <low_level_init+0x110>)
 8002e40:	2221      	movs	r2, #33	@ 0x21
 8002e42:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <low_level_init+0x110>)
 8002e46:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002e4a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002e4c:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <low_level_init+0x110>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8002e52:	4827      	ldr	r0, [pc, #156]	@ (8002ef0 <low_level_init+0x114>)
 8002e54:	f000 fcf2 	bl	800383c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2206      	movs	r2, #6
 8002e5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002e60:	4b1e      	ldr	r3, [pc, #120]	@ (8002edc <low_level_init+0x100>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <low_level_init+0x100>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	785a      	ldrb	r2, [r3, #1]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002e78:	4b18      	ldr	r3, [pc, #96]	@ (8002edc <low_level_init+0x100>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	789a      	ldrb	r2, [r3, #2]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002e84:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <low_level_init+0x100>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	78da      	ldrb	r2, [r3, #3]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002e90:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <low_level_init+0x100>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	791a      	ldrb	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002edc <low_level_init+0x100>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	795a      	ldrb	r2, [r3, #5]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002eae:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002eb6:	f043 030a 	orr.w	r3, r3, #10
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d103      	bne.n	8002ed0 <low_level_init+0xf4>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f8ca 	bl	8003062 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8002ece:	e001      	b.n	8002ed4 <low_level_init+0xf8>
    Error_Handler();
 8002ed0:	f7fd fdc4 	bl	8000a5c <Error_Handler>
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20004c00 	.word	0x20004c00
 8002ee0:	40028000 	.word	0x40028000
 8002ee4:	20004b60 	.word	0x20004b60
 8002ee8:	20004ac0 	.word	0x20004ac0
 8002eec:	20004cb0 	.word	0x20004cb0
 8002ef0:	080101f8 	.word	0x080101f8

08002ef4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b092      	sub	sp, #72	@ 0x48
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	2230      	movs	r2, #48	@ 0x30
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f009 fdc8 	bl	800caaa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8002f1a:	f107 030c 	add.w	r3, r7, #12
 8002f1e:	2230      	movs	r2, #48	@ 0x30
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f009 fdc1 	bl	800caaa <memset>

  for(q = p; q != NULL; q = q->next)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f2c:	e045      	b.n	8002fba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8002f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d902      	bls.n	8002f3a <low_level_output+0x46>
      return ERR_IF;
 8002f34:	f06f 030b 	mvn.w	r3, #11
 8002f38:	e055      	b.n	8002fe6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8002f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f40:	4613      	mov	r3, r2
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	3348      	adds	r3, #72	@ 0x48
 8002f4a:	443b      	add	r3, r7
 8002f4c:	3b3c      	subs	r3, #60	@ 0x3c
 8002f4e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8002f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f52:	895b      	ldrh	r3, [r3, #10]
 8002f54:	4619      	mov	r1, r3
 8002f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	3348      	adds	r3, #72	@ 0x48
 8002f62:	443b      	add	r3, r7
 8002f64:	3b38      	subs	r3, #56	@ 0x38
 8002f66:	6019      	str	r1, [r3, #0]

    if(i>0)
 8002f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d011      	beq.n	8002f92 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8002f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f70:	1e5a      	subs	r2, r3, #1
 8002f72:	f107 000c 	add.w	r0, r7, #12
 8002f76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f78:	460b      	mov	r3, r1
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	440b      	add	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	18c1      	adds	r1, r0, r3
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	3348      	adds	r3, #72	@ 0x48
 8002f8c:	443b      	add	r3, r7
 8002f8e:	3b34      	subs	r3, #52	@ 0x34
 8002f90:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8002f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8002f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	3348      	adds	r3, #72	@ 0x48
 8002fa6:	443b      	add	r3, r7
 8002fa8:	3b34      	subs	r3, #52	@ 0x34
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
    }

    i++;
 8002fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8002fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1b6      	bne.n	8002f2e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	891b      	ldrh	r3, [r3, #8]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <low_level_output+0xfc>)
 8002fc8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8002fca:	4a09      	ldr	r2, [pc, #36]	@ (8002ff0 <low_level_output+0xfc>)
 8002fcc:	f107 030c 	add.w	r3, r7, #12
 8002fd0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8002fd2:	4a07      	ldr	r2, [pc, #28]	@ (8002ff0 <low_level_output+0xfc>)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8002fd8:	2214      	movs	r2, #20
 8002fda:	4905      	ldr	r1, [pc, #20]	@ (8002ff0 <low_level_output+0xfc>)
 8002fdc:	4805      	ldr	r0, [pc, #20]	@ (8002ff4 <low_level_output+0x100>)
 8002fde:	f7fe f8c3 	bl	8001168 <HAL_ETH_Transmit>

  return errval;
 8002fe2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3748      	adds	r7, #72	@ 0x48
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20004cb0 	.word	0x20004cb0
 8002ff4:	20004c00 	.word	0x20004c00

08002ff8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <ethernetif_init+0x1c>
 8003006:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <ethernetif_init+0x48>)
 8003008:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800300c:	490d      	ldr	r1, [pc, #52]	@ (8003044 <ethernetif_init+0x4c>)
 800300e:	480e      	ldr	r0, [pc, #56]	@ (8003048 <ethernetif_init+0x50>)
 8003010:	f009 fce6 	bl	800c9e0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2273      	movs	r2, #115	@ 0x73
 8003018:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2274      	movs	r2, #116	@ 0x74
 8003020:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a09      	ldr	r2, [pc, #36]	@ (800304c <ethernetif_init+0x54>)
 8003028:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a08      	ldr	r2, [pc, #32]	@ (8003050 <ethernetif_init+0x58>)
 800302e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fed3 	bl	8002ddc <low_level_init>

  return ERR_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	0800d808 	.word	0x0800d808
 8003044:	0800d824 	.word	0x0800d824
 8003048:	0800d834 	.word	0x0800d834
 800304c:	0800aaed 	.word	0x0800aaed
 8003050:	08002ef5 	.word	0x08002ef5

08003054 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003058:	f7fd feca 	bl	8000df0 <HAL_GetTick>
 800305c:	4603      	mov	r3, r0
}
 800305e:	4618      	mov	r0, r3
 8003060:	bd80      	pop	{r7, pc}

08003062 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]

}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	b21a      	sxth	r2, r3
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	b29b      	uxth	r3, r3
 800308e:	b21b      	sxth	r3, r3
 8003090:	4313      	orrs	r3, r2
 8003092:	b21b      	sxth	r3, r3
 8003094:	b29b      	uxth	r3, r3
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	061a      	lsls	r2, r3, #24
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0e1b      	lsrs	r3, r3, #24
 80030c6:	4313      	orrs	r3, r2
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80030de:	f000 f8d5 	bl	800328c <mem_init>
  memp_init();
 80030e2:	f000 fbdb 	bl	800389c <memp_init>
  pbuf_init();
  netif_init();
 80030e6:	f000 fc93 	bl	8003a10 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80030ea:	f006 ff29 	bl	8009f40 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80030ee:	f001 fcc7 	bl	8004a80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80030f2:	f006 fedd 	bl	8009eb0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800310a:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <ptr_to_mem+0x20>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	4413      	add	r3, r2
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20005354 	.word	0x20005354

08003124 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800312c:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <mem_to_ptr+0x20>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	b29b      	uxth	r3, r3
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20005354 	.word	0x20005354

08003148 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003150:	4b45      	ldr	r3, [pc, #276]	@ (8003268 <plug_holes+0x120>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	d206      	bcs.n	8003168 <plug_holes+0x20>
 800315a:	4b44      	ldr	r3, [pc, #272]	@ (800326c <plug_holes+0x124>)
 800315c:	f240 12df 	movw	r2, #479	@ 0x1df
 8003160:	4943      	ldr	r1, [pc, #268]	@ (8003270 <plug_holes+0x128>)
 8003162:	4844      	ldr	r0, [pc, #272]	@ (8003274 <plug_holes+0x12c>)
 8003164:	f009 fc3c 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003168:	4b43      	ldr	r3, [pc, #268]	@ (8003278 <plug_holes+0x130>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d306      	bcc.n	8003180 <plug_holes+0x38>
 8003172:	4b3e      	ldr	r3, [pc, #248]	@ (800326c <plug_holes+0x124>)
 8003174:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003178:	4940      	ldr	r1, [pc, #256]	@ (800327c <plug_holes+0x134>)
 800317a:	483e      	ldr	r0, [pc, #248]	@ (8003274 <plug_holes+0x12c>)
 800317c:	f009 fc30 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	791b      	ldrb	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d006      	beq.n	8003196 <plug_holes+0x4e>
 8003188:	4b38      	ldr	r3, [pc, #224]	@ (800326c <plug_holes+0x124>)
 800318a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800318e:	493c      	ldr	r1, [pc, #240]	@ (8003280 <plug_holes+0x138>)
 8003190:	4838      	ldr	r0, [pc, #224]	@ (8003274 <plug_holes+0x12c>)
 8003192:	f009 fc25 	bl	800c9e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800319e:	d906      	bls.n	80031ae <plug_holes+0x66>
 80031a0:	4b32      	ldr	r3, [pc, #200]	@ (800326c <plug_holes+0x124>)
 80031a2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80031a6:	4937      	ldr	r1, [pc, #220]	@ (8003284 <plug_holes+0x13c>)
 80031a8:	4832      	ldr	r0, [pc, #200]	@ (8003274 <plug_holes+0x12c>)
 80031aa:	f009 fc19 	bl	800c9e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ffa4 	bl	8003100 <ptr_to_mem>
 80031b8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d024      	beq.n	800320c <plug_holes+0xc4>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	791b      	ldrb	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d120      	bne.n	800320c <plug_holes+0xc4>
 80031ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003278 <plug_holes+0x130>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d01b      	beq.n	800320c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80031d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003288 <plug_holes+0x140>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d102      	bne.n	80031e4 <plug_holes+0x9c>
      lfree = mem;
 80031de:	4a2a      	ldr	r2, [pc, #168]	@ (8003288 <plug_holes+0x140>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80031f4:	d00a      	beq.n	800320c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff80 	bl	8003100 <ptr_to_mem>
 8003200:	4604      	mov	r4, r0
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ff8e 	bl	8003124 <mem_to_ptr>
 8003208:	4603      	mov	r3, r0
 800320a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	885b      	ldrh	r3, [r3, #2]
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff ff75 	bl	8003100 <ptr_to_mem>
 8003216:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d01f      	beq.n	8003260 <plug_holes+0x118>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d11b      	bne.n	8003260 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003228:	4b17      	ldr	r3, [pc, #92]	@ (8003288 <plug_holes+0x140>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	d102      	bne.n	8003238 <plug_holes+0xf0>
      lfree = pmem;
 8003232:	4a15      	ldr	r2, [pc, #84]	@ (8003288 <plug_holes+0x140>)
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003248:	d00a      	beq.n	8003260 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff ff56 	bl	8003100 <ptr_to_mem>
 8003254:	4604      	mov	r4, r0
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	f7ff ff64 	bl	8003124 <mem_to_ptr>
 800325c:	4603      	mov	r3, r0
 800325e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	20005354 	.word	0x20005354
 800326c:	0800d85c 	.word	0x0800d85c
 8003270:	0800d88c 	.word	0x0800d88c
 8003274:	0800d8a4 	.word	0x0800d8a4
 8003278:	20005358 	.word	0x20005358
 800327c:	0800d8cc 	.word	0x0800d8cc
 8003280:	0800d8e8 	.word	0x0800d8e8
 8003284:	0800d904 	.word	0x0800d904
 8003288:	2000535c 	.word	0x2000535c

0800328c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003292:	4b18      	ldr	r3, [pc, #96]	@ (80032f4 <mem_init+0x68>)
 8003294:	3303      	adds	r3, #3
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	461a      	mov	r2, r3
 800329c:	4b16      	ldr	r3, [pc, #88]	@ (80032f8 <mem_init+0x6c>)
 800329e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80032a0:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <mem_init+0x6c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80032ac:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80032ba:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80032be:	f7ff ff1f 	bl	8003100 <ptr_to_mem>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4a0d      	ldr	r2, [pc, #52]	@ (80032fc <mem_init+0x70>)
 80032c6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <mem_init+0x70>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2201      	movs	r2, #1
 80032ce:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80032d0:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <mem_init+0x70>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80032d8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <mem_init+0x70>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80032e2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80032e4:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <mem_init+0x6c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a05      	ldr	r2, [pc, #20]	@ (8003300 <mem_init+0x74>)
 80032ea:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20004d00 	.word	0x20004d00
 80032f8:	20005354 	.word	0x20005354
 80032fc:	20005358 	.word	0x20005358
 8003300:	2000535c 	.word	0x2000535c

08003304 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff09 	bl	8003124 <mem_to_ptr>
 8003312:	4603      	mov	r3, r0
 8003314:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fef0 	bl	8003100 <ptr_to_mem>
 8003320:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	885b      	ldrh	r3, [r3, #2]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff feea 	bl	8003100 <ptr_to_mem>
 800332c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003336:	d818      	bhi.n	800336a <mem_link_valid+0x66>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	885b      	ldrh	r3, [r3, #2]
 800333c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003340:	d813      	bhi.n	800336a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003346:	8afa      	ldrh	r2, [r7, #22]
 8003348:	429a      	cmp	r2, r3
 800334a:	d004      	beq.n	8003356 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	8afa      	ldrh	r2, [r7, #22]
 8003352:	429a      	cmp	r2, r3
 8003354:	d109      	bne.n	800336a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003356:	4b08      	ldr	r3, [pc, #32]	@ (8003378 <mem_link_valid+0x74>)
 8003358:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	429a      	cmp	r2, r3
 800335e:	d006      	beq.n	800336e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	885b      	ldrh	r3, [r3, #2]
 8003364:	8afa      	ldrh	r2, [r7, #22]
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <mem_link_valid+0x6a>
    return 0;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <mem_link_valid+0x6c>
  }
  return 1;
 800336e:	2301      	movs	r3, #1
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20005358 	.word	0x20005358

0800337c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d04c      	beq.n	8003424 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003394:	4b25      	ldr	r3, [pc, #148]	@ (800342c <mem_free+0xb0>)
 8003396:	f240 2273 	movw	r2, #627	@ 0x273
 800339a:	4925      	ldr	r1, [pc, #148]	@ (8003430 <mem_free+0xb4>)
 800339c:	4825      	ldr	r0, [pc, #148]	@ (8003434 <mem_free+0xb8>)
 800339e:	f009 fb1f 	bl	800c9e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80033a2:	e040      	b.n	8003426 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b08      	subs	r3, #8
 80033a8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80033aa:	4b23      	ldr	r3, [pc, #140]	@ (8003438 <mem_free+0xbc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d306      	bcc.n	80033c2 <mem_free+0x46>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f103 020c 	add.w	r2, r3, #12
 80033ba:	4b20      	ldr	r3, [pc, #128]	@ (800343c <mem_free+0xc0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d907      	bls.n	80033d2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80033c2:	4b1a      	ldr	r3, [pc, #104]	@ (800342c <mem_free+0xb0>)
 80033c4:	f240 227f 	movw	r2, #639	@ 0x27f
 80033c8:	491d      	ldr	r1, [pc, #116]	@ (8003440 <mem_free+0xc4>)
 80033ca:	481a      	ldr	r0, [pc, #104]	@ (8003434 <mem_free+0xb8>)
 80033cc:	f009 fb08 	bl	800c9e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80033d0:	e029      	b.n	8003426 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	791b      	ldrb	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d107      	bne.n	80033ea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80033da:	4b14      	ldr	r3, [pc, #80]	@ (800342c <mem_free+0xb0>)
 80033dc:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80033e0:	4918      	ldr	r1, [pc, #96]	@ (8003444 <mem_free+0xc8>)
 80033e2:	4814      	ldr	r0, [pc, #80]	@ (8003434 <mem_free+0xb8>)
 80033e4:	f009 fafc 	bl	800c9e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80033e8:	e01d      	b.n	8003426 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7ff ff8a 	bl	8003304 <mem_link_valid>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d107      	bne.n	8003406 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <mem_free+0xb0>)
 80033f8:	f240 2295 	movw	r2, #661	@ 0x295
 80033fc:	4912      	ldr	r1, [pc, #72]	@ (8003448 <mem_free+0xcc>)
 80033fe:	480d      	ldr	r0, [pc, #52]	@ (8003434 <mem_free+0xb8>)
 8003400:	f009 faee 	bl	800c9e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003404:	e00f      	b.n	8003426 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800340c:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <mem_free+0xd0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	429a      	cmp	r2, r3
 8003414:	d202      	bcs.n	800341c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003416:	4a0d      	ldr	r2, [pc, #52]	@ (800344c <mem_free+0xd0>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff fe93 	bl	8003148 <plug_holes>
 8003422:	e000      	b.n	8003426 <mem_free+0xaa>
    return;
 8003424:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	0800d85c 	.word	0x0800d85c
 8003430:	0800d930 	.word	0x0800d930
 8003434:	0800d8a4 	.word	0x0800d8a4
 8003438:	20005354 	.word	0x20005354
 800343c:	20005358 	.word	0x20005358
 8003440:	0800d954 	.word	0x0800d954
 8003444:	0800d970 	.word	0x0800d970
 8003448:	0800d998 	.word	0x0800d998
 800344c:	2000535c 	.word	0x2000535c

08003450 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800345c:	887b      	ldrh	r3, [r7, #2]
 800345e:	3303      	adds	r3, #3
 8003460:	b29b      	uxth	r3, r3
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003468:	8bfb      	ldrh	r3, [r7, #30]
 800346a:	2b0b      	cmp	r3, #11
 800346c:	d801      	bhi.n	8003472 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800346e:	230c      	movs	r3, #12
 8003470:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003472:	8bfb      	ldrh	r3, [r7, #30]
 8003474:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003478:	d803      	bhi.n	8003482 <mem_trim+0x32>
 800347a:	8bfa      	ldrh	r2, [r7, #30]
 800347c:	887b      	ldrh	r3, [r7, #2]
 800347e:	429a      	cmp	r2, r3
 8003480:	d201      	bcs.n	8003486 <mem_trim+0x36>
    return NULL;
 8003482:	2300      	movs	r3, #0
 8003484:	e0cc      	b.n	8003620 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003486:	4b68      	ldr	r3, [pc, #416]	@ (8003628 <mem_trim+0x1d8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d304      	bcc.n	800349a <mem_trim+0x4a>
 8003490:	4b66      	ldr	r3, [pc, #408]	@ (800362c <mem_trim+0x1dc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d306      	bcc.n	80034a8 <mem_trim+0x58>
 800349a:	4b65      	ldr	r3, [pc, #404]	@ (8003630 <mem_trim+0x1e0>)
 800349c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80034a0:	4964      	ldr	r1, [pc, #400]	@ (8003634 <mem_trim+0x1e4>)
 80034a2:	4865      	ldr	r0, [pc, #404]	@ (8003638 <mem_trim+0x1e8>)
 80034a4:	f009 fa9c 	bl	800c9e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80034a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003628 <mem_trim+0x1d8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d304      	bcc.n	80034bc <mem_trim+0x6c>
 80034b2:	4b5e      	ldr	r3, [pc, #376]	@ (800362c <mem_trim+0x1dc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d301      	bcc.n	80034c0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	e0af      	b.n	8003620 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3b08      	subs	r3, #8
 80034c4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80034c6:	69b8      	ldr	r0, [r7, #24]
 80034c8:	f7ff fe2c 	bl	8003124 <mem_to_ptr>
 80034cc:	4603      	mov	r3, r0
 80034ce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	881a      	ldrh	r2, [r3, #0]
 80034d4:	8afb      	ldrh	r3, [r7, #22]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b08      	subs	r3, #8
 80034dc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80034de:	8bfa      	ldrh	r2, [r7, #30]
 80034e0:	8abb      	ldrh	r3, [r7, #20]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d906      	bls.n	80034f4 <mem_trim+0xa4>
 80034e6:	4b52      	ldr	r3, [pc, #328]	@ (8003630 <mem_trim+0x1e0>)
 80034e8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80034ec:	4953      	ldr	r1, [pc, #332]	@ (800363c <mem_trim+0x1ec>)
 80034ee:	4852      	ldr	r0, [pc, #328]	@ (8003638 <mem_trim+0x1e8>)
 80034f0:	f009 fa76 	bl	800c9e0 <iprintf>
  if (newsize > size) {
 80034f4:	8bfa      	ldrh	r2, [r7, #30]
 80034f6:	8abb      	ldrh	r3, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d901      	bls.n	8003500 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e08f      	b.n	8003620 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003500:	8bfa      	ldrh	r2, [r7, #30]
 8003502:	8abb      	ldrh	r3, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	d101      	bne.n	800350c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	e089      	b.n	8003620 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff fdf5 	bl	8003100 <ptr_to_mem>
 8003516:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	791b      	ldrb	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d13f      	bne.n	80035a0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003528:	d106      	bne.n	8003538 <mem_trim+0xe8>
 800352a:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <mem_trim+0x1e0>)
 800352c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8003530:	4943      	ldr	r1, [pc, #268]	@ (8003640 <mem_trim+0x1f0>)
 8003532:	4841      	ldr	r0, [pc, #260]	@ (8003638 <mem_trim+0x1e8>)
 8003534:	f009 fa54 	bl	800c9e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800353e:	8afa      	ldrh	r2, [r7, #22]
 8003540:	8bfb      	ldrh	r3, [r7, #30]
 8003542:	4413      	add	r3, r2
 8003544:	b29b      	uxth	r3, r3
 8003546:	3308      	adds	r3, #8
 8003548:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800354a:	4b3e      	ldr	r3, [pc, #248]	@ (8003644 <mem_trim+0x1f4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	429a      	cmp	r2, r3
 8003552:	d106      	bne.n	8003562 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003554:	89fb      	ldrh	r3, [r7, #14]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fdd2 	bl	8003100 <ptr_to_mem>
 800355c:	4603      	mov	r3, r0
 800355e:	4a39      	ldr	r2, [pc, #228]	@ (8003644 <mem_trim+0x1f4>)
 8003560:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003562:	89fb      	ldrh	r3, [r7, #14]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fdcb 	bl	8003100 <ptr_to_mem>
 800356a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2200      	movs	r2, #0
 8003570:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	89ba      	ldrh	r2, [r7, #12]
 8003576:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	8afa      	ldrh	r2, [r7, #22]
 800357c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	89fa      	ldrh	r2, [r7, #14]
 8003582:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800358c:	d047      	beq.n	800361e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fdb4 	bl	8003100 <ptr_to_mem>
 8003598:	4602      	mov	r2, r0
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	8053      	strh	r3, [r2, #2]
 800359e:	e03e      	b.n	800361e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80035a0:	8bfb      	ldrh	r3, [r7, #30]
 80035a2:	f103 0214 	add.w	r2, r3, #20
 80035a6:	8abb      	ldrh	r3, [r7, #20]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d838      	bhi.n	800361e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80035ac:	8afa      	ldrh	r2, [r7, #22]
 80035ae:	8bfb      	ldrh	r3, [r7, #30]
 80035b0:	4413      	add	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3308      	adds	r3, #8
 80035b6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80035c0:	d106      	bne.n	80035d0 <mem_trim+0x180>
 80035c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <mem_trim+0x1e0>)
 80035c4:	f240 3216 	movw	r2, #790	@ 0x316
 80035c8:	491d      	ldr	r1, [pc, #116]	@ (8003640 <mem_trim+0x1f0>)
 80035ca:	481b      	ldr	r0, [pc, #108]	@ (8003638 <mem_trim+0x1e8>)
 80035cc:	f009 fa08 	bl	800c9e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fd94 	bl	8003100 <ptr_to_mem>
 80035d8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80035da:	4b1a      	ldr	r3, [pc, #104]	@ (8003644 <mem_trim+0x1f4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d202      	bcs.n	80035ea <mem_trim+0x19a>
      lfree = mem2;
 80035e4:	4a17      	ldr	r2, [pc, #92]	@ (8003644 <mem_trim+0x1f4>)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2200      	movs	r2, #0
 80035ee:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	881a      	ldrh	r2, [r3, #0]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	8afa      	ldrh	r2, [r7, #22]
 80035fc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	89fa      	ldrh	r2, [r7, #14]
 8003602:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800360c:	d007      	beq.n	800361e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fd74 	bl	8003100 <ptr_to_mem>
 8003618:	4602      	mov	r2, r0
 800361a:	89fb      	ldrh	r3, [r7, #14]
 800361c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800361e:	687b      	ldr	r3, [r7, #4]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20005354 	.word	0x20005354
 800362c:	20005358 	.word	0x20005358
 8003630:	0800d85c 	.word	0x0800d85c
 8003634:	0800d9cc 	.word	0x0800d9cc
 8003638:	0800d8a4 	.word	0x0800d8a4
 800363c:	0800d9e4 	.word	0x0800d9e4
 8003640:	0800da04 	.word	0x0800da04
 8003644:	2000535c 	.word	0x2000535c

08003648 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <mem_malloc+0x14>
    return NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	e0d9      	b.n	8003810 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	3303      	adds	r3, #3
 8003660:	b29b      	uxth	r3, r3
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003668:	8bbb      	ldrh	r3, [r7, #28]
 800366a:	2b0b      	cmp	r3, #11
 800366c:	d801      	bhi.n	8003672 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800366e:	230c      	movs	r3, #12
 8003670:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003672:	8bbb      	ldrh	r3, [r7, #28]
 8003674:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8003678:	d803      	bhi.n	8003682 <mem_malloc+0x3a>
 800367a:	8bba      	ldrh	r2, [r7, #28]
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	429a      	cmp	r2, r3
 8003680:	d201      	bcs.n	8003686 <mem_malloc+0x3e>
    return NULL;
 8003682:	2300      	movs	r3, #0
 8003684:	e0c4      	b.n	8003810 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003686:	4b64      	ldr	r3, [pc, #400]	@ (8003818 <mem_malloc+0x1d0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fd4a 	bl	8003124 <mem_to_ptr>
 8003690:	4603      	mov	r3, r0
 8003692:	83fb      	strh	r3, [r7, #30]
 8003694:	e0b4      	b.n	8003800 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003696:	8bfb      	ldrh	r3, [r7, #30]
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fd31 	bl	8003100 <ptr_to_mem>
 800369e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	791b      	ldrb	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f040 80a4 	bne.w	80037f2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	8bfb      	ldrh	r3, [r7, #30]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f1a3 0208 	sub.w	r2, r3, #8
 80036b8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80036ba:	429a      	cmp	r2, r3
 80036bc:	f0c0 8099 	bcc.w	80037f2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	8bfb      	ldrh	r3, [r7, #30]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f1a3 0208 	sub.w	r2, r3, #8
 80036ce:	8bbb      	ldrh	r3, [r7, #28]
 80036d0:	3314      	adds	r3, #20
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d333      	bcc.n	800373e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80036d6:	8bfa      	ldrh	r2, [r7, #30]
 80036d8:	8bbb      	ldrh	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3308      	adds	r3, #8
 80036e0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80036e2:	8a7b      	ldrh	r3, [r7, #18]
 80036e4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80036e8:	d106      	bne.n	80036f8 <mem_malloc+0xb0>
 80036ea:	4b4c      	ldr	r3, [pc, #304]	@ (800381c <mem_malloc+0x1d4>)
 80036ec:	f240 3287 	movw	r2, #903	@ 0x387
 80036f0:	494b      	ldr	r1, [pc, #300]	@ (8003820 <mem_malloc+0x1d8>)
 80036f2:	484c      	ldr	r0, [pc, #304]	@ (8003824 <mem_malloc+0x1dc>)
 80036f4:	f009 f974 	bl	800c9e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80036f8:	8a7b      	ldrh	r3, [r7, #18]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fd00 	bl	8003100 <ptr_to_mem>
 8003700:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8bfa      	ldrh	r2, [r7, #30]
 8003714:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	8a7a      	ldrh	r2, [r7, #18]
 800371a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2201      	movs	r2, #1
 8003720:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800372a:	d00b      	beq.n	8003744 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fce5 	bl	8003100 <ptr_to_mem>
 8003736:	4602      	mov	r2, r0
 8003738:	8a7b      	ldrh	r3, [r7, #18]
 800373a:	8053      	strh	r3, [r2, #2]
 800373c:	e002      	b.n	8003744 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2201      	movs	r2, #1
 8003742:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003744:	4b34      	ldr	r3, [pc, #208]	@ (8003818 <mem_malloc+0x1d0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	429a      	cmp	r2, r3
 800374c:	d127      	bne.n	800379e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800374e:	4b32      	ldr	r3, [pc, #200]	@ (8003818 <mem_malloc+0x1d0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003754:	e005      	b.n	8003762 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fcd0 	bl	8003100 <ptr_to_mem>
 8003760:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	791b      	ldrb	r3, [r3, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <mem_malloc+0x12c>
 800376a:	4b2f      	ldr	r3, [pc, #188]	@ (8003828 <mem_malloc+0x1e0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	429a      	cmp	r2, r3
 8003772:	d1f0      	bne.n	8003756 <mem_malloc+0x10e>
          }
          lfree = cur;
 8003774:	4a28      	ldr	r2, [pc, #160]	@ (8003818 <mem_malloc+0x1d0>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800377a:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <mem_malloc+0x1d0>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b2a      	ldr	r3, [pc, #168]	@ (8003828 <mem_malloc+0x1e0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d00b      	beq.n	800379e <mem_malloc+0x156>
 8003786:	4b24      	ldr	r3, [pc, #144]	@ (8003818 <mem_malloc+0x1d0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	791b      	ldrb	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d006      	beq.n	800379e <mem_malloc+0x156>
 8003790:	4b22      	ldr	r3, [pc, #136]	@ (800381c <mem_malloc+0x1d4>)
 8003792:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8003796:	4925      	ldr	r1, [pc, #148]	@ (800382c <mem_malloc+0x1e4>)
 8003798:	4822      	ldr	r0, [pc, #136]	@ (8003824 <mem_malloc+0x1dc>)
 800379a:	f009 f921 	bl	800c9e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800379e:	8bba      	ldrh	r2, [r7, #28]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4413      	add	r3, r2
 80037a4:	3308      	adds	r3, #8
 80037a6:	4a20      	ldr	r2, [pc, #128]	@ (8003828 <mem_malloc+0x1e0>)
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d906      	bls.n	80037bc <mem_malloc+0x174>
 80037ae:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <mem_malloc+0x1d4>)
 80037b0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80037b4:	491e      	ldr	r1, [pc, #120]	@ (8003830 <mem_malloc+0x1e8>)
 80037b6:	481b      	ldr	r0, [pc, #108]	@ (8003824 <mem_malloc+0x1dc>)
 80037b8:	f009 f912 	bl	800c9e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <mem_malloc+0x18c>
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <mem_malloc+0x1d4>)
 80037c8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80037cc:	4919      	ldr	r1, [pc, #100]	@ (8003834 <mem_malloc+0x1ec>)
 80037ce:	4815      	ldr	r0, [pc, #84]	@ (8003824 <mem_malloc+0x1dc>)
 80037d0:	f009 f906 	bl	800c9e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <mem_malloc+0x1a4>
 80037de:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <mem_malloc+0x1d4>)
 80037e0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80037e4:	4914      	ldr	r1, [pc, #80]	@ (8003838 <mem_malloc+0x1f0>)
 80037e6:	480f      	ldr	r0, [pc, #60]	@ (8003824 <mem_malloc+0x1dc>)
 80037e8:	f009 f8fa 	bl	800c9e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3308      	adds	r3, #8
 80037f0:	e00e      	b.n	8003810 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80037f2:	8bfb      	ldrh	r3, [r7, #30]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fc83 	bl	8003100 <ptr_to_mem>
 80037fa:	4603      	mov	r3, r0
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003800:	8bfa      	ldrh	r2, [r7, #30]
 8003802:	8bbb      	ldrh	r3, [r7, #28]
 8003804:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8003808:	429a      	cmp	r2, r3
 800380a:	f4ff af44 	bcc.w	8003696 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	2000535c 	.word	0x2000535c
 800381c:	0800d85c 	.word	0x0800d85c
 8003820:	0800da04 	.word	0x0800da04
 8003824:	0800d8a4 	.word	0x0800d8a4
 8003828:	20005358 	.word	0x20005358
 800382c:	0800da18 	.word	0x0800da18
 8003830:	0800da34 	.word	0x0800da34
 8003834:	0800da64 	.word	0x0800da64
 8003838:	0800da94 	.word	0x0800da94

0800383c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	3303      	adds	r3, #3
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003858:	2300      	movs	r3, #0
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e011      	b.n	8003882 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	885b      	ldrh	r3, [r3, #2]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4293      	cmp	r3, r2
 800388c:	dbe7      	blt.n	800385e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80038a2:	2300      	movs	r3, #0
 80038a4:	80fb      	strh	r3, [r7, #6]
 80038a6:	e009      	b.n	80038bc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	4a08      	ldr	r2, [pc, #32]	@ (80038cc <memp_init+0x30>)
 80038ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ffc3 	bl	800383c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	3301      	adds	r3, #1
 80038ba:	80fb      	strh	r3, [r7, #6]
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d9f2      	bls.n	80038a8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	08010270 	.word	0x08010270

080038d0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <do_memp_malloc_pool+0x38>
 80038fa:	4b07      	ldr	r3, [pc, #28]	@ (8003918 <do_memp_malloc_pool+0x48>)
 80038fc:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003900:	4906      	ldr	r1, [pc, #24]	@ (800391c <do_memp_malloc_pool+0x4c>)
 8003902:	4807      	ldr	r0, [pc, #28]	@ (8003920 <do_memp_malloc_pool+0x50>)
 8003904:	f009 f86c 	bl	800c9e0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	e000      	b.n	800390e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	0800dab8 	.word	0x0800dab8
 800391c:	0800dae8 	.word	0x0800dae8
 8003920:	0800db0c 	.word	0x0800db0c

08003924 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d908      	bls.n	8003946 <memp_malloc+0x22>
 8003934:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <memp_malloc+0x3c>)
 8003936:	f240 1257 	movw	r2, #343	@ 0x157
 800393a:	490a      	ldr	r1, [pc, #40]	@ (8003964 <memp_malloc+0x40>)
 800393c:	480a      	ldr	r0, [pc, #40]	@ (8003968 <memp_malloc+0x44>)
 800393e:	f009 f84f 	bl	800c9e0 <iprintf>
 8003942:	2300      	movs	r3, #0
 8003944:	e008      	b.n	8003958 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	4a08      	ldr	r2, [pc, #32]	@ (800396c <memp_malloc+0x48>)
 800394a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ffbe 	bl	80038d0 <do_memp_malloc_pool>
 8003954:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	0800dab8 	.word	0x0800dab8
 8003964:	0800db48 	.word	0x0800db48
 8003968:	0800db0c 	.word	0x0800db0c
 800396c:	08010270 	.word	0x08010270

08003970 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <do_memp_free_pool+0x22>
 8003984:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <do_memp_free_pool+0x40>)
 8003986:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800398a:	490a      	ldr	r1, [pc, #40]	@ (80039b4 <do_memp_free_pool+0x44>)
 800398c:	480a      	ldr	r0, [pc, #40]	@ (80039b8 <do_memp_free_pool+0x48>)
 800398e:	f009 f827 	bl	800c9e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	0800dab8 	.word	0x0800dab8
 80039b4:	0800db68 	.word	0x0800db68
 80039b8:	0800db0c 	.word	0x0800db0c

080039bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	6039      	str	r1, [r7, #0]
 80039c6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d907      	bls.n	80039de <memp_free+0x22>
 80039ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003a00 <memp_free+0x44>)
 80039d0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80039d4:	490b      	ldr	r1, [pc, #44]	@ (8003a04 <memp_free+0x48>)
 80039d6:	480c      	ldr	r0, [pc, #48]	@ (8003a08 <memp_free+0x4c>)
 80039d8:	f009 f802 	bl	800c9e0 <iprintf>
 80039dc:	e00c      	b.n	80039f8 <memp_free+0x3c>

  if (mem == NULL) {
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	4a09      	ldr	r2, [pc, #36]	@ (8003a0c <memp_free+0x50>)
 80039e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff ffbe 	bl	8003970 <do_memp_free_pool>
 80039f4:	e000      	b.n	80039f8 <memp_free+0x3c>
    return;
 80039f6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	0800dab8 	.word	0x0800dab8
 8003a04:	0800db88 	.word	0x0800db88
 8003a08:	0800db0c 	.word	0x0800db0c
 8003a0c:	08010270 	.word	0x08010270

08003a10 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d108      	bne.n	8003a46 <netif_add+0x26>
 8003a34:	4b59      	ldr	r3, [pc, #356]	@ (8003b9c <netif_add+0x17c>)
 8003a36:	f240 1227 	movw	r2, #295	@ 0x127
 8003a3a:	4959      	ldr	r1, [pc, #356]	@ (8003ba0 <netif_add+0x180>)
 8003a3c:	4859      	ldr	r0, [pc, #356]	@ (8003ba4 <netif_add+0x184>)
 8003a3e:	f008 ffcf 	bl	800c9e0 <iprintf>
 8003a42:	2300      	movs	r3, #0
 8003a44:	e0a5      	b.n	8003b92 <netif_add+0x172>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d108      	bne.n	8003a5e <netif_add+0x3e>
 8003a4c:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <netif_add+0x17c>)
 8003a4e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8003a52:	4955      	ldr	r1, [pc, #340]	@ (8003ba8 <netif_add+0x188>)
 8003a54:	4853      	ldr	r0, [pc, #332]	@ (8003ba4 <netif_add+0x184>)
 8003a56:	f008 ffc3 	bl	800c9e0 <iprintf>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e099      	b.n	8003b92 <netif_add+0x172>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8003a64:	4b51      	ldr	r3, [pc, #324]	@ (8003bac <netif_add+0x18c>)
 8003a66:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8003a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8003bac <netif_add+0x18c>)
 8003a70:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8003a78:	4b4c      	ldr	r3, [pc, #304]	@ (8003bac <netif_add+0x18c>)
 8003a7a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a47      	ldr	r2, [pc, #284]	@ (8003bb0 <netif_add+0x190>)
 8003a92:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	625a      	str	r2, [r3, #36]	@ 0x24
  netif->num = netif_num;
 8003ab4:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb4 <netif_add+0x194>)
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ac2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f91c 	bl	8003d08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	4798      	blx	r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <netif_add+0xc0>
    return NULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e058      	b.n	8003b92 <netif_add+0x172>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ae6:	2bff      	cmp	r3, #255	@ 0xff
 8003ae8:	d103      	bne.n	8003af2 <netif_add+0xd2>
        netif->num = 0;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003af6:	4b30      	ldr	r3, [pc, #192]	@ (8003bb8 <netif_add+0x198>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e02b      	b.n	8003b56 <netif_add+0x136>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d106      	bne.n	8003b14 <netif_add+0xf4>
 8003b06:	4b25      	ldr	r3, [pc, #148]	@ (8003b9c <netif_add+0x17c>)
 8003b08:	f240 128b 	movw	r2, #395	@ 0x18b
 8003b0c:	492b      	ldr	r1, [pc, #172]	@ (8003bbc <netif_add+0x19c>)
 8003b0e:	4825      	ldr	r0, [pc, #148]	@ (8003ba4 <netif_add+0x184>)
 8003b10:	f008 ff66 	bl	800c9e0 <iprintf>
        num_netifs++;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	3301      	adds	r3, #1
 8003b18:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2bff      	cmp	r3, #255	@ 0xff
 8003b1e:	dd06      	ble.n	8003b2e <netif_add+0x10e>
 8003b20:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <netif_add+0x17c>)
 8003b22:	f240 128d 	movw	r2, #397	@ 0x18d
 8003b26:	4926      	ldr	r1, [pc, #152]	@ (8003bc0 <netif_add+0x1a0>)
 8003b28:	481e      	ldr	r0, [pc, #120]	@ (8003ba4 <netif_add+0x184>)
 8003b2a:	f008 ff59 	bl	800c9e0 <iprintf>
        if (netif2->num == netif->num) {
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d108      	bne.n	8003b50 <netif_add+0x130>
          netif->num++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b44:	3301      	adds	r3, #1
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8003b4e:	e005      	b.n	8003b5c <netif_add+0x13c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1d0      	bne.n	8003afe <netif_add+0xde>
        }
      }
    } while (netif2 != NULL);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1be      	bne.n	8003ae0 <netif_add+0xc0>
  }
  if (netif->num == 254) {
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b68:	2bfe      	cmp	r3, #254	@ 0xfe
 8003b6a:	d103      	bne.n	8003b74 <netif_add+0x154>
    netif_num = 0;
 8003b6c:	4b11      	ldr	r3, [pc, #68]	@ (8003bb4 <netif_add+0x194>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e006      	b.n	8003b82 <netif_add+0x162>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb4 <netif_add+0x194>)
 8003b80:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003b82:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb8 <netif_add+0x198>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003b8a:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb8 <netif_add+0x198>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8003b90:	68fb      	ldr	r3, [r7, #12]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	0800dba4 	.word	0x0800dba4
 8003ba0:	0800dc38 	.word	0x0800dc38
 8003ba4:	0800dbf4 	.word	0x0800dbf4
 8003ba8:	0800dc54 	.word	0x0800dc54
 8003bac:	080102d4 	.word	0x080102d4
 8003bb0:	08003ec7 	.word	0x08003ec7
 8003bb4:	20008254 	.word	0x20008254
 8003bb8:	2000824c 	.word	0x2000824c
 8003bbc:	0800dc78 	.word	0x0800dc78
 8003bc0:	0800dc8c 	.word	0x0800dc8c

08003bc4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8003bce:	6839      	ldr	r1, [r7, #0]
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f002 fa9f 	bl	8006114 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8003bd6:	6839      	ldr	r1, [r7, #0]
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f006 fb3b 	bl	800a254 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <netif_do_set_ipaddr+0x20>
 8003bfa:	4b21      	ldr	r3, [pc, #132]	@ (8003c80 <netif_do_set_ipaddr+0x98>)
 8003bfc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8003c00:	4920      	ldr	r1, [pc, #128]	@ (8003c84 <netif_do_set_ipaddr+0x9c>)
 8003c02:	4821      	ldr	r0, [pc, #132]	@ (8003c88 <netif_do_set_ipaddr+0xa0>)
 8003c04:	f008 feec 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <netif_do_set_ipaddr+0x34>
 8003c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c80 <netif_do_set_ipaddr+0x98>)
 8003c10:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8003c14:	491b      	ldr	r1, [pc, #108]	@ (8003c84 <netif_do_set_ipaddr+0x9c>)
 8003c16:	481c      	ldr	r0, [pc, #112]	@ (8003c88 <netif_do_set_ipaddr+0xa0>)
 8003c18:	f008 fee2 	bl	800c9e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	3304      	adds	r3, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d024      	beq.n	8003c74 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3304      	adds	r3, #4
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ffbf 	bl	8003bc4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <netif_do_set_ipaddr+0x6a>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	e000      	b.n	8003c54 <netif_do_set_ipaddr+0x6c>
 8003c52:	2300      	movs	r3, #0
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003c58:	2101      	movs	r1, #1
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8e2 	bl	8003e24 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <netif_do_set_ipaddr+0x88>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	4798      	blx	r3
    return 1; /* address changed */
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	0800dba4 	.word	0x0800dba4
 8003c84:	0800dcbc 	.word	0x0800dcbc
 8003c88:	0800dbf4 	.word	0x0800dbf4

08003c8c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d00a      	beq.n	8003cbc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <netif_do_set_netmask+0x26>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	e000      	b.n	8003cb4 <netif_do_set_netmask+0x28>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b085      	sub	sp, #20
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d00a      	beq.n	8003cfa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <netif_do_set_gw+0x26>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	e000      	b.n	8003cf2 <netif_do_set_gw+0x28>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8003d24:	4b1c      	ldr	r3, [pc, #112]	@ (8003d98 <netif_set_addr+0x90>)
 8003d26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <netif_set_addr+0x90>)
 8003d30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8003d38:	4b17      	ldr	r3, [pc, #92]	@ (8003d98 <netif_set_addr+0x90>)
 8003d3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <netif_set_addr+0x42>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <netif_set_addr+0x46>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <netif_set_addr+0x48>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
  if (remove) {
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003d58:	f107 0310 	add.w	r3, r7, #16
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff ff41 	bl	8003be8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff ff8e 	bl	8003c8c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f7ff ffa8 	bl	8003cca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003d80:	f107 0310 	add.w	r3, r7, #16
 8003d84:	461a      	mov	r2, r3
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff ff2d 	bl	8003be8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8003d8e:	bf00      	nop
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	080102d4 	.word	0x080102d4

08003d9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8003da4:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <netif_set_default+0x1c>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20008250 	.word	0x20008250

08003dbc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <netif_set_up+0x1e>
 8003dca:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <netif_set_up+0x5c>)
 8003dcc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8003dd0:	4912      	ldr	r1, [pc, #72]	@ (8003e1c <netif_set_up+0x60>)
 8003dd2:	4813      	ldr	r0, [pc, #76]	@ (8003e20 <netif_set_up+0x64>)
 8003dd4:	f008 fe04 	bl	800c9e0 <iprintf>
 8003dd8:	e01b      	b.n	8003e12 <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d114      	bne.n	8003e12 <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <netif_set_up+0x4e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f809 	bl	8003e24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	0800dba4 	.word	0x0800dba4
 8003e1c:	0800dd2c 	.word	0x0800dd2c
 8003e20:	0800dbf4 	.word	0x0800dbf4

08003e24 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <netif_issue_reports+0x20>
 8003e36:	4b18      	ldr	r3, [pc, #96]	@ (8003e98 <netif_issue_reports+0x74>)
 8003e38:	f240 326d 	movw	r2, #877	@ 0x36d
 8003e3c:	4917      	ldr	r1, [pc, #92]	@ (8003e9c <netif_issue_reports+0x78>)
 8003e3e:	4818      	ldr	r0, [pc, #96]	@ (8003ea0 <netif_issue_reports+0x7c>)
 8003e40:	f008 fdce 	bl	800c9e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01e      	beq.n	8003e90 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e58:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d017      	beq.n	8003e90 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d013      	beq.n	8003e92 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3304      	adds	r3, #4
 8003e6e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f007 f91d 	bl	800b0c8 <etharp_request>
 8003e8e:	e000      	b.n	8003e92 <netif_issue_reports+0x6e>
    return;
 8003e90:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	0800dba4 	.word	0x0800dba4
 8003e9c:	0800dd48 	.word	0x0800dd48
 8003ea0:	0800dbf4 	.word	0x0800dbf4

08003ea4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d002      	beq.n	8003eba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	621a      	str	r2, [r3, #32]
  }
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b085      	sub	sp, #20
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8003ed2:	f06f 030b 	mvn.w	r3, #11
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d013      	beq.n	8003f1c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <netif_get_by_index+0x48>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e00c      	b.n	8003f16 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f02:	3301      	adds	r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	79fa      	ldrb	r2, [r7, #7]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d101      	bne.n	8003f10 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	e006      	b.n	8003f1e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ef      	bne.n	8003efc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2000824c 	.word	0x2000824c

08003f30 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8003f34:	4b03      	ldr	r3, [pc, #12]	@ (8003f44 <pbuf_pool_is_empty+0x14>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	20008255 	.word	0x20008255

08003f48 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	4611      	mov	r1, r2
 8003f54:	461a      	mov	r2, r3
 8003f56:	460b      	mov	r3, r1
 8003f58:	80fb      	strh	r3, [r7, #6]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	88fa      	ldrh	r2, [r7, #6]
 8003f6e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	88ba      	ldrh	r2, [r7, #4]
 8003f74:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8003f76:	8b3b      	ldrh	r3, [r7, #24]
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	7f3a      	ldrb	r2, [r7, #28]
 8003f82:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	73da      	strb	r2, [r3, #15]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	@ 0x30
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	80bb      	strh	r3, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8003fb8:	d07f      	beq.n	80040ba <pbuf_alloc+0x11e>
 8003fba:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8003fbe:	f300 80c8 	bgt.w	8004152 <pbuf_alloc+0x1b6>
 8003fc2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8003fc6:	d010      	beq.n	8003fea <pbuf_alloc+0x4e>
 8003fc8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8003fcc:	f300 80c1 	bgt.w	8004152 <pbuf_alloc+0x1b6>
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d002      	beq.n	8003fda <pbuf_alloc+0x3e>
 8003fd4:	2b41      	cmp	r3, #65	@ 0x41
 8003fd6:	f040 80bc 	bne.w	8004152 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	88bb      	ldrh	r3, [r7, #4]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f000 f8d1 	bl	8004188 <pbuf_alloc_reference>
 8003fe6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8003fe8:	e0bd      	b.n	8004166 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8003ff2:	88bb      	ldrh	r3, [r7, #4]
 8003ff4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8003ff6:	2008      	movs	r0, #8
 8003ff8:	f7ff fc94 	bl	8003924 <memp_malloc>
 8003ffc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d109      	bne.n	8004018 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004004:	f7ff ff94 	bl	8003f30 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <pbuf_alloc+0x78>
            pbuf_free(p);
 800400e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004010:	f000 faa8 	bl	8004564 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004014:	2300      	movs	r3, #0
 8004016:	e0a7      	b.n	8004168 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004018:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800401a:	3303      	adds	r3, #3
 800401c:	b29b      	uxth	r3, r3
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	b29b      	uxth	r3, r3
 8004024:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8004028:	b29b      	uxth	r3, r3
 800402a:	8b7a      	ldrh	r2, [r7, #26]
 800402c:	4293      	cmp	r3, r2
 800402e:	bf28      	it	cs
 8004030:	4613      	movcs	r3, r2
 8004032:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004034:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004036:	3310      	adds	r3, #16
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	3303      	adds	r3, #3
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	4618      	mov	r0, r3
 8004044:	89f9      	ldrh	r1, [r7, #14]
 8004046:	8b7a      	ldrh	r2, [r7, #26]
 8004048:	2300      	movs	r3, #0
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	887b      	ldrh	r3, [r7, #2]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	460b      	mov	r3, r1
 8004052:	4601      	mov	r1, r0
 8004054:	6938      	ldr	r0, [r7, #16]
 8004056:	f7ff ff77 	bl	8003f48 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d006      	beq.n	8004074 <pbuf_alloc+0xd8>
 8004066:	4b42      	ldr	r3, [pc, #264]	@ (8004170 <pbuf_alloc+0x1d4>)
 8004068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800406c:	4941      	ldr	r1, [pc, #260]	@ (8004174 <pbuf_alloc+0x1d8>)
 800406e:	4842      	ldr	r0, [pc, #264]	@ (8004178 <pbuf_alloc+0x1dc>)
 8004070:	f008 fcb6 	bl	800c9e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004074:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004076:	3303      	adds	r3, #3
 8004078:	f023 0303 	bic.w	r3, r3, #3
 800407c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004080:	d106      	bne.n	8004090 <pbuf_alloc+0xf4>
 8004082:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <pbuf_alloc+0x1d4>)
 8004084:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8004088:	493c      	ldr	r1, [pc, #240]	@ (800417c <pbuf_alloc+0x1e0>)
 800408a:	483b      	ldr	r0, [pc, #236]	@ (8004178 <pbuf_alloc+0x1dc>)
 800408c:	f008 fca8 	bl	800c9e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	2b00      	cmp	r3, #0
 8004094:	d102      	bne.n	800409c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
 800409a:	e002      	b.n	80040a2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80040a6:	8b7a      	ldrh	r2, [r7, #26]
 80040a8:	89fb      	ldrh	r3, [r7, #14]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80040b2:	8b7b      	ldrh	r3, [r7, #26]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d19e      	bne.n	8003ff6 <pbuf_alloc+0x5a>
      break;
 80040b8:	e055      	b.n	8004166 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80040ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80040bc:	3303      	adds	r3, #3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f023 0303 	bic.w	r3, r3, #3
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	88bb      	ldrh	r3, [r7, #4]
 80040c8:	3303      	adds	r3, #3
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f023 0303 	bic.w	r3, r3, #3
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80040d6:	8b3b      	ldrh	r3, [r7, #24]
 80040d8:	3310      	adds	r3, #16
 80040da:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80040dc:	8b3a      	ldrh	r2, [r7, #24]
 80040de:	88bb      	ldrh	r3, [r7, #4]
 80040e0:	3303      	adds	r3, #3
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d306      	bcc.n	80040f8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80040ea:	8afa      	ldrh	r2, [r7, #22]
 80040ec:	88bb      	ldrh	r3, [r7, #4]
 80040ee:	3303      	adds	r3, #3
 80040f0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d201      	bcs.n	80040fc <pbuf_alloc+0x160>
        return NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e035      	b.n	8004168 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80040fc:	8afb      	ldrh	r3, [r7, #22]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff faa2 	bl	8003648 <mem_malloc>
 8004104:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <pbuf_alloc+0x174>
        return NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	e02b      	b.n	8004168 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004110:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004112:	3310      	adds	r3, #16
 8004114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004116:	4413      	add	r3, r2
 8004118:	3303      	adds	r3, #3
 800411a:	f023 0303 	bic.w	r3, r3, #3
 800411e:	4618      	mov	r0, r3
 8004120:	88b9      	ldrh	r1, [r7, #4]
 8004122:	88ba      	ldrh	r2, [r7, #4]
 8004124:	2300      	movs	r3, #0
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	887b      	ldrh	r3, [r7, #2]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	460b      	mov	r3, r1
 800412e:	4601      	mov	r1, r0
 8004130:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004132:	f7ff ff09 	bl	8003f48 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d010      	beq.n	8004164 <pbuf_alloc+0x1c8>
 8004142:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <pbuf_alloc+0x1d4>)
 8004144:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8004148:	490d      	ldr	r1, [pc, #52]	@ (8004180 <pbuf_alloc+0x1e4>)
 800414a:	480b      	ldr	r0, [pc, #44]	@ (8004178 <pbuf_alloc+0x1dc>)
 800414c:	f008 fc48 	bl	800c9e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004150:	e008      	b.n	8004164 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004152:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <pbuf_alloc+0x1d4>)
 8004154:	f240 1227 	movw	r2, #295	@ 0x127
 8004158:	490a      	ldr	r1, [pc, #40]	@ (8004184 <pbuf_alloc+0x1e8>)
 800415a:	4807      	ldr	r0, [pc, #28]	@ (8004178 <pbuf_alloc+0x1dc>)
 800415c:	f008 fc40 	bl	800c9e0 <iprintf>
      return NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	e001      	b.n	8004168 <pbuf_alloc+0x1cc>
      break;
 8004164:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004168:	4618      	mov	r0, r3
 800416a:	3728      	adds	r7, #40	@ 0x28
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	0800ddd4 	.word	0x0800ddd4
 8004174:	0800de04 	.word	0x0800de04
 8004178:	0800de34 	.word	0x0800de34
 800417c:	0800de5c 	.word	0x0800de5c
 8004180:	0800de90 	.word	0x0800de90
 8004184:	0800debc 	.word	0x0800debc

08004188 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af02      	add	r7, sp, #8
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
 8004194:	4613      	mov	r3, r2
 8004196:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004198:	883b      	ldrh	r3, [r7, #0]
 800419a:	2b41      	cmp	r3, #65	@ 0x41
 800419c:	d009      	beq.n	80041b2 <pbuf_alloc_reference+0x2a>
 800419e:	883b      	ldrh	r3, [r7, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d006      	beq.n	80041b2 <pbuf_alloc_reference+0x2a>
 80041a4:	4b0f      	ldr	r3, [pc, #60]	@ (80041e4 <pbuf_alloc_reference+0x5c>)
 80041a6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80041aa:	490f      	ldr	r1, [pc, #60]	@ (80041e8 <pbuf_alloc_reference+0x60>)
 80041ac:	480f      	ldr	r0, [pc, #60]	@ (80041ec <pbuf_alloc_reference+0x64>)
 80041ae:	f008 fc17 	bl	800c9e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80041b2:	2007      	movs	r0, #7
 80041b4:	f7ff fbb6 	bl	8003924 <memp_malloc>
 80041b8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e00b      	b.n	80041dc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80041c4:	8879      	ldrh	r1, [r7, #2]
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	2300      	movs	r3, #0
 80041ca:	9301      	str	r3, [sp, #4]
 80041cc:	883b      	ldrh	r3, [r7, #0]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	460b      	mov	r3, r1
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff feb7 	bl	8003f48 <pbuf_init_alloced_pbuf>
  return p;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	0800ddd4 	.word	0x0800ddd4
 80041e8:	0800ded8 	.word	0x0800ded8
 80041ec:	0800de34 	.word	0x0800de34

080041f0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	607b      	str	r3, [r7, #4]
 80041f8:	4603      	mov	r3, r0
 80041fa:	73fb      	strb	r3, [r7, #15]
 80041fc:	460b      	mov	r3, r1
 80041fe:	81bb      	strh	r3, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004208:	8a7b      	ldrh	r3, [r7, #18]
 800420a:	3303      	adds	r3, #3
 800420c:	f023 0203 	bic.w	r2, r3, #3
 8004210:	89bb      	ldrh	r3, [r7, #12]
 8004212:	441a      	add	r2, r3
 8004214:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004216:	429a      	cmp	r2, r3
 8004218:	d901      	bls.n	800421e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800421a:	2300      	movs	r3, #0
 800421c:	e018      	b.n	8004250 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d007      	beq.n	8004234 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004224:	8a7b      	ldrh	r3, [r7, #18]
 8004226:	3303      	adds	r3, #3
 8004228:	f023 0303 	bic.w	r3, r3, #3
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	4413      	add	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	e001      	b.n	8004238 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	89b9      	ldrh	r1, [r7, #12]
 800423c:	89ba      	ldrh	r2, [r7, #12]
 800423e:	2302      	movs	r3, #2
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	460b      	mov	r3, r1
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	f7ff fe7d 	bl	8003f48 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800424e:	687b      	ldr	r3, [r7, #4]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <pbuf_realloc+0x20>
 800426a:	4b3a      	ldr	r3, [pc, #232]	@ (8004354 <pbuf_realloc+0xfc>)
 800426c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8004270:	4939      	ldr	r1, [pc, #228]	@ (8004358 <pbuf_realloc+0x100>)
 8004272:	483a      	ldr	r0, [pc, #232]	@ (800435c <pbuf_realloc+0x104>)
 8004274:	f008 fbb4 	bl	800c9e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	891b      	ldrh	r3, [r3, #8]
 800427c:	887a      	ldrh	r2, [r7, #2]
 800427e:	429a      	cmp	r2, r3
 8004280:	d263      	bcs.n	800434a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	891a      	ldrh	r2, [r3, #8]
 8004286:	887b      	ldrh	r3, [r7, #2]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	817b      	strh	r3, [r7, #10]
  q = p;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004294:	e018      	b.n	80042c8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	895b      	ldrh	r3, [r3, #10]
 800429a:	897a      	ldrh	r2, [r7, #10]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	891a      	ldrh	r2, [r3, #8]
 80042a4:	893b      	ldrh	r3, [r7, #8]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <pbuf_realloc+0x70>
 80042ba:	4b26      	ldr	r3, [pc, #152]	@ (8004354 <pbuf_realloc+0xfc>)
 80042bc:	f240 12af 	movw	r2, #431	@ 0x1af
 80042c0:	4927      	ldr	r1, [pc, #156]	@ (8004360 <pbuf_realloc+0x108>)
 80042c2:	4826      	ldr	r0, [pc, #152]	@ (800435c <pbuf_realloc+0x104>)
 80042c4:	f008 fb8c 	bl	800c9e0 <iprintf>
  while (rem_len > q->len) {
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	895b      	ldrh	r3, [r3, #10]
 80042cc:	897a      	ldrh	r2, [r7, #10]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d8e1      	bhi.n	8004296 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	7b1b      	ldrb	r3, [r3, #12]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d121      	bne.n	8004322 <pbuf_realloc+0xca>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	895b      	ldrh	r3, [r3, #10]
 80042e2:	897a      	ldrh	r2, [r7, #10]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d01c      	beq.n	8004322 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	7b5b      	ldrb	r3, [r3, #13]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d116      	bne.n	8004322 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	897b      	ldrh	r3, [r7, #10]
 8004300:	4413      	add	r3, r2
 8004302:	b29b      	uxth	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff f8a2 	bl	8003450 <mem_trim>
 800430c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <pbuf_realloc+0xca>
 8004314:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <pbuf_realloc+0xfc>)
 8004316:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800431a:	4912      	ldr	r1, [pc, #72]	@ (8004364 <pbuf_realloc+0x10c>)
 800431c:	480f      	ldr	r0, [pc, #60]	@ (800435c <pbuf_realloc+0x104>)
 800431e:	f008 fb5f 	bl	800c9e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	897a      	ldrh	r2, [r7, #10]
 8004326:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	895a      	ldrh	r2, [r3, #10]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f911 	bl	8004564 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e000      	b.n	800434c <pbuf_realloc+0xf4>
    return;
 800434a:	bf00      	nop

}
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	0800ddd4 	.word	0x0800ddd4
 8004358:	0800deec 	.word	0x0800deec
 800435c:	0800de34 	.word	0x0800de34
 8004360:	0800df04 	.word	0x0800df04
 8004364:	0800df1c 	.word	0x0800df1c

08004368 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <pbuf_add_header_impl+0x22>
 800437c:	4b2b      	ldr	r3, [pc, #172]	@ (800442c <pbuf_add_header_impl+0xc4>)
 800437e:	f240 12df 	movw	r2, #479	@ 0x1df
 8004382:	492b      	ldr	r1, [pc, #172]	@ (8004430 <pbuf_add_header_impl+0xc8>)
 8004384:	482b      	ldr	r0, [pc, #172]	@ (8004434 <pbuf_add_header_impl+0xcc>)
 8004386:	f008 fb2b 	bl	800c9e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <pbuf_add_header_impl+0x30>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004396:	d301      	bcc.n	800439c <pbuf_add_header_impl+0x34>
    return 1;
 8004398:	2301      	movs	r3, #1
 800439a:	e043      	b.n	8004424 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <pbuf_add_header_impl+0x3e>
    return 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e03e      	b.n	8004424 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	891a      	ldrh	r2, [r3, #8]
 80043ae:	8a7b      	ldrh	r3, [r7, #18]
 80043b0:	4413      	add	r3, r2
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	8a7a      	ldrh	r2, [r7, #18]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d901      	bls.n	80043be <pbuf_add_header_impl+0x56>
    return 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e032      	b.n	8004424 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	7b1b      	ldrb	r3, [r3, #12]
 80043c2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80043c4:	8a3b      	ldrh	r3, [r7, #16]
 80043c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	425b      	negs	r3, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3310      	adds	r3, #16
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d20d      	bcs.n	8004400 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e01d      	b.n	8004424 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d006      	beq.n	80043fc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	425b      	negs	r3, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	e001      	b.n	8004400 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e011      	b.n	8004424 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	895a      	ldrh	r2, [r3, #10]
 800440a:	8a7b      	ldrh	r3, [r7, #18]
 800440c:	4413      	add	r3, r2
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	891a      	ldrh	r2, [r3, #8]
 8004418:	8a7b      	ldrh	r3, [r7, #18]
 800441a:	4413      	add	r3, r2
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	811a      	strh	r2, [r3, #8]


  return 0;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	0800ddd4 	.word	0x0800ddd4
 8004430:	0800df38 	.word	0x0800df38
 8004434:	0800de34 	.word	0x0800de34

08004438 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004442:	2200      	movs	r2, #0
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ff8e 	bl	8004368 <pbuf_add_header_impl>
 800444c:	4603      	mov	r3, r0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d106      	bne.n	8004476 <pbuf_remove_header+0x1e>
 8004468:	4b20      	ldr	r3, [pc, #128]	@ (80044ec <pbuf_remove_header+0x94>)
 800446a:	f240 224b 	movw	r2, #587	@ 0x24b
 800446e:	4920      	ldr	r1, [pc, #128]	@ (80044f0 <pbuf_remove_header+0x98>)
 8004470:	4820      	ldr	r0, [pc, #128]	@ (80044f4 <pbuf_remove_header+0x9c>)
 8004472:	f008 fab5 	bl	800c9e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <pbuf_remove_header+0x2c>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004482:	d301      	bcc.n	8004488 <pbuf_remove_header+0x30>
    return 1;
 8004484:	2301      	movs	r3, #1
 8004486:	e02c      	b.n	80044e2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <pbuf_remove_header+0x3a>
    return 0;
 800448e:	2300      	movs	r3, #0
 8004490:	e027      	b.n	80044e2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	895b      	ldrh	r3, [r3, #10]
 800449a:	89fa      	ldrh	r2, [r7, #14]
 800449c:	429a      	cmp	r2, r3
 800449e:	d908      	bls.n	80044b2 <pbuf_remove_header+0x5a>
 80044a0:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <pbuf_remove_header+0x94>)
 80044a2:	f240 2255 	movw	r2, #597	@ 0x255
 80044a6:	4914      	ldr	r1, [pc, #80]	@ (80044f8 <pbuf_remove_header+0xa0>)
 80044a8:	4812      	ldr	r0, [pc, #72]	@ (80044f4 <pbuf_remove_header+0x9c>)
 80044aa:	f008 fa99 	bl	800c9e0 <iprintf>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e017      	b.n	80044e2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	441a      	add	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	895a      	ldrh	r2, [r3, #10]
 80044c8:	89fb      	ldrh	r3, [r7, #14]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	891a      	ldrh	r2, [r3, #8]
 80044d6:	89fb      	ldrh	r3, [r7, #14]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	0800ddd4 	.word	0x0800ddd4
 80044f0:	0800df38 	.word	0x0800df38
 80044f4:	0800de34 	.word	0x0800de34
 80044f8:	0800df44 	.word	0x0800df44

080044fc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	807b      	strh	r3, [r7, #2]
 8004508:	4613      	mov	r3, r2
 800450a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800450c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004510:	2b00      	cmp	r3, #0
 8004512:	da08      	bge.n	8004526 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004514:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004518:	425b      	negs	r3, r3
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff9b 	bl	8004458 <pbuf_remove_header>
 8004522:	4603      	mov	r3, r0
 8004524:	e007      	b.n	8004536 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004526:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800452a:	787a      	ldrb	r2, [r7, #1]
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ff1a 	bl	8004368 <pbuf_add_header_impl>
 8004534:	4603      	mov	r3, r0
  }
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800454a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800454e:	2201      	movs	r2, #1
 8004550:	4619      	mov	r1, r3
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7ff ffd2 	bl	80044fc <pbuf_header_impl>
 8004558:	4603      	mov	r3, r0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
	...

08004564 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <pbuf_free+0x22>
 8004578:	4b38      	ldr	r3, [pc, #224]	@ (800465c <pbuf_free+0xf8>)
 800457a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800457e:	4938      	ldr	r1, [pc, #224]	@ (8004660 <pbuf_free+0xfc>)
 8004580:	4838      	ldr	r0, [pc, #224]	@ (8004664 <pbuf_free+0x100>)
 8004582:	f008 fa2d 	bl	800c9e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004586:	2300      	movs	r3, #0
 8004588:	e063      	b.n	8004652 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800458e:	e05c      	b.n	800464a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7b9b      	ldrb	r3, [r3, #14]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <pbuf_free+0x42>
 8004598:	4b30      	ldr	r3, [pc, #192]	@ (800465c <pbuf_free+0xf8>)
 800459a:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800459e:	4932      	ldr	r1, [pc, #200]	@ (8004668 <pbuf_free+0x104>)
 80045a0:	4830      	ldr	r0, [pc, #192]	@ (8004664 <pbuf_free+0x100>)
 80045a2:	f008 fa1d 	bl	800c9e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7b9b      	ldrb	r3, [r3, #14]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	739a      	strb	r2, [r3, #14]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7b9b      	ldrb	r3, [r3, #14]
 80045b6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80045b8:	7dbb      	ldrb	r3, [r7, #22]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d143      	bne.n	8004646 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	7b1b      	ldrb	r3, [r3, #12]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7b5b      	ldrb	r3, [r3, #13]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d011      	beq.n	80045fe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <pbuf_free+0x90>
 80045e6:	4b1d      	ldr	r3, [pc, #116]	@ (800465c <pbuf_free+0xf8>)
 80045e8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80045ec:	491f      	ldr	r1, [pc, #124]	@ (800466c <pbuf_free+0x108>)
 80045ee:	481d      	ldr	r0, [pc, #116]	@ (8004664 <pbuf_free+0x100>)
 80045f0:	f008 f9f6 	bl	800c9e0 <iprintf>
        pc->custom_free_function(p);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
 80045fc:	e01d      	b.n	800463a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d104      	bne.n	800460e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	2008      	movs	r0, #8
 8004608:	f7ff f9d8 	bl	80039bc <memp_free>
 800460c:	e015      	b.n	800463a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d104      	bne.n	800461e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	2007      	movs	r0, #7
 8004618:	f7ff f9d0 	bl	80039bc <memp_free>
 800461c:	e00d      	b.n	800463a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d103      	bne.n	800462c <pbuf_free+0xc8>
          mem_free(p);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fe fea9 	bl	800337c <mem_free>
 800462a:	e006      	b.n	800463a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <pbuf_free+0xf8>)
 800462e:	f240 320f 	movw	r2, #783	@ 0x30f
 8004632:	490f      	ldr	r1, [pc, #60]	@ (8004670 <pbuf_free+0x10c>)
 8004634:	480b      	ldr	r0, [pc, #44]	@ (8004664 <pbuf_free+0x100>)
 8004636:	f008 f9d3 	bl	800c9e0 <iprintf>
        }
      }
      count++;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	3301      	adds	r3, #1
 800463e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	607b      	str	r3, [r7, #4]
 8004644:	e001      	b.n	800464a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d19f      	bne.n	8004590 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004650:	7dfb      	ldrb	r3, [r7, #23]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	0800ddd4 	.word	0x0800ddd4
 8004660:	0800df38 	.word	0x0800df38
 8004664:	0800de34 	.word	0x0800de34
 8004668:	0800df64 	.word	0x0800df64
 800466c:	0800df7c 	.word	0x0800df7c
 8004670:	0800dfa0 	.word	0x0800dfa0

08004674 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004680:	e005      	b.n	800468e <pbuf_clen+0x1a>
    ++len;
 8004682:	89fb      	ldrh	r3, [r7, #14]
 8004684:	3301      	adds	r3, #1
 8004686:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f6      	bne.n	8004682 <pbuf_clen+0xe>
  }
  return len;
 8004694:	89fb      	ldrh	r3, [r7, #14]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d010      	beq.n	80046d4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	7b9b      	ldrb	r3, [r3, #14]
 80046b6:	3301      	adds	r3, #1
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7b9b      	ldrb	r3, [r3, #14]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <pbuf_ref+0x30>
 80046c6:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <pbuf_ref+0x38>)
 80046c8:	f240 3242 	movw	r2, #834	@ 0x342
 80046cc:	4904      	ldr	r1, [pc, #16]	@ (80046e0 <pbuf_ref+0x3c>)
 80046ce:	4805      	ldr	r0, [pc, #20]	@ (80046e4 <pbuf_ref+0x40>)
 80046d0:	f008 f986 	bl	800c9e0 <iprintf>
  }
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	0800ddd4 	.word	0x0800ddd4
 80046e0:	0800dfb4 	.word	0x0800dfb4
 80046e4:	0800de34 	.word	0x0800de34

080046e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <pbuf_cat+0x16>
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d107      	bne.n	800470e <pbuf_cat+0x26>
 80046fe:	4b20      	ldr	r3, [pc, #128]	@ (8004780 <pbuf_cat+0x98>)
 8004700:	f240 3259 	movw	r2, #857	@ 0x359
 8004704:	491f      	ldr	r1, [pc, #124]	@ (8004784 <pbuf_cat+0x9c>)
 8004706:	4820      	ldr	r0, [pc, #128]	@ (8004788 <pbuf_cat+0xa0>)
 8004708:	f008 f96a 	bl	800c9e0 <iprintf>
 800470c:	e034      	b.n	8004778 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e00a      	b.n	800472a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	891a      	ldrh	r2, [r3, #8]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	891b      	ldrh	r3, [r3, #8]
 800471c:	4413      	add	r3, r2
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	891a      	ldrh	r2, [r3, #8]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	895b      	ldrh	r3, [r3, #10]
 800473a:	429a      	cmp	r2, r3
 800473c:	d006      	beq.n	800474c <pbuf_cat+0x64>
 800473e:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <pbuf_cat+0x98>)
 8004740:	f240 3262 	movw	r2, #866	@ 0x362
 8004744:	4911      	ldr	r1, [pc, #68]	@ (800478c <pbuf_cat+0xa4>)
 8004746:	4810      	ldr	r0, [pc, #64]	@ (8004788 <pbuf_cat+0xa0>)
 8004748:	f008 f94a 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <pbuf_cat+0x7a>
 8004754:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <pbuf_cat+0x98>)
 8004756:	f240 3263 	movw	r2, #867	@ 0x363
 800475a:	490d      	ldr	r1, [pc, #52]	@ (8004790 <pbuf_cat+0xa8>)
 800475c:	480a      	ldr	r0, [pc, #40]	@ (8004788 <pbuf_cat+0xa0>)
 800475e:	f008 f93f 	bl	800c9e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	891a      	ldrh	r2, [r3, #8]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	891b      	ldrh	r3, [r3, #8]
 800476a:	4413      	add	r3, r2
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	0800ddd4 	.word	0x0800ddd4
 8004784:	0800dfc8 	.word	0x0800dfc8
 8004788:	0800de34 	.word	0x0800de34
 800478c:	0800e000 	.word	0x0800e000
 8004790:	0800e030 	.word	0x0800e030

08004794 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <pbuf_copy+0x2a>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <pbuf_copy+0x2a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	891a      	ldrh	r2, [r3, #8]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	891b      	ldrh	r3, [r3, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d209      	bcs.n	80047d2 <pbuf_copy+0x3e>
 80047be:	4b57      	ldr	r3, [pc, #348]	@ (800491c <pbuf_copy+0x188>)
 80047c0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80047c4:	4956      	ldr	r1, [pc, #344]	@ (8004920 <pbuf_copy+0x18c>)
 80047c6:	4857      	ldr	r0, [pc, #348]	@ (8004924 <pbuf_copy+0x190>)
 80047c8:	f008 f90a 	bl	800c9e0 <iprintf>
 80047cc:	f06f 030f 	mvn.w	r3, #15
 80047d0:	e09f      	b.n	8004912 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	895b      	ldrh	r3, [r3, #10]
 80047d6:	461a      	mov	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	895b      	ldrh	r3, [r3, #10]
 80047e0:	4619      	mov	r1, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1acb      	subs	r3, r1, r3
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d306      	bcc.n	80047f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	895b      	ldrh	r3, [r3, #10]
 80047ee:	461a      	mov	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e005      	b.n	8004804 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	895b      	ldrh	r3, [r3, #10]
 80047fc:	461a      	mov	r2, r3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	18d0      	adds	r0, r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4413      	add	r3, r2
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4619      	mov	r1, r3
 8004818:	f008 f9bd 	bl	800cb96 <memcpy>
    offset_to += len;
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	895b      	ldrh	r3, [r3, #10]
 8004830:	461a      	mov	r2, r3
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	4293      	cmp	r3, r2
 8004836:	d906      	bls.n	8004846 <pbuf_copy+0xb2>
 8004838:	4b38      	ldr	r3, [pc, #224]	@ (800491c <pbuf_copy+0x188>)
 800483a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800483e:	493a      	ldr	r1, [pc, #232]	@ (8004928 <pbuf_copy+0x194>)
 8004840:	4838      	ldr	r0, [pc, #224]	@ (8004924 <pbuf_copy+0x190>)
 8004842:	f008 f8cd 	bl	800c9e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	895b      	ldrh	r3, [r3, #10]
 800484a:	461a      	mov	r2, r3
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4293      	cmp	r3, r2
 8004850:	d906      	bls.n	8004860 <pbuf_copy+0xcc>
 8004852:	4b32      	ldr	r3, [pc, #200]	@ (800491c <pbuf_copy+0x188>)
 8004854:	f240 32da 	movw	r2, #986	@ 0x3da
 8004858:	4934      	ldr	r1, [pc, #208]	@ (800492c <pbuf_copy+0x198>)
 800485a:	4832      	ldr	r0, [pc, #200]	@ (8004924 <pbuf_copy+0x190>)
 800485c:	f008 f8c0 	bl	800c9e0 <iprintf>
    if (offset_from >= p_from->len) {
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	895b      	ldrh	r3, [r3, #10]
 8004864:	461a      	mov	r2, r3
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4293      	cmp	r3, r2
 800486a:	d304      	bcc.n	8004876 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	895b      	ldrh	r3, [r3, #10]
 800487a:	461a      	mov	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4293      	cmp	r3, r2
 8004880:	d114      	bne.n	80048ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <pbuf_copy+0x118>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d009      	beq.n	80048ac <pbuf_copy+0x118>
 8004898:	4b20      	ldr	r3, [pc, #128]	@ (800491c <pbuf_copy+0x188>)
 800489a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800489e:	4924      	ldr	r1, [pc, #144]	@ (8004930 <pbuf_copy+0x19c>)
 80048a0:	4820      	ldr	r0, [pc, #128]	@ (8004924 <pbuf_copy+0x190>)
 80048a2:	f008 f89d 	bl	800c9e0 <iprintf>
 80048a6:	f06f 030f 	mvn.w	r3, #15
 80048aa:	e032      	b.n	8004912 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d013      	beq.n	80048da <pbuf_copy+0x146>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	895a      	ldrh	r2, [r3, #10]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	891b      	ldrh	r3, [r3, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d10d      	bne.n	80048da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <pbuf_copy+0x146>
 80048c6:	4b15      	ldr	r3, [pc, #84]	@ (800491c <pbuf_copy+0x188>)
 80048c8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80048cc:	4919      	ldr	r1, [pc, #100]	@ (8004934 <pbuf_copy+0x1a0>)
 80048ce:	4815      	ldr	r0, [pc, #84]	@ (8004924 <pbuf_copy+0x190>)
 80048d0:	f008 f886 	bl	800c9e0 <iprintf>
 80048d4:	f06f 0305 	mvn.w	r3, #5
 80048d8:	e01b      	b.n	8004912 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d013      	beq.n	8004908 <pbuf_copy+0x174>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	895a      	ldrh	r2, [r3, #10]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	891b      	ldrh	r3, [r3, #8]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d10d      	bne.n	8004908 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <pbuf_copy+0x174>
 80048f4:	4b09      	ldr	r3, [pc, #36]	@ (800491c <pbuf_copy+0x188>)
 80048f6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80048fa:	490e      	ldr	r1, [pc, #56]	@ (8004934 <pbuf_copy+0x1a0>)
 80048fc:	4809      	ldr	r0, [pc, #36]	@ (8004924 <pbuf_copy+0x190>)
 80048fe:	f008 f86f 	bl	800c9e0 <iprintf>
 8004902:	f06f 0305 	mvn.w	r3, #5
 8004906:	e004      	b.n	8004912 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f47f af61 	bne.w	80047d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	0800ddd4 	.word	0x0800ddd4
 8004920:	0800e07c 	.word	0x0800e07c
 8004924:	0800de34 	.word	0x0800de34
 8004928:	0800e0ac 	.word	0x0800e0ac
 800492c:	0800e0c4 	.word	0x0800e0c4
 8004930:	0800e0e0 	.word	0x0800e0e0
 8004934:	0800e0f0 	.word	0x0800e0f0

08004938 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	460b      	mov	r3, r1
 8004948:	80fb      	strh	r3, [r7, #6]
 800494a:	4613      	mov	r3, r2
 800494c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800494e:	2300      	movs	r3, #0
 8004950:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <pbuf_copy_partial+0x36>
 800495c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a0c <pbuf_copy_partial+0xd4>)
 800495e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8004962:	492b      	ldr	r1, [pc, #172]	@ (8004a10 <pbuf_copy_partial+0xd8>)
 8004964:	482b      	ldr	r0, [pc, #172]	@ (8004a14 <pbuf_copy_partial+0xdc>)
 8004966:	f008 f83b 	bl	800c9e0 <iprintf>
 800496a:	2300      	movs	r3, #0
 800496c:	e04a      	b.n	8004a04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d108      	bne.n	8004986 <pbuf_copy_partial+0x4e>
 8004974:	4b25      	ldr	r3, [pc, #148]	@ (8004a0c <pbuf_copy_partial+0xd4>)
 8004976:	f240 420b 	movw	r2, #1035	@ 0x40b
 800497a:	4927      	ldr	r1, [pc, #156]	@ (8004a18 <pbuf_copy_partial+0xe0>)
 800497c:	4825      	ldr	r0, [pc, #148]	@ (8004a14 <pbuf_copy_partial+0xdc>)
 800497e:	f008 f82f 	bl	800c9e0 <iprintf>
 8004982:	2300      	movs	r3, #0
 8004984:	e03e      	b.n	8004a04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e034      	b.n	80049f6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800498c:	88bb      	ldrh	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <pbuf_copy_partial+0x70>
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	895b      	ldrh	r3, [r3, #10]
 8004996:	88ba      	ldrh	r2, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d305      	bcc.n	80049a8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	895b      	ldrh	r3, [r3, #10]
 80049a0:	88ba      	ldrh	r2, [r7, #4]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	80bb      	strh	r3, [r7, #4]
 80049a6:	e023      	b.n	80049f0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	895a      	ldrh	r2, [r3, #10]
 80049ac:	88bb      	ldrh	r3, [r7, #4]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80049b2:	8b3a      	ldrh	r2, [r7, #24]
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d901      	bls.n	80049be <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80049be:	8b7b      	ldrh	r3, [r7, #26]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	18d0      	adds	r0, r2, r3
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	88bb      	ldrh	r3, [r7, #4]
 80049ca:	4413      	add	r3, r2
 80049cc:	8b3a      	ldrh	r2, [r7, #24]
 80049ce:	4619      	mov	r1, r3
 80049d0:	f008 f8e1 	bl	800cb96 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80049d4:	8afa      	ldrh	r2, [r7, #22]
 80049d6:	8b3b      	ldrh	r3, [r7, #24]
 80049d8:	4413      	add	r3, r2
 80049da:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80049dc:	8b7a      	ldrh	r2, [r7, #26]
 80049de:	8b3b      	ldrh	r3, [r7, #24]
 80049e0:	4413      	add	r3, r2
 80049e2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	8b3b      	ldrh	r3, [r7, #24]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <pbuf_copy_partial+0xca>
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1c4      	bne.n	800498c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8004a02:	8afb      	ldrh	r3, [r7, #22]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	0800ddd4 	.word	0x0800ddd4
 8004a10:	0800e11c 	.word	0x0800e11c
 8004a14:	0800de34 	.word	0x0800de34
 8004a18:	0800e13c 	.word	0x0800e13c

08004a1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	603a      	str	r2, [r7, #0]
 8004a26:	71fb      	strb	r3, [r7, #7]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	8919      	ldrh	r1, [r3, #8]
 8004a30:	88ba      	ldrh	r2, [r7, #4]
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fab1 	bl	8003f9c <pbuf_alloc>
 8004a3a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <pbuf_clone+0x2a>
    return NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e011      	b.n	8004a6a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff fea3 	bl	8004794 <pbuf_copy>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8004a52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d006      	beq.n	8004a68 <pbuf_clone+0x4c>
 8004a5a:	4b06      	ldr	r3, [pc, #24]	@ (8004a74 <pbuf_clone+0x58>)
 8004a5c:	f240 5224 	movw	r2, #1316	@ 0x524
 8004a60:	4905      	ldr	r1, [pc, #20]	@ (8004a78 <pbuf_clone+0x5c>)
 8004a62:	4806      	ldr	r0, [pc, #24]	@ (8004a7c <pbuf_clone+0x60>)
 8004a64:	f007 ffbc 	bl	800c9e0 <iprintf>
  return q;
 8004a68:	68fb      	ldr	r3, [r7, #12]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	0800ddd4 	.word	0x0800ddd4
 8004a78:	0800e248 	.word	0x0800e248
 8004a7c:	0800de34 	.word	0x0800de34

08004a80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8004a84:	f007 feac 	bl	800c7e0 <rand>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	4b01      	ldr	r3, [pc, #4]	@ (8004aa0 <tcp_init+0x20>)
 8004a9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	2000000a 	.word	0x2000000a

08004aa4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	7d1b      	ldrb	r3, [r3, #20]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <tcp_free+0x1c>
 8004ab4:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <tcp_free+0x2c>)
 8004ab6:	22d4      	movs	r2, #212	@ 0xd4
 8004ab8:	4906      	ldr	r1, [pc, #24]	@ (8004ad4 <tcp_free+0x30>)
 8004aba:	4807      	ldr	r0, [pc, #28]	@ (8004ad8 <tcp_free+0x34>)
 8004abc:	f007 ff90 	bl	800c9e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	f7fe ff7a 	bl	80039bc <memp_free>
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	0800e2d4 	.word	0x0800e2d4
 8004ad4:	0800e304 	.word	0x0800e304
 8004ad8:	0800e318 	.word	0x0800e318

08004adc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	7d1b      	ldrb	r3, [r3, #20]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d105      	bne.n	8004af8 <tcp_free_listen+0x1c>
 8004aec:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <tcp_free_listen+0x2c>)
 8004aee:	22df      	movs	r2, #223	@ 0xdf
 8004af0:	4906      	ldr	r1, [pc, #24]	@ (8004b0c <tcp_free_listen+0x30>)
 8004af2:	4807      	ldr	r0, [pc, #28]	@ (8004b10 <tcp_free_listen+0x34>)
 8004af4:	f007 ff74 	bl	800c9e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	2002      	movs	r0, #2
 8004afc:	f7fe ff5e 	bl	80039bc <memp_free>
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	0800e2d4 	.word	0x0800e2d4
 8004b0c:	0800e340 	.word	0x0800e340
 8004b10:	0800e318 	.word	0x0800e318

08004b14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004b18:	f000 fea4 	bl	8005864 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8004b1c:	4b07      	ldr	r3, [pc, #28]	@ (8004b3c <tcp_tmr+0x28>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	3301      	adds	r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <tcp_tmr+0x28>)
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	4b04      	ldr	r3, [pc, #16]	@ (8004b3c <tcp_tmr+0x28>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004b34:	f000 fb54 	bl	80051e0 <tcp_slowtmr>
  }
}
 8004b38:	bf00      	nop
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	2000826d 	.word	0x2000826d

08004b40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d105      	bne.n	8004b5c <tcp_remove_listener+0x1c>
 8004b50:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <tcp_remove_listener+0x48>)
 8004b52:	22ff      	movs	r2, #255	@ 0xff
 8004b54:	490d      	ldr	r1, [pc, #52]	@ (8004b8c <tcp_remove_listener+0x4c>)
 8004b56:	480e      	ldr	r0, [pc, #56]	@ (8004b90 <tcp_remove_listener+0x50>)
 8004b58:	f007 ff42 	bl	800c9e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e00a      	b.n	8004b78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d102      	bne.n	8004b72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f1      	bne.n	8004b62 <tcp_remove_listener+0x22>
    }
  }
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	0800e2d4 	.word	0x0800e2d4
 8004b8c:	0800e35c 	.word	0x0800e35c
 8004b90:	0800e318 	.word	0x0800e318

08004b94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <tcp_listen_closed+0x1c>
 8004ba2:	4b14      	ldr	r3, [pc, #80]	@ (8004bf4 <tcp_listen_closed+0x60>)
 8004ba4:	f240 1211 	movw	r2, #273	@ 0x111
 8004ba8:	4913      	ldr	r1, [pc, #76]	@ (8004bf8 <tcp_listen_closed+0x64>)
 8004baa:	4814      	ldr	r0, [pc, #80]	@ (8004bfc <tcp_listen_closed+0x68>)
 8004bac:	f007 ff18 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	7d1b      	ldrb	r3, [r3, #20]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d006      	beq.n	8004bc6 <tcp_listen_closed+0x32>
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <tcp_listen_closed+0x60>)
 8004bba:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8004bbe:	4910      	ldr	r1, [pc, #64]	@ (8004c00 <tcp_listen_closed+0x6c>)
 8004bc0:	480e      	ldr	r0, [pc, #56]	@ (8004bfc <tcp_listen_closed+0x68>)
 8004bc2:	f007 ff0d 	bl	800c9e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e00b      	b.n	8004be4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8004bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <tcp_listen_closed+0x70>)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff ffb1 	bl	8004b40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3301      	adds	r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d9f0      	bls.n	8004bcc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	0800e2d4 	.word	0x0800e2d4
 8004bf8:	0800e384 	.word	0x0800e384
 8004bfc:	0800e318 	.word	0x0800e318
 8004c00:	0800e390 	.word	0x0800e390
 8004c04:	080102ac 	.word	0x080102ac

08004c08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8004c08:	b5b0      	push	{r4, r5, r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af04      	add	r7, sp, #16
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <tcp_close_shutdown+0x20>
 8004c1a:	4b63      	ldr	r3, [pc, #396]	@ (8004da8 <tcp_close_shutdown+0x1a0>)
 8004c1c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8004c20:	4962      	ldr	r1, [pc, #392]	@ (8004dac <tcp_close_shutdown+0x1a4>)
 8004c22:	4863      	ldr	r0, [pc, #396]	@ (8004db0 <tcp_close_shutdown+0x1a8>)
 8004c24:	f007 fedc 	bl	800c9e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d066      	beq.n	8004cfc <tcp_close_shutdown+0xf4>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7d1b      	ldrb	r3, [r3, #20]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d003      	beq.n	8004c3e <tcp_close_shutdown+0x36>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7d1b      	ldrb	r3, [r3, #20]
 8004c3a:	2b07      	cmp	r3, #7
 8004c3c:	d15e      	bne.n	8004cfc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <tcp_close_shutdown+0x48>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8004c4e:	d055      	beq.n	8004cfc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8b5b      	ldrh	r3, [r3, #26]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d106      	bne.n	8004c6a <tcp_close_shutdown+0x62>
 8004c5c:	4b52      	ldr	r3, [pc, #328]	@ (8004da8 <tcp_close_shutdown+0x1a0>)
 8004c5e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8004c62:	4954      	ldr	r1, [pc, #336]	@ (8004db4 <tcp_close_shutdown+0x1ac>)
 8004c64:	4852      	ldr	r0, [pc, #328]	@ (8004db0 <tcp_close_shutdown+0x1a8>)
 8004c66:	f007 febb 	bl	800c9e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004c72:	687d      	ldr	r5, [r7, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	8ad2      	ldrh	r2, [r2, #22]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	8b09      	ldrh	r1, [r1, #24]
 8004c80:	9102      	str	r1, [sp, #8]
 8004c82:	9201      	str	r2, [sp, #4]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	462b      	mov	r3, r5
 8004c88:	4622      	mov	r2, r4
 8004c8a:	4601      	mov	r1, r0
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f004 fe8d 	bl	80099ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f001 f8c8 	bl	8005e28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8004c98:	4b47      	ldr	r3, [pc, #284]	@ (8004db8 <tcp_close_shutdown+0x1b0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d105      	bne.n	8004cae <tcp_close_shutdown+0xa6>
 8004ca2:	4b45      	ldr	r3, [pc, #276]	@ (8004db8 <tcp_close_shutdown+0x1b0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a43      	ldr	r2, [pc, #268]	@ (8004db8 <tcp_close_shutdown+0x1b0>)
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e013      	b.n	8004cd6 <tcp_close_shutdown+0xce>
 8004cae:	4b42      	ldr	r3, [pc, #264]	@ (8004db8 <tcp_close_shutdown+0x1b0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e00c      	b.n	8004cd0 <tcp_close_shutdown+0xc8>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d104      	bne.n	8004cca <tcp_close_shutdown+0xc2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	60da      	str	r2, [r3, #12]
 8004cc8:	e005      	b.n	8004cd6 <tcp_close_shutdown+0xce>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1ef      	bne.n	8004cb6 <tcp_close_shutdown+0xae>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	60da      	str	r2, [r3, #12]
 8004cdc:	4b37      	ldr	r3, [pc, #220]	@ (8004dbc <tcp_close_shutdown+0x1b4>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8004ce2:	4b37      	ldr	r3, [pc, #220]	@ (8004dc0 <tcp_close_shutdown+0x1b8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d102      	bne.n	8004cf2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8004cec:	f003 fd5c 	bl	80087a8 <tcp_trigger_input_pcb_close>
 8004cf0:	e002      	b.n	8004cf8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fed6 	bl	8004aa4 <tcp_free>
      }
      return ERR_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e050      	b.n	8004d9e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	7d1b      	ldrb	r3, [r3, #20]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d03b      	beq.n	8004d7c <tcp_close_shutdown+0x174>
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	dc44      	bgt.n	8004d92 <tcp_close_shutdown+0x18a>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <tcp_close_shutdown+0x10a>
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d02a      	beq.n	8004d66 <tcp_close_shutdown+0x15e>
 8004d10:	e03f      	b.n	8004d92 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8adb      	ldrh	r3, [r3, #22]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d021      	beq.n	8004d5e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc4 <tcp_close_shutdown+0x1bc>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d105      	bne.n	8004d30 <tcp_close_shutdown+0x128>
 8004d24:	4b27      	ldr	r3, [pc, #156]	@ (8004dc4 <tcp_close_shutdown+0x1bc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	4a26      	ldr	r2, [pc, #152]	@ (8004dc4 <tcp_close_shutdown+0x1bc>)
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	e013      	b.n	8004d58 <tcp_close_shutdown+0x150>
 8004d30:	4b24      	ldr	r3, [pc, #144]	@ (8004dc4 <tcp_close_shutdown+0x1bc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	e00c      	b.n	8004d52 <tcp_close_shutdown+0x14a>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d104      	bne.n	8004d4c <tcp_close_shutdown+0x144>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e005      	b.n	8004d58 <tcp_close_shutdown+0x150>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1ef      	bne.n	8004d38 <tcp_close_shutdown+0x130>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff fea0 	bl	8004aa4 <tcp_free>
      break;
 8004d64:	e01a      	b.n	8004d9c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ff14 	bl	8004b94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4816      	ldr	r0, [pc, #88]	@ (8004dc8 <tcp_close_shutdown+0x1c0>)
 8004d70:	f001 f8aa 	bl	8005ec8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff feb1 	bl	8004adc <tcp_free_listen>
      break;
 8004d7a:	e00f      	b.n	8004d9c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	480e      	ldr	r0, [pc, #56]	@ (8004db8 <tcp_close_shutdown+0x1b0>)
 8004d80:	f001 f8a2 	bl	8005ec8 <tcp_pcb_remove>
 8004d84:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <tcp_close_shutdown+0x1b4>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fe8a 	bl	8004aa4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8004d90:	e004      	b.n	8004d9c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f81a 	bl	8004dcc <tcp_close_shutdown_fin>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	e000      	b.n	8004d9e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bdb0      	pop	{r4, r5, r7, pc}
 8004da6:	bf00      	nop
 8004da8:	0800e2d4 	.word	0x0800e2d4
 8004dac:	0800e3a8 	.word	0x0800e3a8
 8004db0:	0800e318 	.word	0x0800e318
 8004db4:	0800e3c8 	.word	0x0800e3c8
 8004db8:	20008264 	.word	0x20008264
 8004dbc:	2000826c 	.word	0x2000826c
 8004dc0:	200082a4 	.word	0x200082a4
 8004dc4:	2000825c 	.word	0x2000825c
 8004dc8:	20008260 	.word	0x20008260

08004dcc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <tcp_close_shutdown_fin+0x1c>
 8004dda:	4b2e      	ldr	r3, [pc, #184]	@ (8004e94 <tcp_close_shutdown_fin+0xc8>)
 8004ddc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8004de0:	492d      	ldr	r1, [pc, #180]	@ (8004e98 <tcp_close_shutdown_fin+0xcc>)
 8004de2:	482e      	ldr	r0, [pc, #184]	@ (8004e9c <tcp_close_shutdown_fin+0xd0>)
 8004de4:	f007 fdfc 	bl	800c9e0 <iprintf>

  switch (pcb->state) {
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7d1b      	ldrb	r3, [r3, #20]
 8004dec:	2b07      	cmp	r3, #7
 8004dee:	d020      	beq.n	8004e32 <tcp_close_shutdown_fin+0x66>
 8004df0:	2b07      	cmp	r3, #7
 8004df2:	dc2b      	bgt.n	8004e4c <tcp_close_shutdown_fin+0x80>
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d002      	beq.n	8004dfe <tcp_close_shutdown_fin+0x32>
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d00d      	beq.n	8004e18 <tcp_close_shutdown_fin+0x4c>
 8004dfc:	e026      	b.n	8004e4c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f003 fee2 	bl	8008bc8 <tcp_send_fin>
 8004e04:	4603      	mov	r3, r0
 8004e06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8004e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11f      	bne.n	8004e50 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2205      	movs	r2, #5
 8004e14:	751a      	strb	r2, [r3, #20]
      }
      break;
 8004e16:	e01b      	b.n	8004e50 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f003 fed5 	bl	8008bc8 <tcp_send_fin>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8004e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d114      	bne.n	8004e54 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2205      	movs	r2, #5
 8004e2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8004e30:	e010      	b.n	8004e54 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f003 fec8 	bl	8008bc8 <tcp_send_fin>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8004e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2209      	movs	r2, #9
 8004e48:	751a      	strb	r2, [r3, #20]
      }
      break;
 8004e4a:	e005      	b.n	8004e58 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e01c      	b.n	8004e8a <tcp_close_shutdown_fin+0xbe>
      break;
 8004e50:	bf00      	nop
 8004e52:	e002      	b.n	8004e5a <tcp_close_shutdown_fin+0x8e>
      break;
 8004e54:	bf00      	nop
 8004e56:	e000      	b.n	8004e5a <tcp_close_shutdown_fin+0x8e>
      break;
 8004e58:	bf00      	nop
  }

  if (err == ERR_OK) {
 8004e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f003 ffee 	bl	8008e44 <tcp_output>
 8004e68:	e00d      	b.n	8004e86 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8004e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d108      	bne.n	8004e86 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8b5b      	ldrh	r3, [r3, #26]
 8004e78:	f043 0308 	orr.w	r3, r3, #8
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e001      	b.n	8004e8a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8004e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	0800e2d4 	.word	0x0800e2d4
 8004e98:	0800e384 	.word	0x0800e384
 8004e9c:	0800e318 	.word	0x0800e318

08004ea0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d109      	bne.n	8004ec2 <tcp_close+0x22>
 8004eae:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <tcp_close+0x4c>)
 8004eb0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8004eb4:	490e      	ldr	r1, [pc, #56]	@ (8004ef0 <tcp_close+0x50>)
 8004eb6:	480f      	ldr	r0, [pc, #60]	@ (8004ef4 <tcp_close+0x54>)
 8004eb8:	f007 fd92 	bl	800c9e0 <iprintf>
 8004ebc:	f06f 030f 	mvn.w	r3, #15
 8004ec0:	e00f      	b.n	8004ee2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	7d1b      	ldrb	r3, [r3, #20]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d006      	beq.n	8004ed8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8b5b      	ldrh	r3, [r3, #26]
 8004ece:	f043 0310 	orr.w	r3, r3, #16
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8004ed8:	2101      	movs	r1, #1
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fe94 	bl	8004c08 <tcp_close_shutdown>
 8004ee0:	4603      	mov	r3, r0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	0800e2d4 	.word	0x0800e2d4
 8004ef0:	0800e3e4 	.word	0x0800e3e4
 8004ef4:	0800e318 	.word	0x0800e318

08004ef8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08e      	sub	sp, #56	@ 0x38
 8004efc:	af04      	add	r7, sp, #16
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d107      	bne.n	8004f18 <tcp_abandon+0x20>
 8004f08:	4b52      	ldr	r3, [pc, #328]	@ (8005054 <tcp_abandon+0x15c>)
 8004f0a:	f240 223d 	movw	r2, #573	@ 0x23d
 8004f0e:	4952      	ldr	r1, [pc, #328]	@ (8005058 <tcp_abandon+0x160>)
 8004f10:	4852      	ldr	r0, [pc, #328]	@ (800505c <tcp_abandon+0x164>)
 8004f12:	f007 fd65 	bl	800c9e0 <iprintf>
 8004f16:	e099      	b.n	800504c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	7d1b      	ldrb	r3, [r3, #20]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d106      	bne.n	8004f2e <tcp_abandon+0x36>
 8004f20:	4b4c      	ldr	r3, [pc, #304]	@ (8005054 <tcp_abandon+0x15c>)
 8004f22:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8004f26:	494e      	ldr	r1, [pc, #312]	@ (8005060 <tcp_abandon+0x168>)
 8004f28:	484c      	ldr	r0, [pc, #304]	@ (800505c <tcp_abandon+0x164>)
 8004f2a:	f007 fd59 	bl	800c9e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	7d1b      	ldrb	r3, [r3, #20]
 8004f32:	2b0a      	cmp	r3, #10
 8004f34:	d107      	bne.n	8004f46 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	484a      	ldr	r0, [pc, #296]	@ (8005064 <tcp_abandon+0x16c>)
 8004f3a:	f000 ffc5 	bl	8005ec8 <tcp_pcb_remove>
    tcp_free(pcb);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fdb0 	bl	8004aa4 <tcp_free>
 8004f44:	e082      	b.n	800504c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f52:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f60:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7d1b      	ldrb	r3, [r3, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d126      	bne.n	8004fbe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	8adb      	ldrh	r3, [r3, #22]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d02e      	beq.n	8004fd6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004f78:	4b3b      	ldr	r3, [pc, #236]	@ (8005068 <tcp_abandon+0x170>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d105      	bne.n	8004f8e <tcp_abandon+0x96>
 8004f82:	4b39      	ldr	r3, [pc, #228]	@ (8005068 <tcp_abandon+0x170>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a37      	ldr	r2, [pc, #220]	@ (8005068 <tcp_abandon+0x170>)
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	e013      	b.n	8004fb6 <tcp_abandon+0xbe>
 8004f8e:	4b36      	ldr	r3, [pc, #216]	@ (8005068 <tcp_abandon+0x170>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	61fb      	str	r3, [r7, #28]
 8004f94:	e00c      	b.n	8004fb0 <tcp_abandon+0xb8>
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d104      	bne.n	8004faa <tcp_abandon+0xb2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	e005      	b.n	8004fb6 <tcp_abandon+0xbe>
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	61fb      	str	r3, [r7, #28]
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1ef      	bne.n	8004f96 <tcp_abandon+0x9e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	60da      	str	r2, [r3, #12]
 8004fbc:	e00b      	b.n	8004fd6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8adb      	ldrh	r3, [r3, #22]
 8004fc6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4828      	ldr	r0, [pc, #160]	@ (800506c <tcp_abandon+0x174>)
 8004fcc:	f000 ff7c 	bl	8005ec8 <tcp_pcb_remove>
 8004fd0:	4b27      	ldr	r3, [pc, #156]	@ (8005070 <tcp_abandon+0x178>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fd1e 	bl	8005a24 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fd15 	bl	8005a24 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fd0c 	bl	8005a24 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00e      	beq.n	8005030 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	8b12      	ldrh	r2, [r2, #24]
 800501c:	9202      	str	r2, [sp, #8]
 800501e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005020:	9201      	str	r2, [sp, #4]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	460b      	mov	r3, r1
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	69b9      	ldr	r1, [r7, #24]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f004 fcbe 	bl	80099ac <tcp_rst>
    }
    last_state = pcb->state;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	7d1b      	ldrb	r3, [r3, #20]
 8005034:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fd34 	bl	8004aa4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <tcp_abandon+0x154>
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f06f 010c 	mvn.w	r1, #12
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	4798      	blx	r3
  }
}
 800504c:	3728      	adds	r7, #40	@ 0x28
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	0800e2d4 	.word	0x0800e2d4
 8005058:	0800e418 	.word	0x0800e418
 800505c:	0800e318 	.word	0x0800e318
 8005060:	0800e434 	.word	0x0800e434
 8005064:	20008268 	.word	0x20008268
 8005068:	2000825c 	.word	0x2000825c
 800506c:	20008264 	.word	0x20008264
 8005070:	2000826c 	.word	0x2000826c

08005074 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800507c:	2101      	movs	r1, #1
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ff3a 	bl	8004ef8 <tcp_abandon>
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <tcp_update_rcv_ann_wnd+0x1c>
 800509a:	4b25      	ldr	r3, [pc, #148]	@ (8005130 <tcp_update_rcv_ann_wnd+0xa4>)
 800509c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80050a0:	4924      	ldr	r1, [pc, #144]	@ (8005134 <tcp_update_rcv_ann_wnd+0xa8>)
 80050a2:	4825      	ldr	r0, [pc, #148]	@ (8005138 <tcp_update_rcv_ann_wnd+0xac>)
 80050a4:	f007 fc9c 	bl	800c9e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80050b0:	4413      	add	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80050bc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80050c0:	bf28      	it	cs
 80050c2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80050c6:	b292      	uxth	r2, r2
 80050c8:	4413      	add	r3, r2
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	db08      	blt.n	80050e4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	e020      	b.n	8005126 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dd03      	ble.n	80050fa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050f8:	e014      	b.n	8005124 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800510c:	d306      	bcc.n	800511c <tcp_update_rcv_ann_wnd+0x90>
 800510e:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <tcp_update_rcv_ann_wnd+0xa4>)
 8005110:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8005114:	4909      	ldr	r1, [pc, #36]	@ (800513c <tcp_update_rcv_ann_wnd+0xb0>)
 8005116:	4808      	ldr	r0, [pc, #32]	@ (8005138 <tcp_update_rcv_ann_wnd+0xac>)
 8005118:	f007 fc62 	bl	800c9e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8005124:	2300      	movs	r3, #0
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	0800e2d4 	.word	0x0800e2d4
 8005134:	0800e530 	.word	0x0800e530
 8005138:	0800e318 	.word	0x0800e318
 800513c:	0800e554 	.word	0x0800e554

08005140 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d107      	bne.n	8005162 <tcp_recved+0x22>
 8005152:	4b1f      	ldr	r3, [pc, #124]	@ (80051d0 <tcp_recved+0x90>)
 8005154:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8005158:	491e      	ldr	r1, [pc, #120]	@ (80051d4 <tcp_recved+0x94>)
 800515a:	481f      	ldr	r0, [pc, #124]	@ (80051d8 <tcp_recved+0x98>)
 800515c:	f007 fc40 	bl	800c9e0 <iprintf>
 8005160:	e032      	b.n	80051c8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7d1b      	ldrb	r3, [r3, #20]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d106      	bne.n	8005178 <tcp_recved+0x38>
 800516a:	4b19      	ldr	r3, [pc, #100]	@ (80051d0 <tcp_recved+0x90>)
 800516c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8005170:	491a      	ldr	r1, [pc, #104]	@ (80051dc <tcp_recved+0x9c>)
 8005172:	4819      	ldr	r0, [pc, #100]	@ (80051d8 <tcp_recved+0x98>)
 8005174:	f007 fc34 	bl	800c9e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800517c:	887b      	ldrh	r3, [r7, #2]
 800517e:	4413      	add	r3, r2
 8005180:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005188:	d804      	bhi.n	8005194 <tcp_recved+0x54>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518e:	89fa      	ldrh	r2, [r7, #14]
 8005190:	429a      	cmp	r2, r3
 8005192:	d204      	bcs.n	800519e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800519a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800519c:	e002      	b.n	80051a4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	89fa      	ldrh	r2, [r7, #14]
 80051a2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff ff71 	bl	800508c <tcp_update_rcv_ann_wnd>
 80051aa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80051b2:	d309      	bcc.n	80051c8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8b5b      	ldrh	r3, [r3, #26]
 80051b8:	f043 0302 	orr.w	r3, r3, #2
 80051bc:	b29a      	uxth	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f003 fe3e 	bl	8008e44 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	0800e2d4 	.word	0x0800e2d4
 80051d4:	0800e570 	.word	0x0800e570
 80051d8:	0800e318 	.word	0x0800e318
 80051dc:	0800e588 	.word	0x0800e588

080051e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80051e0:	b5b0      	push	{r4, r5, r7, lr}
 80051e2:	b090      	sub	sp, #64	@ 0x40
 80051e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80051ec:	4b95      	ldr	r3, [pc, #596]	@ (8005444 <tcp_slowtmr+0x264>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4a94      	ldr	r2, [pc, #592]	@ (8005444 <tcp_slowtmr+0x264>)
 80051f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80051f6:	4b94      	ldr	r3, [pc, #592]	@ (8005448 <tcp_slowtmr+0x268>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	3301      	adds	r3, #1
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	4b92      	ldr	r3, [pc, #584]	@ (8005448 <tcp_slowtmr+0x268>)
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e000      	b.n	8005206 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8005204:	bf00      	nop
  prev = NULL;
 8005206:	2300      	movs	r3, #0
 8005208:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800520a:	4b90      	ldr	r3, [pc, #576]	@ (800544c <tcp_slowtmr+0x26c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8005210:	e29f      	b.n	8005752 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005214:	7d1b      	ldrb	r3, [r3, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <tcp_slowtmr+0x48>
 800521a:	4b8d      	ldr	r3, [pc, #564]	@ (8005450 <tcp_slowtmr+0x270>)
 800521c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8005220:	498c      	ldr	r1, [pc, #560]	@ (8005454 <tcp_slowtmr+0x274>)
 8005222:	488d      	ldr	r0, [pc, #564]	@ (8005458 <tcp_slowtmr+0x278>)
 8005224:	f007 fbdc 	bl	800c9e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522a:	7d1b      	ldrb	r3, [r3, #20]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d106      	bne.n	800523e <tcp_slowtmr+0x5e>
 8005230:	4b87      	ldr	r3, [pc, #540]	@ (8005450 <tcp_slowtmr+0x270>)
 8005232:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8005236:	4989      	ldr	r1, [pc, #548]	@ (800545c <tcp_slowtmr+0x27c>)
 8005238:	4887      	ldr	r0, [pc, #540]	@ (8005458 <tcp_slowtmr+0x278>)
 800523a:	f007 fbd1 	bl	800c9e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	7d1b      	ldrb	r3, [r3, #20]
 8005242:	2b0a      	cmp	r3, #10
 8005244:	d106      	bne.n	8005254 <tcp_slowtmr+0x74>
 8005246:	4b82      	ldr	r3, [pc, #520]	@ (8005450 <tcp_slowtmr+0x270>)
 8005248:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800524c:	4984      	ldr	r1, [pc, #528]	@ (8005460 <tcp_slowtmr+0x280>)
 800524e:	4882      	ldr	r0, [pc, #520]	@ (8005458 <tcp_slowtmr+0x278>)
 8005250:	f007 fbc6 	bl	800c9e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005256:	7f9a      	ldrb	r2, [r3, #30]
 8005258:	4b7b      	ldr	r3, [pc, #492]	@ (8005448 <tcp_slowtmr+0x268>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	429a      	cmp	r2, r3
 800525e:	d105      	bne.n	800526c <tcp_slowtmr+0x8c>
      prev = pcb;
 8005260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005262:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8005264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800526a:	e272      	b.n	8005752 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800526c:	4b76      	ldr	r3, [pc, #472]	@ (8005448 <tcp_slowtmr+0x268>)
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005272:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005282:	7d1b      	ldrb	r3, [r3, #20]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d10a      	bne.n	800529e <tcp_slowtmr+0xbe>
 8005288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800528e:	2b05      	cmp	r3, #5
 8005290:	d905      	bls.n	800529e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005296:	3301      	adds	r3, #1
 8005298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800529c:	e11e      	b.n	80054dc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052a4:	2b0b      	cmp	r3, #11
 80052a6:	d905      	bls.n	80052b4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80052a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052ac:	3301      	adds	r3, #1
 80052ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80052b2:	e113      	b.n	80054dc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80052b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d075      	beq.n	80053aa <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80052be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <tcp_slowtmr+0xf4>
 80052c6:	4b62      	ldr	r3, [pc, #392]	@ (8005450 <tcp_slowtmr+0x270>)
 80052c8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80052cc:	4965      	ldr	r1, [pc, #404]	@ (8005464 <tcp_slowtmr+0x284>)
 80052ce:	4862      	ldr	r0, [pc, #392]	@ (8005458 <tcp_slowtmr+0x278>)
 80052d0:	f007 fb86 	bl	800c9e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <tcp_slowtmr+0x10a>
 80052dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005450 <tcp_slowtmr+0x270>)
 80052de:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80052e2:	4961      	ldr	r1, [pc, #388]	@ (8005468 <tcp_slowtmr+0x288>)
 80052e4:	485c      	ldr	r0, [pc, #368]	@ (8005458 <tcp_slowtmr+0x278>)
 80052e6:	f007 fb7b 	bl	800c9e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80052ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ec:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80052f0:	2b0b      	cmp	r3, #11
 80052f2:	d905      	bls.n	8005300 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80052f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052f8:	3301      	adds	r3, #1
 80052fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80052fe:	e0ed      	b.n	80054dc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005302:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005306:	3b01      	subs	r3, #1
 8005308:	4a58      	ldr	r2, [pc, #352]	@ (800546c <tcp_slowtmr+0x28c>)
 800530a:	5cd3      	ldrb	r3, [r2, r3]
 800530c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800530e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005310:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005314:	7c7a      	ldrb	r2, [r7, #17]
 8005316:	429a      	cmp	r2, r3
 8005318:	d907      	bls.n	800532a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005320:	3301      	adds	r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005330:	7c7a      	ldrb	r2, [r7, #17]
 8005332:	429a      	cmp	r2, r3
 8005334:	f200 80d2 	bhi.w	80054dc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8005338:	2301      	movs	r3, #1
 800533a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005342:	2b00      	cmp	r3, #0
 8005344:	d108      	bne.n	8005358 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005346:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005348:	f004 fc24 	bl	8009b94 <tcp_zero_window_probe>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d014      	beq.n	800537c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8005352:	2300      	movs	r3, #0
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	e011      	b.n	800537c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800535e:	4619      	mov	r1, r3
 8005360:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005362:	f003 fae9 	bl	8008938 <tcp_split_unsent_seg>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d107      	bne.n	800537c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800536c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800536e:	f003 fd69 	bl	8008e44 <tcp_output>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 80ac 	beq.w	80054dc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800538c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8005392:	2b06      	cmp	r3, #6
 8005394:	f200 80a2 	bhi.w	80054dc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8005398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800539e:	3301      	adds	r3, #1
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80053a8:	e098      	b.n	80054dc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80053aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db0f      	blt.n	80053d4 <tcp_slowtmr+0x1f4>
 80053b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80053ba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80053be:	4293      	cmp	r3, r2
 80053c0:	d008      	beq.n	80053d4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80053c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3301      	adds	r3, #1
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	b21a      	sxth	r2, r3
 80053d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80053d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80053da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80053e0:	429a      	cmp	r2, r3
 80053e2:	db7b      	blt.n	80054dc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80053e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053e6:	f004 f821 	bl	800942c <tcp_rexmit_rto_prepare>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d007      	beq.n	8005400 <tcp_slowtmr+0x220>
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d171      	bne.n	80054dc <tcp_slowtmr+0x2fc>
 80053f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d06d      	beq.n	80054dc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8005400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005402:	7d1b      	ldrb	r3, [r3, #20]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d03a      	beq.n	800547e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800540e:	2b0c      	cmp	r3, #12
 8005410:	bf28      	it	cs
 8005412:	230c      	movcs	r3, #12
 8005414:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005418:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800541c:	10db      	asrs	r3, r3, #3
 800541e:	b21b      	sxth	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005424:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8005428:	4413      	add	r3, r2
 800542a:	7efa      	ldrb	r2, [r7, #27]
 800542c:	4910      	ldr	r1, [pc, #64]	@ (8005470 <tcp_slowtmr+0x290>)
 800542e:	5c8a      	ldrb	r2, [r1, r2]
 8005430:	4093      	lsls	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800543a:	4293      	cmp	r3, r2
 800543c:	dc1a      	bgt.n	8005474 <tcp_slowtmr+0x294>
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	b21a      	sxth	r2, r3
 8005442:	e019      	b.n	8005478 <tcp_slowtmr+0x298>
 8005444:	20008258 	.word	0x20008258
 8005448:	2000826e 	.word	0x2000826e
 800544c:	20008264 	.word	0x20008264
 8005450:	0800e2d4 	.word	0x0800e2d4
 8005454:	0800e618 	.word	0x0800e618
 8005458:	0800e318 	.word	0x0800e318
 800545c:	0800e644 	.word	0x0800e644
 8005460:	0800e670 	.word	0x0800e670
 8005464:	0800e6a0 	.word	0x0800e6a0
 8005468:	0800e6d4 	.word	0x0800e6d4
 800546c:	080102a4 	.word	0x080102a4
 8005470:	08010294 	.word	0x08010294
 8005474:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8005478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005480:	2200      	movs	r2, #0
 8005482:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005486:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800548a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8005490:	4293      	cmp	r3, r2
 8005492:	bf28      	it	cs
 8005494:	4613      	movcs	r3, r2
 8005496:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005498:	8a7b      	ldrh	r3, [r7, #18]
 800549a:	085b      	lsrs	r3, r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80054aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d206      	bcs.n	80054c4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80054b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80054c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80054c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80054ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80054d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80054d8:	f004 f818 	bl	800950c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054de:	7d1b      	ldrb	r3, [r3, #20]
 80054e0:	2b06      	cmp	r3, #6
 80054e2:	d111      	bne.n	8005508 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80054e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e6:	8b5b      	ldrh	r3, [r3, #26]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80054f0:	4b9d      	ldr	r3, [pc, #628]	@ (8005768 <tcp_slowtmr+0x588>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b28      	cmp	r3, #40	@ 0x28
 80054fc:	d904      	bls.n	8005508 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80054fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005502:	3301      	adds	r3, #1
 8005504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550a:	7a5b      	ldrb	r3, [r3, #9]
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d04c      	beq.n	80055ae <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8005514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005516:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005518:	2b04      	cmp	r3, #4
 800551a:	d003      	beq.n	8005524 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005520:	2b07      	cmp	r3, #7
 8005522:	d144      	bne.n	80055ae <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005524:	4b90      	ldr	r3, [pc, #576]	@ (8005768 <tcp_slowtmr+0x588>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800552e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005534:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8005538:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800553c:	498b      	ldr	r1, [pc, #556]	@ (800576c <tcp_slowtmr+0x58c>)
 800553e:	fba1 1303 	umull	r1, r3, r1, r3
 8005542:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005544:	429a      	cmp	r2, r3
 8005546:	d90a      	bls.n	800555e <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8005548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800554c:	3301      	adds	r3, #1
 800554e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8005552:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005556:	3301      	adds	r3, #1
 8005558:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800555c:	e027      	b.n	80055ae <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800555e:	4b82      	ldr	r3, [pc, #520]	@ (8005768 <tcp_slowtmr+0x588>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800556e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005570:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8005574:	4618      	mov	r0, r3
 8005576:	4b7e      	ldr	r3, [pc, #504]	@ (8005770 <tcp_slowtmr+0x590>)
 8005578:	fb00 f303 	mul.w	r3, r0, r3
 800557c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800557e:	497b      	ldr	r1, [pc, #492]	@ (800576c <tcp_slowtmr+0x58c>)
 8005580:	fba1 1303 	umull	r1, r3, r1, r3
 8005584:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005586:	429a      	cmp	r2, r3
 8005588:	d911      	bls.n	80055ae <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800558a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800558c:	f004 fac2 	bl	8009b14 <tcp_keepalive>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8005596:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800559a:	2b00      	cmp	r3, #0
 800559c:	d107      	bne.n	80055ae <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800559e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80055a4:	3301      	adds	r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d011      	beq.n	80055da <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80055b6:	4b6c      	ldr	r3, [pc, #432]	@ (8005768 <tcp_slowtmr+0x588>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	1ad2      	subs	r2, r2, r3
 80055c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80055c6:	4619      	mov	r1, r3
 80055c8:	460b      	mov	r3, r1
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	440b      	add	r3, r1
 80055ce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d302      	bcc.n	80055da <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80055d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80055d6:	f000 fddb 	bl	8006190 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	7d1b      	ldrb	r3, [r3, #20]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d10b      	bne.n	80055fa <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80055e2:	4b61      	ldr	r3, [pc, #388]	@ (8005768 <tcp_slowtmr+0x588>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b28      	cmp	r3, #40	@ 0x28
 80055ee:	d904      	bls.n	80055fa <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80055f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055f4:	3301      	adds	r3, #1
 80055f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80055fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fc:	7d1b      	ldrb	r3, [r3, #20]
 80055fe:	2b09      	cmp	r3, #9
 8005600:	d10b      	bne.n	800561a <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005602:	4b59      	ldr	r3, [pc, #356]	@ (8005768 <tcp_slowtmr+0x588>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2bf0      	cmp	r3, #240	@ 0xf0
 800560e:	d904      	bls.n	800561a <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8005610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005614:	3301      	adds	r3, #1
 8005616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800561a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800561e:	2b00      	cmp	r3, #0
 8005620:	d060      	beq.n	80056e4 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005628:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800562a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800562c:	f000 fbfc 	bl	8005e28 <tcp_pcb_purge>
      if (prev != NULL) {
 8005630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d010      	beq.n	8005658 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005636:	4b4f      	ldr	r3, [pc, #316]	@ (8005774 <tcp_slowtmr+0x594>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800563c:	429a      	cmp	r2, r3
 800563e:	d106      	bne.n	800564e <tcp_slowtmr+0x46e>
 8005640:	4b4d      	ldr	r3, [pc, #308]	@ (8005778 <tcp_slowtmr+0x598>)
 8005642:	f240 526d 	movw	r2, #1389	@ 0x56d
 8005646:	494d      	ldr	r1, [pc, #308]	@ (800577c <tcp_slowtmr+0x59c>)
 8005648:	484d      	ldr	r0, [pc, #308]	@ (8005780 <tcp_slowtmr+0x5a0>)
 800564a:	f007 f9c9 	bl	800c9e0 <iprintf>
        prev->next = pcb->next;
 800564e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	60da      	str	r2, [r3, #12]
 8005656:	e00f      	b.n	8005678 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005658:	4b46      	ldr	r3, [pc, #280]	@ (8005774 <tcp_slowtmr+0x594>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800565e:	429a      	cmp	r2, r3
 8005660:	d006      	beq.n	8005670 <tcp_slowtmr+0x490>
 8005662:	4b45      	ldr	r3, [pc, #276]	@ (8005778 <tcp_slowtmr+0x598>)
 8005664:	f240 5271 	movw	r2, #1393	@ 0x571
 8005668:	4946      	ldr	r1, [pc, #280]	@ (8005784 <tcp_slowtmr+0x5a4>)
 800566a:	4845      	ldr	r0, [pc, #276]	@ (8005780 <tcp_slowtmr+0x5a0>)
 800566c:	f007 f9b8 	bl	800c9e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4a3f      	ldr	r2, [pc, #252]	@ (8005774 <tcp_slowtmr+0x594>)
 8005676:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8005678:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800567c:	2b00      	cmp	r3, #0
 800567e:	d013      	beq.n	80056a8 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005682:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8005684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005686:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005688:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800568a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568c:	3304      	adds	r3, #4
 800568e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005690:	8ad2      	ldrh	r2, [r2, #22]
 8005692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005694:	8b09      	ldrh	r1, [r1, #24]
 8005696:	9102      	str	r1, [sp, #8]
 8005698:	9201      	str	r2, [sp, #4]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	462b      	mov	r3, r5
 800569e:	4622      	mov	r2, r4
 80056a0:	4601      	mov	r1, r0
 80056a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80056a4:	f004 f982 	bl	80099ac <tcp_rst>
      err_arg = pcb->callback_arg;
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80056ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b0:	7d1b      	ldrb	r3, [r3, #20]
 80056b2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80056b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80056b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80056be:	6838      	ldr	r0, [r7, #0]
 80056c0:	f7ff f9f0 	bl	8004aa4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80056c4:	4b30      	ldr	r3, [pc, #192]	@ (8005788 <tcp_slowtmr+0x5a8>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <tcp_slowtmr+0x4fa>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f06f 010c 	mvn.w	r1, #12
 80056d6:	68b8      	ldr	r0, [r7, #8]
 80056d8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80056da:	4b2b      	ldr	r3, [pc, #172]	@ (8005788 <tcp_slowtmr+0x5a8>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d037      	beq.n	8005752 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80056e2:	e590      	b.n	8005206 <tcp_slowtmr+0x26>
      prev = pcb;
 80056e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80056e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	7f1b      	ldrb	r3, [r3, #28]
 80056f2:	3301      	adds	r3, #1
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80056fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fc:	7f1a      	ldrb	r2, [r3, #28]
 80056fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005700:	7f5b      	ldrb	r3, [r3, #29]
 8005702:	429a      	cmp	r2, r3
 8005704:	d325      	bcc.n	8005752 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8005706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800570c:	4b1e      	ldr	r3, [pc, #120]	@ (8005788 <tcp_slowtmr+0x5a8>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <tcp_slowtmr+0x554>
 800571c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005724:	6912      	ldr	r2, [r2, #16]
 8005726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005728:	4610      	mov	r0, r2
 800572a:	4798      	blx	r3
 800572c:	4603      	mov	r3, r0
 800572e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8005732:	e002      	b.n	800573a <tcp_slowtmr+0x55a>
 8005734:	2300      	movs	r3, #0
 8005736:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800573a:	4b13      	ldr	r3, [pc, #76]	@ (8005788 <tcp_slowtmr+0x5a8>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f47f ad60 	bne.w	8005204 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005744:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800574c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800574e:	f003 fb79 	bl	8008e44 <tcp_output>
  while (pcb != NULL) {
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	2b00      	cmp	r3, #0
 8005756:	f47f ad5c 	bne.w	8005212 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800575e:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <tcp_slowtmr+0x5ac>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8005764:	e067      	b.n	8005836 <tcp_slowtmr+0x656>
 8005766:	bf00      	nop
 8005768:	20008258 	.word	0x20008258
 800576c:	10624dd3 	.word	0x10624dd3
 8005770:	000124f8 	.word	0x000124f8
 8005774:	20008264 	.word	0x20008264
 8005778:	0800e2d4 	.word	0x0800e2d4
 800577c:	0800e70c 	.word	0x0800e70c
 8005780:	0800e318 	.word	0x0800e318
 8005784:	0800e738 	.word	0x0800e738
 8005788:	2000826c 	.word	0x2000826c
 800578c:	20008268 	.word	0x20008268
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005792:	7d1b      	ldrb	r3, [r3, #20]
 8005794:	2b0a      	cmp	r3, #10
 8005796:	d006      	beq.n	80057a6 <tcp_slowtmr+0x5c6>
 8005798:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <tcp_slowtmr+0x668>)
 800579a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800579e:	492b      	ldr	r1, [pc, #172]	@ (800584c <tcp_slowtmr+0x66c>)
 80057a0:	482b      	ldr	r0, [pc, #172]	@ (8005850 <tcp_slowtmr+0x670>)
 80057a2:	f007 f91d 	bl	800c9e0 <iprintf>
    pcb_remove = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80057ac:	4b29      	ldr	r3, [pc, #164]	@ (8005854 <tcp_slowtmr+0x674>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80057b8:	d904      	bls.n	80057c4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80057ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057be:	3301      	adds	r3, #1
 80057c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80057c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d02f      	beq.n	800582c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80057cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057ce:	f000 fb2b 	bl	8005e28 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d010      	beq.n	80057fa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80057d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005858 <tcp_slowtmr+0x678>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057de:	429a      	cmp	r2, r3
 80057e0:	d106      	bne.n	80057f0 <tcp_slowtmr+0x610>
 80057e2:	4b19      	ldr	r3, [pc, #100]	@ (8005848 <tcp_slowtmr+0x668>)
 80057e4:	f240 52af 	movw	r2, #1455	@ 0x5af
 80057e8:	491c      	ldr	r1, [pc, #112]	@ (800585c <tcp_slowtmr+0x67c>)
 80057ea:	4819      	ldr	r0, [pc, #100]	@ (8005850 <tcp_slowtmr+0x670>)
 80057ec:	f007 f8f8 	bl	800c9e0 <iprintf>
        prev->next = pcb->next;
 80057f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	60da      	str	r2, [r3, #12]
 80057f8:	e00f      	b.n	800581a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80057fa:	4b17      	ldr	r3, [pc, #92]	@ (8005858 <tcp_slowtmr+0x678>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005800:	429a      	cmp	r2, r3
 8005802:	d006      	beq.n	8005812 <tcp_slowtmr+0x632>
 8005804:	4b10      	ldr	r3, [pc, #64]	@ (8005848 <tcp_slowtmr+0x668>)
 8005806:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800580a:	4915      	ldr	r1, [pc, #84]	@ (8005860 <tcp_slowtmr+0x680>)
 800580c:	4810      	ldr	r0, [pc, #64]	@ (8005850 <tcp_slowtmr+0x670>)
 800580e:	f007 f8e7 	bl	800c9e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	4a10      	ldr	r2, [pc, #64]	@ (8005858 <tcp_slowtmr+0x678>)
 8005818:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800581a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8005824:	69f8      	ldr	r0, [r7, #28]
 8005826:	f7ff f93d 	bl	8004aa4 <tcp_free>
 800582a:	e004      	b.n	8005836 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800582c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8005830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1a9      	bne.n	8005790 <tcp_slowtmr+0x5b0>
    }
  }
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	3730      	adds	r7, #48	@ 0x30
 8005842:	46bd      	mov	sp, r7
 8005844:	bdb0      	pop	{r4, r5, r7, pc}
 8005846:	bf00      	nop
 8005848:	0800e2d4 	.word	0x0800e2d4
 800584c:	0800e764 	.word	0x0800e764
 8005850:	0800e318 	.word	0x0800e318
 8005854:	20008258 	.word	0x20008258
 8005858:	20008268 	.word	0x20008268
 800585c:	0800e794 	.word	0x0800e794
 8005860:	0800e7bc 	.word	0x0800e7bc

08005864 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800586a:	4b2d      	ldr	r3, [pc, #180]	@ (8005920 <tcp_fasttmr+0xbc>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	3301      	adds	r3, #1
 8005870:	b2da      	uxtb	r2, r3
 8005872:	4b2b      	ldr	r3, [pc, #172]	@ (8005920 <tcp_fasttmr+0xbc>)
 8005874:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8005876:	4b2b      	ldr	r3, [pc, #172]	@ (8005924 <tcp_fasttmr+0xc0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800587c:	e048      	b.n	8005910 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	7f9a      	ldrb	r2, [r3, #30]
 8005882:	4b27      	ldr	r3, [pc, #156]	@ (8005920 <tcp_fasttmr+0xbc>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d03f      	beq.n	800590a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800588a:	4b25      	ldr	r3, [pc, #148]	@ (8005920 <tcp_fasttmr+0xbc>)
 800588c:	781a      	ldrb	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8b5b      	ldrh	r3, [r3, #26]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d010      	beq.n	80058c0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8b5b      	ldrh	r3, [r3, #26]
 80058a2:	f043 0302 	orr.w	r3, r3, #2
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f003 fac9 	bl	8008e44 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	8b5b      	ldrh	r3, [r3, #26]
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8b5b      	ldrh	r3, [r3, #26]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8b5b      	ldrh	r3, [r3, #26]
 80058d0:	f023 0308 	bic.w	r3, r3, #8
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff fa76 	bl	8004dcc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80058ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005928 <tcp_fasttmr+0xc4>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f819 	bl	800592c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80058fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005928 <tcp_fasttmr+0xc4>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d000      	beq.n	8005904 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8005902:	e7b8      	b.n	8005876 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	607b      	str	r3, [r7, #4]
 8005908:	e002      	b.n	8005910 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1b3      	bne.n	800587e <tcp_fasttmr+0x1a>
    }
  }
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	2000826e 	.word	0x2000826e
 8005924:	20008264 	.word	0x20008264
 8005928:	2000826c 	.word	0x2000826c

0800592c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800592c:	b590      	push	{r4, r7, lr}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <tcp_process_refused_data+0x22>
 800593a:	4b37      	ldr	r3, [pc, #220]	@ (8005a18 <tcp_process_refused_data+0xec>)
 800593c:	f240 6209 	movw	r2, #1545	@ 0x609
 8005940:	4936      	ldr	r1, [pc, #216]	@ (8005a1c <tcp_process_refused_data+0xf0>)
 8005942:	4837      	ldr	r0, [pc, #220]	@ (8005a20 <tcp_process_refused_data+0xf4>)
 8005944:	f007 f84c 	bl	800c9e0 <iprintf>
 8005948:	f06f 030f 	mvn.w	r3, #15
 800594c:	e060      	b.n	8005a10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005952:	7b5b      	ldrb	r3, [r3, #13]
 8005954:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800595a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00b      	beq.n	8005984 <tcp_process_refused_data+0x58>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6918      	ldr	r0, [r3, #16]
 8005976:	2300      	movs	r3, #0
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	47a0      	blx	r4
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
 8005982:	e007      	b.n	8005994 <tcp_process_refused_data+0x68>
 8005984:	2300      	movs	r3, #0
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	2000      	movs	r0, #0
 800598c:	f000 f8a4 	bl	8005ad8 <tcp_recv_null>
 8005990:	4603      	mov	r3, r0
 8005992:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d12a      	bne.n	80059f2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800599c:	7bbb      	ldrb	r3, [r7, #14]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d033      	beq.n	8005a0e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059aa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80059ae:	d005      	beq.n	80059bc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b4:	3301      	adds	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <tcp_process_refused_data+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6918      	ldr	r0, [r3, #16]
 80059d0:	2300      	movs	r3, #0
 80059d2:	2200      	movs	r2, #0
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	47a0      	blx	r4
 80059d8:	4603      	mov	r3, r0
 80059da:	73fb      	strb	r3, [r7, #15]
 80059dc:	e001      	b.n	80059e2 <tcp_process_refused_data+0xb6>
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80059e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059e6:	f113 0f0d 	cmn.w	r3, #13
 80059ea:	d110      	bne.n	8005a0e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80059ec:	f06f 030c 	mvn.w	r3, #12
 80059f0:	e00e      	b.n	8005a10 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80059f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f6:	f113 0f0d 	cmn.w	r3, #13
 80059fa:	d102      	bne.n	8005a02 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80059fc:	f06f 030c 	mvn.w	r3, #12
 8005a00:	e006      	b.n	8005a10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8005a08:	f06f 0304 	mvn.w	r3, #4
 8005a0c:	e000      	b.n	8005a10 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd90      	pop	{r4, r7, pc}
 8005a18:	0800e2d4 	.word	0x0800e2d4
 8005a1c:	0800e7e4 	.word	0x0800e7e4
 8005a20:	0800e318 	.word	0x0800e318

08005a24 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8005a2c:	e007      	b.n	8005a3e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f80a 	bl	8005a4e <tcp_seg_free>
    seg = next;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f4      	bne.n	8005a2e <tcp_segs_free+0xa>
  }
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b082      	sub	sp, #8
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00c      	beq.n	8005a76 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fe fd7b 	bl	8004564 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005a6e:	6879      	ldr	r1, [r7, #4]
 8005a70:	2003      	movs	r0, #3
 8005a72:	f7fd ffa3 	bl	80039bc <memp_free>
  }
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <tcp_seg_copy+0x1c>
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005acc <tcp_seg_copy+0x4c>)
 8005a90:	f240 6282 	movw	r2, #1666	@ 0x682
 8005a94:	490e      	ldr	r1, [pc, #56]	@ (8005ad0 <tcp_seg_copy+0x50>)
 8005a96:	480f      	ldr	r0, [pc, #60]	@ (8005ad4 <tcp_seg_copy+0x54>)
 8005a98:	f006 ffa2 	bl	800c9e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005a9c:	2003      	movs	r0, #3
 8005a9e:	f7fd ff41 	bl	8003924 <memp_malloc>
 8005aa2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <tcp_seg_copy+0x2e>
    return NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	e00a      	b.n	8005ac4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005aae:	2210      	movs	r2, #16
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f007 f86f 	bl	800cb96 <memcpy>
  pbuf_ref(cseg->p);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe fdf1 	bl	80046a4 <pbuf_ref>
  return cseg;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	0800e2d4 	.word	0x0800e2d4
 8005ad0:	0800e828 	.word	0x0800e828
 8005ad4:	0800e318 	.word	0x0800e318

08005ad8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <tcp_recv_null+0x28>
 8005aec:	4b12      	ldr	r3, [pc, #72]	@ (8005b38 <tcp_recv_null+0x60>)
 8005aee:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8005af2:	4912      	ldr	r1, [pc, #72]	@ (8005b3c <tcp_recv_null+0x64>)
 8005af4:	4812      	ldr	r0, [pc, #72]	@ (8005b40 <tcp_recv_null+0x68>)
 8005af6:	f006 ff73 	bl	800c9e0 <iprintf>
 8005afa:	f06f 030f 	mvn.w	r3, #15
 8005afe:	e016      	b.n	8005b2e <tcp_recv_null+0x56>

  if (p != NULL) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	891b      	ldrh	r3, [r3, #8]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	68b8      	ldr	r0, [r7, #8]
 8005b0e:	f7ff fb17 	bl	8005140 <tcp_recved>
    pbuf_free(p);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fe fd26 	bl	8004564 <pbuf_free>
 8005b18:	e008      	b.n	8005b2c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8005b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d104      	bne.n	8005b2c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8005b22:	68b8      	ldr	r0, [r7, #8]
 8005b24:	f7ff f9bc 	bl	8004ea0 <tcp_close>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	e000      	b.n	8005b2e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	0800e2d4 	.word	0x0800e2d4
 8005b3c:	0800e844 	.word	0x0800e844
 8005b40:	0800e318 	.word	0x0800e318

08005b44 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	db01      	blt.n	8005b5a <tcp_kill_prio+0x16>
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	e000      	b.n	8005b5c <tcp_kill_prio+0x18>
 8005b5a:	237f      	movs	r3, #127	@ 0x7f
 8005b5c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8005b5e:	7afb      	ldrb	r3, [r7, #11]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d034      	beq.n	8005bce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005b72:	4b19      	ldr	r3, [pc, #100]	@ (8005bd8 <tcp_kill_prio+0x94>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	e01f      	b.n	8005bba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	7d5b      	ldrb	r3, [r3, #21]
 8005b7e:	7afa      	ldrb	r2, [r7, #11]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d80c      	bhi.n	8005b9e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8005b88:	7afa      	ldrb	r2, [r7, #11]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d112      	bne.n	8005bb4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8005b8e:	4b13      	ldr	r3, [pc, #76]	@ (8005bdc <tcp_kill_prio+0x98>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d80a      	bhi.n	8005bb4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <tcp_kill_prio+0x98>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	7d5b      	ldrb	r3, [r3, #21]
 8005bb2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1dc      	bne.n	8005b7a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005bc6:	6938      	ldr	r0, [r7, #16]
 8005bc8:	f7ff fa54 	bl	8005074 <tcp_abort>
 8005bcc:	e000      	b.n	8005bd0 <tcp_kill_prio+0x8c>
    return;
 8005bce:	bf00      	nop
  }
}
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20008264 	.word	0x20008264
 8005bdc:	20008258 	.word	0x20008258

08005be0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d009      	beq.n	8005c04 <tcp_kill_state+0x24>
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	2b09      	cmp	r3, #9
 8005bf4:	d006      	beq.n	8005c04 <tcp_kill_state+0x24>
 8005bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c60 <tcp_kill_state+0x80>)
 8005bf8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8005bfc:	4919      	ldr	r1, [pc, #100]	@ (8005c64 <tcp_kill_state+0x84>)
 8005bfe:	481a      	ldr	r0, [pc, #104]	@ (8005c68 <tcp_kill_state+0x88>)
 8005c00:	f006 feee 	bl	800c9e0 <iprintf>

  inactivity = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005c0c:	4b17      	ldr	r3, [pc, #92]	@ (8005c6c <tcp_kill_state+0x8c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e017      	b.n	8005c44 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	7d1b      	ldrb	r3, [r3, #20]
 8005c18:	79fa      	ldrb	r2, [r7, #7]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d10f      	bne.n	8005c3e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005c1e:	4b14      	ldr	r3, [pc, #80]	@ (8005c70 <tcp_kill_state+0x90>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d807      	bhi.n	8005c3e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8005c2e:	4b10      	ldr	r3, [pc, #64]	@ (8005c70 <tcp_kill_state+0x90>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e4      	bne.n	8005c14 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8005c50:	2100      	movs	r1, #0
 8005c52:	6938      	ldr	r0, [r7, #16]
 8005c54:	f7ff f950 	bl	8004ef8 <tcp_abandon>
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	0800e2d4 	.word	0x0800e2d4
 8005c64:	0800e860 	.word	0x0800e860
 8005c68:	0800e318 	.word	0x0800e318
 8005c6c:	20008264 	.word	0x20008264
 8005c70:	20008258 	.word	0x20008258

08005c74 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005c82:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <tcp_kill_timewait+0x58>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	e012      	b.n	8005cb0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005c8a:	4b11      	ldr	r3, [pc, #68]	@ (8005cd0 <tcp_kill_timewait+0x5c>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d807      	bhi.n	8005caa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd0 <tcp_kill_timewait+0x5c>)
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e9      	bne.n	8005c8a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8005cbc:	68b8      	ldr	r0, [r7, #8]
 8005cbe:	f7ff f9d9 	bl	8005074 <tcp_abort>
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20008268 	.word	0x20008268
 8005cd0:	20008258 	.word	0x20008258

08005cd4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8005cda:	4b10      	ldr	r3, [pc, #64]	@ (8005d1c <tcp_handle_closepend+0x48>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005ce0:	e014      	b.n	8005d0c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8b5b      	ldrh	r3, [r3, #26]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8b5b      	ldrh	r3, [r3, #26]
 8005cf8:	f023 0308 	bic.w	r3, r3, #8
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff f862 	bl	8004dcc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e7      	bne.n	8005ce2 <tcp_handle_closepend+0xe>
  }
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20008264 	.word	0x20008264

08005d20 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005d2a:	2001      	movs	r0, #1
 8005d2c:	f7fd fdfa 	bl	8003924 <memp_malloc>
 8005d30:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d126      	bne.n	8005d86 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8005d38:	f7ff ffcc 	bl	8005cd4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8005d3c:	f7ff ff9a 	bl	8005c74 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005d40:	2001      	movs	r0, #1
 8005d42:	f7fd fdef 	bl	8003924 <memp_malloc>
 8005d46:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d11b      	bne.n	8005d86 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8005d4e:	2009      	movs	r0, #9
 8005d50:	f7ff ff46 	bl	8005be0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005d54:	2001      	movs	r0, #1
 8005d56:	f7fd fde5 	bl	8003924 <memp_malloc>
 8005d5a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d111      	bne.n	8005d86 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8005d62:	2008      	movs	r0, #8
 8005d64:	f7ff ff3c 	bl	8005be0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005d68:	2001      	movs	r0, #1
 8005d6a:	f7fd fddb 	bl	8003924 <memp_malloc>
 8005d6e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d107      	bne.n	8005d86 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fee3 	bl	8005b44 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f7fd fdd0 	bl	8003924 <memp_malloc>
 8005d84:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d03f      	beq.n	8005e0c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8005d8c:	229c      	movs	r2, #156	@ 0x9c
 8005d8e:	2100      	movs	r1, #0
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f006 fe8a 	bl	800caaa <memset>
    pcb->prio = prio;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	79fa      	ldrb	r2, [r7, #7]
 8005d9a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8005da2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8005dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	22ff      	movs	r2, #255	@ 0xff
 8005dba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8005dc2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2206      	movs	r2, #6
 8005dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2206      	movs	r2, #6
 8005dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005dd8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8005de2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e18 <tcp_alloc+0xf8>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8005dea:	4b0c      	ldr	r3, [pc, #48]	@ (8005e1c <tcp_alloc+0xfc>)
 8005dec:	781a      	ldrb	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8005df8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4a08      	ldr	r2, [pc, #32]	@ (8005e20 <tcp_alloc+0x100>)
 8005e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4a07      	ldr	r2, [pc, #28]	@ (8005e24 <tcp_alloc+0x104>)
 8005e08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20008258 	.word	0x20008258
 8005e1c:	2000826e 	.word	0x2000826e
 8005e20:	08005ad9 	.word	0x08005ad9
 8005e24:	006ddd00 	.word	0x006ddd00

08005e28 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d107      	bne.n	8005e46 <tcp_pcb_purge+0x1e>
 8005e36:	4b21      	ldr	r3, [pc, #132]	@ (8005ebc <tcp_pcb_purge+0x94>)
 8005e38:	f640 0251 	movw	r2, #2129	@ 0x851
 8005e3c:	4920      	ldr	r1, [pc, #128]	@ (8005ec0 <tcp_pcb_purge+0x98>)
 8005e3e:	4821      	ldr	r0, [pc, #132]	@ (8005ec4 <tcp_pcb_purge+0x9c>)
 8005e40:	f006 fdce 	bl	800c9e0 <iprintf>
 8005e44:	e037      	b.n	8005eb6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	7d1b      	ldrb	r3, [r3, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d033      	beq.n	8005eb6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8005e52:	2b0a      	cmp	r3, #10
 8005e54:	d02f      	beq.n	8005eb6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d02b      	beq.n	8005eb6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe fb7a 	bl	8004564 <pbuf_free>
      pcb->refused_data = NULL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f986 	bl	8006190 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e8a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fdc7 	bl	8005a24 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fdc2 	bl	8005a24 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	0800e2d4 	.word	0x0800e2d4
 8005ec0:	0800e920 	.word	0x0800e920
 8005ec4:	0800e318 	.word	0x0800e318

08005ec8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <tcp_pcb_remove+0x1e>
 8005ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8005fd4 <tcp_pcb_remove+0x10c>)
 8005eda:	f640 0283 	movw	r2, #2179	@ 0x883
 8005ede:	493e      	ldr	r1, [pc, #248]	@ (8005fd8 <tcp_pcb_remove+0x110>)
 8005ee0:	483e      	ldr	r0, [pc, #248]	@ (8005fdc <tcp_pcb_remove+0x114>)
 8005ee2:	f006 fd7d 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <tcp_pcb_remove+0x32>
 8005eec:	4b39      	ldr	r3, [pc, #228]	@ (8005fd4 <tcp_pcb_remove+0x10c>)
 8005eee:	f640 0284 	movw	r2, #2180	@ 0x884
 8005ef2:	493b      	ldr	r1, [pc, #236]	@ (8005fe0 <tcp_pcb_remove+0x118>)
 8005ef4:	4839      	ldr	r0, [pc, #228]	@ (8005fdc <tcp_pcb_remove+0x114>)
 8005ef6:	f006 fd73 	bl	800c9e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d105      	bne.n	8005f10 <tcp_pcb_remove+0x48>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68da      	ldr	r2, [r3, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e013      	b.n	8005f38 <tcp_pcb_remove+0x70>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e00c      	b.n	8005f32 <tcp_pcb_remove+0x6a>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d104      	bne.n	8005f2c <tcp_pcb_remove+0x64>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	60da      	str	r2, [r3, #12]
 8005f2a:	e005      	b.n	8005f38 <tcp_pcb_remove+0x70>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1ef      	bne.n	8005f18 <tcp_pcb_remove+0x50>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8005f3e:	6838      	ldr	r0, [r7, #0]
 8005f40:	f7ff ff72 	bl	8005e28 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	7d1b      	ldrb	r3, [r3, #20]
 8005f48:	2b0a      	cmp	r3, #10
 8005f4a:	d013      	beq.n	8005f74 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d00f      	beq.n	8005f74 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	8b5b      	ldrh	r3, [r3, #26]
 8005f58:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	8b5b      	ldrh	r3, [r3, #26]
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005f6e:	6838      	ldr	r0, [r7, #0]
 8005f70:	f002 ff68 	bl	8008e44 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	7d1b      	ldrb	r3, [r3, #20]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d020      	beq.n	8005fbe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d006      	beq.n	8005f92 <tcp_pcb_remove+0xca>
 8005f84:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <tcp_pcb_remove+0x10c>)
 8005f86:	f640 0293 	movw	r2, #2195	@ 0x893
 8005f8a:	4916      	ldr	r1, [pc, #88]	@ (8005fe4 <tcp_pcb_remove+0x11c>)
 8005f8c:	4813      	ldr	r0, [pc, #76]	@ (8005fdc <tcp_pcb_remove+0x114>)
 8005f8e:	f006 fd27 	bl	800c9e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d006      	beq.n	8005fa8 <tcp_pcb_remove+0xe0>
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005fd4 <tcp_pcb_remove+0x10c>)
 8005f9c:	f640 0294 	movw	r2, #2196	@ 0x894
 8005fa0:	4911      	ldr	r1, [pc, #68]	@ (8005fe8 <tcp_pcb_remove+0x120>)
 8005fa2:	480e      	ldr	r0, [pc, #56]	@ (8005fdc <tcp_pcb_remove+0x114>)
 8005fa4:	f006 fd1c 	bl	800c9e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d006      	beq.n	8005fbe <tcp_pcb_remove+0xf6>
 8005fb0:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <tcp_pcb_remove+0x10c>)
 8005fb2:	f640 0296 	movw	r2, #2198	@ 0x896
 8005fb6:	490d      	ldr	r1, [pc, #52]	@ (8005fec <tcp_pcb_remove+0x124>)
 8005fb8:	4808      	ldr	r0, [pc, #32]	@ (8005fdc <tcp_pcb_remove+0x114>)
 8005fba:	f006 fd11 	bl	800c9e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	0800e2d4 	.word	0x0800e2d4
 8005fd8:	0800e93c 	.word	0x0800e93c
 8005fdc:	0800e318 	.word	0x0800e318
 8005fe0:	0800e958 	.word	0x0800e958
 8005fe4:	0800e978 	.word	0x0800e978
 8005fe8:	0800e990 	.word	0x0800e990
 8005fec:	0800e9ac 	.word	0x0800e9ac

08005ff0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <tcp_next_iss+0x1c>
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <tcp_next_iss+0x38>)
 8006000:	f640 02af 	movw	r2, #2223	@ 0x8af
 8006004:	4909      	ldr	r1, [pc, #36]	@ (800602c <tcp_next_iss+0x3c>)
 8006006:	480a      	ldr	r0, [pc, #40]	@ (8006030 <tcp_next_iss+0x40>)
 8006008:	f006 fcea 	bl	800c9e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800600c:	4b09      	ldr	r3, [pc, #36]	@ (8006034 <tcp_next_iss+0x44>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b09      	ldr	r3, [pc, #36]	@ (8006038 <tcp_next_iss+0x48>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4413      	add	r3, r2
 8006016:	4a07      	ldr	r2, [pc, #28]	@ (8006034 <tcp_next_iss+0x44>)
 8006018:	6013      	str	r3, [r2, #0]
  return iss;
 800601a:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <tcp_next_iss+0x44>)
 800601c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	0800e2d4 	.word	0x0800e2d4
 800602c:	0800e9c4 	.word	0x0800e9c4
 8006030:	0800e318 	.word	0x0800e318
 8006034:	2000000c 	.word	0x2000000c
 8006038:	20008258 	.word	0x20008258

0800603c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d106      	bne.n	800605e <tcp_eff_send_mss_netif+0x22>
 8006050:	4b14      	ldr	r3, [pc, #80]	@ (80060a4 <tcp_eff_send_mss_netif+0x68>)
 8006052:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8006056:	4914      	ldr	r1, [pc, #80]	@ (80060a8 <tcp_eff_send_mss_netif+0x6c>)
 8006058:	4814      	ldr	r0, [pc, #80]	@ (80060ac <tcp_eff_send_mss_netif+0x70>)
 800605a:	f006 fcc1 	bl	800c9e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006064:	89fb      	ldrh	r3, [r7, #14]
 8006066:	e019      	b.n	800609c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800606c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800606e:	8afb      	ldrh	r3, [r7, #22]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d012      	beq.n	800609a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006074:	2328      	movs	r3, #40	@ 0x28
 8006076:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006078:	8afa      	ldrh	r2, [r7, #22]
 800607a:	8abb      	ldrh	r3, [r7, #20]
 800607c:	429a      	cmp	r2, r3
 800607e:	d904      	bls.n	800608a <tcp_eff_send_mss_netif+0x4e>
 8006080:	8afa      	ldrh	r2, [r7, #22]
 8006082:	8abb      	ldrh	r3, [r7, #20]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	e000      	b.n	800608c <tcp_eff_send_mss_netif+0x50>
 800608a:	2300      	movs	r3, #0
 800608c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800608e:	8a7a      	ldrh	r2, [r7, #18]
 8006090:	89fb      	ldrh	r3, [r7, #14]
 8006092:	4293      	cmp	r3, r2
 8006094:	bf28      	it	cs
 8006096:	4613      	movcs	r3, r2
 8006098:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800609a:	89fb      	ldrh	r3, [r7, #14]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	0800e2d4 	.word	0x0800e2d4
 80060a8:	0800e9e0 	.word	0x0800e9e0
 80060ac:	0800e318 	.word	0x0800e318

080060b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d119      	bne.n	80060f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80060c4:	4b10      	ldr	r3, [pc, #64]	@ (8006108 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80060c6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80060ca:	4910      	ldr	r1, [pc, #64]	@ (800610c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80060cc:	4810      	ldr	r0, [pc, #64]	@ (8006110 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80060ce:	f006 fc87 	bl	800c9e0 <iprintf>

  while (pcb != NULL) {
 80060d2:	e011      	b.n	80060f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d108      	bne.n	80060f2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f7fe ffc4 	bl	8005074 <tcp_abort>
      pcb = next;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	e002      	b.n	80060f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1ea      	bne.n	80060d4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	0800e2d4 	.word	0x0800e2d4
 800610c:	0800ea08 	.word	0x0800ea08
 8006110:	0800e318 	.word	0x0800e318

08006114 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d02a      	beq.n	800617a <tcp_netif_ip_addr_changed+0x66>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d026      	beq.n	800617a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800612c:	4b15      	ldr	r3, [pc, #84]	@ (8006184 <tcp_netif_ip_addr_changed+0x70>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7ff ffbc 	bl	80060b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006138:	4b13      	ldr	r3, [pc, #76]	@ (8006188 <tcp_netif_ip_addr_changed+0x74>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff ffb6 	bl	80060b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d017      	beq.n	800617a <tcp_netif_ip_addr_changed+0x66>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d013      	beq.n	800617a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006152:	4b0e      	ldr	r3, [pc, #56]	@ (800618c <tcp_netif_ip_addr_changed+0x78>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	e00c      	b.n	8006174 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	429a      	cmp	r2, r3
 8006164:	d103      	bne.n	800616e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1ef      	bne.n	800615a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20008264 	.word	0x20008264
 8006188:	2000825c 	.word	0x2000825c
 800618c:	20008260 	.word	0x20008260

08006190 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7ff fc3d 	bl	8005a24 <tcp_segs_free>
    pcb->ooseq = NULL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b08d      	sub	sp, #52	@ 0x34
 80061bc:	af04      	add	r7, sp, #16
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <tcp_input+0x1c>
 80061c8:	4b9b      	ldr	r3, [pc, #620]	@ (8006438 <tcp_input+0x280>)
 80061ca:	2283      	movs	r2, #131	@ 0x83
 80061cc:	499b      	ldr	r1, [pc, #620]	@ (800643c <tcp_input+0x284>)
 80061ce:	489c      	ldr	r0, [pc, #624]	@ (8006440 <tcp_input+0x288>)
 80061d0:	f006 fc06 	bl	800c9e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4a9a      	ldr	r2, [pc, #616]	@ (8006444 <tcp_input+0x28c>)
 80061da:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	895b      	ldrh	r3, [r3, #10]
 80061e0:	2b13      	cmp	r3, #19
 80061e2:	f240 83d1 	bls.w	8006988 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80061e6:	4b98      	ldr	r3, [pc, #608]	@ (8006448 <tcp_input+0x290>)
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	4a97      	ldr	r2, [pc, #604]	@ (8006448 <tcp_input+0x290>)
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f005 fb9f 	bl	800b934 <ip4_addr_isbroadcast_u32>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f040 83c7 	bne.w	800698c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80061fe:	4b92      	ldr	r3, [pc, #584]	@ (8006448 <tcp_input+0x290>)
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006206:	2be0      	cmp	r3, #224	@ 0xe0
 8006208:	f000 83c0 	beq.w	800698c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800620c:	4b8d      	ldr	r3, [pc, #564]	@ (8006444 <tcp_input+0x28c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	899b      	ldrh	r3, [r3, #12]
 8006212:	b29b      	uxth	r3, r3
 8006214:	4618      	mov	r0, r3
 8006216:	f7fc ff2e 	bl	8003076 <lwip_htons>
 800621a:	4603      	mov	r3, r0
 800621c:	0b1b      	lsrs	r3, r3, #12
 800621e:	b29b      	uxth	r3, r3
 8006220:	b2db      	uxtb	r3, r3
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006226:	7cbb      	ldrb	r3, [r7, #18]
 8006228:	2b13      	cmp	r3, #19
 800622a:	f240 83b1 	bls.w	8006990 <tcp_input+0x7d8>
 800622e:	7cbb      	ldrb	r3, [r7, #18]
 8006230:	b29a      	uxth	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	891b      	ldrh	r3, [r3, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	f200 83aa 	bhi.w	8006990 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800623c:	7cbb      	ldrb	r3, [r7, #18]
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b14      	subs	r3, #20
 8006242:	b29a      	uxth	r2, r3
 8006244:	4b81      	ldr	r3, [pc, #516]	@ (800644c <tcp_input+0x294>)
 8006246:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006248:	4b81      	ldr	r3, [pc, #516]	@ (8006450 <tcp_input+0x298>)
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	895a      	ldrh	r2, [r3, #10]
 8006252:	7cbb      	ldrb	r3, [r7, #18]
 8006254:	b29b      	uxth	r3, r3
 8006256:	429a      	cmp	r2, r3
 8006258:	d309      	bcc.n	800626e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800625a:	4b7c      	ldr	r3, [pc, #496]	@ (800644c <tcp_input+0x294>)
 800625c:	881a      	ldrh	r2, [r3, #0]
 800625e:	4b7d      	ldr	r3, [pc, #500]	@ (8006454 <tcp_input+0x29c>)
 8006260:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006262:	7cbb      	ldrb	r3, [r7, #18]
 8006264:	4619      	mov	r1, r3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fe f8f6 	bl	8004458 <pbuf_remove_header>
 800626c:	e04e      	b.n	800630c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d105      	bne.n	8006282 <tcp_input+0xca>
 8006276:	4b70      	ldr	r3, [pc, #448]	@ (8006438 <tcp_input+0x280>)
 8006278:	22c2      	movs	r2, #194	@ 0xc2
 800627a:	4977      	ldr	r1, [pc, #476]	@ (8006458 <tcp_input+0x2a0>)
 800627c:	4870      	ldr	r0, [pc, #448]	@ (8006440 <tcp_input+0x288>)
 800627e:	f006 fbaf 	bl	800c9e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006282:	2114      	movs	r1, #20
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7fe f8e7 	bl	8004458 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	895a      	ldrh	r2, [r3, #10]
 800628e:	4b71      	ldr	r3, [pc, #452]	@ (8006454 <tcp_input+0x29c>)
 8006290:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006292:	4b6e      	ldr	r3, [pc, #440]	@ (800644c <tcp_input+0x294>)
 8006294:	881a      	ldrh	r2, [r3, #0]
 8006296:	4b6f      	ldr	r3, [pc, #444]	@ (8006454 <tcp_input+0x29c>)
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800629e:	4b6d      	ldr	r3, [pc, #436]	@ (8006454 <tcp_input+0x29c>)
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fe f8d7 	bl	8004458 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	895b      	ldrh	r3, [r3, #10]
 80062b0:	8a3a      	ldrh	r2, [r7, #16]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	f200 836e 	bhi.w	8006994 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	4a64      	ldr	r2, [pc, #400]	@ (8006450 <tcp_input+0x298>)
 80062c0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	8a3a      	ldrh	r2, [r7, #16]
 80062c8:	4611      	mov	r1, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe f8c4 	bl	8004458 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	891a      	ldrh	r2, [r3, #8]
 80062d4:	8a3b      	ldrh	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	895b      	ldrh	r3, [r3, #10]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <tcp_input+0x13a>
 80062e6:	4b54      	ldr	r3, [pc, #336]	@ (8006438 <tcp_input+0x280>)
 80062e8:	22df      	movs	r2, #223	@ 0xdf
 80062ea:	495c      	ldr	r1, [pc, #368]	@ (800645c <tcp_input+0x2a4>)
 80062ec:	4854      	ldr	r0, [pc, #336]	@ (8006440 <tcp_input+0x288>)
 80062ee:	f006 fb77 	bl	800c9e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	891a      	ldrh	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	891b      	ldrh	r3, [r3, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d005      	beq.n	800630c <tcp_input+0x154>
 8006300:	4b4d      	ldr	r3, [pc, #308]	@ (8006438 <tcp_input+0x280>)
 8006302:	22e0      	movs	r2, #224	@ 0xe0
 8006304:	4956      	ldr	r1, [pc, #344]	@ (8006460 <tcp_input+0x2a8>)
 8006306:	484e      	ldr	r0, [pc, #312]	@ (8006440 <tcp_input+0x288>)
 8006308:	f006 fb6a 	bl	800c9e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800630c:	4b4d      	ldr	r3, [pc, #308]	@ (8006444 <tcp_input+0x28c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	4a4b      	ldr	r2, [pc, #300]	@ (8006444 <tcp_input+0x28c>)
 8006316:	6814      	ldr	r4, [r2, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f7fc feac 	bl	8003076 <lwip_htons>
 800631e:	4603      	mov	r3, r0
 8006320:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006322:	4b48      	ldr	r3, [pc, #288]	@ (8006444 <tcp_input+0x28c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	b29b      	uxth	r3, r3
 800632a:	4a46      	ldr	r2, [pc, #280]	@ (8006444 <tcp_input+0x28c>)
 800632c:	6814      	ldr	r4, [r2, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f7fc fea1 	bl	8003076 <lwip_htons>
 8006334:	4603      	mov	r3, r0
 8006336:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006338:	4b42      	ldr	r3, [pc, #264]	@ (8006444 <tcp_input+0x28c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4a41      	ldr	r2, [pc, #260]	@ (8006444 <tcp_input+0x28c>)
 8006340:	6814      	ldr	r4, [r2, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f7fc fead 	bl	80030a2 <lwip_htonl>
 8006348:	4603      	mov	r3, r0
 800634a:	6063      	str	r3, [r4, #4]
 800634c:	6863      	ldr	r3, [r4, #4]
 800634e:	4a45      	ldr	r2, [pc, #276]	@ (8006464 <tcp_input+0x2ac>)
 8006350:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006352:	4b3c      	ldr	r3, [pc, #240]	@ (8006444 <tcp_input+0x28c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	4a3a      	ldr	r2, [pc, #232]	@ (8006444 <tcp_input+0x28c>)
 800635a:	6814      	ldr	r4, [r2, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f7fc fea0 	bl	80030a2 <lwip_htonl>
 8006362:	4603      	mov	r3, r0
 8006364:	60a3      	str	r3, [r4, #8]
 8006366:	68a3      	ldr	r3, [r4, #8]
 8006368:	4a3f      	ldr	r2, [pc, #252]	@ (8006468 <tcp_input+0x2b0>)
 800636a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800636c:	4b35      	ldr	r3, [pc, #212]	@ (8006444 <tcp_input+0x28c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	89db      	ldrh	r3, [r3, #14]
 8006372:	b29b      	uxth	r3, r3
 8006374:	4a33      	ldr	r2, [pc, #204]	@ (8006444 <tcp_input+0x28c>)
 8006376:	6814      	ldr	r4, [r2, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f7fc fe7c 	bl	8003076 <lwip_htons>
 800637e:	4603      	mov	r3, r0
 8006380:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006382:	4b30      	ldr	r3, [pc, #192]	@ (8006444 <tcp_input+0x28c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	899b      	ldrh	r3, [r3, #12]
 8006388:	b29b      	uxth	r3, r3
 800638a:	4618      	mov	r0, r3
 800638c:	f7fc fe73 	bl	8003076 <lwip_htons>
 8006390:	4603      	mov	r3, r0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006398:	b2da      	uxtb	r2, r3
 800639a:	4b34      	ldr	r3, [pc, #208]	@ (800646c <tcp_input+0x2b4>)
 800639c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	891a      	ldrh	r2, [r3, #8]
 80063a2:	4b33      	ldr	r3, [pc, #204]	@ (8006470 <tcp_input+0x2b8>)
 80063a4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80063a6:	4b31      	ldr	r3, [pc, #196]	@ (800646c <tcp_input+0x2b4>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00c      	beq.n	80063cc <tcp_input+0x214>
    tcplen++;
 80063b2:	4b2f      	ldr	r3, [pc, #188]	@ (8006470 <tcp_input+0x2b8>)
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006470 <tcp_input+0x2b8>)
 80063bc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	891a      	ldrh	r2, [r3, #8]
 80063c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006470 <tcp_input+0x2b8>)
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	f200 82e6 	bhi.w	8006998 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80063cc:	2300      	movs	r3, #0
 80063ce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80063d0:	4b28      	ldr	r3, [pc, #160]	@ (8006474 <tcp_input+0x2bc>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e09d      	b.n	8006514 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	7d1b      	ldrb	r3, [r3, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <tcp_input+0x234>
 80063e0:	4b15      	ldr	r3, [pc, #84]	@ (8006438 <tcp_input+0x280>)
 80063e2:	22fb      	movs	r2, #251	@ 0xfb
 80063e4:	4924      	ldr	r1, [pc, #144]	@ (8006478 <tcp_input+0x2c0>)
 80063e6:	4816      	ldr	r0, [pc, #88]	@ (8006440 <tcp_input+0x288>)
 80063e8:	f006 fafa 	bl	800c9e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	7d1b      	ldrb	r3, [r3, #20]
 80063f0:	2b0a      	cmp	r3, #10
 80063f2:	d105      	bne.n	8006400 <tcp_input+0x248>
 80063f4:	4b10      	ldr	r3, [pc, #64]	@ (8006438 <tcp_input+0x280>)
 80063f6:	22fc      	movs	r2, #252	@ 0xfc
 80063f8:	4920      	ldr	r1, [pc, #128]	@ (800647c <tcp_input+0x2c4>)
 80063fa:	4811      	ldr	r0, [pc, #68]	@ (8006440 <tcp_input+0x288>)
 80063fc:	f006 faf0 	bl	800c9e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	7d1b      	ldrb	r3, [r3, #20]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d105      	bne.n	8006414 <tcp_input+0x25c>
 8006408:	4b0b      	ldr	r3, [pc, #44]	@ (8006438 <tcp_input+0x280>)
 800640a:	22fd      	movs	r2, #253	@ 0xfd
 800640c:	491c      	ldr	r1, [pc, #112]	@ (8006480 <tcp_input+0x2c8>)
 800640e:	480c      	ldr	r0, [pc, #48]	@ (8006440 <tcp_input+0x288>)
 8006410:	f006 fae6 	bl	800c9e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	7a1b      	ldrb	r3, [r3, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d033      	beq.n	8006484 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	7a1a      	ldrb	r2, [r3, #8]
 8006420:	4b09      	ldr	r3, [pc, #36]	@ (8006448 <tcp_input+0x290>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006428:	3301      	adds	r3, #1
 800642a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800642c:	429a      	cmp	r2, r3
 800642e:	d029      	beq.n	8006484 <tcp_input+0x2cc>
      prev = pcb;
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	61bb      	str	r3, [r7, #24]
      continue;
 8006434:	e06b      	b.n	800650e <tcp_input+0x356>
 8006436:	bf00      	nop
 8006438:	0800ea3c 	.word	0x0800ea3c
 800643c:	0800ea70 	.word	0x0800ea70
 8006440:	0800ea88 	.word	0x0800ea88
 8006444:	20008280 	.word	0x20008280
 8006448:	20004ce8 	.word	0x20004ce8
 800644c:	20008284 	.word	0x20008284
 8006450:	20008288 	.word	0x20008288
 8006454:	20008286 	.word	0x20008286
 8006458:	0800eab0 	.word	0x0800eab0
 800645c:	0800eac0 	.word	0x0800eac0
 8006460:	0800eacc 	.word	0x0800eacc
 8006464:	20008290 	.word	0x20008290
 8006468:	20008294 	.word	0x20008294
 800646c:	2000829c 	.word	0x2000829c
 8006470:	2000829a 	.word	0x2000829a
 8006474:	20008264 	.word	0x20008264
 8006478:	0800eaec 	.word	0x0800eaec
 800647c:	0800eb14 	.word	0x0800eb14
 8006480:	0800eb40 	.word	0x0800eb40
    }

    if (pcb->remote_port == tcphdr->src &&
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	8b1a      	ldrh	r2, [r3, #24]
 8006488:	4b72      	ldr	r3, [pc, #456]	@ (8006654 <tcp_input+0x49c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	429a      	cmp	r2, r3
 8006492:	d13a      	bne.n	800650a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	8ada      	ldrh	r2, [r3, #22]
 8006498:	4b6e      	ldr	r3, [pc, #440]	@ (8006654 <tcp_input+0x49c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	885b      	ldrh	r3, [r3, #2]
 800649e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d132      	bne.n	800650a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	4b6b      	ldr	r3, [pc, #428]	@ (8006658 <tcp_input+0x4a0>)
 80064aa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d12c      	bne.n	800650a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b68      	ldr	r3, [pc, #416]	@ (8006658 <tcp_input+0x4a0>)
 80064b6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d126      	bne.n	800650a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d106      	bne.n	80064d4 <tcp_input+0x31c>
 80064c6:	4b65      	ldr	r3, [pc, #404]	@ (800665c <tcp_input+0x4a4>)
 80064c8:	f240 120d 	movw	r2, #269	@ 0x10d
 80064cc:	4964      	ldr	r1, [pc, #400]	@ (8006660 <tcp_input+0x4a8>)
 80064ce:	4865      	ldr	r0, [pc, #404]	@ (8006664 <tcp_input+0x4ac>)
 80064d0:	f006 fa86 	bl	800c9e0 <iprintf>
      if (prev != NULL) {
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <tcp_input+0x338>
        prev->next = pcb->next;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80064e2:	4b61      	ldr	r3, [pc, #388]	@ (8006668 <tcp_input+0x4b0>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80064ea:	4a5f      	ldr	r2, [pc, #380]	@ (8006668 <tcp_input+0x4b0>)
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d111      	bne.n	800651e <tcp_input+0x366>
 80064fa:	4b58      	ldr	r3, [pc, #352]	@ (800665c <tcp_input+0x4a4>)
 80064fc:	f240 1215 	movw	r2, #277	@ 0x115
 8006500:	495a      	ldr	r1, [pc, #360]	@ (800666c <tcp_input+0x4b4>)
 8006502:	4858      	ldr	r0, [pc, #352]	@ (8006664 <tcp_input+0x4ac>)
 8006504:	f006 fa6c 	bl	800c9e0 <iprintf>
      break;
 8006508:	e009      	b.n	800651e <tcp_input+0x366>
    }
    prev = pcb;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	f47f af5e 	bne.w	80063d8 <tcp_input+0x220>
 800651c:	e000      	b.n	8006520 <tcp_input+0x368>
      break;
 800651e:	bf00      	nop
  }

  if (pcb == NULL) {
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 80aa 	bne.w	800667c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006528:	4b51      	ldr	r3, [pc, #324]	@ (8006670 <tcp_input+0x4b8>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	e03f      	b.n	80065b0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	7d1b      	ldrb	r3, [r3, #20]
 8006534:	2b0a      	cmp	r3, #10
 8006536:	d006      	beq.n	8006546 <tcp_input+0x38e>
 8006538:	4b48      	ldr	r3, [pc, #288]	@ (800665c <tcp_input+0x4a4>)
 800653a:	f240 121f 	movw	r2, #287	@ 0x11f
 800653e:	494d      	ldr	r1, [pc, #308]	@ (8006674 <tcp_input+0x4bc>)
 8006540:	4848      	ldr	r0, [pc, #288]	@ (8006664 <tcp_input+0x4ac>)
 8006542:	f006 fa4d 	bl	800c9e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	7a1b      	ldrb	r3, [r3, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	7a1a      	ldrb	r2, [r3, #8]
 8006552:	4b41      	ldr	r3, [pc, #260]	@ (8006658 <tcp_input+0x4a0>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800655a:	3301      	adds	r3, #1
 800655c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800655e:	429a      	cmp	r2, r3
 8006560:	d122      	bne.n	80065a8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	8b1a      	ldrh	r2, [r3, #24]
 8006566:	4b3b      	ldr	r3, [pc, #236]	@ (8006654 <tcp_input+0x49c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	429a      	cmp	r2, r3
 8006570:	d11b      	bne.n	80065aa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	8ada      	ldrh	r2, [r3, #22]
 8006576:	4b37      	ldr	r3, [pc, #220]	@ (8006654 <tcp_input+0x49c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	885b      	ldrh	r3, [r3, #2]
 800657c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800657e:	429a      	cmp	r2, r3
 8006580:	d113      	bne.n	80065aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	4b34      	ldr	r3, [pc, #208]	@ (8006658 <tcp_input+0x4a0>)
 8006588:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800658a:	429a      	cmp	r2, r3
 800658c:	d10d      	bne.n	80065aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b31      	ldr	r3, [pc, #196]	@ (8006658 <tcp_input+0x4a0>)
 8006594:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006596:	429a      	cmp	r2, r3
 8006598:	d107      	bne.n	80065aa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800659a:	69f8      	ldr	r0, [r7, #28]
 800659c:	f000 fb56 	bl	8006c4c <tcp_timewait_input>
        }
        pbuf_free(p);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7fd ffdf 	bl	8004564 <pbuf_free>
        return;
 80065a6:	e1fd      	b.n	80069a4 <tcp_input+0x7ec>
        continue;
 80065a8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1bc      	bne.n	8006530 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80065b6:	2300      	movs	r3, #0
 80065b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80065ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006678 <tcp_input+0x4c0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e02a      	b.n	8006618 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	7a1b      	ldrb	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	7a1a      	ldrb	r2, [r3, #8]
 80065ce:	4b22      	ldr	r3, [pc, #136]	@ (8006658 <tcp_input+0x4a0>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065d6:	3301      	adds	r3, #1
 80065d8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80065da:	429a      	cmp	r2, r3
 80065dc:	d002      	beq.n	80065e4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	61bb      	str	r3, [r7, #24]
        continue;
 80065e2:	e016      	b.n	8006612 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	8ada      	ldrh	r2, [r3, #22]
 80065e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006654 <tcp_input+0x49c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	885b      	ldrh	r3, [r3, #2]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d10c      	bne.n	800660e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	4b17      	ldr	r3, [pc, #92]	@ (8006658 <tcp_input+0x4a0>)
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d00f      	beq.n	8006620 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00d      	beq.n	8006622 <tcp_input+0x46a>
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1d1      	bne.n	80065c2 <tcp_input+0x40a>
 800661e:	e000      	b.n	8006622 <tcp_input+0x46a>
            break;
 8006620:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d029      	beq.n	800667c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006636:	4b10      	ldr	r3, [pc, #64]	@ (8006678 <tcp_input+0x4c0>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800663e:	4a0e      	ldr	r2, [pc, #56]	@ (8006678 <tcp_input+0x4c0>)
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006644:	6978      	ldr	r0, [r7, #20]
 8006646:	f000 fa03 	bl	8006a50 <tcp_listen_input>
      }
      pbuf_free(p);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7fd ff8a 	bl	8004564 <pbuf_free>
      return;
 8006650:	e1a8      	b.n	80069a4 <tcp_input+0x7ec>
 8006652:	bf00      	nop
 8006654:	20008280 	.word	0x20008280
 8006658:	20004ce8 	.word	0x20004ce8
 800665c:	0800ea3c 	.word	0x0800ea3c
 8006660:	0800eb68 	.word	0x0800eb68
 8006664:	0800ea88 	.word	0x0800ea88
 8006668:	20008264 	.word	0x20008264
 800666c:	0800eb94 	.word	0x0800eb94
 8006670:	20008268 	.word	0x20008268
 8006674:	0800ebc0 	.word	0x0800ebc0
 8006678:	20008260 	.word	0x20008260
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 8158 	beq.w	8006934 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006684:	4b95      	ldr	r3, [pc, #596]	@ (80068dc <tcp_input+0x724>)
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	891a      	ldrh	r2, [r3, #8]
 800668e:	4b93      	ldr	r3, [pc, #588]	@ (80068dc <tcp_input+0x724>)
 8006690:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006692:	4a92      	ldr	r2, [pc, #584]	@ (80068dc <tcp_input+0x724>)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006698:	4b91      	ldr	r3, [pc, #580]	@ (80068e0 <tcp_input+0x728>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a8f      	ldr	r2, [pc, #572]	@ (80068dc <tcp_input+0x724>)
 800669e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80066a0:	4b90      	ldr	r3, [pc, #576]	@ (80068e4 <tcp_input+0x72c>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80066a6:	4b90      	ldr	r3, [pc, #576]	@ (80068e8 <tcp_input+0x730>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80066ac:	4b8f      	ldr	r3, [pc, #572]	@ (80068ec <tcp_input+0x734>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80066b2:	4b8f      	ldr	r3, [pc, #572]	@ (80068f0 <tcp_input+0x738>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d006      	beq.n	80066cc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7b5b      	ldrb	r3, [r3, #13]
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d017      	beq.n	8006704 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80066d4:	69f8      	ldr	r0, [r7, #28]
 80066d6:	f7ff f929 	bl	800592c <tcp_process_refused_data>
 80066da:	4603      	mov	r3, r0
 80066dc:	f113 0f0d 	cmn.w	r3, #13
 80066e0:	d007      	beq.n	80066f2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00c      	beq.n	8006704 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80066ea:	4b82      	ldr	r3, [pc, #520]	@ (80068f4 <tcp_input+0x73c>)
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d008      	beq.n	8006704 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f040 80e3 	bne.w	80068c2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80066fc:	69f8      	ldr	r0, [r7, #28]
 80066fe:	f003 f9a7 	bl	8009a50 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006702:	e0de      	b.n	80068c2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8006704:	4a7c      	ldr	r2, [pc, #496]	@ (80068f8 <tcp_input+0x740>)
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800670a:	69f8      	ldr	r0, [r7, #28]
 800670c:	f000 fb18 	bl	8006d40 <tcp_process>
 8006710:	4603      	mov	r3, r0
 8006712:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006714:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006718:	f113 0f0d 	cmn.w	r3, #13
 800671c:	f000 80d3 	beq.w	80068c6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8006720:	4b71      	ldr	r3, [pc, #452]	@ (80068e8 <tcp_input+0x730>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	f003 0308 	and.w	r3, r3, #8
 8006728:	2b00      	cmp	r3, #0
 800672a:	d015      	beq.n	8006758 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006732:	2b00      	cmp	r3, #0
 8006734:	d008      	beq.n	8006748 <tcp_input+0x590>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	6912      	ldr	r2, [r2, #16]
 8006740:	f06f 010d 	mvn.w	r1, #13
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006748:	69f9      	ldr	r1, [r7, #28]
 800674a:	486c      	ldr	r0, [pc, #432]	@ (80068fc <tcp_input+0x744>)
 800674c:	f7ff fbbc 	bl	8005ec8 <tcp_pcb_remove>
        tcp_free(pcb);
 8006750:	69f8      	ldr	r0, [r7, #28]
 8006752:	f7fe f9a7 	bl	8004aa4 <tcp_free>
 8006756:	e0da      	b.n	800690e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800675c:	4b63      	ldr	r3, [pc, #396]	@ (80068ec <tcp_input+0x734>)
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01d      	beq.n	80067a0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006764:	4b61      	ldr	r3, [pc, #388]	@ (80068ec <tcp_input+0x734>)
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <tcp_input+0x5d2>
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	6910      	ldr	r0, [r2, #16]
 800677e:	89fa      	ldrh	r2, [r7, #14]
 8006780:	69f9      	ldr	r1, [r7, #28]
 8006782:	4798      	blx	r3
 8006784:	4603      	mov	r3, r0
 8006786:	74fb      	strb	r3, [r7, #19]
 8006788:	e001      	b.n	800678e <tcp_input+0x5d6>
 800678a:	2300      	movs	r3, #0
 800678c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800678e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006792:	f113 0f0d 	cmn.w	r3, #13
 8006796:	f000 8098 	beq.w	80068ca <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800679a:	4b54      	ldr	r3, [pc, #336]	@ (80068ec <tcp_input+0x734>)
 800679c:	2200      	movs	r2, #0
 800679e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80067a0:	69f8      	ldr	r0, [r7, #28]
 80067a2:	f000 f915 	bl	80069d0 <tcp_input_delayed_close>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f040 8090 	bne.w	80068ce <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80067ae:	4b4d      	ldr	r3, [pc, #308]	@ (80068e4 <tcp_input+0x72c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d041      	beq.n	800683a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d006      	beq.n	80067cc <tcp_input+0x614>
 80067be:	4b50      	ldr	r3, [pc, #320]	@ (8006900 <tcp_input+0x748>)
 80067c0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80067c4:	494f      	ldr	r1, [pc, #316]	@ (8006904 <tcp_input+0x74c>)
 80067c6:	4850      	ldr	r0, [pc, #320]	@ (8006908 <tcp_input+0x750>)
 80067c8:	f006 f90a 	bl	800c9e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	8b5b      	ldrh	r3, [r3, #26]
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80067d8:	4b42      	ldr	r3, [pc, #264]	@ (80068e4 <tcp_input+0x72c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fd fec1 	bl	8004564 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80067e2:	69f8      	ldr	r0, [r7, #28]
 80067e4:	f7fe fc46 	bl	8005074 <tcp_abort>
            goto aborted;
 80067e8:	e091      	b.n	800690e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00c      	beq.n	800680e <tcp_input+0x656>
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	6918      	ldr	r0, [r3, #16]
 80067fe:	4b39      	ldr	r3, [pc, #228]	@ (80068e4 <tcp_input+0x72c>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	69f9      	ldr	r1, [r7, #28]
 8006806:	47a0      	blx	r4
 8006808:	4603      	mov	r3, r0
 800680a:	74fb      	strb	r3, [r7, #19]
 800680c:	e008      	b.n	8006820 <tcp_input+0x668>
 800680e:	4b35      	ldr	r3, [pc, #212]	@ (80068e4 <tcp_input+0x72c>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	2300      	movs	r3, #0
 8006814:	69f9      	ldr	r1, [r7, #28]
 8006816:	2000      	movs	r0, #0
 8006818:	f7ff f95e 	bl	8005ad8 <tcp_recv_null>
 800681c:	4603      	mov	r3, r0
 800681e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006820:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006824:	f113 0f0d 	cmn.w	r3, #13
 8006828:	d053      	beq.n	80068d2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800682a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006832:	4b2c      	ldr	r3, [pc, #176]	@ (80068e4 <tcp_input+0x72c>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800683a:	4b2b      	ldr	r3, [pc, #172]	@ (80068e8 <tcp_input+0x730>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d030      	beq.n	80068a8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006852:	7b5a      	ldrb	r2, [r3, #13]
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006858:	f042 0220 	orr.w	r2, r2, #32
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	735a      	strb	r2, [r3, #13]
 8006860:	e022      	b.n	80068a8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006866:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800686a:	d005      	beq.n	8006878 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006870:	3301      	adds	r3, #1
 8006872:	b29a      	uxth	r2, r3
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00b      	beq.n	800689a <tcp_input+0x6e2>
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	6918      	ldr	r0, [r3, #16]
 800688c:	2300      	movs	r3, #0
 800688e:	2200      	movs	r2, #0
 8006890:	69f9      	ldr	r1, [r7, #28]
 8006892:	47a0      	blx	r4
 8006894:	4603      	mov	r3, r0
 8006896:	74fb      	strb	r3, [r7, #19]
 8006898:	e001      	b.n	800689e <tcp_input+0x6e6>
 800689a:	2300      	movs	r3, #0
 800689c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800689e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80068a2:	f113 0f0d 	cmn.w	r3, #13
 80068a6:	d016      	beq.n	80068d6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80068a8:	4b13      	ldr	r3, [pc, #76]	@ (80068f8 <tcp_input+0x740>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80068ae:	69f8      	ldr	r0, [r7, #28]
 80068b0:	f000 f88e 	bl	80069d0 <tcp_input_delayed_close>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d128      	bne.n	800690c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80068ba:	69f8      	ldr	r0, [r7, #28]
 80068bc:	f002 fac2 	bl	8008e44 <tcp_output>
 80068c0:	e025      	b.n	800690e <tcp_input+0x756>
        goto aborted;
 80068c2:	bf00      	nop
 80068c4:	e023      	b.n	800690e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80068c6:	bf00      	nop
 80068c8:	e021      	b.n	800690e <tcp_input+0x756>
              goto aborted;
 80068ca:	bf00      	nop
 80068cc:	e01f      	b.n	800690e <tcp_input+0x756>
          goto aborted;
 80068ce:	bf00      	nop
 80068d0:	e01d      	b.n	800690e <tcp_input+0x756>
            goto aborted;
 80068d2:	bf00      	nop
 80068d4:	e01b      	b.n	800690e <tcp_input+0x756>
              goto aborted;
 80068d6:	bf00      	nop
 80068d8:	e019      	b.n	800690e <tcp_input+0x756>
 80068da:	bf00      	nop
 80068dc:	20008270 	.word	0x20008270
 80068e0:	20008280 	.word	0x20008280
 80068e4:	200082a0 	.word	0x200082a0
 80068e8:	2000829d 	.word	0x2000829d
 80068ec:	20008298 	.word	0x20008298
 80068f0:	2000829c 	.word	0x2000829c
 80068f4:	2000829a 	.word	0x2000829a
 80068f8:	200082a4 	.word	0x200082a4
 80068fc:	20008264 	.word	0x20008264
 8006900:	0800ea3c 	.word	0x0800ea3c
 8006904:	0800ebf0 	.word	0x0800ebf0
 8006908:	0800ea88 	.word	0x0800ea88
          goto aborted;
 800690c:	bf00      	nop
    tcp_input_pcb = NULL;
 800690e:	4b27      	ldr	r3, [pc, #156]	@ (80069ac <tcp_input+0x7f4>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006914:	4b26      	ldr	r3, [pc, #152]	@ (80069b0 <tcp_input+0x7f8>)
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800691a:	4b26      	ldr	r3, [pc, #152]	@ (80069b4 <tcp_input+0x7fc>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d03f      	beq.n	80069a2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8006922:	4b24      	ldr	r3, [pc, #144]	@ (80069b4 <tcp_input+0x7fc>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd fe1c 	bl	8004564 <pbuf_free>
      inseg.p = NULL;
 800692c:	4b21      	ldr	r3, [pc, #132]	@ (80069b4 <tcp_input+0x7fc>)
 800692e:	2200      	movs	r2, #0
 8006930:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006932:	e036      	b.n	80069a2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006934:	4b20      	ldr	r3, [pc, #128]	@ (80069b8 <tcp_input+0x800>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	899b      	ldrh	r3, [r3, #12]
 800693a:	b29b      	uxth	r3, r3
 800693c:	4618      	mov	r0, r3
 800693e:	f7fc fb9a 	bl	8003076 <lwip_htons>
 8006942:	4603      	mov	r3, r0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d118      	bne.n	8006980 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800694e:	4b1b      	ldr	r3, [pc, #108]	@ (80069bc <tcp_input+0x804>)
 8006950:	6819      	ldr	r1, [r3, #0]
 8006952:	4b1b      	ldr	r3, [pc, #108]	@ (80069c0 <tcp_input+0x808>)
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	4b1a      	ldr	r3, [pc, #104]	@ (80069c4 <tcp_input+0x80c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800695e:	4b16      	ldr	r3, [pc, #88]	@ (80069b8 <tcp_input+0x800>)
 8006960:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006962:	885b      	ldrh	r3, [r3, #2]
 8006964:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006966:	4a14      	ldr	r2, [pc, #80]	@ (80069b8 <tcp_input+0x800>)
 8006968:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800696a:	8812      	ldrh	r2, [r2, #0]
 800696c:	b292      	uxth	r2, r2
 800696e:	9202      	str	r2, [sp, #8]
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	4b15      	ldr	r3, [pc, #84]	@ (80069c8 <tcp_input+0x810>)
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	4b15      	ldr	r3, [pc, #84]	@ (80069cc <tcp_input+0x814>)
 8006978:	4602      	mov	r2, r0
 800697a:	2000      	movs	r0, #0
 800697c:	f003 f816 	bl	80099ac <tcp_rst>
    pbuf_free(p);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7fd fdef 	bl	8004564 <pbuf_free>
  return;
 8006986:	e00c      	b.n	80069a2 <tcp_input+0x7ea>
    goto dropped;
 8006988:	bf00      	nop
 800698a:	e006      	b.n	800699a <tcp_input+0x7e2>
    goto dropped;
 800698c:	bf00      	nop
 800698e:	e004      	b.n	800699a <tcp_input+0x7e2>
    goto dropped;
 8006990:	bf00      	nop
 8006992:	e002      	b.n	800699a <tcp_input+0x7e2>
      goto dropped;
 8006994:	bf00      	nop
 8006996:	e000      	b.n	800699a <tcp_input+0x7e2>
      goto dropped;
 8006998:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fd fde2 	bl	8004564 <pbuf_free>
 80069a0:	e000      	b.n	80069a4 <tcp_input+0x7ec>
  return;
 80069a2:	bf00      	nop
}
 80069a4:	3724      	adds	r7, #36	@ 0x24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd90      	pop	{r4, r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200082a4 	.word	0x200082a4
 80069b0:	200082a0 	.word	0x200082a0
 80069b4:	20008270 	.word	0x20008270
 80069b8:	20008280 	.word	0x20008280
 80069bc:	20008294 	.word	0x20008294
 80069c0:	2000829a 	.word	0x2000829a
 80069c4:	20008290 	.word	0x20008290
 80069c8:	20004cf8 	.word	0x20004cf8
 80069cc:	20004cfc 	.word	0x20004cfc

080069d0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <tcp_input_delayed_close+0x1c>
 80069de:	4b17      	ldr	r3, [pc, #92]	@ (8006a3c <tcp_input_delayed_close+0x6c>)
 80069e0:	f240 225a 	movw	r2, #602	@ 0x25a
 80069e4:	4916      	ldr	r1, [pc, #88]	@ (8006a40 <tcp_input_delayed_close+0x70>)
 80069e6:	4817      	ldr	r0, [pc, #92]	@ (8006a44 <tcp_input_delayed_close+0x74>)
 80069e8:	f005 fffa 	bl	800c9e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80069ec:	4b16      	ldr	r3, [pc, #88]	@ (8006a48 <tcp_input_delayed_close+0x78>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01c      	beq.n	8006a32 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8b5b      	ldrh	r3, [r3, #26]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10d      	bne.n	8006a20 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d008      	beq.n	8006a20 <tcp_input_delayed_close+0x50>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6912      	ldr	r2, [r2, #16]
 8006a18:	f06f 010e 	mvn.w	r1, #14
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	480a      	ldr	r0, [pc, #40]	@ (8006a4c <tcp_input_delayed_close+0x7c>)
 8006a24:	f7ff fa50 	bl	8005ec8 <tcp_pcb_remove>
    tcp_free(pcb);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fe f83b 	bl	8004aa4 <tcp_free>
    return 1;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	0800ea3c 	.word	0x0800ea3c
 8006a40:	0800ec0c 	.word	0x0800ec0c
 8006a44:	0800ea88 	.word	0x0800ea88
 8006a48:	2000829d 	.word	0x2000829d
 8006a4c:	20008264 	.word	0x20008264

08006a50 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b08b      	sub	sp, #44	@ 0x2c
 8006a54:	af04      	add	r7, sp, #16
 8006a56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006a58:	4b6f      	ldr	r3, [pc, #444]	@ (8006c18 <tcp_listen_input+0x1c8>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f040 80d2 	bne.w	8006c0a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d106      	bne.n	8006a7a <tcp_listen_input+0x2a>
 8006a6c:	4b6b      	ldr	r3, [pc, #428]	@ (8006c1c <tcp_listen_input+0x1cc>)
 8006a6e:	f240 2281 	movw	r2, #641	@ 0x281
 8006a72:	496b      	ldr	r1, [pc, #428]	@ (8006c20 <tcp_listen_input+0x1d0>)
 8006a74:	486b      	ldr	r0, [pc, #428]	@ (8006c24 <tcp_listen_input+0x1d4>)
 8006a76:	f005 ffb3 	bl	800c9e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8006a7a:	4b67      	ldr	r3, [pc, #412]	@ (8006c18 <tcp_listen_input+0x1c8>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d019      	beq.n	8006aba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006a86:	4b68      	ldr	r3, [pc, #416]	@ (8006c28 <tcp_listen_input+0x1d8>)
 8006a88:	6819      	ldr	r1, [r3, #0]
 8006a8a:	4b68      	ldr	r3, [pc, #416]	@ (8006c2c <tcp_listen_input+0x1dc>)
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	4b67      	ldr	r3, [pc, #412]	@ (8006c30 <tcp_listen_input+0x1e0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006a96:	4b67      	ldr	r3, [pc, #412]	@ (8006c34 <tcp_listen_input+0x1e4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006a9a:	885b      	ldrh	r3, [r3, #2]
 8006a9c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006a9e:	4a65      	ldr	r2, [pc, #404]	@ (8006c34 <tcp_listen_input+0x1e4>)
 8006aa0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006aa2:	8812      	ldrh	r2, [r2, #0]
 8006aa4:	b292      	uxth	r2, r2
 8006aa6:	9202      	str	r2, [sp, #8]
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	4b63      	ldr	r3, [pc, #396]	@ (8006c38 <tcp_listen_input+0x1e8>)
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	4b63      	ldr	r3, [pc, #396]	@ (8006c3c <tcp_listen_input+0x1ec>)
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f002 ff7a 	bl	80099ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8006ab8:	e0a9      	b.n	8006c0e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8006aba:	4b57      	ldr	r3, [pc, #348]	@ (8006c18 <tcp_listen_input+0x1c8>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 80a3 	beq.w	8006c0e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	7d5b      	ldrb	r3, [r3, #21]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7ff f927 	bl	8005d20 <tcp_alloc>
 8006ad2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d111      	bne.n	8006afe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <tcp_listen_input+0xa8>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6910      	ldr	r0, [r2, #16]
 8006aea:	f04f 32ff 	mov.w	r2, #4294967295
 8006aee:	2100      	movs	r1, #0
 8006af0:	4798      	blx	r3
 8006af2:	4603      	mov	r3, r0
 8006af4:	73bb      	strb	r3, [r7, #14]
      return;
 8006af6:	e08b      	b.n	8006c10 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006af8:	23f0      	movs	r3, #240	@ 0xf0
 8006afa:	73bb      	strb	r3, [r7, #14]
      return;
 8006afc:	e088      	b.n	8006c10 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006afe:	4b50      	ldr	r3, [pc, #320]	@ (8006c40 <tcp_listen_input+0x1f0>)
 8006b00:	695a      	ldr	r2, [r3, #20]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006b06:	4b4e      	ldr	r3, [pc, #312]	@ (8006c40 <tcp_listen_input+0x1f0>)
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	8ada      	ldrh	r2, [r3, #22]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006b16:	4b47      	ldr	r3, [pc, #284]	@ (8006c34 <tcp_listen_input+0x1e4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29a      	uxth	r2, r3
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2203      	movs	r2, #3
 8006b26:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006b28:	4b41      	ldr	r3, [pc, #260]	@ (8006c30 <tcp_listen_input+0x1e0>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8006b3a:	6978      	ldr	r0, [r7, #20]
 8006b3c:	f7ff fa58 	bl	8005ff0 <tcp_next_iss>
 8006b40:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006b5a:	4b35      	ldr	r3, [pc, #212]	@ (8006c30 <tcp_listen_input+0x1e0>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	1e5a      	subs	r2, r3, #1
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	7a5b      	ldrb	r3, [r3, #9]
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	7a1a      	ldrb	r2, [r3, #8]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8006b88:	4b2e      	ldr	r3, [pc, #184]	@ (8006c44 <tcp_listen_input+0x1f4>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	60da      	str	r2, [r3, #12]
 8006b90:	4a2c      	ldr	r2, [pc, #176]	@ (8006c44 <tcp_listen_input+0x1f4>)
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	f003 f8cb 	bl	8009d30 <tcp_timer_needed>
 8006b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c48 <tcp_listen_input+0x1f8>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006ba0:	6978      	ldr	r0, [r7, #20]
 8006ba2:	f001 fd8b 	bl	80086bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8006ba6:	4b23      	ldr	r3, [pc, #140]	@ (8006c34 <tcp_listen_input+0x1e4>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	89db      	ldrh	r3, [r3, #14]
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f004 fc1d 	bl	800b408 <ip4_route>
 8006bce:	4601      	mov	r1, r0
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f7ff fa30 	bl	800603c <tcp_eff_send_mss_netif>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006be4:	2112      	movs	r1, #18
 8006be6:	6978      	ldr	r0, [r7, #20]
 8006be8:	f002 f83e 	bl	8008c68 <tcp_enqueue_flags>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8006bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d004      	beq.n	8006c02 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	6978      	ldr	r0, [r7, #20]
 8006bfc:	f7fe f97c 	bl	8004ef8 <tcp_abandon>
      return;
 8006c00:	e006      	b.n	8006c10 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8006c02:	6978      	ldr	r0, [r7, #20]
 8006c04:	f002 f91e 	bl	8008e44 <tcp_output>
  return;
 8006c08:	e001      	b.n	8006c0e <tcp_listen_input+0x1be>
    return;
 8006c0a:	bf00      	nop
 8006c0c:	e000      	b.n	8006c10 <tcp_listen_input+0x1c0>
  return;
 8006c0e:	bf00      	nop
}
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd90      	pop	{r4, r7, pc}
 8006c16:	bf00      	nop
 8006c18:	2000829c 	.word	0x2000829c
 8006c1c:	0800ea3c 	.word	0x0800ea3c
 8006c20:	0800ec34 	.word	0x0800ec34
 8006c24:	0800ea88 	.word	0x0800ea88
 8006c28:	20008294 	.word	0x20008294
 8006c2c:	2000829a 	.word	0x2000829a
 8006c30:	20008290 	.word	0x20008290
 8006c34:	20008280 	.word	0x20008280
 8006c38:	20004cf8 	.word	0x20004cf8
 8006c3c:	20004cfc 	.word	0x20004cfc
 8006c40:	20004ce8 	.word	0x20004ce8
 8006c44:	20008264 	.word	0x20008264
 8006c48:	2000826c 	.word	0x2000826c

08006c4c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af04      	add	r7, sp, #16
 8006c52:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006c54:	4b2f      	ldr	r3, [pc, #188]	@ (8006d14 <tcp_timewait_input+0xc8>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d153      	bne.n	8006d08 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <tcp_timewait_input+0x28>
 8006c66:	4b2c      	ldr	r3, [pc, #176]	@ (8006d18 <tcp_timewait_input+0xcc>)
 8006c68:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8006c6c:	492b      	ldr	r1, [pc, #172]	@ (8006d1c <tcp_timewait_input+0xd0>)
 8006c6e:	482c      	ldr	r0, [pc, #176]	@ (8006d20 <tcp_timewait_input+0xd4>)
 8006c70:	f005 feb6 	bl	800c9e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8006c74:	4b27      	ldr	r3, [pc, #156]	@ (8006d14 <tcp_timewait_input+0xc8>)
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d02a      	beq.n	8006cd6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8006c80:	4b28      	ldr	r3, [pc, #160]	@ (8006d24 <tcp_timewait_input+0xd8>)
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	db2d      	blt.n	8006cea <tcp_timewait_input+0x9e>
 8006c8e:	4b25      	ldr	r3, [pc, #148]	@ (8006d24 <tcp_timewait_input+0xd8>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8006c9a:	440b      	add	r3, r1
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	dc23      	bgt.n	8006cea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ca2:	4b21      	ldr	r3, [pc, #132]	@ (8006d28 <tcp_timewait_input+0xdc>)
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	4b21      	ldr	r3, [pc, #132]	@ (8006d2c <tcp_timewait_input+0xe0>)
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	4b1d      	ldr	r3, [pc, #116]	@ (8006d24 <tcp_timewait_input+0xd8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8006d30 <tcp_timewait_input+0xe4>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006cb6:	885b      	ldrh	r3, [r3, #2]
 8006cb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006cba:	4a1d      	ldr	r2, [pc, #116]	@ (8006d30 <tcp_timewait_input+0xe4>)
 8006cbc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006cbe:	8812      	ldrh	r2, [r2, #0]
 8006cc0:	b292      	uxth	r2, r2
 8006cc2:	9202      	str	r2, [sp, #8]
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d34 <tcp_timewait_input+0xe8>)
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <tcp_timewait_input+0xec>)
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f002 fe6c 	bl	80099ac <tcp_rst>
      return;
 8006cd4:	e01b      	b.n	8006d0e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d14 <tcp_timewait_input+0xc8>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8006ce2:	4b16      	ldr	r3, [pc, #88]	@ (8006d3c <tcp_timewait_input+0xf0>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8006cea:	4b10      	ldr	r3, [pc, #64]	@ (8006d2c <tcp_timewait_input+0xe0>)
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00c      	beq.n	8006d0c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8b5b      	ldrh	r3, [r3, #26]
 8006cf6:	f043 0302 	orr.w	r3, r3, #2
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f002 f89f 	bl	8008e44 <tcp_output>
  }
  return;
 8006d06:	e001      	b.n	8006d0c <tcp_timewait_input+0xc0>
    return;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <tcp_timewait_input+0xc2>
  return;
 8006d0c:	bf00      	nop
}
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	2000829c 	.word	0x2000829c
 8006d18:	0800ea3c 	.word	0x0800ea3c
 8006d1c:	0800ec54 	.word	0x0800ec54
 8006d20:	0800ea88 	.word	0x0800ea88
 8006d24:	20008290 	.word	0x20008290
 8006d28:	20008294 	.word	0x20008294
 8006d2c:	2000829a 	.word	0x2000829a
 8006d30:	20008280 	.word	0x20008280
 8006d34:	20004cf8 	.word	0x20004cf8
 8006d38:	20004cfc 	.word	0x20004cfc
 8006d3c:	20008258 	.word	0x20008258

08006d40 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8006d40:	b590      	push	{r4, r7, lr}
 8006d42:	b08d      	sub	sp, #52	@ 0x34
 8006d44:	af04      	add	r7, sp, #16
 8006d46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <tcp_process+0x24>
 8006d56:	4b9d      	ldr	r3, [pc, #628]	@ (8006fcc <tcp_process+0x28c>)
 8006d58:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8006d5c:	499c      	ldr	r1, [pc, #624]	@ (8006fd0 <tcp_process+0x290>)
 8006d5e:	489d      	ldr	r0, [pc, #628]	@ (8006fd4 <tcp_process+0x294>)
 8006d60:	f005 fe3e 	bl	800c9e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8006d64:	4b9c      	ldr	r3, [pc, #624]	@ (8006fd8 <tcp_process+0x298>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d04e      	beq.n	8006e0e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	7d1b      	ldrb	r3, [r3, #20]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d108      	bne.n	8006d8a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d7c:	4b97      	ldr	r3, [pc, #604]	@ (8006fdc <tcp_process+0x29c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d123      	bne.n	8006dcc <tcp_process+0x8c>
        acceptable = 1;
 8006d84:	2301      	movs	r3, #1
 8006d86:	76fb      	strb	r3, [r7, #27]
 8006d88:	e020      	b.n	8006dcc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d8e:	4b94      	ldr	r3, [pc, #592]	@ (8006fe0 <tcp_process+0x2a0>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d102      	bne.n	8006d9c <tcp_process+0x5c>
        acceptable = 1;
 8006d96:	2301      	movs	r3, #1
 8006d98:	76fb      	strb	r3, [r7, #27]
 8006d9a:	e017      	b.n	8006dcc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006d9c:	4b90      	ldr	r3, [pc, #576]	@ (8006fe0 <tcp_process+0x2a0>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	db10      	blt.n	8006dcc <tcp_process+0x8c>
 8006daa:	4b8d      	ldr	r3, [pc, #564]	@ (8006fe0 <tcp_process+0x2a0>)
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8006db6:	440b      	add	r3, r1
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	dc06      	bgt.n	8006dcc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	8b5b      	ldrh	r3, [r3, #26]
 8006dc2:	f043 0302 	orr.w	r3, r3, #2
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8006dcc:	7efb      	ldrb	r3, [r7, #27]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01b      	beq.n	8006e0a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7d1b      	ldrb	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <tcp_process+0xa8>
 8006dda:	4b7c      	ldr	r3, [pc, #496]	@ (8006fcc <tcp_process+0x28c>)
 8006ddc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8006de0:	4980      	ldr	r1, [pc, #512]	@ (8006fe4 <tcp_process+0x2a4>)
 8006de2:	487c      	ldr	r0, [pc, #496]	@ (8006fd4 <tcp_process+0x294>)
 8006de4:	f005 fdfc 	bl	800c9e0 <iprintf>
      recv_flags |= TF_RESET;
 8006de8:	4b7f      	ldr	r3, [pc, #508]	@ (8006fe8 <tcp_process+0x2a8>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f043 0308 	orr.w	r3, r3, #8
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	4b7d      	ldr	r3, [pc, #500]	@ (8006fe8 <tcp_process+0x2a8>)
 8006df4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8b5b      	ldrh	r3, [r3, #26]
 8006dfa:	f023 0301 	bic.w	r3, r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8006e04:	f06f 030d 	mvn.w	r3, #13
 8006e08:	e37a      	b.n	8007500 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e378      	b.n	8007500 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006e0e:	4b72      	ldr	r3, [pc, #456]	@ (8006fd8 <tcp_process+0x298>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d010      	beq.n	8006e3c <tcp_process+0xfc>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7d1b      	ldrb	r3, [r3, #20]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d00c      	beq.n	8006e3c <tcp_process+0xfc>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7d1b      	ldrb	r3, [r3, #20]
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d008      	beq.n	8006e3c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8b5b      	ldrh	r3, [r3, #26]
 8006e2e:	f043 0302 	orr.w	r3, r3, #2
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e361      	b.n	8007500 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	8b5b      	ldrh	r3, [r3, #26]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d103      	bne.n	8006e50 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8006e48:	4b68      	ldr	r3, [pc, #416]	@ (8006fec <tcp_process+0x2ac>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 fc2b 	bl	80086bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	7d1b      	ldrb	r3, [r3, #20]
 8006e6a:	3b02      	subs	r3, #2
 8006e6c:	2b07      	cmp	r3, #7
 8006e6e:	f200 8337 	bhi.w	80074e0 <tcp_process+0x7a0>
 8006e72:	a201      	add	r2, pc, #4	@ (adr r2, 8006e78 <tcp_process+0x138>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e99 	.word	0x08006e99
 8006e7c:	080070c9 	.word	0x080070c9
 8006e80:	08007241 	.word	0x08007241
 8006e84:	0800726b 	.word	0x0800726b
 8006e88:	0800738f 	.word	0x0800738f
 8006e8c:	08007241 	.word	0x08007241
 8006e90:	0800741b 	.word	0x0800741b
 8006e94:	080074ab 	.word	0x080074ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006e98:	4b4f      	ldr	r3, [pc, #316]	@ (8006fd8 <tcp_process+0x298>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 80e4 	beq.w	800706e <tcp_process+0x32e>
 8006ea6:	4b4c      	ldr	r3, [pc, #304]	@ (8006fd8 <tcp_process+0x298>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80dd 	beq.w	800706e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	4b48      	ldr	r3, [pc, #288]	@ (8006fdc <tcp_process+0x29c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	f040 80d5 	bne.w	800706e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8006ec4:	4b46      	ldr	r3, [pc, #280]	@ (8006fe0 <tcp_process+0x2a0>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8006ed6:	4b41      	ldr	r3, [pc, #260]	@ (8006fdc <tcp_process+0x29c>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8006ede:	4b44      	ldr	r3, [pc, #272]	@ (8006ff0 <tcp_process+0x2b0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	89db      	ldrh	r3, [r3, #14]
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006ef8:	4b39      	ldr	r3, [pc, #228]	@ (8006fe0 <tcp_process+0x2a0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	1e5a      	subs	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2204      	movs	r2, #4
 8006f06:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4618      	mov	r0, r3
 8006f12:	f004 fa79 	bl	800b408 <ip4_route>
 8006f16:	4601      	mov	r1, r0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f7ff f88c 	bl	800603c <tcp_eff_send_mss_netif>
 8006f24:	4603      	mov	r3, r0
 8006f26:	461a      	mov	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f30:	009a      	lsls	r2, r3, #2
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	f241 111c 	movw	r1, #4380	@ 0x111c
 8006f3c:	428b      	cmp	r3, r1
 8006f3e:	bf38      	it	cc
 8006f40:	460b      	movcc	r3, r1
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d204      	bcs.n	8006f50 <tcp_process+0x210>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	e00d      	b.n	8006f6c <tcp_process+0x22c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	f241 121c 	movw	r2, #4380	@ 0x111c
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d904      	bls.n	8006f68 <tcp_process+0x228>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	e001      	b.n	8006f6c <tcp_process+0x22c>
 8006f68:	f241 131c 	movw	r3, #4380	@ 0x111c
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <tcp_process+0x24a>
 8006f7c:	4b13      	ldr	r3, [pc, #76]	@ (8006fcc <tcp_process+0x28c>)
 8006f7e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8006f82:	491c      	ldr	r1, [pc, #112]	@ (8006ff4 <tcp_process+0x2b4>)
 8006f84:	4813      	ldr	r0, [pc, #76]	@ (8006fd4 <tcp_process+0x294>)
 8006f86:	f005 fd2b 	bl	800c9e0 <iprintf>
        --pcb->snd_queuelen;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f9e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d12a      	bne.n	8006ffc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006faa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d106      	bne.n	8006fc0 <tcp_process+0x280>
 8006fb2:	4b06      	ldr	r3, [pc, #24]	@ (8006fcc <tcp_process+0x28c>)
 8006fb4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8006fb8:	490f      	ldr	r1, [pc, #60]	@ (8006ff8 <tcp_process+0x2b8>)
 8006fba:	4806      	ldr	r0, [pc, #24]	@ (8006fd4 <tcp_process+0x294>)
 8006fbc:	f005 fd10 	bl	800c9e0 <iprintf>
          pcb->unsent = rseg->next;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006fc8:	e01c      	b.n	8007004 <tcp_process+0x2c4>
 8006fca:	bf00      	nop
 8006fcc:	0800ea3c 	.word	0x0800ea3c
 8006fd0:	0800ec74 	.word	0x0800ec74
 8006fd4:	0800ea88 	.word	0x0800ea88
 8006fd8:	2000829c 	.word	0x2000829c
 8006fdc:	20008294 	.word	0x20008294
 8006fe0:	20008290 	.word	0x20008290
 8006fe4:	0800ec90 	.word	0x0800ec90
 8006fe8:	2000829d 	.word	0x2000829d
 8006fec:	20008258 	.word	0x20008258
 8006ff0:	20008280 	.word	0x20008280
 8006ff4:	0800ecb0 	.word	0x0800ecb0
 8006ff8:	0800ecc8 	.word	0x0800ecc8
        } else {
          pcb->unacked = rseg->next;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8007004:	69f8      	ldr	r0, [r7, #28]
 8007006:	f7fe fd22 	bl	8005a4e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007018:	861a      	strh	r2, [r3, #48]	@ 0x30
 800701a:	e006      	b.n	800702a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00a      	beq.n	800704a <tcp_process+0x30a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6910      	ldr	r0, [r2, #16]
 800703e:	2200      	movs	r2, #0
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4798      	blx	r3
 8007044:	4603      	mov	r3, r0
 8007046:	76bb      	strb	r3, [r7, #26]
 8007048:	e001      	b.n	800704e <tcp_process+0x30e>
 800704a:	2300      	movs	r3, #0
 800704c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800704e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007052:	f113 0f0d 	cmn.w	r3, #13
 8007056:	d102      	bne.n	800705e <tcp_process+0x31e>
          return ERR_ABRT;
 8007058:	f06f 030c 	mvn.w	r3, #12
 800705c:	e250      	b.n	8007500 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	8b5b      	ldrh	r3, [r3, #26]
 8007062:	f043 0302 	orr.w	r3, r3, #2
 8007066:	b29a      	uxth	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800706c:	e23a      	b.n	80074e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800706e:	4b98      	ldr	r3, [pc, #608]	@ (80072d0 <tcp_process+0x590>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 8234 	beq.w	80074e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800707c:	4b95      	ldr	r3, [pc, #596]	@ (80072d4 <tcp_process+0x594>)
 800707e:	6819      	ldr	r1, [r3, #0]
 8007080:	4b95      	ldr	r3, [pc, #596]	@ (80072d8 <tcp_process+0x598>)
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	4b95      	ldr	r3, [pc, #596]	@ (80072dc <tcp_process+0x59c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800708c:	4b94      	ldr	r3, [pc, #592]	@ (80072e0 <tcp_process+0x5a0>)
 800708e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007090:	885b      	ldrh	r3, [r3, #2]
 8007092:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007094:	4a92      	ldr	r2, [pc, #584]	@ (80072e0 <tcp_process+0x5a0>)
 8007096:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007098:	8812      	ldrh	r2, [r2, #0]
 800709a:	b292      	uxth	r2, r2
 800709c:	9202      	str	r2, [sp, #8]
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	4b90      	ldr	r3, [pc, #576]	@ (80072e4 <tcp_process+0x5a4>)
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4b90      	ldr	r3, [pc, #576]	@ (80072e8 <tcp_process+0x5a8>)
 80070a6:	4602      	mov	r2, r0
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f002 fc7f 	bl	80099ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070b4:	2b05      	cmp	r3, #5
 80070b6:	f200 8215 	bhi.w	80074e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f002 fa4b 	bl	800955c <tcp_rexmit_rto>
      break;
 80070c6:	e20d      	b.n	80074e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80070c8:	4b81      	ldr	r3, [pc, #516]	@ (80072d0 <tcp_process+0x590>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80a1 	beq.w	8007218 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80070d6:	4b7f      	ldr	r3, [pc, #508]	@ (80072d4 <tcp_process+0x594>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	db7e      	blt.n	80071e4 <tcp_process+0x4a4>
 80070e6:	4b7b      	ldr	r3, [pc, #492]	@ (80072d4 <tcp_process+0x594>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	dc77      	bgt.n	80071e4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2204      	movs	r2, #4
 80070f8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007102:	23fa      	movs	r3, #250	@ 0xfa
 8007104:	76bb      	strb	r3, [r7, #26]
 8007106:	e01d      	b.n	8007144 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <tcp_process+0x3e0>
 8007112:	4b76      	ldr	r3, [pc, #472]	@ (80072ec <tcp_process+0x5ac>)
 8007114:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8007118:	4975      	ldr	r1, [pc, #468]	@ (80072f0 <tcp_process+0x5b0>)
 800711a:	4876      	ldr	r0, [pc, #472]	@ (80072f4 <tcp_process+0x5b4>)
 800711c:	f005 fc60 	bl	800c9e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <tcp_process+0x400>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6910      	ldr	r0, [r2, #16]
 8007134:	2200      	movs	r2, #0
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4798      	blx	r3
 800713a:	4603      	mov	r3, r0
 800713c:	76bb      	strb	r3, [r7, #26]
 800713e:	e001      	b.n	8007144 <tcp_process+0x404>
 8007140:	23f0      	movs	r3, #240	@ 0xf0
 8007142:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007144:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800714c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007150:	f113 0f0d 	cmn.w	r3, #13
 8007154:	d002      	beq.n	800715c <tcp_process+0x41c>
              tcp_abort(pcb);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7fd ff8c 	bl	8005074 <tcp_abort>
            }
            return ERR_ABRT;
 800715c:	f06f 030c 	mvn.w	r3, #12
 8007160:	e1ce      	b.n	8007500 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fae0 	bl	8007728 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007168:	4b63      	ldr	r3, [pc, #396]	@ (80072f8 <tcp_process+0x5b8>)
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <tcp_process+0x43c>
            recv_acked--;
 8007170:	4b61      	ldr	r3, [pc, #388]	@ (80072f8 <tcp_process+0x5b8>)
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	4b5f      	ldr	r3, [pc, #380]	@ (80072f8 <tcp_process+0x5b8>)
 800717a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007180:	009a      	lsls	r2, r3, #2
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	f241 111c 	movw	r1, #4380	@ 0x111c
 800718c:	428b      	cmp	r3, r1
 800718e:	bf38      	it	cc
 8007190:	460b      	movcc	r3, r1
 8007192:	429a      	cmp	r2, r3
 8007194:	d204      	bcs.n	80071a0 <tcp_process+0x460>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	b29b      	uxth	r3, r3
 800719e:	e00d      	b.n	80071bc <tcp_process+0x47c>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d904      	bls.n	80071b8 <tcp_process+0x478>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	e001      	b.n	80071bc <tcp_process+0x47c>
 80071b8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80071c2:	4b4e      	ldr	r3, [pc, #312]	@ (80072fc <tcp_process+0x5bc>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d037      	beq.n	800723e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	8b5b      	ldrh	r3, [r3, #26]
 80071d2:	f043 0302 	orr.w	r3, r3, #2
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2207      	movs	r2, #7
 80071e0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80071e2:	e02c      	b.n	800723e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80071e4:	4b3b      	ldr	r3, [pc, #236]	@ (80072d4 <tcp_process+0x594>)
 80071e6:	6819      	ldr	r1, [r3, #0]
 80071e8:	4b3b      	ldr	r3, [pc, #236]	@ (80072d8 <tcp_process+0x598>)
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	461a      	mov	r2, r3
 80071ee:	4b3b      	ldr	r3, [pc, #236]	@ (80072dc <tcp_process+0x59c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80071f4:	4b3a      	ldr	r3, [pc, #232]	@ (80072e0 <tcp_process+0x5a0>)
 80071f6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80071f8:	885b      	ldrh	r3, [r3, #2]
 80071fa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80071fc:	4a38      	ldr	r2, [pc, #224]	@ (80072e0 <tcp_process+0x5a0>)
 80071fe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007200:	8812      	ldrh	r2, [r2, #0]
 8007202:	b292      	uxth	r2, r2
 8007204:	9202      	str	r2, [sp, #8]
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	4b36      	ldr	r3, [pc, #216]	@ (80072e4 <tcp_process+0x5a4>)
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	4b36      	ldr	r3, [pc, #216]	@ (80072e8 <tcp_process+0x5a8>)
 800720e:	4602      	mov	r2, r0
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f002 fbcb 	bl	80099ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007216:	e167      	b.n	80074e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007218:	4b2d      	ldr	r3, [pc, #180]	@ (80072d0 <tcp_process+0x590>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 8161 	beq.w	80074e8 <tcp_process+0x7a8>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722a:	1e5a      	subs	r2, r3, #1
 800722c:	4b2b      	ldr	r3, [pc, #172]	@ (80072dc <tcp_process+0x59c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	429a      	cmp	r2, r3
 8007232:	f040 8159 	bne.w	80074e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f002 f9b2 	bl	80095a0 <tcp_rexmit>
      break;
 800723c:	e154      	b.n	80074e8 <tcp_process+0x7a8>
 800723e:	e153      	b.n	80074e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa71 	bl	8007728 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007246:	4b2d      	ldr	r3, [pc, #180]	@ (80072fc <tcp_process+0x5bc>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 814c 	beq.w	80074ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8b5b      	ldrh	r3, [r3, #26]
 8007258:	f043 0302 	orr.w	r3, r3, #2
 800725c:	b29a      	uxth	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2207      	movs	r2, #7
 8007266:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007268:	e140      	b.n	80074ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa5c 	bl	8007728 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007270:	4b22      	ldr	r3, [pc, #136]	@ (80072fc <tcp_process+0x5bc>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d071      	beq.n	8007360 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800727c:	4b14      	ldr	r3, [pc, #80]	@ (80072d0 <tcp_process+0x590>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	f003 0310 	and.w	r3, r3, #16
 8007284:	2b00      	cmp	r3, #0
 8007286:	d060      	beq.n	800734a <tcp_process+0x60a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800728c:	4b11      	ldr	r3, [pc, #68]	@ (80072d4 <tcp_process+0x594>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d15a      	bne.n	800734a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007298:	2b00      	cmp	r3, #0
 800729a:	d156      	bne.n	800734a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8b5b      	ldrh	r3, [r3, #26]
 80072a0:	f043 0302 	orr.w	r3, r3, #2
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fe fdbc 	bl	8005e28 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80072b0:	4b13      	ldr	r3, [pc, #76]	@ (8007300 <tcp_process+0x5c0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d105      	bne.n	80072c6 <tcp_process+0x586>
 80072ba:	4b11      	ldr	r3, [pc, #68]	@ (8007300 <tcp_process+0x5c0>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	4a0f      	ldr	r2, [pc, #60]	@ (8007300 <tcp_process+0x5c0>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	e02e      	b.n	8007324 <tcp_process+0x5e4>
 80072c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007300 <tcp_process+0x5c0>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	e027      	b.n	800731e <tcp_process+0x5de>
 80072ce:	bf00      	nop
 80072d0:	2000829c 	.word	0x2000829c
 80072d4:	20008294 	.word	0x20008294
 80072d8:	2000829a 	.word	0x2000829a
 80072dc:	20008290 	.word	0x20008290
 80072e0:	20008280 	.word	0x20008280
 80072e4:	20004cf8 	.word	0x20004cf8
 80072e8:	20004cfc 	.word	0x20004cfc
 80072ec:	0800ea3c 	.word	0x0800ea3c
 80072f0:	0800ecdc 	.word	0x0800ecdc
 80072f4:	0800ea88 	.word	0x0800ea88
 80072f8:	20008298 	.word	0x20008298
 80072fc:	2000829d 	.word	0x2000829d
 8007300:	20008264 	.word	0x20008264
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d104      	bne.n	8007318 <tcp_process+0x5d8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	60da      	str	r2, [r3, #12]
 8007316:	e005      	b.n	8007324 <tcp_process+0x5e4>
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1ef      	bne.n	8007304 <tcp_process+0x5c4>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	60da      	str	r2, [r3, #12]
 800732a:	4b77      	ldr	r3, [pc, #476]	@ (8007508 <tcp_process+0x7c8>)
 800732c:	2201      	movs	r2, #1
 800732e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	220a      	movs	r2, #10
 8007334:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007336:	4b75      	ldr	r3, [pc, #468]	@ (800750c <tcp_process+0x7cc>)
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60da      	str	r2, [r3, #12]
 800733e:	4a73      	ldr	r2, [pc, #460]	@ (800750c <tcp_process+0x7cc>)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	f002 fcf4 	bl	8009d30 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007348:	e0d2      	b.n	80074f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	8b5b      	ldrh	r3, [r3, #26]
 800734e:	f043 0302 	orr.w	r3, r3, #2
 8007352:	b29a      	uxth	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2208      	movs	r2, #8
 800735c:	751a      	strb	r2, [r3, #20]
      break;
 800735e:	e0c7      	b.n	80074f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007360:	4b6b      	ldr	r3, [pc, #428]	@ (8007510 <tcp_process+0x7d0>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	f003 0310 	and.w	r3, r3, #16
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80c1 	beq.w	80074f0 <tcp_process+0x7b0>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007372:	4b68      	ldr	r3, [pc, #416]	@ (8007514 <tcp_process+0x7d4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	f040 80ba 	bne.w	80074f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 80b5 	bne.w	80074f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2206      	movs	r2, #6
 800738a:	751a      	strb	r2, [r3, #20]
      break;
 800738c:	e0b0      	b.n	80074f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9ca 	bl	8007728 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007394:	4b60      	ldr	r3, [pc, #384]	@ (8007518 <tcp_process+0x7d8>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 80a9 	beq.w	80074f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	8b5b      	ldrh	r3, [r3, #26]
 80073a6:	f043 0302 	orr.w	r3, r3, #2
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7fe fd39 	bl	8005e28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80073b6:	4b59      	ldr	r3, [pc, #356]	@ (800751c <tcp_process+0x7dc>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d105      	bne.n	80073cc <tcp_process+0x68c>
 80073c0:	4b56      	ldr	r3, [pc, #344]	@ (800751c <tcp_process+0x7dc>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	4a55      	ldr	r2, [pc, #340]	@ (800751c <tcp_process+0x7dc>)
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	e013      	b.n	80073f4 <tcp_process+0x6b4>
 80073cc:	4b53      	ldr	r3, [pc, #332]	@ (800751c <tcp_process+0x7dc>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	e00c      	b.n	80073ee <tcp_process+0x6ae>
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d104      	bne.n	80073e8 <tcp_process+0x6a8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	60da      	str	r2, [r3, #12]
 80073e6:	e005      	b.n	80073f4 <tcp_process+0x6b4>
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1ef      	bne.n	80073d4 <tcp_process+0x694>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	60da      	str	r2, [r3, #12]
 80073fa:	4b43      	ldr	r3, [pc, #268]	@ (8007508 <tcp_process+0x7c8>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	220a      	movs	r2, #10
 8007404:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007406:	4b41      	ldr	r3, [pc, #260]	@ (800750c <tcp_process+0x7cc>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60da      	str	r2, [r3, #12]
 800740e:	4a3f      	ldr	r2, [pc, #252]	@ (800750c <tcp_process+0x7cc>)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	f002 fc8c 	bl	8009d30 <tcp_timer_needed>
      }
      break;
 8007418:	e06c      	b.n	80074f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f984 	bl	8007728 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007420:	4b3b      	ldr	r3, [pc, #236]	@ (8007510 <tcp_process+0x7d0>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	f003 0310 	and.w	r3, r3, #16
 8007428:	2b00      	cmp	r3, #0
 800742a:	d065      	beq.n	80074f8 <tcp_process+0x7b8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007430:	4b38      	ldr	r3, [pc, #224]	@ (8007514 <tcp_process+0x7d4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d15f      	bne.n	80074f8 <tcp_process+0x7b8>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d15b      	bne.n	80074f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7fe fcf1 	bl	8005e28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007446:	4b35      	ldr	r3, [pc, #212]	@ (800751c <tcp_process+0x7dc>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d105      	bne.n	800745c <tcp_process+0x71c>
 8007450:	4b32      	ldr	r3, [pc, #200]	@ (800751c <tcp_process+0x7dc>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	4a31      	ldr	r2, [pc, #196]	@ (800751c <tcp_process+0x7dc>)
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	e013      	b.n	8007484 <tcp_process+0x744>
 800745c:	4b2f      	ldr	r3, [pc, #188]	@ (800751c <tcp_process+0x7dc>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e00c      	b.n	800747e <tcp_process+0x73e>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	429a      	cmp	r2, r3
 800746c:	d104      	bne.n	8007478 <tcp_process+0x738>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	60da      	str	r2, [r3, #12]
 8007476:	e005      	b.n	8007484 <tcp_process+0x744>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1ef      	bne.n	8007464 <tcp_process+0x724>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	60da      	str	r2, [r3, #12]
 800748a:	4b1f      	ldr	r3, [pc, #124]	@ (8007508 <tcp_process+0x7c8>)
 800748c:	2201      	movs	r2, #1
 800748e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	220a      	movs	r2, #10
 8007494:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007496:	4b1d      	ldr	r3, [pc, #116]	@ (800750c <tcp_process+0x7cc>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60da      	str	r2, [r3, #12]
 800749e:	4a1b      	ldr	r2, [pc, #108]	@ (800750c <tcp_process+0x7cc>)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	f002 fc44 	bl	8009d30 <tcp_timer_needed>
      }
      break;
 80074a8:	e026      	b.n	80074f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f93c 	bl	8007728 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80074b0:	4b17      	ldr	r3, [pc, #92]	@ (8007510 <tcp_process+0x7d0>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d01f      	beq.n	80074fc <tcp_process+0x7bc>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074c0:	4b14      	ldr	r3, [pc, #80]	@ (8007514 <tcp_process+0x7d4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d119      	bne.n	80074fc <tcp_process+0x7bc>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d115      	bne.n	80074fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80074d0:	4b11      	ldr	r3, [pc, #68]	@ (8007518 <tcp_process+0x7d8>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	f043 0310 	orr.w	r3, r3, #16
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	4b0f      	ldr	r3, [pc, #60]	@ (8007518 <tcp_process+0x7d8>)
 80074dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80074de:	e00d      	b.n	80074fc <tcp_process+0x7bc>
    default:
      break;
 80074e0:	bf00      	nop
 80074e2:	e00c      	b.n	80074fe <tcp_process+0x7be>
      break;
 80074e4:	bf00      	nop
 80074e6:	e00a      	b.n	80074fe <tcp_process+0x7be>
      break;
 80074e8:	bf00      	nop
 80074ea:	e008      	b.n	80074fe <tcp_process+0x7be>
      break;
 80074ec:	bf00      	nop
 80074ee:	e006      	b.n	80074fe <tcp_process+0x7be>
      break;
 80074f0:	bf00      	nop
 80074f2:	e004      	b.n	80074fe <tcp_process+0x7be>
      break;
 80074f4:	bf00      	nop
 80074f6:	e002      	b.n	80074fe <tcp_process+0x7be>
      break;
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <tcp_process+0x7be>
      break;
 80074fc:	bf00      	nop
  }
  return ERR_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3724      	adds	r7, #36	@ 0x24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd90      	pop	{r4, r7, pc}
 8007508:	2000826c 	.word	0x2000826c
 800750c:	20008268 	.word	0x20008268
 8007510:	2000829c 	.word	0x2000829c
 8007514:	20008294 	.word	0x20008294
 8007518:	2000829d 	.word	0x2000829d
 800751c:	20008264 	.word	0x20008264

08007520 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007520:	b590      	push	{r4, r7, lr}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d106      	bne.n	800753e <tcp_oos_insert_segment+0x1e>
 8007530:	4b3b      	ldr	r3, [pc, #236]	@ (8007620 <tcp_oos_insert_segment+0x100>)
 8007532:	f240 421f 	movw	r2, #1055	@ 0x41f
 8007536:	493b      	ldr	r1, [pc, #236]	@ (8007624 <tcp_oos_insert_segment+0x104>)
 8007538:	483b      	ldr	r0, [pc, #236]	@ (8007628 <tcp_oos_insert_segment+0x108>)
 800753a:	f005 fa51 	bl	800c9e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	899b      	ldrh	r3, [r3, #12]
 8007544:	b29b      	uxth	r3, r3
 8007546:	4618      	mov	r0, r3
 8007548:	f7fb fd95 	bl	8003076 <lwip_htons>
 800754c:	4603      	mov	r3, r0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d028      	beq.n	80075aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007558:	6838      	ldr	r0, [r7, #0]
 800755a:	f7fe fa63 	bl	8005a24 <tcp_segs_free>
    next = NULL;
 800755e:	2300      	movs	r3, #0
 8007560:	603b      	str	r3, [r7, #0]
 8007562:	e056      	b.n	8007612 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	899b      	ldrh	r3, [r3, #12]
 800756a:	b29b      	uxth	r3, r3
 800756c:	4618      	mov	r0, r3
 800756e:	f7fb fd82 	bl	8003076 <lwip_htons>
 8007572:	4603      	mov	r3, r0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00d      	beq.n	800759a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	899b      	ldrh	r3, [r3, #12]
 8007584:	b29c      	uxth	r4, r3
 8007586:	2001      	movs	r0, #1
 8007588:	f7fb fd75 	bl	8003076 <lwip_htons>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	4322      	orrs	r2, r4
 8007596:	b292      	uxth	r2, r2
 8007598:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7fe fa52 	bl	8005a4e <tcp_seg_free>
    while (next &&
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00e      	beq.n	80075ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	891b      	ldrh	r3, [r3, #8]
 80075b4:	461a      	mov	r2, r3
 80075b6:	4b1d      	ldr	r3, [pc, #116]	@ (800762c <tcp_oos_insert_segment+0x10c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	441a      	add	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	8909      	ldrh	r1, [r1, #8]
 80075c6:	440b      	add	r3, r1
 80075c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	daca      	bge.n	8007564 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01e      	beq.n	8007612 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	891b      	ldrh	r3, [r3, #8]
 80075d8:	461a      	mov	r2, r3
 80075da:	4b14      	ldr	r3, [pc, #80]	@ (800762c <tcp_oos_insert_segment+0x10c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	441a      	add	r2, r3
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	dd12      	ble.n	8007612 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <tcp_oos_insert_segment+0x10c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	891b      	ldrh	r3, [r3, #8]
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f7fc fe23 	bl	8004258 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	601a      	str	r2, [r3, #0]
}
 8007618:	bf00      	nop
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	bd90      	pop	{r4, r7, pc}
 8007620:	0800ea3c 	.word	0x0800ea3c
 8007624:	0800ecfc 	.word	0x0800ecfc
 8007628:	0800ea88 	.word	0x0800ea88
 800762c:	20008290 	.word	0x20008290

08007630 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007630:	b5b0      	push	{r4, r5, r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800763e:	e03e      	b.n	80076be <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	4618      	mov	r0, r3
 8007650:	f7fd f810 	bl	8004674 <pbuf_clen>
 8007654:	4603      	mov	r3, r0
 8007656:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800765e:	8a7a      	ldrh	r2, [r7, #18]
 8007660:	429a      	cmp	r2, r3
 8007662:	d906      	bls.n	8007672 <tcp_free_acked_segments+0x42>
 8007664:	4b2a      	ldr	r3, [pc, #168]	@ (8007710 <tcp_free_acked_segments+0xe0>)
 8007666:	f240 4257 	movw	r2, #1111	@ 0x457
 800766a:	492a      	ldr	r1, [pc, #168]	@ (8007714 <tcp_free_acked_segments+0xe4>)
 800766c:	482a      	ldr	r0, [pc, #168]	@ (8007718 <tcp_free_acked_segments+0xe8>)
 800766e:	f005 f9b7 	bl	800c9e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8007678:	8a7b      	ldrh	r3, [r7, #18]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	891a      	ldrh	r2, [r3, #8]
 8007688:	4b24      	ldr	r3, [pc, #144]	@ (800771c <tcp_free_acked_segments+0xec>)
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	4413      	add	r3, r2
 800768e:	b29a      	uxth	r2, r3
 8007690:	4b22      	ldr	r3, [pc, #136]	@ (800771c <tcp_free_acked_segments+0xec>)
 8007692:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007694:	6978      	ldr	r0, [r7, #20]
 8007696:	f7fe f9da 	bl	8005a4e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00c      	beq.n	80076be <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <tcp_free_acked_segments+0x8e>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <tcp_free_acked_segments+0x8e>
 80076b0:	4b17      	ldr	r3, [pc, #92]	@ (8007710 <tcp_free_acked_segments+0xe0>)
 80076b2:	f240 4261 	movw	r2, #1121	@ 0x461
 80076b6:	491a      	ldr	r1, [pc, #104]	@ (8007720 <tcp_free_acked_segments+0xf0>)
 80076b8:	4817      	ldr	r0, [pc, #92]	@ (8007718 <tcp_free_acked_segments+0xe8>)
 80076ba:	f005 f991 	bl	800c9e0 <iprintf>
  while (seg_list != NULL &&
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d020      	beq.n	8007706 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fb fce9 	bl	80030a2 <lwip_htonl>
 80076d0:	4604      	mov	r4, r0
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	891b      	ldrh	r3, [r3, #8]
 80076d6:	461d      	mov	r5, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	899b      	ldrh	r3, [r3, #12]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fb fcc8 	bl	8003076 <lwip_htons>
 80076e6:	4603      	mov	r3, r0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <tcp_free_acked_segments+0xc6>
 80076f2:	2301      	movs	r3, #1
 80076f4:	e000      	b.n	80076f8 <tcp_free_acked_segments+0xc8>
 80076f6:	2300      	movs	r3, #0
 80076f8:	442b      	add	r3, r5
 80076fa:	18e2      	adds	r2, r4, r3
 80076fc:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <tcp_free_acked_segments+0xf4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8007702:	2b00      	cmp	r3, #0
 8007704:	dd9c      	ble.n	8007640 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8007706:	68bb      	ldr	r3, [r7, #8]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bdb0      	pop	{r4, r5, r7, pc}
 8007710:	0800ea3c 	.word	0x0800ea3c
 8007714:	0800ed24 	.word	0x0800ed24
 8007718:	0800ea88 	.word	0x0800ea88
 800771c:	20008298 	.word	0x20008298
 8007720:	0800ed4c 	.word	0x0800ed4c
 8007724:	20008294 	.word	0x20008294

08007728 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007728:	b5b0      	push	{r4, r5, r7, lr}
 800772a:	b094      	sub	sp, #80	@ 0x50
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <tcp_receive+0x20>
 800773a:	4b91      	ldr	r3, [pc, #580]	@ (8007980 <tcp_receive+0x258>)
 800773c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8007740:	4990      	ldr	r1, [pc, #576]	@ (8007984 <tcp_receive+0x25c>)
 8007742:	4891      	ldr	r0, [pc, #580]	@ (8007988 <tcp_receive+0x260>)
 8007744:	f005 f94c 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7d1b      	ldrb	r3, [r3, #20]
 800774c:	2b03      	cmp	r3, #3
 800774e:	d806      	bhi.n	800775e <tcp_receive+0x36>
 8007750:	4b8b      	ldr	r3, [pc, #556]	@ (8007980 <tcp_receive+0x258>)
 8007752:	f240 427c 	movw	r2, #1148	@ 0x47c
 8007756:	498d      	ldr	r1, [pc, #564]	@ (800798c <tcp_receive+0x264>)
 8007758:	488b      	ldr	r0, [pc, #556]	@ (8007988 <tcp_receive+0x260>)
 800775a:	f005 f941 	bl	800c9e0 <iprintf>

  if (flags & TCP_ACK) {
 800775e:	4b8c      	ldr	r3, [pc, #560]	@ (8007990 <tcp_receive+0x268>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8264 	beq.w	8007c34 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007778:	4413      	add	r3, r2
 800777a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007780:	4b84      	ldr	r3, [pc, #528]	@ (8007994 <tcp_receive+0x26c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	db1b      	blt.n	80077c2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800778e:	4b81      	ldr	r3, [pc, #516]	@ (8007994 <tcp_receive+0x26c>)
 8007790:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007792:	429a      	cmp	r2, r3
 8007794:	d106      	bne.n	80077a4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800779a:	4b7f      	ldr	r3, [pc, #508]	@ (8007998 <tcp_receive+0x270>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	db0e      	blt.n	80077c2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80077a8:	4b7b      	ldr	r3, [pc, #492]	@ (8007998 <tcp_receive+0x270>)
 80077aa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d125      	bne.n	80077fc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80077b0:	4b7a      	ldr	r3, [pc, #488]	@ (800799c <tcp_receive+0x274>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	89db      	ldrh	r3, [r3, #14]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077be:	429a      	cmp	r2, r3
 80077c0:	d91c      	bls.n	80077fc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80077c2:	4b76      	ldr	r3, [pc, #472]	@ (800799c <tcp_receive+0x274>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	89db      	ldrh	r3, [r3, #14]
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80077dc:	429a      	cmp	r2, r3
 80077de:	d205      	bcs.n	80077ec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80077ec:	4b69      	ldr	r3, [pc, #420]	@ (8007994 <tcp_receive+0x26c>)
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80077f4:	4b68      	ldr	r3, [pc, #416]	@ (8007998 <tcp_receive+0x270>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80077fc:	4b66      	ldr	r3, [pc, #408]	@ (8007998 <tcp_receive+0x270>)
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	dc58      	bgt.n	80078bc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800780a:	4b65      	ldr	r3, [pc, #404]	@ (80079a0 <tcp_receive+0x278>)
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d14b      	bne.n	80078aa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800781c:	4413      	add	r3, r2
 800781e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007820:	429a      	cmp	r2, r3
 8007822:	d142      	bne.n	80078aa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800782a:	2b00      	cmp	r3, #0
 800782c:	db3d      	blt.n	80078aa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007832:	4b59      	ldr	r3, [pc, #356]	@ (8007998 <tcp_receive+0x270>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d137      	bne.n	80078aa <tcp_receive+0x182>
              found_dupack = 1;
 800783a:	2301      	movs	r3, #1
 800783c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007844:	2bff      	cmp	r3, #255	@ 0xff
 8007846:	d007      	beq.n	8007858 <tcp_receive+0x130>
                ++pcb->dupacks;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800784e:	3301      	adds	r3, #1
 8007850:	b2da      	uxtb	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800785e:	2b03      	cmp	r3, #3
 8007860:	d91b      	bls.n	800789a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800786c:	4413      	add	r3, r2
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007876:	429a      	cmp	r2, r3
 8007878:	d30a      	bcc.n	8007890 <tcp_receive+0x168>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007884:	4413      	add	r3, r2
 8007886:	b29a      	uxth	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800788e:	e004      	b.n	800789a <tcp_receive+0x172>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007896:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d902      	bls.n	80078aa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 fee7 	bl	8009678 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80078aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 8161 	bne.w	8007b74 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078ba:	e15b      	b.n	8007b74 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80078bc:	4b36      	ldr	r3, [pc, #216]	@ (8007998 <tcp_receive+0x270>)
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f2c0 814e 	blt.w	8007b6a <tcp_receive+0x442>
 80078ce:	4b32      	ldr	r3, [pc, #200]	@ (8007998 <tcp_receive+0x270>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f300 8146 	bgt.w	8007b6a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	8b5b      	ldrh	r3, [r3, #26]
 80078e2:	f003 0304 	and.w	r3, r3, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d010      	beq.n	800790c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8b5b      	ldrh	r3, [r3, #26]
 80078ee:	f023 0304 	bic.w	r3, r3, #4
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800791a:	10db      	asrs	r3, r3, #3
 800791c:	b21b      	sxth	r3, r3
 800791e:	b29a      	uxth	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007926:	b29b      	uxth	r3, r3
 8007928:	4413      	add	r3, r2
 800792a:	b29b      	uxth	r3, r3
 800792c:	b21a      	sxth	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8007934:	4b18      	ldr	r3, [pc, #96]	@ (8007998 <tcp_receive+0x270>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800793e:	b29b      	uxth	r3, r3
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800794c:	4b12      	ldr	r3, [pc, #72]	@ (8007998 <tcp_receive+0x270>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	7d1b      	ldrb	r3, [r3, #20]
 8007958:	2b03      	cmp	r3, #3
 800795a:	f240 8097 	bls.w	8007a8c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800796a:	429a      	cmp	r2, r3
 800796c:	d245      	bcs.n	80079fa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	8b5b      	ldrh	r3, [r3, #26]
 8007972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007976:	2b00      	cmp	r3, #0
 8007978:	d014      	beq.n	80079a4 <tcp_receive+0x27c>
 800797a:	2301      	movs	r3, #1
 800797c:	e013      	b.n	80079a6 <tcp_receive+0x27e>
 800797e:	bf00      	nop
 8007980:	0800ea3c 	.word	0x0800ea3c
 8007984:	0800ed6c 	.word	0x0800ed6c
 8007988:	0800ea88 	.word	0x0800ea88
 800798c:	0800ed88 	.word	0x0800ed88
 8007990:	2000829c 	.word	0x2000829c
 8007994:	20008290 	.word	0x20008290
 8007998:	20008294 	.word	0x20008294
 800799c:	20008280 	.word	0x20008280
 80079a0:	2000829a 	.word	0x2000829a
 80079a4:	2302      	movs	r3, #2
 80079a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80079aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80079b4:	fb12 f303 	smulbb	r3, r2, r3
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80079bc:	4293      	cmp	r3, r2
 80079be:	bf28      	it	cs
 80079c0:	4613      	movcs	r3, r2
 80079c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80079ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80079cc:	4413      	add	r3, r2
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d309      	bcc.n	80079ee <tcp_receive+0x2c6>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80079e0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80079e2:	4413      	add	r3, r2
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80079ec:	e04e      	b.n	8007a8c <tcp_receive+0x364>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079f4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80079f8:	e048      	b.n	8007a8c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8007a00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007a02:	4413      	add	r3, r2
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d309      	bcc.n	8007a24 <tcp_receive+0x2fc>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8007a16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007a18:	4413      	add	r3, r2
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a22:	e004      	b.n	8007a2e <tcp_receive+0x306>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d326      	bcc.n	8007a8c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a5e:	4413      	add	r3, r2
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d30a      	bcc.n	8007a82 <tcp_receive+0x35a>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007a76:	4413      	add	r3, r2
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8007a80:	e004      	b.n	8007a8c <tcp_receive+0x364>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a94:	4a98      	ldr	r2, [pc, #608]	@ (8007cf8 <tcp_receive+0x5d0>)
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff fdca 	bl	8007630 <tcp_free_acked_segments>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aaa:	4a94      	ldr	r2, [pc, #592]	@ (8007cfc <tcp_receive+0x5d4>)
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff fdbf 	bl	8007630 <tcp_free_acked_segments>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ac6:	861a      	strh	r2, [r3, #48]	@ 0x30
 8007ac8:	e002      	b.n	8007ad0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8007aec:	4b84      	ldr	r3, [pc, #528]	@ (8007d00 <tcp_receive+0x5d8>)
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	4413      	add	r3, r2
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	8b5b      	ldrh	r3, [r3, #26]
 8007afe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d035      	beq.n	8007b72 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d118      	bne.n	8007b40 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00c      	beq.n	8007b30 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fb fabd 	bl	80030a2 <lwip_htonl>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dc20      	bgt.n	8007b72 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8b5b      	ldrh	r3, [r3, #26]
 8007b34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007b3e:	e018      	b.n	8007b72 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fb faa8 	bl	80030a2 <lwip_htonl>
 8007b52:	4603      	mov	r3, r0
 8007b54:	1ae3      	subs	r3, r4, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	dc0b      	bgt.n	8007b72 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	8b5b      	ldrh	r3, [r3, #26]
 8007b5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007b68:	e003      	b.n	8007b72 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 ff70 	bl	8009a50 <tcp_send_empty_ack>
 8007b70:	e000      	b.n	8007b74 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007b72:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d05b      	beq.n	8007c34 <tcp_receive+0x50c>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b80:	4b60      	ldr	r3, [pc, #384]	@ (8007d04 <tcp_receive+0x5dc>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	da54      	bge.n	8007c34 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8007d08 <tcp_receive+0x5e0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8007b9e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8007ba8:	10db      	asrs	r3, r3, #3
 8007baa:	b21b      	sxth	r3, r3
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007bc2:	4413      	add	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	b21a      	sxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8007bcc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da05      	bge.n	8007be0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8007bd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007bd8:	425b      	negs	r3, r3
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8007be0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007bea:	109b      	asrs	r3, r3, #2
 8007bec:	b21b      	sxth	r3, r3
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007c04:	4413      	add	r3, r2
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	b21a      	sxth	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8007c14:	10db      	asrs	r3, r3, #3
 8007c16:	b21b      	sxth	r3, r3
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	4413      	add	r3, r2
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	b21a      	sxth	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8007c34:	4b35      	ldr	r3, [pc, #212]	@ (8007d0c <tcp_receive+0x5e4>)
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 84df 	beq.w	80085fc <tcp_receive+0xed4>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7d1b      	ldrb	r3, [r3, #20]
 8007c42:	2b06      	cmp	r3, #6
 8007c44:	f200 84da 	bhi.w	80085fc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c4c:	4b30      	ldr	r3, [pc, #192]	@ (8007d10 <tcp_receive+0x5e8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	3b01      	subs	r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f2c0 808f 	blt.w	8007d78 <tcp_receive+0x650>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8007d0c <tcp_receive+0x5e4>)
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	4619      	mov	r1, r3
 8007c64:	4b2a      	ldr	r3, [pc, #168]	@ (8007d10 <tcp_receive+0x5e8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	440b      	add	r3, r1
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f300 8082 	bgt.w	8007d78 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8007c74:	4b27      	ldr	r3, [pc, #156]	@ (8007d14 <tcp_receive+0x5ec>)
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c7e:	4b24      	ldr	r3, [pc, #144]	@ (8007d10 <tcp_receive+0x5e8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007c86:	4b23      	ldr	r3, [pc, #140]	@ (8007d14 <tcp_receive+0x5ec>)
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <tcp_receive+0x574>
 8007c8e:	4b22      	ldr	r3, [pc, #136]	@ (8007d18 <tcp_receive+0x5f0>)
 8007c90:	f240 5294 	movw	r2, #1428	@ 0x594
 8007c94:	4921      	ldr	r1, [pc, #132]	@ (8007d1c <tcp_receive+0x5f4>)
 8007c96:	4822      	ldr	r0, [pc, #136]	@ (8007d20 <tcp_receive+0x5f8>)
 8007c98:	f004 fea2 	bl	800c9e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d906      	bls.n	8007cb4 <tcp_receive+0x58c>
 8007ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8007d18 <tcp_receive+0x5f0>)
 8007ca8:	f240 5295 	movw	r2, #1429	@ 0x595
 8007cac:	491d      	ldr	r1, [pc, #116]	@ (8007d24 <tcp_receive+0x5fc>)
 8007cae:	481c      	ldr	r0, [pc, #112]	@ (8007d20 <tcp_receive+0x5f8>)
 8007cb0:	f004 fe96 	bl	800c9e0 <iprintf>
      off = (u16_t)off32;
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8007cba:	4b16      	ldr	r3, [pc, #88]	@ (8007d14 <tcp_receive+0x5ec>)
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	891b      	ldrh	r3, [r3, #8]
 8007cc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d906      	bls.n	8007cd6 <tcp_receive+0x5ae>
 8007cc8:	4b13      	ldr	r3, [pc, #76]	@ (8007d18 <tcp_receive+0x5f0>)
 8007cca:	f240 5297 	movw	r2, #1431	@ 0x597
 8007cce:	4916      	ldr	r1, [pc, #88]	@ (8007d28 <tcp_receive+0x600>)
 8007cd0:	4813      	ldr	r0, [pc, #76]	@ (8007d20 <tcp_receive+0x5f8>)
 8007cd2:	f004 fe85 	bl	800c9e0 <iprintf>
      inseg.len -= off;
 8007cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d14 <tcp_receive+0x5ec>)
 8007cd8:	891a      	ldrh	r2, [r3, #8]
 8007cda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8007d14 <tcp_receive+0x5ec>)
 8007ce4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d14 <tcp_receive+0x5ec>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	891a      	ldrh	r2, [r3, #8]
 8007cec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8007cf4:	e02a      	b.n	8007d4c <tcp_receive+0x624>
 8007cf6:	bf00      	nop
 8007cf8:	0800eda4 	.word	0x0800eda4
 8007cfc:	0800edac 	.word	0x0800edac
 8007d00:	20008298 	.word	0x20008298
 8007d04:	20008294 	.word	0x20008294
 8007d08:	20008258 	.word	0x20008258
 8007d0c:	2000829a 	.word	0x2000829a
 8007d10:	20008290 	.word	0x20008290
 8007d14:	20008270 	.word	0x20008270
 8007d18:	0800ea3c 	.word	0x0800ea3c
 8007d1c:	0800edb4 	.word	0x0800edb4
 8007d20:	0800ea88 	.word	0x0800ea88
 8007d24:	0800edc4 	.word	0x0800edc4
 8007d28:	0800edd4 	.word	0x0800edd4
        off -= p->len;
 8007d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d2e:	895b      	ldrh	r3, [r3, #10]
 8007d30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8007d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d3c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007d3e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8007d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d42:	2200      	movs	r2, #0
 8007d44:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8007d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8007d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d4e:	895b      	ldrh	r3, [r3, #10]
 8007d50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d8e9      	bhi.n	8007d2c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8007d58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007d60:	f7fc fb7a 	bl	8004458 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d68:	4a90      	ldr	r2, [pc, #576]	@ (8007fac <tcp_receive+0x884>)
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	4b90      	ldr	r3, [pc, #576]	@ (8007fb0 <tcp_receive+0x888>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	4a8e      	ldr	r2, [pc, #568]	@ (8007fac <tcp_receive+0x884>)
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007d76:	e00d      	b.n	8007d94 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007d78:	4b8c      	ldr	r3, [pc, #560]	@ (8007fac <tcp_receive+0x884>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	da06      	bge.n	8007d94 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	8b5b      	ldrh	r3, [r3, #26]
 8007d8a:	f043 0302 	orr.w	r3, r3, #2
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007d94:	4b85      	ldr	r3, [pc, #532]	@ (8007fac <tcp_receive+0x884>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f2c0 8427 	blt.w	80085f2 <tcp_receive+0xeca>
 8007da4:	4b81      	ldr	r3, [pc, #516]	@ (8007fac <tcp_receive+0x884>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007db0:	440b      	add	r3, r1
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	3301      	adds	r3, #1
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f300 841b 	bgt.w	80085f2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dc0:	4b7a      	ldr	r3, [pc, #488]	@ (8007fac <tcp_receive+0x884>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	f040 8298 	bne.w	80082fa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8007dca:	4b79      	ldr	r3, [pc, #484]	@ (8007fb0 <tcp_receive+0x888>)
 8007dcc:	891c      	ldrh	r4, [r3, #8]
 8007dce:	4b78      	ldr	r3, [pc, #480]	@ (8007fb0 <tcp_receive+0x888>)
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	899b      	ldrh	r3, [r3, #12]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fb f94d 	bl	8003076 <lwip_htons>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 0303 	and.w	r3, r3, #3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <tcp_receive+0x6c4>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e000      	b.n	8007dee <tcp_receive+0x6c6>
 8007dec:	2300      	movs	r3, #0
 8007dee:	4423      	add	r3, r4
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	4b70      	ldr	r3, [pc, #448]	@ (8007fb4 <tcp_receive+0x88c>)
 8007df4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007dfa:	4b6e      	ldr	r3, [pc, #440]	@ (8007fb4 <tcp_receive+0x88c>)
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d274      	bcs.n	8007eec <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007e02:	4b6b      	ldr	r3, [pc, #428]	@ (8007fb0 <tcp_receive+0x888>)
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	899b      	ldrh	r3, [r3, #12]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fb f933 	bl	8003076 <lwip_htons>
 8007e10:	4603      	mov	r3, r0
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01e      	beq.n	8007e5a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007e1c:	4b64      	ldr	r3, [pc, #400]	@ (8007fb0 <tcp_receive+0x888>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	899b      	ldrh	r3, [r3, #12]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	b21b      	sxth	r3, r3
 8007e26:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e2a:	b21c      	sxth	r4, r3
 8007e2c:	4b60      	ldr	r3, [pc, #384]	@ (8007fb0 <tcp_receive+0x888>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	899b      	ldrh	r3, [r3, #12]
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fb f91e 	bl	8003076 <lwip_htons>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fb f916 	bl	8003076 <lwip_htons>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	b21b      	sxth	r3, r3
 8007e4e:	4323      	orrs	r3, r4
 8007e50:	b21a      	sxth	r2, r3
 8007e52:	4b57      	ldr	r3, [pc, #348]	@ (8007fb0 <tcp_receive+0x888>)
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	b292      	uxth	r2, r2
 8007e58:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8007e5e:	4b54      	ldr	r3, [pc, #336]	@ (8007fb0 <tcp_receive+0x888>)
 8007e60:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007e62:	4b53      	ldr	r3, [pc, #332]	@ (8007fb0 <tcp_receive+0x888>)
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	899b      	ldrh	r3, [r3, #12]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fb f903 	bl	8003076 <lwip_htons>
 8007e70:	4603      	mov	r3, r0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <tcp_receive+0x760>
            inseg.len -= 1;
 8007e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8007fb0 <tcp_receive+0x888>)
 8007e7e:	891b      	ldrh	r3, [r3, #8]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	4b4a      	ldr	r3, [pc, #296]	@ (8007fb0 <tcp_receive+0x888>)
 8007e86:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007e88:	4b49      	ldr	r3, [pc, #292]	@ (8007fb0 <tcp_receive+0x888>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4a48      	ldr	r2, [pc, #288]	@ (8007fb0 <tcp_receive+0x888>)
 8007e8e:	8912      	ldrh	r2, [r2, #8]
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fc f9e0 	bl	8004258 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007e98:	4b45      	ldr	r3, [pc, #276]	@ (8007fb0 <tcp_receive+0x888>)
 8007e9a:	891c      	ldrh	r4, [r3, #8]
 8007e9c:	4b44      	ldr	r3, [pc, #272]	@ (8007fb0 <tcp_receive+0x888>)
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	899b      	ldrh	r3, [r3, #12]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fb f8e6 	bl	8003076 <lwip_htons>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <tcp_receive+0x792>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e000      	b.n	8007ebc <tcp_receive+0x794>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	4423      	add	r3, r4
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	4b3c      	ldr	r3, [pc, #240]	@ (8007fb4 <tcp_receive+0x88c>)
 8007ec2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8007fb4 <tcp_receive+0x88c>)
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4b38      	ldr	r3, [pc, #224]	@ (8007fac <tcp_receive+0x884>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	441a      	add	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007ed8:	440b      	add	r3, r1
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d006      	beq.n	8007eec <tcp_receive+0x7c4>
 8007ede:	4b36      	ldr	r3, [pc, #216]	@ (8007fb8 <tcp_receive+0x890>)
 8007ee0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8007ee4:	4935      	ldr	r1, [pc, #212]	@ (8007fbc <tcp_receive+0x894>)
 8007ee6:	4836      	ldr	r0, [pc, #216]	@ (8007fc0 <tcp_receive+0x898>)
 8007ee8:	f004 fd7a 	bl	800c9e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80e6 	beq.w	80080c2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8007fb0 <tcp_receive+0x888>)
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	899b      	ldrh	r3, [r3, #12]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fb f8b9 	bl	8003076 <lwip_htons>
 8007f04:	4603      	mov	r3, r0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d010      	beq.n	8007f32 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8007f10:	e00a      	b.n	8007f28 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f16:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7fd fd93 	bl	8005a4e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f0      	bne.n	8007f12 <tcp_receive+0x7ea>
 8007f30:	e0c7      	b.n	80080c2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8007f38:	e051      	b.n	8007fde <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	899b      	ldrh	r3, [r3, #12]
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fb f897 	bl	8003076 <lwip_htons>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d03c      	beq.n	8007fce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8007f54:	4b16      	ldr	r3, [pc, #88]	@ (8007fb0 <tcp_receive+0x888>)
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	899b      	ldrh	r3, [r3, #12]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fb f88a 	bl	8003076 <lwip_htons>
 8007f62:	4603      	mov	r3, r0
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d12f      	bne.n	8007fce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8007f6e:	4b10      	ldr	r3, [pc, #64]	@ (8007fb0 <tcp_receive+0x888>)
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	899b      	ldrh	r3, [r3, #12]
 8007f74:	b29c      	uxth	r4, r3
 8007f76:	2001      	movs	r0, #1
 8007f78:	f7fb f87d 	bl	8003076 <lwip_htons>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb0 <tcp_receive+0x888>)
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	4322      	orrs	r2, r4
 8007f86:	b292      	uxth	r2, r2
 8007f88:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8007f8a:	4b09      	ldr	r3, [pc, #36]	@ (8007fb0 <tcp_receive+0x888>)
 8007f8c:	891c      	ldrh	r4, [r3, #8]
 8007f8e:	4b08      	ldr	r3, [pc, #32]	@ (8007fb0 <tcp_receive+0x888>)
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	899b      	ldrh	r3, [r3, #12]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fb f86d 	bl	8003076 <lwip_htons>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00d      	beq.n	8007fc4 <tcp_receive+0x89c>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e00c      	b.n	8007fc6 <tcp_receive+0x89e>
 8007fac:	20008290 	.word	0x20008290
 8007fb0:	20008270 	.word	0x20008270
 8007fb4:	2000829a 	.word	0x2000829a
 8007fb8:	0800ea3c 	.word	0x0800ea3c
 8007fbc:	0800ede4 	.word	0x0800ede4
 8007fc0:	0800ea88 	.word	0x0800ea88
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4423      	add	r3, r4
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	4b98      	ldr	r3, [pc, #608]	@ (800822c <tcp_receive+0xb04>)
 8007fcc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8007fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8007fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8007fd8:	6938      	ldr	r0, [r7, #16]
 8007fda:	f7fd fd38 	bl	8005a4e <tcp_seg_free>
            while (next &&
 8007fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00e      	beq.n	8008002 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8007fe4:	4b91      	ldr	r3, [pc, #580]	@ (800822c <tcp_receive+0xb04>)
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4b91      	ldr	r3, [pc, #580]	@ (8008230 <tcp_receive+0xb08>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	441a      	add	r2, r3
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ff8:	8909      	ldrh	r1, [r1, #8]
 8007ffa:	440b      	add	r3, r1
 8007ffc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	da9b      	bge.n	8007f3a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d059      	beq.n	80080bc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008008:	4b88      	ldr	r3, [pc, #544]	@ (800822c <tcp_receive+0xb04>)
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	461a      	mov	r2, r3
 800800e:	4b88      	ldr	r3, [pc, #544]	@ (8008230 <tcp_receive+0xb08>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	441a      	add	r2, r3
 8008014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800801c:	2b00      	cmp	r3, #0
 800801e:	dd4d      	ble.n	80080bc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b29a      	uxth	r2, r3
 8008028:	4b81      	ldr	r3, [pc, #516]	@ (8008230 <tcp_receive+0xb08>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	b29b      	uxth	r3, r3
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	b29a      	uxth	r2, r3
 8008032:	4b80      	ldr	r3, [pc, #512]	@ (8008234 <tcp_receive+0xb0c>)
 8008034:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008036:	4b7f      	ldr	r3, [pc, #508]	@ (8008234 <tcp_receive+0xb0c>)
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	899b      	ldrh	r3, [r3, #12]
 800803c:	b29b      	uxth	r3, r3
 800803e:	4618      	mov	r0, r3
 8008040:	f7fb f819 	bl	8003076 <lwip_htons>
 8008044:	4603      	mov	r3, r0
 8008046:	b2db      	uxtb	r3, r3
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <tcp_receive+0x934>
                inseg.len -= 1;
 8008050:	4b78      	ldr	r3, [pc, #480]	@ (8008234 <tcp_receive+0xb0c>)
 8008052:	891b      	ldrh	r3, [r3, #8]
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	4b76      	ldr	r3, [pc, #472]	@ (8008234 <tcp_receive+0xb0c>)
 800805a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800805c:	4b75      	ldr	r3, [pc, #468]	@ (8008234 <tcp_receive+0xb0c>)
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	4a74      	ldr	r2, [pc, #464]	@ (8008234 <tcp_receive+0xb0c>)
 8008062:	8912      	ldrh	r2, [r2, #8]
 8008064:	4611      	mov	r1, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f7fc f8f6 	bl	8004258 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800806c:	4b71      	ldr	r3, [pc, #452]	@ (8008234 <tcp_receive+0xb0c>)
 800806e:	891c      	ldrh	r4, [r3, #8]
 8008070:	4b70      	ldr	r3, [pc, #448]	@ (8008234 <tcp_receive+0xb0c>)
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	899b      	ldrh	r3, [r3, #12]
 8008076:	b29b      	uxth	r3, r3
 8008078:	4618      	mov	r0, r3
 800807a:	f7fa fffc 	bl	8003076 <lwip_htons>
 800807e:	4603      	mov	r3, r0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <tcp_receive+0x966>
 800808a:	2301      	movs	r3, #1
 800808c:	e000      	b.n	8008090 <tcp_receive+0x968>
 800808e:	2300      	movs	r3, #0
 8008090:	4423      	add	r3, r4
 8008092:	b29a      	uxth	r2, r3
 8008094:	4b65      	ldr	r3, [pc, #404]	@ (800822c <tcp_receive+0xb04>)
 8008096:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008098:	4b64      	ldr	r3, [pc, #400]	@ (800822c <tcp_receive+0xb04>)
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	461a      	mov	r2, r3
 800809e:	4b64      	ldr	r3, [pc, #400]	@ (8008230 <tcp_receive+0xb08>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	441a      	add	r2, r3
 80080a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d006      	beq.n	80080bc <tcp_receive+0x994>
 80080ae:	4b62      	ldr	r3, [pc, #392]	@ (8008238 <tcp_receive+0xb10>)
 80080b0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80080b4:	4961      	ldr	r1, [pc, #388]	@ (800823c <tcp_receive+0xb14>)
 80080b6:	4862      	ldr	r0, [pc, #392]	@ (8008240 <tcp_receive+0xb18>)
 80080b8:	f004 fc92 	bl	800c9e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80080c0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80080c2:	4b5a      	ldr	r3, [pc, #360]	@ (800822c <tcp_receive+0xb04>)
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	4b59      	ldr	r3, [pc, #356]	@ (8008230 <tcp_receive+0xb08>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	441a      	add	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80080d6:	4b55      	ldr	r3, [pc, #340]	@ (800822c <tcp_receive+0xb04>)
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d206      	bcs.n	80080ec <tcp_receive+0x9c4>
 80080de:	4b56      	ldr	r3, [pc, #344]	@ (8008238 <tcp_receive+0xb10>)
 80080e0:	f240 6207 	movw	r2, #1543	@ 0x607
 80080e4:	4957      	ldr	r1, [pc, #348]	@ (8008244 <tcp_receive+0xb1c>)
 80080e6:	4856      	ldr	r0, [pc, #344]	@ (8008240 <tcp_receive+0xb18>)
 80080e8:	f004 fc7a 	bl	800c9e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80080f0:	4b4e      	ldr	r3, [pc, #312]	@ (800822c <tcp_receive+0xb04>)
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fc ffc5 	bl	800508c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008102:	4b4c      	ldr	r3, [pc, #304]	@ (8008234 <tcp_receive+0xb0c>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	891b      	ldrh	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d006      	beq.n	800811a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800810c:	4b49      	ldr	r3, [pc, #292]	@ (8008234 <tcp_receive+0xb0c>)
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4a4d      	ldr	r2, [pc, #308]	@ (8008248 <tcp_receive+0xb20>)
 8008112:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008114:	4b47      	ldr	r3, [pc, #284]	@ (8008234 <tcp_receive+0xb0c>)
 8008116:	2200      	movs	r2, #0
 8008118:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800811a:	4b46      	ldr	r3, [pc, #280]	@ (8008234 <tcp_receive+0xb0c>)
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	899b      	ldrh	r3, [r3, #12]
 8008120:	b29b      	uxth	r3, r3
 8008122:	4618      	mov	r0, r3
 8008124:	f7fa ffa7 	bl	8003076 <lwip_htons>
 8008128:	4603      	mov	r3, r0
 800812a:	b2db      	uxtb	r3, r3
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 80b8 	beq.w	80082a6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008136:	4b45      	ldr	r3, [pc, #276]	@ (800824c <tcp_receive+0xb24>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	f043 0320 	orr.w	r3, r3, #32
 800813e:	b2da      	uxtb	r2, r3
 8008140:	4b42      	ldr	r3, [pc, #264]	@ (800824c <tcp_receive+0xb24>)
 8008142:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008144:	e0af      	b.n	80082a6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800814a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4a36      	ldr	r2, [pc, #216]	@ (8008230 <tcp_receive+0xb08>)
 8008156:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	891b      	ldrh	r3, [r3, #8]
 800815c:	461c      	mov	r4, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	899b      	ldrh	r3, [r3, #12]
 8008164:	b29b      	uxth	r3, r3
 8008166:	4618      	mov	r0, r3
 8008168:	f7fa ff85 	bl	8003076 <lwip_htons>
 800816c:	4603      	mov	r3, r0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <tcp_receive+0xa54>
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <tcp_receive+0xa56>
 800817c:	2300      	movs	r3, #0
 800817e:	191a      	adds	r2, r3, r4
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008184:	441a      	add	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800818e:	461c      	mov	r4, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	891b      	ldrh	r3, [r3, #8]
 8008194:	461d      	mov	r5, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	899b      	ldrh	r3, [r3, #12]
 800819c:	b29b      	uxth	r3, r3
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fa ff69 	bl	8003076 <lwip_htons>
 80081a4:	4603      	mov	r3, r0
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <tcp_receive+0xa8c>
 80081b0:	2301      	movs	r3, #1
 80081b2:	e000      	b.n	80081b6 <tcp_receive+0xa8e>
 80081b4:	2300      	movs	r3, #0
 80081b6:	442b      	add	r3, r5
 80081b8:	429c      	cmp	r4, r3
 80081ba:	d206      	bcs.n	80081ca <tcp_receive+0xaa2>
 80081bc:	4b1e      	ldr	r3, [pc, #120]	@ (8008238 <tcp_receive+0xb10>)
 80081be:	f240 622b 	movw	r2, #1579	@ 0x62b
 80081c2:	4923      	ldr	r1, [pc, #140]	@ (8008250 <tcp_receive+0xb28>)
 80081c4:	481e      	ldr	r0, [pc, #120]	@ (8008240 <tcp_receive+0xb18>)
 80081c6:	f004 fc0b 	bl	800c9e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	891b      	ldrh	r3, [r3, #8]
 80081ce:	461c      	mov	r4, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	899b      	ldrh	r3, [r3, #12]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fa ff4c 	bl	8003076 <lwip_htons>
 80081de:	4603      	mov	r3, r0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <tcp_receive+0xac6>
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <tcp_receive+0xac8>
 80081ee:	2300      	movs	r3, #0
 80081f0:	1919      	adds	r1, r3, r4
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80081f6:	b28b      	uxth	r3, r1
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7fc ff43 	bl	800508c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	891b      	ldrh	r3, [r3, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d028      	beq.n	8008262 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008210:	4b0d      	ldr	r3, [pc, #52]	@ (8008248 <tcp_receive+0xb20>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d01d      	beq.n	8008254 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8008218:	4b0b      	ldr	r3, [pc, #44]	@ (8008248 <tcp_receive+0xb20>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fc fa60 	bl	80046e8 <pbuf_cat>
 8008228:	e018      	b.n	800825c <tcp_receive+0xb34>
 800822a:	bf00      	nop
 800822c:	2000829a 	.word	0x2000829a
 8008230:	20008290 	.word	0x20008290
 8008234:	20008270 	.word	0x20008270
 8008238:	0800ea3c 	.word	0x0800ea3c
 800823c:	0800ee1c 	.word	0x0800ee1c
 8008240:	0800ea88 	.word	0x0800ea88
 8008244:	0800ee58 	.word	0x0800ee58
 8008248:	200082a0 	.word	0x200082a0
 800824c:	2000829d 	.word	0x2000829d
 8008250:	0800ee78 	.word	0x0800ee78
            } else {
              recv_data = cseg->p;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	4a70      	ldr	r2, [pc, #448]	@ (800841c <tcp_receive+0xcf4>)
 800825a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	899b      	ldrh	r3, [r3, #12]
 8008268:	b29b      	uxth	r3, r3
 800826a:	4618      	mov	r0, r3
 800826c:	f7fa ff03 	bl	8003076 <lwip_htons>
 8008270:	4603      	mov	r3, r0
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00d      	beq.n	8008298 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800827c:	4b68      	ldr	r3, [pc, #416]	@ (8008420 <tcp_receive+0xcf8>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	f043 0320 	orr.w	r3, r3, #32
 8008284:	b2da      	uxtb	r2, r3
 8008286:	4b66      	ldr	r3, [pc, #408]	@ (8008420 <tcp_receive+0xcf8>)
 8008288:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	7d1b      	ldrb	r3, [r3, #20]
 800828e:	2b04      	cmp	r3, #4
 8008290:	d102      	bne.n	8008298 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2207      	movs	r2, #7
 8008296:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80082a0:	68b8      	ldr	r0, [r7, #8]
 80082a2:	f7fd fbd4 	bl	8005a4e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d008      	beq.n	80082c0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80082ba:	429a      	cmp	r2, r3
 80082bc:	f43f af43 	beq.w	8008146 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	8b5b      	ldrh	r3, [r3, #26]
 80082c4:	f003 0301 	and.w	r3, r3, #1
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00e      	beq.n	80082ea <tcp_receive+0xbc2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	8b5b      	ldrh	r3, [r3, #26]
 80082d0:	f023 0301 	bic.w	r3, r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	835a      	strh	r2, [r3, #26]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	8b5b      	ldrh	r3, [r3, #26]
 80082de:	f043 0302 	orr.w	r3, r3, #2
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80082e8:	e187      	b.n	80085fa <tcp_receive+0xed2>
        tcp_ack(pcb);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	8b5b      	ldrh	r3, [r3, #26]
 80082ee:	f043 0301 	orr.w	r3, r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80082f8:	e17f      	b.n	80085fa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008302:	4848      	ldr	r0, [pc, #288]	@ (8008424 <tcp_receive+0xcfc>)
 8008304:	f7fd fbbc 	bl	8005a80 <tcp_seg_copy>
 8008308:	4602      	mov	r2, r0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	675a      	str	r2, [r3, #116]	@ 0x74
 800830e:	e16c      	b.n	80085ea <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008310:	2300      	movs	r3, #0
 8008312:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800831a:	e156      	b.n	80085ca <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	4b41      	ldr	r3, [pc, #260]	@ (8008428 <tcp_receive+0xd00>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d11d      	bne.n	8008366 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800832a:	4b3e      	ldr	r3, [pc, #248]	@ (8008424 <tcp_receive+0xcfc>)
 800832c:	891a      	ldrh	r2, [r3, #8]
 800832e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008330:	891b      	ldrh	r3, [r3, #8]
 8008332:	429a      	cmp	r2, r3
 8008334:	f240 814e 	bls.w	80085d4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008338:	483a      	ldr	r0, [pc, #232]	@ (8008424 <tcp_receive+0xcfc>)
 800833a:	f7fd fba1 	bl	8005a80 <tcp_seg_copy>
 800833e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 8148 	beq.w	80085d8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8008348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800834e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	e002      	b.n	800835c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800835c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800835e:	6978      	ldr	r0, [r7, #20]
 8008360:	f7ff f8de 	bl	8007520 <tcp_oos_insert_segment>
                }
                break;
 8008364:	e138      	b.n	80085d8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	d117      	bne.n	800839c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800836c:	4b2e      	ldr	r3, [pc, #184]	@ (8008428 <tcp_receive+0xd00>)
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	da57      	bge.n	800842c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800837c:	4829      	ldr	r0, [pc, #164]	@ (8008424 <tcp_receive+0xcfc>)
 800837e:	f7fd fb7f 	bl	8005a80 <tcp_seg_copy>
 8008382:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 8128 	beq.w	80085dc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008392:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008394:	69b8      	ldr	r0, [r7, #24]
 8008396:	f7ff f8c3 	bl	8007520 <tcp_oos_insert_segment>
                  }
                  break;
 800839a:	e11f      	b.n	80085dc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800839c:	4b22      	ldr	r3, [pc, #136]	@ (8008428 <tcp_receive+0xd00>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	db3e      	blt.n	800842c <tcp_receive+0xd04>
 80083ae:	4b1e      	ldr	r3, [pc, #120]	@ (8008428 <tcp_receive+0xd00>)
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	3301      	adds	r3, #1
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dc35      	bgt.n	800842c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80083c0:	4818      	ldr	r0, [pc, #96]	@ (8008424 <tcp_receive+0xcfc>)
 80083c2:	f7fd fb5d 	bl	8005a80 <tcp_seg_copy>
 80083c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8108 	beq.w	80085e0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80083d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083d8:	8912      	ldrh	r2, [r2, #8]
 80083da:	441a      	add	r2, r3
 80083dc:	4b12      	ldr	r3, [pc, #72]	@ (8008428 <tcp_receive+0xd00>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dd12      	ble.n	800840c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80083e6:	4b10      	ldr	r3, [pc, #64]	@ (8008428 <tcp_receive+0xd00>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80083fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008402:	891b      	ldrh	r3, [r3, #8]
 8008404:	4619      	mov	r1, r3
 8008406:	4610      	mov	r0, r2
 8008408:	f7fb ff26 	bl	8004258 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800840c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008412:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008414:	69f8      	ldr	r0, [r7, #28]
 8008416:	f7ff f883 	bl	8007520 <tcp_oos_insert_segment>
                  }
                  break;
 800841a:	e0e1      	b.n	80085e0 <tcp_receive+0xeb8>
 800841c:	200082a0 	.word	0x200082a0
 8008420:	2000829d 	.word	0x2000829d
 8008424:	20008270 	.word	0x20008270
 8008428:	20008290 	.word	0x20008290
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800842c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	f040 80c5 	bne.w	80085c4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800843a:	4b7f      	ldr	r3, [pc, #508]	@ (8008638 <tcp_receive+0xf10>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008446:	2b00      	cmp	r3, #0
 8008448:	f340 80bc 	ble.w	80085c4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800844c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	899b      	ldrh	r3, [r3, #12]
 8008452:	b29b      	uxth	r3, r3
 8008454:	4618      	mov	r0, r3
 8008456:	f7fa fe0e 	bl	8003076 <lwip_htons>
 800845a:	4603      	mov	r3, r0
 800845c:	b2db      	uxtb	r3, r3
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	f040 80be 	bne.w	80085e4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008468:	4874      	ldr	r0, [pc, #464]	@ (800863c <tcp_receive+0xf14>)
 800846a:	f7fd fb09 	bl	8005a80 <tcp_seg_copy>
 800846e:	4602      	mov	r2, r0
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 80b5 	beq.w	80085e8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800847e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008486:	8912      	ldrh	r2, [r2, #8]
 8008488:	441a      	add	r2, r3
 800848a:	4b6b      	ldr	r3, [pc, #428]	@ (8008638 <tcp_receive+0xf10>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	dd12      	ble.n	80084ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008494:	4b68      	ldr	r3, [pc, #416]	@ (8008638 <tcp_receive+0xf10>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	b29a      	uxth	r2, r3
 800849a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b0:	891b      	ldrh	r3, [r3, #8]
 80084b2:	4619      	mov	r1, r3
 80084b4:	4610      	mov	r0, r2
 80084b6:	f7fb fecf 	bl	8004258 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80084ba:	4b61      	ldr	r3, [pc, #388]	@ (8008640 <tcp_receive+0xf18>)
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	4b5d      	ldr	r3, [pc, #372]	@ (8008638 <tcp_receive+0xf10>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	441a      	add	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80084ce:	440b      	add	r3, r1
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f340 8088 	ble.w	80085e8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80084d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	899b      	ldrh	r3, [r3, #12]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fa fdc7 	bl	8003076 <lwip_htons>
 80084e8:	4603      	mov	r3, r0
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d021      	beq.n	8008538 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80084f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	899b      	ldrh	r3, [r3, #12]
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	b21b      	sxth	r3, r3
 8008500:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008504:	b21c      	sxth	r4, r3
 8008506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	899b      	ldrh	r3, [r3, #12]
 800850e:	b29b      	uxth	r3, r3
 8008510:	4618      	mov	r0, r3
 8008512:	f7fa fdb0 	bl	8003076 <lwip_htons>
 8008516:	4603      	mov	r3, r0
 8008518:	b2db      	uxtb	r3, r3
 800851a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800851e:	b29b      	uxth	r3, r3
 8008520:	4618      	mov	r0, r3
 8008522:	f7fa fda8 	bl	8003076 <lwip_htons>
 8008526:	4603      	mov	r3, r0
 8008528:	b21b      	sxth	r3, r3
 800852a:	4323      	orrs	r3, r4
 800852c:	b21a      	sxth	r2, r3
 800852e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	b292      	uxth	r2, r2
 8008536:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853c:	b29a      	uxth	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008542:	4413      	add	r3, r2
 8008544:	b299      	uxth	r1, r3
 8008546:	4b3c      	ldr	r3, [pc, #240]	@ (8008638 <tcp_receive+0xf10>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	b29a      	uxth	r2, r3
 800854c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	1a8a      	subs	r2, r1, r2
 8008552:	b292      	uxth	r2, r2
 8008554:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	891b      	ldrh	r3, [r3, #8]
 8008562:	4619      	mov	r1, r3
 8008564:	4610      	mov	r0, r2
 8008566:	f7fb fe77 	bl	8004258 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800856a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	891c      	ldrh	r4, [r3, #8]
 8008570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	899b      	ldrh	r3, [r3, #12]
 8008578:	b29b      	uxth	r3, r3
 800857a:	4618      	mov	r0, r3
 800857c:	f7fa fd7b 	bl	8003076 <lwip_htons>
 8008580:	4603      	mov	r3, r0
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 0303 	and.w	r3, r3, #3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <tcp_receive+0xe68>
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <tcp_receive+0xe6a>
 8008590:	2300      	movs	r3, #0
 8008592:	4423      	add	r3, r4
 8008594:	b29a      	uxth	r2, r3
 8008596:	4b2a      	ldr	r3, [pc, #168]	@ (8008640 <tcp_receive+0xf18>)
 8008598:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800859a:	4b29      	ldr	r3, [pc, #164]	@ (8008640 <tcp_receive+0xf18>)
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	4b25      	ldr	r3, [pc, #148]	@ (8008638 <tcp_receive+0xf10>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	441a      	add	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80085ae:	440b      	add	r3, r1
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d019      	beq.n	80085e8 <tcp_receive+0xec0>
 80085b4:	4b23      	ldr	r3, [pc, #140]	@ (8008644 <tcp_receive+0xf1c>)
 80085b6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80085ba:	4923      	ldr	r1, [pc, #140]	@ (8008648 <tcp_receive+0xf20>)
 80085bc:	4823      	ldr	r0, [pc, #140]	@ (800864c <tcp_receive+0xf24>)
 80085be:	f004 fa0f 	bl	800c9e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80085c2:	e011      	b.n	80085e8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f47f aea5 	bne.w	800831c <tcp_receive+0xbf4>
 80085d2:	e00a      	b.n	80085ea <tcp_receive+0xec2>
                break;
 80085d4:	bf00      	nop
 80085d6:	e008      	b.n	80085ea <tcp_receive+0xec2>
                break;
 80085d8:	bf00      	nop
 80085da:	e006      	b.n	80085ea <tcp_receive+0xec2>
                  break;
 80085dc:	bf00      	nop
 80085de:	e004      	b.n	80085ea <tcp_receive+0xec2>
                  break;
 80085e0:	bf00      	nop
 80085e2:	e002      	b.n	80085ea <tcp_receive+0xec2>
                  break;
 80085e4:	bf00      	nop
 80085e6:	e000      	b.n	80085ea <tcp_receive+0xec2>
                break;
 80085e8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 fa30 	bl	8009a50 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80085f0:	e003      	b.n	80085fa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f001 fa2c 	bl	8009a50 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80085f8:	e01a      	b.n	8008630 <tcp_receive+0xf08>
 80085fa:	e019      	b.n	8008630 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80085fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008638 <tcp_receive+0xf10>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	db0a      	blt.n	8008620 <tcp_receive+0xef8>
 800860a:	4b0b      	ldr	r3, [pc, #44]	@ (8008638 <tcp_receive+0xf10>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008616:	440b      	add	r3, r1
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	3301      	adds	r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	dd07      	ble.n	8008630 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	8b5b      	ldrh	r3, [r3, #26]
 8008624:	f043 0302 	orr.w	r3, r3, #2
 8008628:	b29a      	uxth	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800862e:	e7ff      	b.n	8008630 <tcp_receive+0xf08>
 8008630:	bf00      	nop
 8008632:	3750      	adds	r7, #80	@ 0x50
 8008634:	46bd      	mov	sp, r7
 8008636:	bdb0      	pop	{r4, r5, r7, pc}
 8008638:	20008290 	.word	0x20008290
 800863c:	20008270 	.word	0x20008270
 8008640:	2000829a 	.word	0x2000829a
 8008644:	0800ea3c 	.word	0x0800ea3c
 8008648:	0800ede4 	.word	0x0800ede4
 800864c:	0800ea88 	.word	0x0800ea88

08008650 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8008656:	4b15      	ldr	r3, [pc, #84]	@ (80086ac <tcp_get_next_optbyte+0x5c>)
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	b291      	uxth	r1, r2
 800865e:	4a13      	ldr	r2, [pc, #76]	@ (80086ac <tcp_get_next_optbyte+0x5c>)
 8008660:	8011      	strh	r1, [r2, #0]
 8008662:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008664:	4b12      	ldr	r3, [pc, #72]	@ (80086b0 <tcp_get_next_optbyte+0x60>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d004      	beq.n	8008676 <tcp_get_next_optbyte+0x26>
 800866c:	4b11      	ldr	r3, [pc, #68]	@ (80086b4 <tcp_get_next_optbyte+0x64>)
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	88fa      	ldrh	r2, [r7, #6]
 8008672:	429a      	cmp	r2, r3
 8008674:	d208      	bcs.n	8008688 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008676:	4b10      	ldr	r3, [pc, #64]	@ (80086b8 <tcp_get_next_optbyte+0x68>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3314      	adds	r3, #20
 800867c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	4413      	add	r3, r2
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	e00b      	b.n	80086a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008688:	88fb      	ldrh	r3, [r7, #6]
 800868a:	b2da      	uxtb	r2, r3
 800868c:	4b09      	ldr	r3, [pc, #36]	@ (80086b4 <tcp_get_next_optbyte+0x64>)
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008696:	4b06      	ldr	r3, [pc, #24]	@ (80086b0 <tcp_get_next_optbyte+0x60>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	797b      	ldrb	r3, [r7, #5]
 800869c:	4413      	add	r3, r2
 800869e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	2000828c 	.word	0x2000828c
 80086b0:	20008288 	.word	0x20008288
 80086b4:	20008286 	.word	0x20008286
 80086b8:	20008280 	.word	0x20008280

080086bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <tcp_parseopt+0x1c>
 80086ca:	4b32      	ldr	r3, [pc, #200]	@ (8008794 <tcp_parseopt+0xd8>)
 80086cc:	f240 727d 	movw	r2, #1917	@ 0x77d
 80086d0:	4931      	ldr	r1, [pc, #196]	@ (8008798 <tcp_parseopt+0xdc>)
 80086d2:	4832      	ldr	r0, [pc, #200]	@ (800879c <tcp_parseopt+0xe0>)
 80086d4:	f004 f984 	bl	800c9e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80086d8:	4b31      	ldr	r3, [pc, #196]	@ (80087a0 <tcp_parseopt+0xe4>)
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d056      	beq.n	800878e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80086e0:	4b30      	ldr	r3, [pc, #192]	@ (80087a4 <tcp_parseopt+0xe8>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	801a      	strh	r2, [r3, #0]
 80086e6:	e046      	b.n	8008776 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80086e8:	f7ff ffb2 	bl	8008650 <tcp_get_next_optbyte>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d006      	beq.n	8008704 <tcp_parseopt+0x48>
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	dc2a      	bgt.n	8008750 <tcp_parseopt+0x94>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d042      	beq.n	8008784 <tcp_parseopt+0xc8>
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d038      	beq.n	8008774 <tcp_parseopt+0xb8>
 8008702:	e025      	b.n	8008750 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008704:	f7ff ffa4 	bl	8008650 <tcp_get_next_optbyte>
 8008708:	4603      	mov	r3, r0
 800870a:	2b04      	cmp	r3, #4
 800870c:	d13c      	bne.n	8008788 <tcp_parseopt+0xcc>
 800870e:	4b25      	ldr	r3, [pc, #148]	@ (80087a4 <tcp_parseopt+0xe8>)
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a22      	ldr	r2, [pc, #136]	@ (80087a0 <tcp_parseopt+0xe4>)
 8008716:	8812      	ldrh	r2, [r2, #0]
 8008718:	4293      	cmp	r3, r2
 800871a:	da35      	bge.n	8008788 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800871c:	f7ff ff98 	bl	8008650 <tcp_get_next_optbyte>
 8008720:	4603      	mov	r3, r0
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8008726:	f7ff ff93 	bl	8008650 <tcp_get_next_optbyte>
 800872a:	4603      	mov	r3, r0
 800872c:	461a      	mov	r2, r3
 800872e:	89bb      	ldrh	r3, [r7, #12]
 8008730:	4313      	orrs	r3, r2
 8008732:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008734:	89bb      	ldrh	r3, [r7, #12]
 8008736:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800873a:	d804      	bhi.n	8008746 <tcp_parseopt+0x8a>
 800873c:	89bb      	ldrh	r3, [r7, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <tcp_parseopt+0x8a>
 8008742:	89ba      	ldrh	r2, [r7, #12]
 8008744:	e001      	b.n	800874a <tcp_parseopt+0x8e>
 8008746:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800874e:	e012      	b.n	8008776 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8008750:	f7ff ff7e 	bl	8008650 <tcp_get_next_optbyte>
 8008754:	4603      	mov	r3, r0
 8008756:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8008758:	7afb      	ldrb	r3, [r7, #11]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d916      	bls.n	800878c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	b29a      	uxth	r2, r3
 8008762:	4b10      	ldr	r3, [pc, #64]	@ (80087a4 <tcp_parseopt+0xe8>)
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	4413      	add	r3, r2
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b02      	subs	r3, #2
 800876c:	b29a      	uxth	r2, r3
 800876e:	4b0d      	ldr	r3, [pc, #52]	@ (80087a4 <tcp_parseopt+0xe8>)
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	e000      	b.n	8008776 <tcp_parseopt+0xba>
          break;
 8008774:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008776:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <tcp_parseopt+0xe8>)
 8008778:	881a      	ldrh	r2, [r3, #0]
 800877a:	4b09      	ldr	r3, [pc, #36]	@ (80087a0 <tcp_parseopt+0xe4>)
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d3b2      	bcc.n	80086e8 <tcp_parseopt+0x2c>
 8008782:	e004      	b.n	800878e <tcp_parseopt+0xd2>
          return;
 8008784:	bf00      	nop
 8008786:	e002      	b.n	800878e <tcp_parseopt+0xd2>
            return;
 8008788:	bf00      	nop
 800878a:	e000      	b.n	800878e <tcp_parseopt+0xd2>
            return;
 800878c:	bf00      	nop
      }
    }
  }
}
 800878e:	3710      	adds	r7, #16
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	0800ea3c 	.word	0x0800ea3c
 8008798:	0800eea0 	.word	0x0800eea0
 800879c:	0800ea88 	.word	0x0800ea88
 80087a0:	20008284 	.word	0x20008284
 80087a4:	2000828c 	.word	0x2000828c

080087a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80087ac:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <tcp_trigger_input_pcb_close+0x1c>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	f043 0310 	orr.w	r3, r3, #16
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	4b03      	ldr	r3, [pc, #12]	@ (80087c4 <tcp_trigger_input_pcb_close+0x1c>)
 80087b8:	701a      	strb	r2, [r3, #0]
}
 80087ba:	bf00      	nop
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	2000829d 	.word	0x2000829d

080087c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <tcp_route+0x28>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	7a1b      	ldrb	r3, [r3, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d006      	beq.n	80087f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	7a1b      	ldrb	r3, [r3, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fb fb7c 	bl	8003ee4 <netif_get_by_index>
 80087ec:	4603      	mov	r3, r0
 80087ee:	e003      	b.n	80087f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f002 fe09 	bl	800b408 <ip4_route>
 80087f6:	4603      	mov	r3, r0
  }
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8008800:	b590      	push	{r4, r7, lr}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	4613      	mov	r3, r2
 800880e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d105      	bne.n	8008822 <tcp_create_segment+0x22>
 8008816:	4b43      	ldr	r3, [pc, #268]	@ (8008924 <tcp_create_segment+0x124>)
 8008818:	22a3      	movs	r2, #163	@ 0xa3
 800881a:	4943      	ldr	r1, [pc, #268]	@ (8008928 <tcp_create_segment+0x128>)
 800881c:	4843      	ldr	r0, [pc, #268]	@ (800892c <tcp_create_segment+0x12c>)
 800881e:	f004 f8df 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d105      	bne.n	8008834 <tcp_create_segment+0x34>
 8008828:	4b3e      	ldr	r3, [pc, #248]	@ (8008924 <tcp_create_segment+0x124>)
 800882a:	22a4      	movs	r2, #164	@ 0xa4
 800882c:	4940      	ldr	r1, [pc, #256]	@ (8008930 <tcp_create_segment+0x130>)
 800882e:	483f      	ldr	r0, [pc, #252]	@ (800892c <tcp_create_segment+0x12c>)
 8008830:	f004 f8d6 	bl	800c9e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008834:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008842:	2003      	movs	r0, #3
 8008844:	f7fb f86e 	bl	8003924 <memp_malloc>
 8008848:	6138      	str	r0, [r7, #16]
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008850:	68b8      	ldr	r0, [r7, #8]
 8008852:	f7fb fe87 	bl	8004564 <pbuf_free>
    return NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	e060      	b.n	800891c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8008860:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	891a      	ldrh	r2, [r3, #8]
 8008872:	7dfb      	ldrb	r3, [r7, #23]
 8008874:	b29b      	uxth	r3, r3
 8008876:	429a      	cmp	r2, r3
 8008878:	d205      	bcs.n	8008886 <tcp_create_segment+0x86>
 800887a:	4b2a      	ldr	r3, [pc, #168]	@ (8008924 <tcp_create_segment+0x124>)
 800887c:	22b0      	movs	r2, #176	@ 0xb0
 800887e:	492d      	ldr	r1, [pc, #180]	@ (8008934 <tcp_create_segment+0x134>)
 8008880:	482a      	ldr	r0, [pc, #168]	@ (800892c <tcp_create_segment+0x12c>)
 8008882:	f004 f8ad 	bl	800c9e0 <iprintf>
  seg->len = p->tot_len - optlen;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	891a      	ldrh	r2, [r3, #8]
 800888a:	7dfb      	ldrb	r3, [r7, #23]
 800888c:	b29b      	uxth	r3, r3
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	b29a      	uxth	r2, r3
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8008896:	2114      	movs	r1, #20
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f7fb fdcd 	bl	8004438 <pbuf_add_header>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d004      	beq.n	80088ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80088a4:	6938      	ldr	r0, [r7, #16]
 80088a6:	f7fd f8d2 	bl	8005a4e <tcp_seg_free>
    return NULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	e036      	b.n	800891c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8ada      	ldrh	r2, [r3, #22]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	68dc      	ldr	r4, [r3, #12]
 80088c0:	4610      	mov	r0, r2
 80088c2:	f7fa fbd8 	bl	8003076 <lwip_htons>
 80088c6:	4603      	mov	r3, r0
 80088c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8b1a      	ldrh	r2, [r3, #24]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	68dc      	ldr	r4, [r3, #12]
 80088d2:	4610      	mov	r0, r2
 80088d4:	f7fa fbcf 	bl	8003076 <lwip_htons>
 80088d8:	4603      	mov	r3, r0
 80088da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	68dc      	ldr	r4, [r3, #12]
 80088e0:	6838      	ldr	r0, [r7, #0]
 80088e2:	f7fa fbde 	bl	80030a2 <lwip_htonl>
 80088e6:	4603      	mov	r3, r0
 80088e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	089b      	lsrs	r3, r3, #2
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	3305      	adds	r3, #5
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	031b      	lsls	r3, r3, #12
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	4313      	orrs	r3, r2
 80088fe:	b29a      	uxth	r2, r3
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	68dc      	ldr	r4, [r3, #12]
 8008904:	4610      	mov	r0, r2
 8008906:	f7fa fbb6 	bl	8003076 <lwip_htons>
 800890a:	4603      	mov	r3, r0
 800890c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	749a      	strb	r2, [r3, #18]
 8008916:	2200      	movs	r2, #0
 8008918:	74da      	strb	r2, [r3, #19]
  return seg;
 800891a:	693b      	ldr	r3, [r7, #16]
}
 800891c:	4618      	mov	r0, r3
 800891e:	371c      	adds	r7, #28
 8008920:	46bd      	mov	sp, r7
 8008922:	bd90      	pop	{r4, r7, pc}
 8008924:	0800eebc 	.word	0x0800eebc
 8008928:	0800eef0 	.word	0x0800eef0
 800892c:	0800ef10 	.word	0x0800ef10
 8008930:	0800ef38 	.word	0x0800ef38
 8008934:	0800ef5c 	.word	0x0800ef5c

08008938 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8008938:	b590      	push	{r4, r7, lr}
 800893a:	b08b      	sub	sp, #44	@ 0x2c
 800893c:	af02      	add	r7, sp, #8
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8008944:	2300      	movs	r3, #0
 8008946:	61fb      	str	r3, [r7, #28]
 8008948:	2300      	movs	r3, #0
 800894a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <tcp_split_unsent_seg+0x2c>
 8008956:	4b95      	ldr	r3, [pc, #596]	@ (8008bac <tcp_split_unsent_seg+0x274>)
 8008958:	f240 324b 	movw	r2, #843	@ 0x34b
 800895c:	4994      	ldr	r1, [pc, #592]	@ (8008bb0 <tcp_split_unsent_seg+0x278>)
 800895e:	4895      	ldr	r0, [pc, #596]	@ (8008bb4 <tcp_split_unsent_seg+0x27c>)
 8008960:	f004 f83e 	bl	800c9e0 <iprintf>

  useg = pcb->unsent;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008968:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8008970:	f04f 33ff 	mov.w	r3, #4294967295
 8008974:	e116      	b.n	8008ba4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8008976:	887b      	ldrh	r3, [r7, #2]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d109      	bne.n	8008990 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800897c:	4b8b      	ldr	r3, [pc, #556]	@ (8008bac <tcp_split_unsent_seg+0x274>)
 800897e:	f240 3253 	movw	r2, #851	@ 0x353
 8008982:	498d      	ldr	r1, [pc, #564]	@ (8008bb8 <tcp_split_unsent_seg+0x280>)
 8008984:	488b      	ldr	r0, [pc, #556]	@ (8008bb4 <tcp_split_unsent_seg+0x27c>)
 8008986:	f004 f82b 	bl	800c9e0 <iprintf>
    return ERR_VAL;
 800898a:	f06f 0305 	mvn.w	r3, #5
 800898e:	e109      	b.n	8008ba4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	891b      	ldrh	r3, [r3, #8]
 8008994:	887a      	ldrh	r2, [r7, #2]
 8008996:	429a      	cmp	r2, r3
 8008998:	d301      	bcc.n	800899e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	e102      	b.n	8008ba4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089a2:	887a      	ldrh	r2, [r7, #2]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d906      	bls.n	80089b6 <tcp_split_unsent_seg+0x7e>
 80089a8:	4b80      	ldr	r3, [pc, #512]	@ (8008bac <tcp_split_unsent_seg+0x274>)
 80089aa:	f240 325b 	movw	r2, #859	@ 0x35b
 80089ae:	4983      	ldr	r1, [pc, #524]	@ (8008bbc <tcp_split_unsent_seg+0x284>)
 80089b0:	4880      	ldr	r0, [pc, #512]	@ (8008bb4 <tcp_split_unsent_seg+0x27c>)
 80089b2:	f004 f815 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	891b      	ldrh	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <tcp_split_unsent_seg+0x94>
 80089be:	4b7b      	ldr	r3, [pc, #492]	@ (8008bac <tcp_split_unsent_seg+0x274>)
 80089c0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80089c4:	497e      	ldr	r1, [pc, #504]	@ (8008bc0 <tcp_split_unsent_seg+0x288>)
 80089c6:	487b      	ldr	r0, [pc, #492]	@ (8008bb4 <tcp_split_unsent_seg+0x27c>)
 80089c8:	f004 f80a 	bl	800c9e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	7a9b      	ldrb	r3, [r3, #10]
 80089d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	891a      	ldrh	r2, [r3, #8]
 80089e2:	887b      	ldrh	r3, [r7, #2]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80089e8:	7bbb      	ldrb	r3, [r7, #14]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	89bb      	ldrh	r3, [r7, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80089f6:	4619      	mov	r1, r3
 80089f8:	2036      	movs	r0, #54	@ 0x36
 80089fa:	f7fb facf 	bl	8003f9c <pbuf_alloc>
 80089fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80b7 	beq.w	8008b76 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	891a      	ldrh	r2, [r3, #8]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	891b      	ldrh	r3, [r3, #8]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	887b      	ldrh	r3, [r7, #2]
 8008a18:	4413      	add	r3, r2
 8008a1a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	6858      	ldr	r0, [r3, #4]
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	18d1      	adds	r1, r2, r3
 8008a28:	897b      	ldrh	r3, [r7, #10]
 8008a2a:	89ba      	ldrh	r2, [r7, #12]
 8008a2c:	f7fb ff84 	bl	8004938 <pbuf_copy_partial>
 8008a30:	4603      	mov	r3, r0
 8008a32:	461a      	mov	r2, r3
 8008a34:	89bb      	ldrh	r3, [r7, #12]
 8008a36:	4293      	cmp	r3, r2
 8008a38:	f040 809f 	bne.w	8008b7a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	899b      	ldrh	r3, [r3, #12]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fa fb16 	bl	8003076 <lwip_htons>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a52:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8008a54:	2300      	movs	r3, #0
 8008a56:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8008a58:	7efb      	ldrb	r3, [r7, #27]
 8008a5a:	f003 0308 	and.w	r3, r3, #8
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d007      	beq.n	8008a72 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8008a62:	7efb      	ldrb	r3, [r7, #27]
 8008a64:	f023 0308 	bic.w	r3, r3, #8
 8008a68:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8008a6a:	7ebb      	ldrb	r3, [r7, #26]
 8008a6c:	f043 0308 	orr.w	r3, r3, #8
 8008a70:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8008a72:	7efb      	ldrb	r3, [r7, #27]
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d007      	beq.n	8008a8c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8008a7c:	7efb      	ldrb	r3, [r7, #27]
 8008a7e:	f023 0301 	bic.w	r3, r3, #1
 8008a82:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8008a84:	7ebb      	ldrb	r3, [r7, #26]
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fa fb05 	bl	80030a2 <lwip_htonl>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	887b      	ldrh	r3, [r7, #2]
 8008a9c:	18d1      	adds	r1, r2, r3
 8008a9e:	7eba      	ldrb	r2, [r7, #26]
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	6939      	ldr	r1, [r7, #16]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7ff fea9 	bl	8008800 <tcp_create_segment>
 8008aae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d063      	beq.n	8008b7e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fb fdda 	bl	8004674 <pbuf_clen>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008aca:	1a9b      	subs	r3, r3, r2
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	6858      	ldr	r0, [r3, #4]
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	891a      	ldrh	r2, [r3, #8]
 8008ade:	89bb      	ldrh	r3, [r7, #12]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	f7fb fbb7 	bl	8004258 <pbuf_realloc>
  useg->len -= remainder;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	891a      	ldrh	r2, [r3, #8]
 8008aee:	89bb      	ldrh	r3, [r7, #12]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	899b      	ldrh	r3, [r3, #12]
 8008afe:	b29c      	uxth	r4, r3
 8008b00:	7efb      	ldrb	r3, [r7, #27]
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fa fab6 	bl	8003076 <lwip_htons>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	4322      	orrs	r2, r4
 8008b14:	b292      	uxth	r2, r2
 8008b16:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fb fda9 	bl	8004674 <pbuf_clen>
 8008b22:	4603      	mov	r3, r0
 8008b24:	461a      	mov	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008b2c:	4413      	add	r3, r2
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fb fd9a 	bl	8004674 <pbuf_clen>
 8008b40:	4603      	mov	r3, r0
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008b4a:	4413      	add	r3, r2
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d103      	bne.n	8008b72 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e016      	b.n	8008ba4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8008b76:	bf00      	nop
 8008b78:	e002      	b.n	8008b80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8008b7a:	bf00      	nop
 8008b7c:	e000      	b.n	8008b80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8008b7e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d006      	beq.n	8008b94 <tcp_split_unsent_seg+0x25c>
 8008b86:	4b09      	ldr	r3, [pc, #36]	@ (8008bac <tcp_split_unsent_seg+0x274>)
 8008b88:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8008b8c:	490d      	ldr	r1, [pc, #52]	@ (8008bc4 <tcp_split_unsent_seg+0x28c>)
 8008b8e:	4809      	ldr	r0, [pc, #36]	@ (8008bb4 <tcp_split_unsent_seg+0x27c>)
 8008b90:	f003 ff26 	bl	800c9e0 <iprintf>
  if (p != NULL) {
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8008b9a:	6938      	ldr	r0, [r7, #16]
 8008b9c:	f7fb fce2 	bl	8004564 <pbuf_free>
  }

  return ERR_MEM;
 8008ba0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3724      	adds	r7, #36	@ 0x24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd90      	pop	{r4, r7, pc}
 8008bac:	0800eebc 	.word	0x0800eebc
 8008bb0:	0800f250 	.word	0x0800f250
 8008bb4:	0800ef10 	.word	0x0800ef10
 8008bb8:	0800f274 	.word	0x0800f274
 8008bbc:	0800f298 	.word	0x0800f298
 8008bc0:	0800f2a8 	.word	0x0800f2a8
 8008bc4:	0800f2b8 	.word	0x0800f2b8

08008bc8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008bc8:	b590      	push	{r4, r7, lr}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <tcp_send_fin+0x1c>
 8008bd6:	4b21      	ldr	r3, [pc, #132]	@ (8008c5c <tcp_send_fin+0x94>)
 8008bd8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8008bdc:	4920      	ldr	r1, [pc, #128]	@ (8008c60 <tcp_send_fin+0x98>)
 8008bde:	4821      	ldr	r0, [pc, #132]	@ (8008c64 <tcp_send_fin+0x9c>)
 8008be0:	f003 fefe 	bl	800c9e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d02e      	beq.n	8008c4a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	e002      	b.n	8008bfa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f8      	bne.n	8008bf4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	899b      	ldrh	r3, [r3, #12]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fa fa33 	bl	8003076 <lwip_htons>
 8008c10:	4603      	mov	r3, r0
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d116      	bne.n	8008c4a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	899b      	ldrh	r3, [r3, #12]
 8008c22:	b29c      	uxth	r4, r3
 8008c24:	2001      	movs	r0, #1
 8008c26:	f7fa fa26 	bl	8003076 <lwip_htons>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	4322      	orrs	r2, r4
 8008c34:	b292      	uxth	r2, r2
 8008c36:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	8b5b      	ldrh	r3, [r3, #26]
 8008c3c:	f043 0320 	orr.w	r3, r3, #32
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	e004      	b.n	8008c54 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f80b 	bl	8008c68 <tcp_enqueue_flags>
 8008c52:	4603      	mov	r3, r0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd90      	pop	{r4, r7, pc}
 8008c5c:	0800eebc 	.word	0x0800eebc
 8008c60:	0800f2c4 	.word	0x0800f2c4
 8008c64:	0800ef10 	.word	0x0800ef10

08008c68 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	@ 0x28
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8008c74:	2300      	movs	r3, #0
 8008c76:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d106      	bne.n	8008c94 <tcp_enqueue_flags+0x2c>
 8008c86:	4b67      	ldr	r3, [pc, #412]	@ (8008e24 <tcp_enqueue_flags+0x1bc>)
 8008c88:	f240 4211 	movw	r2, #1041	@ 0x411
 8008c8c:	4966      	ldr	r1, [pc, #408]	@ (8008e28 <tcp_enqueue_flags+0x1c0>)
 8008c8e:	4867      	ldr	r0, [pc, #412]	@ (8008e2c <tcp_enqueue_flags+0x1c4>)
 8008c90:	f003 fea6 	bl	800c9e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <tcp_enqueue_flags+0x40>
 8008c9a:	4b62      	ldr	r3, [pc, #392]	@ (8008e24 <tcp_enqueue_flags+0x1bc>)
 8008c9c:	f240 4213 	movw	r2, #1043	@ 0x413
 8008ca0:	4963      	ldr	r1, [pc, #396]	@ (8008e30 <tcp_enqueue_flags+0x1c8>)
 8008ca2:	4862      	ldr	r0, [pc, #392]	@ (8008e2c <tcp_enqueue_flags+0x1c4>)
 8008ca4:	f003 fe9c 	bl	800c9e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8008cb6:	7ffb      	ldrb	r3, [r7, #31]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8008cca:	4619      	mov	r1, r3
 8008ccc:	2036      	movs	r0, #54	@ 0x36
 8008cce:	f7fb f965 	bl	8003f9c <pbuf_alloc>
 8008cd2:	6138      	str	r0, [r7, #16]
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d109      	bne.n	8008cee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	8b5b      	ldrh	r3, [r3, #26]
 8008cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cec:	e095      	b.n	8008e1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	895a      	ldrh	r2, [r3, #10]
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d206      	bcs.n	8008d08 <tcp_enqueue_flags+0xa0>
 8008cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8008e24 <tcp_enqueue_flags+0x1bc>)
 8008cfc:	f240 4239 	movw	r2, #1081	@ 0x439
 8008d00:	494c      	ldr	r1, [pc, #304]	@ (8008e34 <tcp_enqueue_flags+0x1cc>)
 8008d02:	484a      	ldr	r0, [pc, #296]	@ (8008e2c <tcp_enqueue_flags+0x1c4>)
 8008d04:	f003 fe6c 	bl	800c9e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	7ffb      	ldrb	r3, [r7, #31]
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	460b      	mov	r3, r1
 8008d14:	6939      	ldr	r1, [r7, #16]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff fd72 	bl	8008800 <tcp_create_segment>
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d109      	bne.n	8008d38 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	8b5b      	ldrh	r3, [r3, #26]
 8008d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008d32:	f04f 33ff 	mov.w	r3, #4294967295
 8008d36:	e070      	b.n	8008e1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f003 0303 	and.w	r3, r3, #3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d006      	beq.n	8008d52 <tcp_enqueue_flags+0xea>
 8008d44:	4b37      	ldr	r3, [pc, #220]	@ (8008e24 <tcp_enqueue_flags+0x1bc>)
 8008d46:	f240 4242 	movw	r2, #1090	@ 0x442
 8008d4a:	493b      	ldr	r1, [pc, #236]	@ (8008e38 <tcp_enqueue_flags+0x1d0>)
 8008d4c:	4837      	ldr	r0, [pc, #220]	@ (8008e2c <tcp_enqueue_flags+0x1c4>)
 8008d4e:	f003 fe47 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	891b      	ldrh	r3, [r3, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d006      	beq.n	8008d68 <tcp_enqueue_flags+0x100>
 8008d5a:	4b32      	ldr	r3, [pc, #200]	@ (8008e24 <tcp_enqueue_flags+0x1bc>)
 8008d5c:	f240 4243 	movw	r2, #1091	@ 0x443
 8008d60:	4936      	ldr	r1, [pc, #216]	@ (8008e3c <tcp_enqueue_flags+0x1d4>)
 8008d62:	4832      	ldr	r0, [pc, #200]	@ (8008e2c <tcp_enqueue_flags+0x1c4>)
 8008d64:	f003 fe3c 	bl	800c9e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d103      	bne.n	8008d78 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008d76:	e00d      	b.n	8008d94 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d7c:	61bb      	str	r3, [r7, #24]
 8008d7e:	e002      	b.n	8008d86 <tcp_enqueue_flags+0x11e>
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	61bb      	str	r3, [r7, #24]
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1f8      	bne.n	8008d80 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d104      	bne.n	8008db0 <tcp_enqueue_flags+0x148>
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d004      	beq.n	8008dba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8008dba:	78fb      	ldrb	r3, [r7, #3]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d006      	beq.n	8008dd2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	8b5b      	ldrh	r3, [r3, #26]
 8008dc8:	f043 0320 	orr.w	r3, r3, #32
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fb fc4c 	bl	8004674 <pbuf_clen>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	461a      	mov	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008de6:	4413      	add	r3, r2
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00e      	beq.n	8008e18 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10a      	bne.n	8008e18 <tcp_enqueue_flags+0x1b0>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <tcp_enqueue_flags+0x1b0>
 8008e0a:	4b06      	ldr	r3, [pc, #24]	@ (8008e24 <tcp_enqueue_flags+0x1bc>)
 8008e0c:	f240 4265 	movw	r2, #1125	@ 0x465
 8008e10:	490b      	ldr	r1, [pc, #44]	@ (8008e40 <tcp_enqueue_flags+0x1d8>)
 8008e12:	4806      	ldr	r0, [pc, #24]	@ (8008e2c <tcp_enqueue_flags+0x1c4>)
 8008e14:	f003 fde4 	bl	800c9e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3720      	adds	r7, #32
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	0800eebc 	.word	0x0800eebc
 8008e28:	0800f2e0 	.word	0x0800f2e0
 8008e2c:	0800ef10 	.word	0x0800ef10
 8008e30:	0800f338 	.word	0x0800f338
 8008e34:	0800f358 	.word	0x0800f358
 8008e38:	0800f394 	.word	0x0800f394
 8008e3c:	0800f3ac 	.word	0x0800f3ac
 8008e40:	0800f3d8 	.word	0x0800f3d8

08008e44 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008e44:	b5b0      	push	{r4, r5, r7, lr}
 8008e46:	b08a      	sub	sp, #40	@ 0x28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d106      	bne.n	8008e60 <tcp_output+0x1c>
 8008e52:	4b8a      	ldr	r3, [pc, #552]	@ (800907c <tcp_output+0x238>)
 8008e54:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8008e58:	4989      	ldr	r1, [pc, #548]	@ (8009080 <tcp_output+0x23c>)
 8008e5a:	488a      	ldr	r0, [pc, #552]	@ (8009084 <tcp_output+0x240>)
 8008e5c:	f003 fdc0 	bl	800c9e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	7d1b      	ldrb	r3, [r3, #20]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d106      	bne.n	8008e76 <tcp_output+0x32>
 8008e68:	4b84      	ldr	r3, [pc, #528]	@ (800907c <tcp_output+0x238>)
 8008e6a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8008e6e:	4986      	ldr	r1, [pc, #536]	@ (8009088 <tcp_output+0x244>)
 8008e70:	4884      	ldr	r0, [pc, #528]	@ (8009084 <tcp_output+0x240>)
 8008e72:	f003 fdb5 	bl	800c9e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008e76:	4b85      	ldr	r3, [pc, #532]	@ (800908c <tcp_output+0x248>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d101      	bne.n	8008e84 <tcp_output+0x40>
    return ERR_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	e1ce      	b.n	8009222 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e90:	4293      	cmp	r3, r2
 8008e92:	bf28      	it	cs
 8008e94:	4613      	movcs	r3, r2
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10b      	bne.n	8008ebe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	8b5b      	ldrh	r3, [r3, #26]
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 81aa 	beq.w	8009208 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fdcb 	bl	8009a50 <tcp_send_empty_ack>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	e1b1      	b.n	8009222 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f7ff fc7e 	bl	80087c8 <tcp_route>
 8008ecc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d102      	bne.n	8008eda <tcp_output+0x96>
    return ERR_RTE;
 8008ed4:	f06f 0303 	mvn.w	r3, #3
 8008ed8:	e1a3      	b.n	8009222 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <tcp_output+0xa4>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d111      	bne.n	8008f0c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d002      	beq.n	8008ef4 <tcp_output+0xb0>
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	e000      	b.n	8008ef6 <tcp_output+0xb2>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d102      	bne.n	8008f04 <tcp_output+0xc0>
      return ERR_RTE;
 8008efe:	f06f 0303 	mvn.w	r3, #3
 8008f02:	e18e      	b.n	8009222 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7fa f8c5 	bl	80030a2 <lwip_htonl>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f22:	8912      	ldrh	r2, [r2, #8]
 8008f24:	4413      	add	r3, r2
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d227      	bcs.n	8008f7c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f32:	461a      	mov	r2, r3
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d114      	bne.n	8008f64 <tcp_output+0x120>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d110      	bne.n	8008f64 <tcp_output+0x120>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10b      	bne.n	8008f64 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	8b5b      	ldrh	r3, [r3, #26]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 814d 	beq.w	800920c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fd6c 	bl	8009a50 <tcp_send_empty_ack>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	e152      	b.n	8009222 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f88:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 811c 	beq.w	80091ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8008f92:	e002      	b.n	8008f9a <tcp_output+0x156>
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	623b      	str	r3, [r7, #32]
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f8      	bne.n	8008f94 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8008fa2:	e112      	b.n	80091ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	899b      	ldrh	r3, [r3, #12]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fa f862 	bl	8003076 <lwip_htons>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	f003 0304 	and.w	r3, r3, #4
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d006      	beq.n	8008fcc <tcp_output+0x188>
 8008fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800907c <tcp_output+0x238>)
 8008fc0:	f240 5236 	movw	r2, #1334	@ 0x536
 8008fc4:	4932      	ldr	r1, [pc, #200]	@ (8009090 <tcp_output+0x24c>)
 8008fc6:	482f      	ldr	r0, [pc, #188]	@ (8009084 <tcp_output+0x240>)
 8008fc8:	f003 fd0a 	bl	800c9e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d01f      	beq.n	8009014 <tcp_output+0x1d0>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	8b5b      	ldrh	r3, [r3, #26]
 8008fd8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d119      	bne.n	8009014 <tcp_output+0x1d0>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00b      	beq.n	8009000 <tcp_output+0x1bc>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d110      	bne.n	8009014 <tcp_output+0x1d0>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ff6:	891a      	ldrh	r2, [r3, #8]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d209      	bcs.n	8009014 <tcp_output+0x1d0>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009006:	2b00      	cmp	r3, #0
 8009008:	d004      	beq.n	8009014 <tcp_output+0x1d0>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8009010:	2b08      	cmp	r3, #8
 8009012:	d901      	bls.n	8009018 <tcp_output+0x1d4>
 8009014:	2301      	movs	r3, #1
 8009016:	e000      	b.n	800901a <tcp_output+0x1d6>
 8009018:	2300      	movs	r3, #0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	8b5b      	ldrh	r3, [r3, #26]
 8009022:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 80e4 	beq.w	80091f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	7d1b      	ldrb	r3, [r3, #20]
 8009030:	2b02      	cmp	r3, #2
 8009032:	d00d      	beq.n	8009050 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	899b      	ldrh	r3, [r3, #12]
 800903a:	b29c      	uxth	r4, r3
 800903c:	2010      	movs	r0, #16
 800903e:	f7fa f81a 	bl	8003076 <lwip_htons>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	4322      	orrs	r2, r4
 800904c:	b292      	uxth	r2, r2
 800904e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009056:	f000 f909 	bl	800926c <tcp_output_segment>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800905e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d016      	beq.n	8009094 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	8b5b      	ldrh	r3, [r3, #26]
 800906a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800906e:	b29a      	uxth	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	835a      	strh	r2, [r3, #26]
      return err;
 8009074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009078:	e0d3      	b.n	8009222 <tcp_output+0x3de>
 800907a:	bf00      	nop
 800907c:	0800eebc 	.word	0x0800eebc
 8009080:	0800f400 	.word	0x0800f400
 8009084:	0800ef10 	.word	0x0800ef10
 8009088:	0800f418 	.word	0x0800f418
 800908c:	200082a4 	.word	0x200082a4
 8009090:	0800f440 	.word	0x0800f440
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7d1b      	ldrb	r3, [r3, #20]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d006      	beq.n	80090b2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	8b5b      	ldrh	r3, [r3, #26]
 80090a8:	f023 0303 	bic.w	r3, r3, #3
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80090b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7f9 fff2 	bl	80030a2 <lwip_htonl>
 80090be:	4604      	mov	r4, r0
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	891b      	ldrh	r3, [r3, #8]
 80090c4:	461d      	mov	r5, r3
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	899b      	ldrh	r3, [r3, #12]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7f9 ffd1 	bl	8003076 <lwip_htons>
 80090d4:	4603      	mov	r3, r0
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <tcp_output+0x2a0>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <tcp_output+0x2a2>
 80090e4:	2300      	movs	r3, #0
 80090e6:	442b      	add	r3, r5
 80090e8:	4423      	add	r3, r4
 80090ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da02      	bge.n	80090fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80090fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009100:	891b      	ldrh	r3, [r3, #8]
 8009102:	461c      	mov	r4, r3
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	899b      	ldrh	r3, [r3, #12]
 800910a:	b29b      	uxth	r3, r3
 800910c:	4618      	mov	r0, r3
 800910e:	f7f9 ffb2 	bl	8003076 <lwip_htons>
 8009112:	4603      	mov	r3, r0
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f003 0303 	and.w	r3, r3, #3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <tcp_output+0x2de>
 800911e:	2301      	movs	r3, #1
 8009120:	e000      	b.n	8009124 <tcp_output+0x2e0>
 8009122:	2300      	movs	r3, #0
 8009124:	4423      	add	r3, r4
 8009126:	2b00      	cmp	r3, #0
 8009128:	d049      	beq.n	80091be <tcp_output+0x37a>
      seg->next = NULL;
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009134:	2b00      	cmp	r3, #0
 8009136:	d105      	bne.n	8009144 <tcp_output+0x300>
        pcb->unacked = seg;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800913c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	623b      	str	r3, [r7, #32]
 8009142:	e03f      	b.n	80091c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	4618      	mov	r0, r3
 800914c:	f7f9 ffa9 	bl	80030a2 <lwip_htonl>
 8009150:	4604      	mov	r4, r0
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	4618      	mov	r0, r3
 800915a:	f7f9 ffa2 	bl	80030a2 <lwip_htonl>
 800915e:	4603      	mov	r3, r0
 8009160:	1ae3      	subs	r3, r4, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	da24      	bge.n	80091b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3370      	adds	r3, #112	@ 0x70
 800916a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800916c:	e002      	b.n	8009174 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d011      	beq.n	80091a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	4618      	mov	r0, r3
 8009186:	f7f9 ff8c 	bl	80030a2 <lwip_htonl>
 800918a:	4604      	mov	r4, r0
 800918c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	4618      	mov	r0, r3
 8009194:	f7f9 ff85 	bl	80030a2 <lwip_htonl>
 8009198:	4603      	mov	r3, r0
 800919a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800919c:	2b00      	cmp	r3, #0
 800919e:	dbe6      	blt.n	800916e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e009      	b.n	80091c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	623b      	str	r3, [r7, #32]
 80091bc:	e002      	b.n	80091c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80091be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091c0:	f7fc fc45 	bl	8005a4e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d012      	beq.n	80091f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f9 ff63 	bl	80030a2 <lwip_htonl>
 80091dc:	4602      	mov	r2, r0
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e6:	8912      	ldrh	r2, [r2, #8]
 80091e8:	4413      	add	r3, r2
  while (seg != NULL &&
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	f4bf aed9 	bcs.w	8008fa4 <tcp_output+0x160>
 80091f2:	e000      	b.n	80091f6 <tcp_output+0x3b2>
      break;
 80091f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d108      	bne.n	8009210 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8009206:	e004      	b.n	8009212 <tcp_output+0x3ce>
    goto output_done;
 8009208:	bf00      	nop
 800920a:	e002      	b.n	8009212 <tcp_output+0x3ce>
    goto output_done;
 800920c:	bf00      	nop
 800920e:	e000      	b.n	8009212 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009210:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	8b5b      	ldrh	r3, [r3, #26]
 8009216:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800921a:	b29a      	uxth	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3728      	adds	r7, #40	@ 0x28
 8009226:	46bd      	mov	sp, r7
 8009228:	bdb0      	pop	{r4, r5, r7, pc}
 800922a:	bf00      	nop

0800922c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <tcp_output_segment_busy+0x1c>
 800923a:	4b09      	ldr	r3, [pc, #36]	@ (8009260 <tcp_output_segment_busy+0x34>)
 800923c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8009240:	4908      	ldr	r1, [pc, #32]	@ (8009264 <tcp_output_segment_busy+0x38>)
 8009242:	4809      	ldr	r0, [pc, #36]	@ (8009268 <tcp_output_segment_busy+0x3c>)
 8009244:	f003 fbcc 	bl	800c9e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	7b9b      	ldrb	r3, [r3, #14]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d001      	beq.n	8009256 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009252:	2301      	movs	r3, #1
 8009254:	e000      	b.n	8009258 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	0800eebc 	.word	0x0800eebc
 8009264:	0800f458 	.word	0x0800f458
 8009268:	0800ef10 	.word	0x0800ef10

0800926c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800926c:	b5b0      	push	{r4, r5, r7, lr}
 800926e:	b08c      	sub	sp, #48	@ 0x30
 8009270:	af04      	add	r7, sp, #16
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <tcp_output_segment+0x20>
 800927e:	4b64      	ldr	r3, [pc, #400]	@ (8009410 <tcp_output_segment+0x1a4>)
 8009280:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8009284:	4963      	ldr	r1, [pc, #396]	@ (8009414 <tcp_output_segment+0x1a8>)
 8009286:	4864      	ldr	r0, [pc, #400]	@ (8009418 <tcp_output_segment+0x1ac>)
 8009288:	f003 fbaa 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <tcp_output_segment+0x34>
 8009292:	4b5f      	ldr	r3, [pc, #380]	@ (8009410 <tcp_output_segment+0x1a4>)
 8009294:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8009298:	4960      	ldr	r1, [pc, #384]	@ (800941c <tcp_output_segment+0x1b0>)
 800929a:	485f      	ldr	r0, [pc, #380]	@ (8009418 <tcp_output_segment+0x1ac>)
 800929c:	f003 fba0 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d106      	bne.n	80092b4 <tcp_output_segment+0x48>
 80092a6:	4b5a      	ldr	r3, [pc, #360]	@ (8009410 <tcp_output_segment+0x1a4>)
 80092a8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80092ac:	495c      	ldr	r1, [pc, #368]	@ (8009420 <tcp_output_segment+0x1b4>)
 80092ae:	485a      	ldr	r0, [pc, #360]	@ (8009418 <tcp_output_segment+0x1ac>)
 80092b0:	f003 fb96 	bl	800c9e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f7ff ffb9 	bl	800922c <tcp_output_segment_busy>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	e0a1      	b.n	8009408 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	68dc      	ldr	r4, [r3, #12]
 80092cc:	4610      	mov	r0, r2
 80092ce:	f7f9 fee8 	bl	80030a2 <lwip_htonl>
 80092d2:	4603      	mov	r3, r0
 80092d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	68dc      	ldr	r4, [r3, #12]
 80092de:	4610      	mov	r0, r2
 80092e0:	f7f9 fec9 	bl	8003076 <lwip_htons>
 80092e4:	4603      	mov	r3, r0
 80092e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80092f0:	441a      	add	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	3314      	adds	r3, #20
 80092fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	7a9b      	ldrb	r3, [r3, #10]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d015      	beq.n	8009336 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	3304      	adds	r3, #4
 800930e:	461a      	mov	r2, r3
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8009316:	f7fc fe91 	bl	800603c <tcp_eff_send_mss_netif>
 800931a:	4603      	mov	r3, r0
 800931c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800931e:	8b7b      	ldrh	r3, [r7, #26]
 8009320:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8009324:	4618      	mov	r0, r3
 8009326:	f7f9 febc 	bl	80030a2 <lwip_htonl>
 800932a:	4602      	mov	r2, r0
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	3304      	adds	r3, #4
 8009334:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800933c:	2b00      	cmp	r3, #0
 800933e:	da02      	bge.n	8009346 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2200      	movs	r2, #0
 8009344:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10c      	bne.n	8009368 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800934e:	4b35      	ldr	r3, [pc, #212]	@ (8009424 <tcp_output_segment+0x1b8>)
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	4618      	mov	r0, r3
 800935e:	f7f9 fea0 	bl	80030a2 <lwip_htonl>
 8009362:	4602      	mov	r2, r0
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	8959      	ldrh	r1, [r3, #10]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	8b3a      	ldrh	r2, [r7, #24]
 8009382:	1a8a      	subs	r2, r1, r2
 8009384:	b292      	uxth	r2, r2
 8009386:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	8919      	ldrh	r1, [r3, #8]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	8b3a      	ldrh	r2, [r7, #24]
 8009394:	1a8a      	subs	r2, r1, r2
 8009396:	b292      	uxth	r2, r2
 8009398:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	68d2      	ldr	r2, [r2, #12]
 80093a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	741a      	strb	r2, [r3, #16]
 80093ac:	2200      	movs	r2, #0
 80093ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	7a9b      	ldrb	r3, [r3, #10]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <tcp_output_segment+0x158>
 80093c0:	2318      	movs	r3, #24
 80093c2:	e000      	b.n	80093c6 <tcp_output_segment+0x15a>
 80093c4:	2314      	movs	r3, #20
 80093c6:	4413      	add	r3, r2
 80093c8:	69fa      	ldr	r2, [r7, #28]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d006      	beq.n	80093dc <tcp_output_segment+0x170>
 80093ce:	4b10      	ldr	r3, [pc, #64]	@ (8009410 <tcp_output_segment+0x1a4>)
 80093d0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80093d4:	4914      	ldr	r1, [pc, #80]	@ (8009428 <tcp_output_segment+0x1bc>)
 80093d6:	4810      	ldr	r0, [pc, #64]	@ (8009418 <tcp_output_segment+0x1ac>)
 80093d8:	f003 fb02 	bl	800c9e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6858      	ldr	r0, [r3, #4]
 80093e0:	68b9      	ldr	r1, [r7, #8]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	1d1c      	adds	r4, r3, #4
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	7add      	ldrb	r5, [r3, #11]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	7a9b      	ldrb	r3, [r3, #10]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	9202      	str	r2, [sp, #8]
 80093f2:	2206      	movs	r2, #6
 80093f4:	9201      	str	r2, [sp, #4]
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	462b      	mov	r3, r5
 80093fa:	4622      	mov	r2, r4
 80093fc:	f002 f9c2 	bl	800b784 <ip4_output_if>
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8009404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3720      	adds	r7, #32
 800940c:	46bd      	mov	sp, r7
 800940e:	bdb0      	pop	{r4, r5, r7, pc}
 8009410:	0800eebc 	.word	0x0800eebc
 8009414:	0800f480 	.word	0x0800f480
 8009418:	0800ef10 	.word	0x0800ef10
 800941c:	0800f4a0 	.word	0x0800f4a0
 8009420:	0800f4c0 	.word	0x0800f4c0
 8009424:	20008258 	.word	0x20008258
 8009428:	0800f4e4 	.word	0x0800f4e4

0800942c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800942c:	b5b0      	push	{r4, r5, r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d106      	bne.n	8009448 <tcp_rexmit_rto_prepare+0x1c>
 800943a:	4b31      	ldr	r3, [pc, #196]	@ (8009500 <tcp_rexmit_rto_prepare+0xd4>)
 800943c:	f240 6263 	movw	r2, #1635	@ 0x663
 8009440:	4930      	ldr	r1, [pc, #192]	@ (8009504 <tcp_rexmit_rto_prepare+0xd8>)
 8009442:	4831      	ldr	r0, [pc, #196]	@ (8009508 <tcp_rexmit_rto_prepare+0xdc>)
 8009444:	f003 facc 	bl	800c9e0 <iprintf>

  if (pcb->unacked == NULL) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944c:	2b00      	cmp	r3, #0
 800944e:	d102      	bne.n	8009456 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8009450:	f06f 0305 	mvn.w	r3, #5
 8009454:	e050      	b.n	80094f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	e00b      	b.n	8009476 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f7ff fee4 	bl	800922c <tcp_output_segment_busy>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800946a:	f06f 0305 	mvn.w	r3, #5
 800946e:	e043      	b.n	80094f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1ef      	bne.n	800945e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f7ff fed4 	bl	800922c <tcp_output_segment_busy>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800948a:	f06f 0305 	mvn.w	r3, #5
 800948e:	e033      	b.n	80094f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	8b5b      	ldrh	r3, [r3, #26]
 80094aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7f9 fdf1 	bl	80030a2 <lwip_htonl>
 80094c0:	4604      	mov	r4, r0
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	891b      	ldrh	r3, [r3, #8]
 80094c6:	461d      	mov	r5, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	899b      	ldrh	r3, [r3, #12]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7f9 fdd0 	bl	8003076 <lwip_htons>
 80094d6:	4603      	mov	r3, r0
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <tcp_rexmit_rto_prepare+0xba>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <tcp_rexmit_rto_prepare+0xbc>
 80094e6:	2300      	movs	r3, #0
 80094e8:	442b      	add	r3, r5
 80094ea:	18e2      	adds	r2, r4, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009500:	0800eebc 	.word	0x0800eebc
 8009504:	0800f4f8 	.word	0x0800f4f8
 8009508:	0800ef10 	.word	0x0800ef10

0800950c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d106      	bne.n	8009528 <tcp_rexmit_rto_commit+0x1c>
 800951a:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <tcp_rexmit_rto_commit+0x44>)
 800951c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009520:	490c      	ldr	r1, [pc, #48]	@ (8009554 <tcp_rexmit_rto_commit+0x48>)
 8009522:	480d      	ldr	r0, [pc, #52]	@ (8009558 <tcp_rexmit_rto_commit+0x4c>)
 8009524:	f003 fa5c 	bl	800c9e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800952e:	2bff      	cmp	r3, #255	@ 0xff
 8009530:	d007      	beq.n	8009542 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009538:	3301      	adds	r3, #1
 800953a:	b2da      	uxtb	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff fc7e 	bl	8008e44 <tcp_output>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	0800eebc 	.word	0x0800eebc
 8009554:	0800f51c 	.word	0x0800f51c
 8009558:	0800ef10 	.word	0x0800ef10

0800955c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <tcp_rexmit_rto+0x1c>
 800956a:	4b0a      	ldr	r3, [pc, #40]	@ (8009594 <tcp_rexmit_rto+0x38>)
 800956c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8009570:	4909      	ldr	r1, [pc, #36]	@ (8009598 <tcp_rexmit_rto+0x3c>)
 8009572:	480a      	ldr	r0, [pc, #40]	@ (800959c <tcp_rexmit_rto+0x40>)
 8009574:	f003 fa34 	bl	800c9e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff ff57 	bl	800942c <tcp_rexmit_rto_prepare>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ffc1 	bl	800950c <tcp_rexmit_rto_commit>
  }
}
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	0800eebc 	.word	0x0800eebc
 8009598:	0800f540 	.word	0x0800f540
 800959c:	0800ef10 	.word	0x0800ef10

080095a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80095a0:	b590      	push	{r4, r7, lr}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <tcp_rexmit+0x1c>
 80095ae:	4b2f      	ldr	r3, [pc, #188]	@ (800966c <tcp_rexmit+0xcc>)
 80095b0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80095b4:	492e      	ldr	r1, [pc, #184]	@ (8009670 <tcp_rexmit+0xd0>)
 80095b6:	482f      	ldr	r0, [pc, #188]	@ (8009674 <tcp_rexmit+0xd4>)
 80095b8:	f003 fa12 	bl	800c9e0 <iprintf>

  if (pcb->unacked == NULL) {
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d102      	bne.n	80095ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 80095c4:	f06f 0305 	mvn.w	r3, #5
 80095c8:	e04c      	b.n	8009664 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80095d0:	68b8      	ldr	r0, [r7, #8]
 80095d2:	f7ff fe2b 	bl	800922c <tcp_output_segment_busy>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80095dc:	f06f 0305 	mvn.w	r3, #5
 80095e0:	e040      	b.n	8009664 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	336c      	adds	r3, #108	@ 0x6c
 80095ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80095f0:	e002      	b.n	80095f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d011      	beq.n	8009624 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	4618      	mov	r0, r3
 800960a:	f7f9 fd4a 	bl	80030a2 <lwip_htonl>
 800960e:	4604      	mov	r4, r0
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	4618      	mov	r0, r3
 8009618:	f7f9 fd43 	bl	80030a2 <lwip_htonl>
 800961c:	4603      	mov	r3, r0
 800961e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8009620:	2b00      	cmp	r3, #0
 8009622:	dbe6      	blt.n	80095f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d103      	bne.n	8009642 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009648:	2bff      	cmp	r3, #255	@ 0xff
 800964a:	d007      	beq.n	800965c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009652:	3301      	adds	r3, #1
 8009654:	b2da      	uxtb	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	bd90      	pop	{r4, r7, pc}
 800966c:	0800eebc 	.word	0x0800eebc
 8009670:	0800f55c 	.word	0x0800f55c
 8009674:	0800ef10 	.word	0x0800ef10

08009678 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d106      	bne.n	8009694 <tcp_rexmit_fast+0x1c>
 8009686:	4b2a      	ldr	r3, [pc, #168]	@ (8009730 <tcp_rexmit_fast+0xb8>)
 8009688:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800968c:	4929      	ldr	r1, [pc, #164]	@ (8009734 <tcp_rexmit_fast+0xbc>)
 800968e:	482a      	ldr	r0, [pc, #168]	@ (8009738 <tcp_rexmit_fast+0xc0>)
 8009690:	f003 f9a6 	bl	800c9e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009698:	2b00      	cmp	r3, #0
 800969a:	d044      	beq.n	8009726 <tcp_rexmit_fast+0xae>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	8b5b      	ldrh	r3, [r3, #26]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d13e      	bne.n	8009726 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f7ff ff79 	bl	80095a0 <tcp_rexmit>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d138      	bne.n	8009726 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80096c0:	4293      	cmp	r3, r2
 80096c2:	bf28      	it	cs
 80096c4:	4613      	movcs	r3, r2
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	0fda      	lsrs	r2, r3, #31
 80096ca:	4413      	add	r3, r2
 80096cc:	105b      	asrs	r3, r3, #1
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80096dc:	461a      	mov	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80096e2:	005b      	lsls	r3, r3, #1
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d206      	bcs.n	80096f6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009700:	4619      	mov	r1, r3
 8009702:	0049      	lsls	r1, r1, #1
 8009704:	440b      	add	r3, r1
 8009706:	b29b      	uxth	r3, r3
 8009708:	4413      	add	r3, r2
 800970a:	b29a      	uxth	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	8b5b      	ldrh	r3, [r3, #26]
 8009716:	f043 0304 	orr.w	r3, r3, #4
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	0800eebc 	.word	0x0800eebc
 8009734:	0800f574 	.word	0x0800f574
 8009738:	0800ef10 	.word	0x0800ef10

0800973c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	607b      	str	r3, [r7, #4]
 8009746:	460b      	mov	r3, r1
 8009748:	817b      	strh	r3, [r7, #10]
 800974a:	4613      	mov	r3, r2
 800974c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800974e:	897a      	ldrh	r2, [r7, #10]
 8009750:	893b      	ldrh	r3, [r7, #8]
 8009752:	4413      	add	r3, r2
 8009754:	b29b      	uxth	r3, r3
 8009756:	3314      	adds	r3, #20
 8009758:	b29b      	uxth	r3, r3
 800975a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800975e:	4619      	mov	r1, r3
 8009760:	2022      	movs	r0, #34	@ 0x22
 8009762:	f7fa fc1b 	bl	8003f9c <pbuf_alloc>
 8009766:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d04d      	beq.n	800980a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800976e:	897b      	ldrh	r3, [r7, #10]
 8009770:	3313      	adds	r3, #19
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	8952      	ldrh	r2, [r2, #10]
 8009776:	4293      	cmp	r3, r2
 8009778:	db06      	blt.n	8009788 <tcp_output_alloc_header_common+0x4c>
 800977a:	4b26      	ldr	r3, [pc, #152]	@ (8009814 <tcp_output_alloc_header_common+0xd8>)
 800977c:	f240 7223 	movw	r2, #1827	@ 0x723
 8009780:	4925      	ldr	r1, [pc, #148]	@ (8009818 <tcp_output_alloc_header_common+0xdc>)
 8009782:	4826      	ldr	r0, [pc, #152]	@ (800981c <tcp_output_alloc_header_common+0xe0>)
 8009784:	f003 f92c 	bl	800c9e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800978e:	8c3b      	ldrh	r3, [r7, #32]
 8009790:	4618      	mov	r0, r3
 8009792:	f7f9 fc70 	bl	8003076 <lwip_htons>
 8009796:	4603      	mov	r3, r0
 8009798:	461a      	mov	r2, r3
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800979e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7f9 fc68 	bl	8003076 <lwip_htons>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461a      	mov	r2, r3
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7f9 fc74 	bl	80030a2 <lwip_htonl>
 80097ba:	4602      	mov	r2, r0
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80097c0:	897b      	ldrh	r3, [r7, #10]
 80097c2:	089b      	lsrs	r3, r3, #2
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3305      	adds	r3, #5
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	031b      	lsls	r3, r3, #12
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	4313      	orrs	r3, r2
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	4618      	mov	r0, r3
 80097da:	f7f9 fc4c 	bl	8003076 <lwip_htons>
 80097de:	4603      	mov	r3, r0
 80097e0:	461a      	mov	r2, r3
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80097e6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7f9 fc44 	bl	8003076 <lwip_htons>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2200      	movs	r2, #0
 80097fa:	741a      	strb	r2, [r3, #16]
 80097fc:	2200      	movs	r2, #0
 80097fe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	2200      	movs	r2, #0
 8009804:	749a      	strb	r2, [r3, #18]
 8009806:	2200      	movs	r2, #0
 8009808:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800980a:	697b      	ldr	r3, [r7, #20]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3718      	adds	r7, #24
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	0800eebc 	.word	0x0800eebc
 8009818:	0800f594 	.word	0x0800f594
 800981c:	0800ef10 	.word	0x0800ef10

08009820 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8009820:	b5b0      	push	{r4, r5, r7, lr}
 8009822:	b08a      	sub	sp, #40	@ 0x28
 8009824:	af04      	add	r7, sp, #16
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	607b      	str	r3, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	817b      	strh	r3, [r7, #10]
 800982e:	4613      	mov	r3, r2
 8009830:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <tcp_output_alloc_header+0x26>
 8009838:	4b15      	ldr	r3, [pc, #84]	@ (8009890 <tcp_output_alloc_header+0x70>)
 800983a:	f240 7242 	movw	r2, #1858	@ 0x742
 800983e:	4915      	ldr	r1, [pc, #84]	@ (8009894 <tcp_output_alloc_header+0x74>)
 8009840:	4815      	ldr	r0, [pc, #84]	@ (8009898 <tcp_output_alloc_header+0x78>)
 8009842:	f003 f8cd 	bl	800c9e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8adb      	ldrh	r3, [r3, #22]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	8b12      	ldrh	r2, [r2, #24]
 8009852:	68f9      	ldr	r1, [r7, #12]
 8009854:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8009856:	893d      	ldrh	r5, [r7, #8]
 8009858:	897c      	ldrh	r4, [r7, #10]
 800985a:	9103      	str	r1, [sp, #12]
 800985c:	2110      	movs	r1, #16
 800985e:	9102      	str	r1, [sp, #8]
 8009860:	9201      	str	r2, [sp, #4]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	462a      	mov	r2, r5
 8009868:	4621      	mov	r1, r4
 800986a:	f7ff ff67 	bl	800973c <tcp_output_alloc_header_common>
 800986e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d006      	beq.n	8009884 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987a:	68fa      	ldr	r2, [r7, #12]
 800987c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800987e:	441a      	add	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8009884:	697b      	ldr	r3, [r7, #20]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bdb0      	pop	{r4, r5, r7, pc}
 800988e:	bf00      	nop
 8009890:	0800eebc 	.word	0x0800eebc
 8009894:	0800f5c4 	.word	0x0800f5c4
 8009898:	0800ef10 	.word	0x0800ef10

0800989c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4611      	mov	r1, r2
 80098a8:	461a      	mov	r2, r3
 80098aa:	460b      	mov	r3, r1
 80098ac:	71fb      	strb	r3, [r7, #7]
 80098ae:	4613      	mov	r3, r2
 80098b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d106      	bne.n	80098ca <tcp_output_fill_options+0x2e>
 80098bc:	4b12      	ldr	r3, [pc, #72]	@ (8009908 <tcp_output_fill_options+0x6c>)
 80098be:	f240 7256 	movw	r2, #1878	@ 0x756
 80098c2:	4912      	ldr	r1, [pc, #72]	@ (800990c <tcp_output_fill_options+0x70>)
 80098c4:	4812      	ldr	r0, [pc, #72]	@ (8009910 <tcp_output_fill_options+0x74>)
 80098c6:	f003 f88b 	bl	800c9e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	3314      	adds	r3, #20
 80098d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80098d6:	8bfb      	ldrh	r3, [r7, #30]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	461a      	mov	r2, r3
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	4413      	add	r3, r2
 80098e6:	3314      	adds	r3, #20
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	4413      	add	r3, r2
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d006      	beq.n	8009900 <tcp_output_fill_options+0x64>
 80098f2:	4b05      	ldr	r3, [pc, #20]	@ (8009908 <tcp_output_fill_options+0x6c>)
 80098f4:	f240 7275 	movw	r2, #1909	@ 0x775
 80098f8:	4906      	ldr	r1, [pc, #24]	@ (8009914 <tcp_output_fill_options+0x78>)
 80098fa:	4805      	ldr	r0, [pc, #20]	@ (8009910 <tcp_output_fill_options+0x74>)
 80098fc:	f003 f870 	bl	800c9e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8009900:	bf00      	nop
 8009902:	3720      	adds	r7, #32
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	0800eebc 	.word	0x0800eebc
 800990c:	0800f5ec 	.word	0x0800f5ec
 8009910:	0800ef10 	.word	0x0800ef10
 8009914:	0800f4e4 	.word	0x0800f4e4

08009918 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b08a      	sub	sp, #40	@ 0x28
 800991c:	af04      	add	r7, sp, #16
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
 8009924:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <tcp_output_control_segment+0x22>
 800992c:	4b1c      	ldr	r3, [pc, #112]	@ (80099a0 <tcp_output_control_segment+0x88>)
 800992e:	f240 7287 	movw	r2, #1927	@ 0x787
 8009932:	491c      	ldr	r1, [pc, #112]	@ (80099a4 <tcp_output_control_segment+0x8c>)
 8009934:	481c      	ldr	r0, [pc, #112]	@ (80099a8 <tcp_output_control_segment+0x90>)
 8009936:	f003 f853 	bl	800c9e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	6879      	ldr	r1, [r7, #4]
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f7fe ff42 	bl	80087c8 <tcp_route>
 8009944:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d102      	bne.n	8009952 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800994c:	23fc      	movs	r3, #252	@ 0xfc
 800994e:	75fb      	strb	r3, [r7, #23]
 8009950:	e01c      	b.n	800998c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d006      	beq.n	8009966 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	7adb      	ldrb	r3, [r3, #11]
 800995c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	7a9b      	ldrb	r3, [r3, #10]
 8009962:	757b      	strb	r3, [r7, #21]
 8009964:	e003      	b.n	800996e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8009966:	23ff      	movs	r3, #255	@ 0xff
 8009968:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800996e:	7dba      	ldrb	r2, [r7, #22]
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	9302      	str	r3, [sp, #8]
 8009974:	2306      	movs	r3, #6
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	7d7b      	ldrb	r3, [r7, #21]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	4613      	mov	r3, r2
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	68b8      	ldr	r0, [r7, #8]
 8009984:	f001 fefe 	bl	800b784 <ip4_output_if>
 8009988:	4603      	mov	r3, r0
 800998a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800998c:	68b8      	ldr	r0, [r7, #8]
 800998e:	f7fa fde9 	bl	8004564 <pbuf_free>
  return err;
 8009992:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	0800eebc 	.word	0x0800eebc
 80099a4:	0800f614 	.word	0x0800f614
 80099a8:	0800ef10 	.word	0x0800ef10

080099ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80099ac:	b590      	push	{r4, r7, lr}
 80099ae:	b08b      	sub	sp, #44	@ 0x2c
 80099b0:	af04      	add	r7, sp, #16
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <tcp_rst+0x22>
 80099c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009a40 <tcp_rst+0x94>)
 80099c2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80099c6:	491f      	ldr	r1, [pc, #124]	@ (8009a44 <tcp_rst+0x98>)
 80099c8:	481f      	ldr	r0, [pc, #124]	@ (8009a48 <tcp_rst+0x9c>)
 80099ca:	f003 f809 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80099ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d106      	bne.n	80099e2 <tcp_rst+0x36>
 80099d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a40 <tcp_rst+0x94>)
 80099d6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80099da:	491c      	ldr	r1, [pc, #112]	@ (8009a4c <tcp_rst+0xa0>)
 80099dc:	481a      	ldr	r0, [pc, #104]	@ (8009a48 <tcp_rst+0x9c>)
 80099de:	f002 ffff 	bl	800c9e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80099e2:	2300      	movs	r3, #0
 80099e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80099e6:	f246 0308 	movw	r3, #24584	@ 0x6008
 80099ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	b29c      	uxth	r4, r3
 80099f0:	68b8      	ldr	r0, [r7, #8]
 80099f2:	f7f9 fb56 	bl	80030a2 <lwip_htonl>
 80099f6:	4602      	mov	r2, r0
 80099f8:	8abb      	ldrh	r3, [r7, #20]
 80099fa:	9303      	str	r3, [sp, #12]
 80099fc:	2314      	movs	r3, #20
 80099fe:	9302      	str	r3, [sp, #8]
 8009a00:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009a02:	9301      	str	r3, [sp, #4]
 8009a04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f7ff fe94 	bl	800973c <tcp_output_alloc_header_common>
 8009a14:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00c      	beq.n	8009a36 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009a1c:	7dfb      	ldrb	r3, [r7, #23]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	6939      	ldr	r1, [r7, #16]
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f7ff ff3a 	bl	800989c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8009a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	6939      	ldr	r1, [r7, #16]
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff ff72 	bl	8009918 <tcp_output_control_segment>
 8009a34:	e000      	b.n	8009a38 <tcp_rst+0x8c>
    return;
 8009a36:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd90      	pop	{r4, r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	0800eebc 	.word	0x0800eebc
 8009a44:	0800f640 	.word	0x0800f640
 8009a48:	0800ef10 	.word	0x0800ef10
 8009a4c:	0800f65c 	.word	0x0800f65c

08009a50 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009a50:	b590      	push	{r4, r7, lr}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <tcp_send_empty_ack+0x24>
 8009a66:	4b28      	ldr	r3, [pc, #160]	@ (8009b08 <tcp_send_empty_ack+0xb8>)
 8009a68:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8009a6c:	4927      	ldr	r1, [pc, #156]	@ (8009b0c <tcp_send_empty_ack+0xbc>)
 8009a6e:	4828      	ldr	r0, [pc, #160]	@ (8009b10 <tcp_send_empty_ack+0xc0>)
 8009a70:	f002 ffb6 	bl	800c9e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	f003 0304 	and.w	r3, r3, #4
 8009a7e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009a80:	7d7b      	ldrb	r3, [r7, #21]
 8009a82:	b29c      	uxth	r4, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7f9 fb0a 	bl	80030a2 <lwip_htonl>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2200      	movs	r2, #0
 8009a92:	4621      	mov	r1, r4
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff fec3 	bl	8009820 <tcp_output_alloc_header>
 8009a9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d109      	bne.n	8009ab6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	8b5b      	ldrh	r3, [r3, #26]
 8009aa6:	f043 0303 	orr.w	r3, r3, #3
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009ab0:	f06f 0301 	mvn.w	r3, #1
 8009ab4:	e023      	b.n	8009afe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8009ab6:	7dbb      	ldrb	r3, [r7, #22]
 8009ab8:	7dfa      	ldrb	r2, [r7, #23]
 8009aba:	6939      	ldr	r1, [r7, #16]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff feed 	bl	800989c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	6939      	ldr	r1, [r7, #16]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff ff24 	bl	8009918 <tcp_output_control_segment>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	8b5b      	ldrh	r3, [r3, #26]
 8009ae0:	f043 0303 	orr.w	r3, r3, #3
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	835a      	strh	r2, [r3, #26]
 8009aea:	e006      	b.n	8009afa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8b5b      	ldrh	r3, [r3, #26]
 8009af0:	f023 0303 	bic.w	r3, r3, #3
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8009afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd90      	pop	{r4, r7, pc}
 8009b06:	bf00      	nop
 8009b08:	0800eebc 	.word	0x0800eebc
 8009b0c:	0800f678 	.word	0x0800f678
 8009b10:	0800ef10 	.word	0x0800ef10

08009b14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009b14:	b590      	push	{r4, r7, lr}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <tcp_keepalive+0x20>
 8009b26:	4b18      	ldr	r3, [pc, #96]	@ (8009b88 <tcp_keepalive+0x74>)
 8009b28:	f640 0224 	movw	r2, #2084	@ 0x824
 8009b2c:	4917      	ldr	r1, [pc, #92]	@ (8009b8c <tcp_keepalive+0x78>)
 8009b2e:	4818      	ldr	r0, [pc, #96]	@ (8009b90 <tcp_keepalive+0x7c>)
 8009b30:	f002 ff56 	bl	800c9e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
 8009b36:	b29c      	uxth	r4, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7f9 faaf 	bl	80030a2 <lwip_htonl>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2200      	movs	r2, #0
 8009b48:	4621      	mov	r1, r4
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff fe68 	bl	8009820 <tcp_output_alloc_header>
 8009b50:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8009b58:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5c:	e010      	b.n	8009b80 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
 8009b60:	2200      	movs	r2, #0
 8009b62:	6939      	ldr	r1, [r7, #16]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff fe99 	bl	800989c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3304      	adds	r3, #4
 8009b70:	6939      	ldr	r1, [r7, #16]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff fed0 	bl	8009918 <tcp_output_control_segment>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	371c      	adds	r7, #28
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd90      	pop	{r4, r7, pc}
 8009b88:	0800eebc 	.word	0x0800eebc
 8009b8c:	0800f698 	.word	0x0800f698
 8009b90:	0800ef10 	.word	0x0800ef10

08009b94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009b94:	b590      	push	{r4, r7, lr}
 8009b96:	b08b      	sub	sp, #44	@ 0x2c
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d106      	bne.n	8009bb6 <tcp_zero_window_probe+0x22>
 8009ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8009cdc <tcp_zero_window_probe+0x148>)
 8009baa:	f640 024f 	movw	r2, #2127	@ 0x84f
 8009bae:	494c      	ldr	r1, [pc, #304]	@ (8009ce0 <tcp_zero_window_probe+0x14c>)
 8009bb0:	484c      	ldr	r0, [pc, #304]	@ (8009ce4 <tcp_zero_window_probe+0x150>)
 8009bb2:	f002 ff15 	bl	800c9e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e086      	b.n	8009cd4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009bcc:	2bff      	cmp	r3, #255	@ 0xff
 8009bce:	d007      	beq.n	8009be0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	899b      	ldrh	r3, [r3, #12]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7f9 fa44 	bl	8003076 <lwip_htons>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d005      	beq.n	8009c06 <tcp_zero_window_probe+0x72>
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	891b      	ldrh	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <tcp_zero_window_probe+0x72>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e000      	b.n	8009c08 <tcp_zero_window_probe+0x74>
 8009c06:	2300      	movs	r3, #0
 8009c08:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009c0a:	7ffb      	ldrb	r3, [r7, #31]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bf0c      	ite	eq
 8009c10:	2301      	moveq	r3, #1
 8009c12:	2300      	movne	r3, #0
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8009c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c1c:	b299      	uxth	r1, r3
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	8bba      	ldrh	r2, [r7, #28]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff fdfa 	bl	8009820 <tcp_output_alloc_header>
 8009c2c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d102      	bne.n	8009c3a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8009c34:	f04f 33ff 	mov.w	r3, #4294967295
 8009c38:	e04c      	b.n	8009cd4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8009c40:	7ffb      	ldrb	r3, [r7, #31]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d011      	beq.n	8009c6a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	899b      	ldrh	r3, [r3, #12]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	b21b      	sxth	r3, r3
 8009c4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009c52:	b21c      	sxth	r4, r3
 8009c54:	2011      	movs	r0, #17
 8009c56:	f7f9 fa0e 	bl	8003076 <lwip_htons>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	4323      	orrs	r3, r4
 8009c60:	b21b      	sxth	r3, r3
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	819a      	strh	r2, [r3, #12]
 8009c68:	e010      	b.n	8009c8c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	3314      	adds	r3, #20
 8009c70:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	6858      	ldr	r0, [r3, #4]
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	891a      	ldrh	r2, [r3, #8]
 8009c7c:	6a3b      	ldr	r3, [r7, #32]
 8009c7e:	891b      	ldrh	r3, [r3, #8]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	2201      	movs	r2, #1
 8009c86:	6939      	ldr	r1, [r7, #16]
 8009c88:	f7fa fe56 	bl	8004938 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7f9 fa05 	bl	80030a2 <lwip_htonl>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da02      	bge.n	8009cb0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8009cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	69b9      	ldr	r1, [r7, #24]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff fdef 	bl	800989c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	69b9      	ldr	r1, [r7, #24]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7ff fe26 	bl	8009918 <tcp_output_control_segment>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009cd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	372c      	adds	r7, #44	@ 0x2c
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd90      	pop	{r4, r7, pc}
 8009cdc:	0800eebc 	.word	0x0800eebc
 8009ce0:	0800f6b4 	.word	0x0800f6b4
 8009ce4:	0800ef10 	.word	0x0800ef10

08009ce8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009cf0:	f7fa ff10 	bl	8004b14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8009d20 <tcpip_tcp_timer+0x38>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d103      	bne.n	8009d04 <tcpip_tcp_timer+0x1c>
 8009cfc:	4b09      	ldr	r3, [pc, #36]	@ (8009d24 <tcpip_tcp_timer+0x3c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009d04:	2200      	movs	r2, #0
 8009d06:	4908      	ldr	r1, [pc, #32]	@ (8009d28 <tcpip_tcp_timer+0x40>)
 8009d08:	20fa      	movs	r0, #250	@ 0xfa
 8009d0a:	f000 f8f3 	bl	8009ef4 <sys_timeout>
 8009d0e:	e003      	b.n	8009d18 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009d10:	4b06      	ldr	r3, [pc, #24]	@ (8009d2c <tcpip_tcp_timer+0x44>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
  }
}
 8009d16:	bf00      	nop
 8009d18:	bf00      	nop
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	20008264 	.word	0x20008264
 8009d24:	20008268 	.word	0x20008268
 8009d28:	08009ce9 	.word	0x08009ce9
 8009d2c:	200082b0 	.word	0x200082b0

08009d30 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009d34:	4b0a      	ldr	r3, [pc, #40]	@ (8009d60 <tcp_timer_needed+0x30>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10f      	bne.n	8009d5c <tcp_timer_needed+0x2c>
 8009d3c:	4b09      	ldr	r3, [pc, #36]	@ (8009d64 <tcp_timer_needed+0x34>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d103      	bne.n	8009d4c <tcp_timer_needed+0x1c>
 8009d44:	4b08      	ldr	r3, [pc, #32]	@ (8009d68 <tcp_timer_needed+0x38>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d007      	beq.n	8009d5c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8009d4c:	4b04      	ldr	r3, [pc, #16]	@ (8009d60 <tcp_timer_needed+0x30>)
 8009d4e:	2201      	movs	r2, #1
 8009d50:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009d52:	2200      	movs	r2, #0
 8009d54:	4905      	ldr	r1, [pc, #20]	@ (8009d6c <tcp_timer_needed+0x3c>)
 8009d56:	20fa      	movs	r0, #250	@ 0xfa
 8009d58:	f000 f8cc 	bl	8009ef4 <sys_timeout>
  }
}
 8009d5c:	bf00      	nop
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	200082b0 	.word	0x200082b0
 8009d64:	20008264 	.word	0x20008264
 8009d68:	20008268 	.word	0x20008268
 8009d6c:	08009ce9 	.word	0x08009ce9

08009d70 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009d7c:	2006      	movs	r0, #6
 8009d7e:	f7f9 fdd1 	bl	8003924 <memp_malloc>
 8009d82:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d109      	bne.n	8009d9e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d151      	bne.n	8009e34 <sys_timeout_abs+0xc4>
 8009d90:	4b2a      	ldr	r3, [pc, #168]	@ (8009e3c <sys_timeout_abs+0xcc>)
 8009d92:	22be      	movs	r2, #190	@ 0xbe
 8009d94:	492a      	ldr	r1, [pc, #168]	@ (8009e40 <sys_timeout_abs+0xd0>)
 8009d96:	482b      	ldr	r0, [pc, #172]	@ (8009e44 <sys_timeout_abs+0xd4>)
 8009d98:	f002 fe22 	bl	800c9e0 <iprintf>
    return;
 8009d9c:	e04a      	b.n	8009e34 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8009db6:	4b24      	ldr	r3, [pc, #144]	@ (8009e48 <sys_timeout_abs+0xd8>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d103      	bne.n	8009dc6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8009dbe:	4a22      	ldr	r2, [pc, #136]	@ (8009e48 <sys_timeout_abs+0xd8>)
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	6013      	str	r3, [r2, #0]
    return;
 8009dc4:	e037      	b.n	8009e36 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	4b1f      	ldr	r3, [pc, #124]	@ (8009e48 <sys_timeout_abs+0xd8>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	0fdb      	lsrs	r3, r3, #31
 8009dd4:	f003 0301 	and.w	r3, r3, #1
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d007      	beq.n	8009dee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8009dde:	4b1a      	ldr	r3, [pc, #104]	@ (8009e48 <sys_timeout_abs+0xd8>)
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8009de6:	4a18      	ldr	r2, [pc, #96]	@ (8009e48 <sys_timeout_abs+0xd8>)
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	e023      	b.n	8009e36 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8009dee:	4b16      	ldr	r3, [pc, #88]	@ (8009e48 <sys_timeout_abs+0xd8>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	e01a      	b.n	8009e2c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00b      	beq.n	8009e16 <sys_timeout_abs+0xa6>
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	0fdb      	lsrs	r3, r3, #31
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	601a      	str	r2, [r3, #0]
        break;
 8009e24:	e007      	b.n	8009e36 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e1      	bne.n	8009df6 <sys_timeout_abs+0x86>
 8009e32:	e000      	b.n	8009e36 <sys_timeout_abs+0xc6>
    return;
 8009e34:	bf00      	nop
      }
    }
  }
}
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	0800f6d8 	.word	0x0800f6d8
 8009e40:	0800f70c 	.word	0x0800f70c
 8009e44:	0800f74c 	.word	0x0800f74c
 8009e48:	200082a8 	.word	0x200082a8

08009e4c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	4798      	blx	r3

  now = sys_now();
 8009e5e:	f7f9 f8f9 	bl	8003054 <sys_now>
 8009e62:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	4b0f      	ldr	r3, [pc, #60]	@ (8009ea8 <lwip_cyclic_timer+0x5c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	0fdb      	lsrs	r3, r3, #31
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d009      	beq.n	8009e96 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	4413      	add	r3, r2
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	4907      	ldr	r1, [pc, #28]	@ (8009eac <lwip_cyclic_timer+0x60>)
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff ff6e 	bl	8009d70 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8009e94:	e004      	b.n	8009ea0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4904      	ldr	r1, [pc, #16]	@ (8009eac <lwip_cyclic_timer+0x60>)
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f7ff ff68 	bl	8009d70 <sys_timeout_abs>
}
 8009ea0:	bf00      	nop
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	200082ac 	.word	0x200082ac
 8009eac:	08009e4d 	.word	0x08009e4d

08009eb0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	607b      	str	r3, [r7, #4]
 8009eba:	e00e      	b.n	8009eda <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8009ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8009eec <sys_timeouts_init+0x3c>)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	4a08      	ldr	r2, [pc, #32]	@ (8009eec <sys_timeouts_init+0x3c>)
 8009eca:	4413      	add	r3, r2
 8009ecc:	461a      	mov	r2, r3
 8009ece:	4908      	ldr	r1, [pc, #32]	@ (8009ef0 <sys_timeouts_init+0x40>)
 8009ed0:	f000 f810 	bl	8009ef4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	607b      	str	r3, [r7, #4]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d9ed      	bls.n	8009ebc <sys_timeouts_init+0xc>
  }
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	080102bc 	.word	0x080102bc
 8009ef0:	08009e4d 	.word	0x08009e4d

08009ef4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f06:	d306      	bcc.n	8009f16 <sys_timeout+0x22>
 8009f08:	4b0a      	ldr	r3, [pc, #40]	@ (8009f34 <sys_timeout+0x40>)
 8009f0a:	f240 1229 	movw	r2, #297	@ 0x129
 8009f0e:	490a      	ldr	r1, [pc, #40]	@ (8009f38 <sys_timeout+0x44>)
 8009f10:	480a      	ldr	r0, [pc, #40]	@ (8009f3c <sys_timeout+0x48>)
 8009f12:	f002 fd65 	bl	800c9e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8009f16:	f7f9 f89d 	bl	8003054 <sys_now>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	68b9      	ldr	r1, [r7, #8]
 8009f26:	6978      	ldr	r0, [r7, #20]
 8009f28:	f7ff ff22 	bl	8009d70 <sys_timeout_abs>
#endif
}
 8009f2c:	bf00      	nop
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	0800f6d8 	.word	0x0800f6d8
 8009f38:	0800f774 	.word	0x0800f774
 8009f3c:	0800f74c 	.word	0x0800f74c

08009f40 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009f44:	f002 fc4c 	bl	800c7e0 <rand>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	4b01      	ldr	r3, [pc, #4]	@ (8009f60 <udp_init+0x20>)
 8009f5a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009f5c:	bf00      	nop
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20000010 	.word	0x20000010

08009f64 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d105      	bne.n	8009f84 <udp_input_local_match+0x20>
 8009f78:	4b27      	ldr	r3, [pc, #156]	@ (800a018 <udp_input_local_match+0xb4>)
 8009f7a:	2287      	movs	r2, #135	@ 0x87
 8009f7c:	4927      	ldr	r1, [pc, #156]	@ (800a01c <udp_input_local_match+0xb8>)
 8009f7e:	4828      	ldr	r0, [pc, #160]	@ (800a020 <udp_input_local_match+0xbc>)
 8009f80:	f002 fd2e 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d105      	bne.n	8009f96 <udp_input_local_match+0x32>
 8009f8a:	4b23      	ldr	r3, [pc, #140]	@ (800a018 <udp_input_local_match+0xb4>)
 8009f8c:	2288      	movs	r2, #136	@ 0x88
 8009f8e:	4925      	ldr	r1, [pc, #148]	@ (800a024 <udp_input_local_match+0xc0>)
 8009f90:	4823      	ldr	r0, [pc, #140]	@ (800a020 <udp_input_local_match+0xbc>)
 8009f92:	f002 fd25 	bl	800c9e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	7a1b      	ldrb	r3, [r3, #8]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00b      	beq.n	8009fb6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	7a1a      	ldrb	r2, [r3, #8]
 8009fa2:	4b21      	ldr	r3, [pc, #132]	@ (800a028 <udp_input_local_match+0xc4>)
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009faa:	3301      	adds	r3, #1
 8009fac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d001      	beq.n	8009fb6 <udp_input_local_match+0x52>
    return 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e02b      	b.n	800a00e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d018      	beq.n	8009fee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d013      	beq.n	8009fea <udp_input_local_match+0x86>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00f      	beq.n	8009fea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009fca:	4b17      	ldr	r3, [pc, #92]	@ (800a028 <udp_input_local_match+0xc4>)
 8009fcc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd2:	d00a      	beq.n	8009fea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	4b13      	ldr	r3, [pc, #76]	@ (800a028 <udp_input_local_match+0xc4>)
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	405a      	eors	r2, r3
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	3308      	adds	r3, #8
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d110      	bne.n	800a00c <udp_input_local_match+0xa8>
          return 1;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e00f      	b.n	800a00e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d009      	beq.n	800a008 <udp_input_local_match+0xa4>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d005      	beq.n	800a008 <udp_input_local_match+0xa4>
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	4b09      	ldr	r3, [pc, #36]	@ (800a028 <udp_input_local_match+0xc4>)
 800a002:	695b      	ldr	r3, [r3, #20]
 800a004:	429a      	cmp	r2, r3
 800a006:	d101      	bne.n	800a00c <udp_input_local_match+0xa8>
        return 1;
 800a008:	2301      	movs	r3, #1
 800a00a:	e000      	b.n	800a00e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	0800f7c0 	.word	0x0800f7c0
 800a01c:	0800f7f0 	.word	0x0800f7f0
 800a020:	0800f814 	.word	0x0800f814
 800a024:	0800f83c 	.word	0x0800f83c
 800a028:	20004ce8 	.word	0x20004ce8

0800a02c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800a02c:	b590      	push	{r4, r7, lr}
 800a02e:	b08d      	sub	sp, #52	@ 0x34
 800a030:	af02      	add	r7, sp, #8
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d105      	bne.n	800a04c <udp_input+0x20>
 800a040:	4b7c      	ldr	r3, [pc, #496]	@ (800a234 <udp_input+0x208>)
 800a042:	22cf      	movs	r2, #207	@ 0xcf
 800a044:	497c      	ldr	r1, [pc, #496]	@ (800a238 <udp_input+0x20c>)
 800a046:	487d      	ldr	r0, [pc, #500]	@ (800a23c <udp_input+0x210>)
 800a048:	f002 fcca 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d105      	bne.n	800a05e <udp_input+0x32>
 800a052:	4b78      	ldr	r3, [pc, #480]	@ (800a234 <udp_input+0x208>)
 800a054:	22d0      	movs	r2, #208	@ 0xd0
 800a056:	497a      	ldr	r1, [pc, #488]	@ (800a240 <udp_input+0x214>)
 800a058:	4878      	ldr	r0, [pc, #480]	@ (800a23c <udp_input+0x210>)
 800a05a:	f002 fcc1 	bl	800c9e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	895b      	ldrh	r3, [r3, #10]
 800a062:	2b07      	cmp	r3, #7
 800a064:	d803      	bhi.n	800a06e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7fa fa7c 	bl	8004564 <pbuf_free>
    goto end;
 800a06c:	e0de      	b.n	800a22c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a074:	4b73      	ldr	r3, [pc, #460]	@ (800a244 <udp_input+0x218>)
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	4a72      	ldr	r2, [pc, #456]	@ (800a244 <udp_input+0x218>)
 800a07a:	6812      	ldr	r2, [r2, #0]
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 fc58 	bl	800b934 <ip4_addr_isbroadcast_u32>
 800a084:	4603      	mov	r3, r0
 800a086:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	4618      	mov	r0, r3
 800a090:	f7f8 fff1 	bl	8003076 <lwip_htons>
 800a094:	4603      	mov	r3, r0
 800a096:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	885b      	ldrh	r3, [r3, #2]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f8 ffe9 	bl	8003076 <lwip_htons>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0b4:	4b64      	ldr	r3, [pc, #400]	@ (800a248 <udp_input+0x21c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0ba:	e054      	b.n	800a166 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0be:	8a5b      	ldrh	r3, [r3, #18]
 800a0c0:	89fa      	ldrh	r2, [r7, #14]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d14a      	bne.n	800a15c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800a0c6:	7cfb      	ldrb	r3, [r7, #19]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a0ce:	f7ff ff49 	bl	8009f64 <udp_input_local_match>
 800a0d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d041      	beq.n	800a15c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0da:	7c1b      	ldrb	r3, [r3, #16]
 800a0dc:	f003 0304 	and.w	r3, r3, #4
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d11d      	bne.n	800a120 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d102      	bne.n	800a0f0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ec:	61fb      	str	r3, [r7, #28]
 800a0ee:	e017      	b.n	800a120 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800a0f0:	7cfb      	ldrb	r3, [r7, #19]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d014      	beq.n	800a120 <udp_input+0xf4>
 800a0f6:	4b53      	ldr	r3, [pc, #332]	@ (800a244 <udp_input+0x218>)
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0fe:	d10f      	bne.n	800a120 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	3304      	adds	r3, #4
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d008      	beq.n	800a120 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800a10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	3304      	adds	r3, #4
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d101      	bne.n	800a120 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800a11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800a120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a122:	8a9b      	ldrh	r3, [r3, #20]
 800a124:	8a3a      	ldrh	r2, [r7, #16]
 800a126:	429a      	cmp	r2, r3
 800a128:	d118      	bne.n	800a15c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d005      	beq.n	800a13e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	4b43      	ldr	r3, [pc, #268]	@ (800a244 <udp_input+0x218>)
 800a138:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d10e      	bne.n	800a15c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d014      	beq.n	800a16e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800a14c:	4b3e      	ldr	r3, [pc, #248]	@ (800a248 <udp_input+0x21c>)
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a152:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800a154:	4a3c      	ldr	r2, [pc, #240]	@ (800a248 <udp_input+0x21c>)
 800a156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a158:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800a15a:	e008      	b.n	800a16e <udp_input+0x142>
      }
    }

    prev = pcb;
 800a15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	627b      	str	r3, [r7, #36]	@ 0x24
 800a166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1a7      	bne.n	800a0bc <udp_input+0x90>
 800a16c:	e000      	b.n	800a170 <udp_input+0x144>
        break;
 800a16e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800a170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <udp_input+0x14e>
    pcb = uncon_pcb;
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800a17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <udp_input+0x15a>
    for_us = 1;
 800a180:	2301      	movs	r3, #1
 800a182:	76fb      	strb	r3, [r7, #27]
 800a184:	e00a      	b.n	800a19c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	3304      	adds	r3, #4
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	4b2d      	ldr	r3, [pc, #180]	@ (800a244 <udp_input+0x218>)
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	429a      	cmp	r2, r3
 800a192:	bf0c      	ite	eq
 800a194:	2301      	moveq	r3, #1
 800a196:	2300      	movne	r3, #0
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800a19c:	7efb      	ldrb	r3, [r7, #27]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d041      	beq.n	800a226 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800a1a2:	2108      	movs	r1, #8
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7fa f957 	bl	8004458 <pbuf_remove_header>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00a      	beq.n	800a1c6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800a1b0:	4b20      	ldr	r3, [pc, #128]	@ (800a234 <udp_input+0x208>)
 800a1b2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800a1b6:	4925      	ldr	r1, [pc, #148]	@ (800a24c <udp_input+0x220>)
 800a1b8:	4820      	ldr	r0, [pc, #128]	@ (800a23c <udp_input+0x210>)
 800a1ba:	f002 fc11 	bl	800c9e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7fa f9d0 	bl	8004564 <pbuf_free>
      goto end;
 800a1c4:	e032      	b.n	800a22c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d012      	beq.n	800a1f2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00a      	beq.n	800a1ea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d6:	699c      	ldr	r4, [r3, #24]
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1da:	69d8      	ldr	r0, [r3, #28]
 800a1dc:	8a3b      	ldrh	r3, [r7, #16]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	4b1b      	ldr	r3, [pc, #108]	@ (800a250 <udp_input+0x224>)
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800a1e8:	e021      	b.n	800a22e <udp_input+0x202>
        pbuf_free(p);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7fa f9ba 	bl	8004564 <pbuf_free>
        goto end;
 800a1f0:	e01c      	b.n	800a22c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a1f2:	7cfb      	ldrb	r3, [r7, #19]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d112      	bne.n	800a21e <udp_input+0x1f2>
 800a1f8:	4b12      	ldr	r3, [pc, #72]	@ (800a244 <udp_input+0x218>)
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a200:	2be0      	cmp	r3, #224	@ 0xe0
 800a202:	d00c      	beq.n	800a21e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a204:	4b0f      	ldr	r3, [pc, #60]	@ (800a244 <udp_input+0x218>)
 800a206:	899b      	ldrh	r3, [r3, #12]
 800a208:	3308      	adds	r3, #8
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	b21b      	sxth	r3, r3
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7fa f994 	bl	800453e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a216:	2103      	movs	r1, #3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 f86b 	bl	800b2f4 <icmp_dest_unreach>
      pbuf_free(p);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7fa f9a0 	bl	8004564 <pbuf_free>
  return;
 800a224:	e003      	b.n	800a22e <udp_input+0x202>
    pbuf_free(p);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7fa f99c 	bl	8004564 <pbuf_free>
  return;
 800a22c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a22e:	372c      	adds	r7, #44	@ 0x2c
 800a230:	46bd      	mov	sp, r7
 800a232:	bd90      	pop	{r4, r7, pc}
 800a234:	0800f7c0 	.word	0x0800f7c0
 800a238:	0800f864 	.word	0x0800f864
 800a23c:	0800f814 	.word	0x0800f814
 800a240:	0800f87c 	.word	0x0800f87c
 800a244:	20004ce8 	.word	0x20004ce8
 800a248:	200082b4 	.word	0x200082b4
 800a24c:	0800f898 	.word	0x0800f898
 800a250:	20004cf8 	.word	0x20004cf8

0800a254 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d01e      	beq.n	800a2a2 <udp_netif_ip_addr_changed+0x4e>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01a      	beq.n	800a2a2 <udp_netif_ip_addr_changed+0x4e>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d017      	beq.n	800a2a2 <udp_netif_ip_addr_changed+0x4e>
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d013      	beq.n	800a2a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a27a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b0 <udp_netif_ip_addr_changed+0x5c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	e00c      	b.n	800a29c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d103      	bne.n	800a296 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	60fb      	str	r3, [r7, #12]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1ef      	bne.n	800a282 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800a2a2:	bf00      	nop
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	200082b4 	.word	0x200082b4

0800a2b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a2bc:	4915      	ldr	r1, [pc, #84]	@ (800a314 <etharp_free_entry+0x60>)
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	4413      	add	r3, r2
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	440b      	add	r3, r1
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d013      	beq.n	800a2f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a2d0:	4910      	ldr	r1, [pc, #64]	@ (800a314 <etharp_free_entry+0x60>)
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	005b      	lsls	r3, r3, #1
 800a2d8:	4413      	add	r3, r2
 800a2da:	00db      	lsls	r3, r3, #3
 800a2dc:	440b      	add	r3, r1
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fa f93f 	bl	8004564 <pbuf_free>
    arp_table[i].q = NULL;
 800a2e6:	490b      	ldr	r1, [pc, #44]	@ (800a314 <etharp_free_entry+0x60>)
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	4413      	add	r3, r2
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	440b      	add	r3, r1
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a2f8:	4906      	ldr	r1, [pc, #24]	@ (800a314 <etharp_free_entry+0x60>)
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	4413      	add	r3, r2
 800a302:	00db      	lsls	r3, r3, #3
 800a304:	440b      	add	r3, r1
 800a306:	3314      	adds	r3, #20
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a30c:	bf00      	nop
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	200082b8 	.word	0x200082b8

0800a318 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a31e:	2300      	movs	r3, #0
 800a320:	607b      	str	r3, [r7, #4]
 800a322:	e096      	b.n	800a452 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a324:	494f      	ldr	r1, [pc, #316]	@ (800a464 <etharp_tmr+0x14c>)
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	4613      	mov	r3, r2
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	4413      	add	r3, r2
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	440b      	add	r3, r1
 800a332:	3314      	adds	r3, #20
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 8086 	beq.w	800a44c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800a340:	4948      	ldr	r1, [pc, #288]	@ (800a464 <etharp_tmr+0x14c>)
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	4613      	mov	r3, r2
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	4413      	add	r3, r2
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	440b      	add	r3, r1
 800a34e:	3312      	adds	r3, #18
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	3301      	adds	r3, #1
 800a354:	b298      	uxth	r0, r3
 800a356:	4943      	ldr	r1, [pc, #268]	@ (800a464 <etharp_tmr+0x14c>)
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	4613      	mov	r3, r2
 800a35c:	005b      	lsls	r3, r3, #1
 800a35e:	4413      	add	r3, r2
 800a360:	00db      	lsls	r3, r3, #3
 800a362:	440b      	add	r3, r1
 800a364:	3312      	adds	r3, #18
 800a366:	4602      	mov	r2, r0
 800a368:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a36a:	493e      	ldr	r1, [pc, #248]	@ (800a464 <etharp_tmr+0x14c>)
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	4613      	mov	r3, r2
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	4413      	add	r3, r2
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	440b      	add	r3, r1
 800a378:	3312      	adds	r3, #18
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800a380:	d215      	bcs.n	800a3ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a382:	4938      	ldr	r1, [pc, #224]	@ (800a464 <etharp_tmr+0x14c>)
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	4613      	mov	r3, r2
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	4413      	add	r3, r2
 800a38c:	00db      	lsls	r3, r3, #3
 800a38e:	440b      	add	r3, r1
 800a390:	3314      	adds	r3, #20
 800a392:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a394:	2b01      	cmp	r3, #1
 800a396:	d10e      	bne.n	800a3b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a398:	4932      	ldr	r1, [pc, #200]	@ (800a464 <etharp_tmr+0x14c>)
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	4613      	mov	r3, r2
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	4413      	add	r3, r2
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	440b      	add	r3, r1
 800a3a6:	3312      	adds	r3, #18
 800a3a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d903      	bls.n	800a3b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff ff80 	bl	800a2b4 <etharp_free_entry>
 800a3b4:	e04a      	b.n	800a44c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a3b6:	492b      	ldr	r1, [pc, #172]	@ (800a464 <etharp_tmr+0x14c>)
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	4413      	add	r3, r2
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	440b      	add	r3, r1
 800a3c4:	3314      	adds	r3, #20
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d10a      	bne.n	800a3e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a3cc:	4925      	ldr	r1, [pc, #148]	@ (800a464 <etharp_tmr+0x14c>)
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	4413      	add	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	440b      	add	r3, r1
 800a3da:	3314      	adds	r3, #20
 800a3dc:	2204      	movs	r2, #4
 800a3de:	701a      	strb	r2, [r3, #0]
 800a3e0:	e034      	b.n	800a44c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a3e2:	4920      	ldr	r1, [pc, #128]	@ (800a464 <etharp_tmr+0x14c>)
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	4413      	add	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	440b      	add	r3, r1
 800a3f0:	3314      	adds	r3, #20
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d10a      	bne.n	800a40e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a3f8:	491a      	ldr	r1, [pc, #104]	@ (800a464 <etharp_tmr+0x14c>)
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	005b      	lsls	r3, r3, #1
 800a400:	4413      	add	r3, r2
 800a402:	00db      	lsls	r3, r3, #3
 800a404:	440b      	add	r3, r1
 800a406:	3314      	adds	r3, #20
 800a408:	2202      	movs	r2, #2
 800a40a:	701a      	strb	r2, [r3, #0]
 800a40c:	e01e      	b.n	800a44c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a40e:	4915      	ldr	r1, [pc, #84]	@ (800a464 <etharp_tmr+0x14c>)
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4613      	mov	r3, r2
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	4413      	add	r3, r2
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	440b      	add	r3, r1
 800a41c:	3314      	adds	r3, #20
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d113      	bne.n	800a44c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a424:	490f      	ldr	r1, [pc, #60]	@ (800a464 <etharp_tmr+0x14c>)
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	4613      	mov	r3, r2
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	00db      	lsls	r3, r3, #3
 800a430:	440b      	add	r3, r1
 800a432:	3308      	adds	r3, #8
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	4613      	mov	r3, r2
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	4413      	add	r3, r2
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	4a08      	ldr	r2, [pc, #32]	@ (800a464 <etharp_tmr+0x14c>)
 800a442:	4413      	add	r3, r2
 800a444:	3304      	adds	r3, #4
 800a446:	4619      	mov	r1, r3
 800a448:	f000 fe3e 	bl	800b0c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3301      	adds	r3, #1
 800a450:	607b      	str	r3, [r7, #4]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b09      	cmp	r3, #9
 800a456:	f77f af65 	ble.w	800a324 <etharp_tmr+0xc>
      }
    }
  }
}
 800a45a:	bf00      	nop
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	200082b8 	.word	0x200082b8

0800a468 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08a      	sub	sp, #40	@ 0x28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	460b      	mov	r3, r1
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a476:	230a      	movs	r3, #10
 800a478:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a47a:	230a      	movs	r3, #10
 800a47c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800a47e:	230a      	movs	r3, #10
 800a480:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800a482:	2300      	movs	r3, #0
 800a484:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800a486:	230a      	movs	r3, #10
 800a488:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	83bb      	strh	r3, [r7, #28]
 800a48e:	2300      	movs	r3, #0
 800a490:	837b      	strh	r3, [r7, #26]
 800a492:	2300      	movs	r3, #0
 800a494:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a496:	2300      	movs	r3, #0
 800a498:	843b      	strh	r3, [r7, #32]
 800a49a:	e0ae      	b.n	800a5fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800a49c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4a0:	49a6      	ldr	r1, [pc, #664]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	4413      	add	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	440b      	add	r3, r1
 800a4ac:	3314      	adds	r3, #20
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a4b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a4b6:	2b0a      	cmp	r3, #10
 800a4b8:	d105      	bne.n	800a4c6 <etharp_find_entry+0x5e>
 800a4ba:	7dfb      	ldrb	r3, [r7, #23]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800a4c0:	8c3b      	ldrh	r3, [r7, #32]
 800a4c2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a4c4:	e095      	b.n	800a5f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 8092 	beq.w	800a5f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d009      	beq.n	800a4e8 <etharp_find_entry+0x80>
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d806      	bhi.n	800a4e8 <etharp_find_entry+0x80>
 800a4da:	4b99      	ldr	r3, [pc, #612]	@ (800a740 <etharp_find_entry+0x2d8>)
 800a4dc:	f240 1223 	movw	r2, #291	@ 0x123
 800a4e0:	4998      	ldr	r1, [pc, #608]	@ (800a744 <etharp_find_entry+0x2dc>)
 800a4e2:	4899      	ldr	r0, [pc, #612]	@ (800a748 <etharp_find_entry+0x2e0>)
 800a4e4:	f002 fa7c 	bl	800c9e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d020      	beq.n	800a530 <etharp_find_entry+0xc8>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6819      	ldr	r1, [r3, #0]
 800a4f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a4f6:	4891      	ldr	r0, [pc, #580]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	4413      	add	r3, r2
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	4403      	add	r3, r0
 800a502:	3304      	adds	r3, #4
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4299      	cmp	r1, r3
 800a508:	d112      	bne.n	800a530 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00c      	beq.n	800a52a <etharp_find_entry+0xc2>
 800a510:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a514:	4989      	ldr	r1, [pc, #548]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a516:	4613      	mov	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4413      	add	r3, r2
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	440b      	add	r3, r1
 800a520:	3308      	adds	r3, #8
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	429a      	cmp	r2, r3
 800a528:	d102      	bne.n	800a530 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a52a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a52e:	e100      	b.n	800a732 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a530:	7dfb      	ldrb	r3, [r7, #23]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d140      	bne.n	800a5b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a53a:	4980      	ldr	r1, [pc, #512]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a53c:	4613      	mov	r3, r2
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	4413      	add	r3, r2
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	440b      	add	r3, r1
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01a      	beq.n	800a582 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800a54c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a550:	497a      	ldr	r1, [pc, #488]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a552:	4613      	mov	r3, r2
 800a554:	005b      	lsls	r3, r3, #1
 800a556:	4413      	add	r3, r2
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	440b      	add	r3, r1
 800a55c:	3312      	adds	r3, #18
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	8bba      	ldrh	r2, [r7, #28]
 800a562:	429a      	cmp	r2, r3
 800a564:	d845      	bhi.n	800a5f2 <etharp_find_entry+0x18a>
            old_queue = i;
 800a566:	8c3b      	ldrh	r3, [r7, #32]
 800a568:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800a56a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a56e:	4973      	ldr	r1, [pc, #460]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a570:	4613      	mov	r3, r2
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	4413      	add	r3, r2
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	440b      	add	r3, r1
 800a57a:	3312      	adds	r3, #18
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	83bb      	strh	r3, [r7, #28]
 800a580:	e037      	b.n	800a5f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a582:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a586:	496d      	ldr	r1, [pc, #436]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a588:	4613      	mov	r3, r2
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	4413      	add	r3, r2
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	440b      	add	r3, r1
 800a592:	3312      	adds	r3, #18
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	8b7a      	ldrh	r2, [r7, #26]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d82a      	bhi.n	800a5f2 <etharp_find_entry+0x18a>
            old_pending = i;
 800a59c:	8c3b      	ldrh	r3, [r7, #32]
 800a59e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800a5a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a5a4:	4965      	ldr	r1, [pc, #404]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	005b      	lsls	r3, r3, #1
 800a5aa:	4413      	add	r3, r2
 800a5ac:	00db      	lsls	r3, r3, #3
 800a5ae:	440b      	add	r3, r1
 800a5b0:	3312      	adds	r3, #18
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	837b      	strh	r3, [r7, #26]
 800a5b6:	e01c      	b.n	800a5f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d919      	bls.n	800a5f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a5be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a5c2:	495e      	ldr	r1, [pc, #376]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	4413      	add	r3, r2
 800a5ca:	00db      	lsls	r3, r3, #3
 800a5cc:	440b      	add	r3, r1
 800a5ce:	3312      	adds	r3, #18
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	8b3a      	ldrh	r2, [r7, #24]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d80c      	bhi.n	800a5f2 <etharp_find_entry+0x18a>
            old_stable = i;
 800a5d8:	8c3b      	ldrh	r3, [r7, #32]
 800a5da:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800a5dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a5e0:	4956      	ldr	r1, [pc, #344]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	4413      	add	r3, r2
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	440b      	add	r3, r1
 800a5ec:	3312      	adds	r3, #18
 800a5ee:	881b      	ldrh	r3, [r3, #0]
 800a5f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a5f2:	8c3b      	ldrh	r3, [r7, #32]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	843b      	strh	r3, [r7, #32]
 800a5fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a5fe:	2b09      	cmp	r3, #9
 800a600:	f77f af4c 	ble.w	800a49c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a604:	7afb      	ldrb	r3, [r7, #11]
 800a606:	f003 0302 	and.w	r3, r3, #2
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d108      	bne.n	800a620 <etharp_find_entry+0x1b8>
 800a60e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a612:	2b0a      	cmp	r3, #10
 800a614:	d107      	bne.n	800a626 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a616:	7afb      	ldrb	r3, [r7, #11]
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d102      	bne.n	800a626 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800a620:	f04f 33ff 	mov.w	r3, #4294967295
 800a624:	e085      	b.n	800a732 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a626:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a62a:	2b09      	cmp	r3, #9
 800a62c:	dc02      	bgt.n	800a634 <etharp_find_entry+0x1cc>
    i = empty;
 800a62e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a630:	843b      	strh	r3, [r7, #32]
 800a632:	e039      	b.n	800a6a8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a634:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800a638:	2b09      	cmp	r3, #9
 800a63a:	dc14      	bgt.n	800a666 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800a63c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a63e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a640:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a644:	493d      	ldr	r1, [pc, #244]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a646:	4613      	mov	r3, r2
 800a648:	005b      	lsls	r3, r3, #1
 800a64a:	4413      	add	r3, r2
 800a64c:	00db      	lsls	r3, r3, #3
 800a64e:	440b      	add	r3, r1
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d018      	beq.n	800a688 <etharp_find_entry+0x220>
 800a656:	4b3a      	ldr	r3, [pc, #232]	@ (800a740 <etharp_find_entry+0x2d8>)
 800a658:	f240 126d 	movw	r2, #365	@ 0x16d
 800a65c:	493b      	ldr	r1, [pc, #236]	@ (800a74c <etharp_find_entry+0x2e4>)
 800a65e:	483a      	ldr	r0, [pc, #232]	@ (800a748 <etharp_find_entry+0x2e0>)
 800a660:	f002 f9be 	bl	800c9e0 <iprintf>
 800a664:	e010      	b.n	800a688 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a666:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800a66a:	2b09      	cmp	r3, #9
 800a66c:	dc02      	bgt.n	800a674 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800a66e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a670:	843b      	strh	r3, [r7, #32]
 800a672:	e009      	b.n	800a688 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a674:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a678:	2b09      	cmp	r3, #9
 800a67a:	dc02      	bgt.n	800a682 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a67c:	8bfb      	ldrh	r3, [r7, #30]
 800a67e:	843b      	strh	r3, [r7, #32]
 800a680:	e002      	b.n	800a688 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800a682:	f04f 33ff 	mov.w	r3, #4294967295
 800a686:	e054      	b.n	800a732 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a688:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a68c:	2b09      	cmp	r3, #9
 800a68e:	dd06      	ble.n	800a69e <etharp_find_entry+0x236>
 800a690:	4b2b      	ldr	r3, [pc, #172]	@ (800a740 <etharp_find_entry+0x2d8>)
 800a692:	f240 127f 	movw	r2, #383	@ 0x17f
 800a696:	492e      	ldr	r1, [pc, #184]	@ (800a750 <etharp_find_entry+0x2e8>)
 800a698:	482b      	ldr	r0, [pc, #172]	@ (800a748 <etharp_find_entry+0x2e0>)
 800a69a:	f002 f9a1 	bl	800c9e0 <iprintf>
    etharp_free_entry(i);
 800a69e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff fe06 	bl	800a2b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a6a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a6ac:	2b09      	cmp	r3, #9
 800a6ae:	dd06      	ble.n	800a6be <etharp_find_entry+0x256>
 800a6b0:	4b23      	ldr	r3, [pc, #140]	@ (800a740 <etharp_find_entry+0x2d8>)
 800a6b2:	f240 1283 	movw	r2, #387	@ 0x183
 800a6b6:	4926      	ldr	r1, [pc, #152]	@ (800a750 <etharp_find_entry+0x2e8>)
 800a6b8:	4823      	ldr	r0, [pc, #140]	@ (800a748 <etharp_find_entry+0x2e0>)
 800a6ba:	f002 f991 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a6be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a6c2:	491e      	ldr	r1, [pc, #120]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	4413      	add	r3, r2
 800a6ca:	00db      	lsls	r3, r3, #3
 800a6cc:	440b      	add	r3, r1
 800a6ce:	3314      	adds	r3, #20
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d006      	beq.n	800a6e4 <etharp_find_entry+0x27c>
 800a6d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a740 <etharp_find_entry+0x2d8>)
 800a6d8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800a6dc:	491d      	ldr	r1, [pc, #116]	@ (800a754 <etharp_find_entry+0x2ec>)
 800a6de:	481a      	ldr	r0, [pc, #104]	@ (800a748 <etharp_find_entry+0x2e0>)
 800a6e0:	f002 f97e 	bl	800c9e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00b      	beq.n	800a702 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a6ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6819      	ldr	r1, [r3, #0]
 800a6f2:	4812      	ldr	r0, [pc, #72]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	005b      	lsls	r3, r3, #1
 800a6f8:	4413      	add	r3, r2
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	4403      	add	r3, r0
 800a6fe:	3304      	adds	r3, #4
 800a700:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a702:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a706:	490d      	ldr	r1, [pc, #52]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a708:	4613      	mov	r3, r2
 800a70a:	005b      	lsls	r3, r3, #1
 800a70c:	4413      	add	r3, r2
 800a70e:	00db      	lsls	r3, r3, #3
 800a710:	440b      	add	r3, r1
 800a712:	3312      	adds	r3, #18
 800a714:	2200      	movs	r2, #0
 800a716:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800a718:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800a71c:	4907      	ldr	r1, [pc, #28]	@ (800a73c <etharp_find_entry+0x2d4>)
 800a71e:	4613      	mov	r3, r2
 800a720:	005b      	lsls	r3, r3, #1
 800a722:	4413      	add	r3, r2
 800a724:	00db      	lsls	r3, r3, #3
 800a726:	440b      	add	r3, r1
 800a728:	3308      	adds	r3, #8
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800a72e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3728      	adds	r7, #40	@ 0x28
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	200082b8 	.word	0x200082b8
 800a740:	0800fb24 	.word	0x0800fb24
 800a744:	0800fb5c 	.word	0x0800fb5c
 800a748:	0800fb9c 	.word	0x0800fb9c
 800a74c:	0800fbc4 	.word	0x0800fbc4
 800a750:	0800fbdc 	.word	0x0800fbdc
 800a754:	0800fbf0 	.word	0x0800fbf0

0800a758 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af02      	add	r7, sp, #8
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a76c:	2b06      	cmp	r3, #6
 800a76e:	d006      	beq.n	800a77e <etharp_update_arp_entry+0x26>
 800a770:	4b48      	ldr	r3, [pc, #288]	@ (800a894 <etharp_update_arp_entry+0x13c>)
 800a772:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800a776:	4948      	ldr	r1, [pc, #288]	@ (800a898 <etharp_update_arp_entry+0x140>)
 800a778:	4848      	ldr	r0, [pc, #288]	@ (800a89c <etharp_update_arp_entry+0x144>)
 800a77a:	f002 f931 	bl	800c9e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d012      	beq.n	800a7aa <etharp_update_arp_entry+0x52>
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00e      	beq.n	800a7aa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68f9      	ldr	r1, [r7, #12]
 800a792:	4618      	mov	r0, r3
 800a794:	f001 f8ce 	bl	800b934 <ip4_addr_isbroadcast_u32>
 800a798:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d105      	bne.n	800a7aa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a7a6:	2be0      	cmp	r3, #224	@ 0xe0
 800a7a8:	d102      	bne.n	800a7b0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a7aa:	f06f 030f 	mvn.w	r3, #15
 800a7ae:	e06c      	b.n	800a88a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	68b8      	ldr	r0, [r7, #8]
 800a7b8:	f7ff fe56 	bl	800a468 <etharp_find_entry>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a7c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	da02      	bge.n	800a7ce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a7c8:	8afb      	ldrh	r3, [r7, #22]
 800a7ca:	b25b      	sxtb	r3, r3
 800a7cc:	e05d      	b.n	800a88a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a7ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a7d2:	4933      	ldr	r1, [pc, #204]	@ (800a8a0 <etharp_update_arp_entry+0x148>)
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	4413      	add	r3, r2
 800a7da:	00db      	lsls	r3, r3, #3
 800a7dc:	440b      	add	r3, r1
 800a7de:	3314      	adds	r3, #20
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a7e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a7e8:	492d      	ldr	r1, [pc, #180]	@ (800a8a0 <etharp_update_arp_entry+0x148>)
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	4413      	add	r3, r2
 800a7f0:	00db      	lsls	r3, r3, #3
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3308      	adds	r3, #8
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800a7fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a7fe:	4613      	mov	r3, r2
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	4413      	add	r3, r2
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	3308      	adds	r3, #8
 800a808:	4a25      	ldr	r2, [pc, #148]	@ (800a8a0 <etharp_update_arp_entry+0x148>)
 800a80a:	4413      	add	r3, r2
 800a80c:	3304      	adds	r3, #4
 800a80e:	2206      	movs	r2, #6
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4618      	mov	r0, r3
 800a814:	f002 f9bf 	bl	800cb96 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a818:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a81c:	4920      	ldr	r1, [pc, #128]	@ (800a8a0 <etharp_update_arp_entry+0x148>)
 800a81e:	4613      	mov	r3, r2
 800a820:	005b      	lsls	r3, r3, #1
 800a822:	4413      	add	r3, r2
 800a824:	00db      	lsls	r3, r3, #3
 800a826:	440b      	add	r3, r1
 800a828:	3312      	adds	r3, #18
 800a82a:	2200      	movs	r2, #0
 800a82c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a82e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a832:	491b      	ldr	r1, [pc, #108]	@ (800a8a0 <etharp_update_arp_entry+0x148>)
 800a834:	4613      	mov	r3, r2
 800a836:	005b      	lsls	r3, r3, #1
 800a838:	4413      	add	r3, r2
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	440b      	add	r3, r1
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d021      	beq.n	800a888 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a844:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a848:	4915      	ldr	r1, [pc, #84]	@ (800a8a0 <etharp_update_arp_entry+0x148>)
 800a84a:	4613      	mov	r3, r2
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	4413      	add	r3, r2
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	440b      	add	r3, r1
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a858:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a85c:	4910      	ldr	r1, [pc, #64]	@ (800a8a0 <etharp_update_arp_entry+0x148>)
 800a85e:	4613      	mov	r3, r2
 800a860:	005b      	lsls	r3, r3, #1
 800a862:	4413      	add	r3, r2
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	440b      	add	r3, r1
 800a868:	2200      	movs	r2, #0
 800a86a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800a872:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6939      	ldr	r1, [r7, #16]
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f001 ff67 	bl	800c750 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800a882:	6938      	ldr	r0, [r7, #16]
 800a884:	f7f9 fe6e 	bl	8004564 <pbuf_free>
  }
  return ERR_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	0800fb24 	.word	0x0800fb24
 800a898:	0800fc1c 	.word	0x0800fc1c
 800a89c:	0800fb9c 	.word	0x0800fb9c
 800a8a0:	200082b8 	.word	0x200082b8

0800a8a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800a8a4:	b5b0      	push	{r4, r5, r7, lr}
 800a8a6:	b08a      	sub	sp, #40	@ 0x28
 800a8a8:	af04      	add	r7, sp, #16
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d107      	bne.n	800a8c4 <etharp_input+0x20>
 800a8b4:	4b3d      	ldr	r3, [pc, #244]	@ (800a9ac <etharp_input+0x108>)
 800a8b6:	f240 228a 	movw	r2, #650	@ 0x28a
 800a8ba:	493d      	ldr	r1, [pc, #244]	@ (800a9b0 <etharp_input+0x10c>)
 800a8bc:	483d      	ldr	r0, [pc, #244]	@ (800a9b4 <etharp_input+0x110>)
 800a8be:	f002 f88f 	bl	800c9e0 <iprintf>
 800a8c2:	e06f      	b.n	800a9a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8d4:	d10c      	bne.n	800a8f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800a8da:	2b06      	cmp	r3, #6
 800a8dc:	d108      	bne.n	800a8f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800a8e2:	2b04      	cmp	r3, #4
 800a8e4:	d104      	bne.n	800a8f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	885b      	ldrh	r3, [r3, #2]
 800a8ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800a8ec:	2b08      	cmp	r3, #8
 800a8ee:	d003      	beq.n	800a8f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7f9 fe37 	bl	8004564 <pbuf_free>
    return;
 800a8f6:	e055      	b.n	800a9a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	330e      	adds	r3, #14
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	3318      	adds	r3, #24
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	3304      	adds	r3, #4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d102      	bne.n	800a918 <etharp_input+0x74>
    for_us = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	75fb      	strb	r3, [r7, #23]
 800a916:	e009      	b.n	800a92c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	3304      	adds	r3, #4
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	429a      	cmp	r2, r3
 800a922:	bf0c      	ite	eq
 800a924:	2301      	moveq	r3, #1
 800a926:	2300      	movne	r3, #0
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f103 0208 	add.w	r2, r3, #8
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <etharp_input+0x98>
 800a938:	2301      	movs	r3, #1
 800a93a:	e000      	b.n	800a93e <etharp_input+0x9a>
 800a93c:	2302      	movs	r3, #2
 800a93e:	f107 010c 	add.w	r1, r7, #12
 800a942:	6838      	ldr	r0, [r7, #0]
 800a944:	f7ff ff08 	bl	800a758 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	88db      	ldrh	r3, [r3, #6]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a952:	d003      	beq.n	800a95c <etharp_input+0xb8>
 800a954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a958:	d01e      	beq.n	800a998 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800a95a:	e020      	b.n	800a99e <etharp_input+0xfa>
      if (for_us) {
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d01c      	beq.n	800a99c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800a97c:	2102      	movs	r1, #2
 800a97e:	9103      	str	r1, [sp, #12]
 800a980:	f107 010c 	add.w	r1, r7, #12
 800a984:	9102      	str	r1, [sp, #8]
 800a986:	9201      	str	r2, [sp, #4]
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	462b      	mov	r3, r5
 800a98c:	4622      	mov	r2, r4
 800a98e:	4601      	mov	r1, r0
 800a990:	6838      	ldr	r0, [r7, #0]
 800a992:	f000 faeb 	bl	800af6c <etharp_raw>
      break;
 800a996:	e001      	b.n	800a99c <etharp_input+0xf8>
      break;
 800a998:	bf00      	nop
 800a99a:	e000      	b.n	800a99e <etharp_input+0xfa>
      break;
 800a99c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7f9 fde0 	bl	8004564 <pbuf_free>
}
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800fb24 	.word	0x0800fb24
 800a9b0:	0800fc74 	.word	0x0800fc74
 800a9b4:	0800fb9c 	.word	0x0800fb9c

0800a9b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800a9c6:	79fa      	ldrb	r2, [r7, #7]
 800a9c8:	4944      	ldr	r1, [pc, #272]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	4413      	add	r3, r2
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	440b      	add	r3, r1
 800a9d4:	3314      	adds	r3, #20
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d806      	bhi.n	800a9ea <etharp_output_to_arp_index+0x32>
 800a9dc:	4b40      	ldr	r3, [pc, #256]	@ (800aae0 <etharp_output_to_arp_index+0x128>)
 800a9de:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a9e2:	4940      	ldr	r1, [pc, #256]	@ (800aae4 <etharp_output_to_arp_index+0x12c>)
 800a9e4:	4840      	ldr	r0, [pc, #256]	@ (800aae8 <etharp_output_to_arp_index+0x130>)
 800a9e6:	f001 fffb 	bl	800c9e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800a9ea:	79fa      	ldrb	r2, [r7, #7]
 800a9ec:	493b      	ldr	r1, [pc, #236]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	4413      	add	r3, r2
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	440b      	add	r3, r1
 800a9f8:	3314      	adds	r3, #20
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d153      	bne.n	800aaa8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800aa00:	79fa      	ldrb	r2, [r7, #7]
 800aa02:	4936      	ldr	r1, [pc, #216]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800aa04:	4613      	mov	r3, r2
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	4413      	add	r3, r2
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	440b      	add	r3, r1
 800aa0e:	3312      	adds	r3, #18
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800aa16:	d919      	bls.n	800aa4c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800aa18:	79fa      	ldrb	r2, [r7, #7]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	4413      	add	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	4a2e      	ldr	r2, [pc, #184]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800aa24:	4413      	add	r3, r2
 800aa26:	3304      	adds	r3, #4
 800aa28:	4619      	mov	r1, r3
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 fb4c 	bl	800b0c8 <etharp_request>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d138      	bne.n	800aaa8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800aa36:	79fa      	ldrb	r2, [r7, #7]
 800aa38:	4928      	ldr	r1, [pc, #160]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	4413      	add	r3, r2
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	440b      	add	r3, r1
 800aa44:	3314      	adds	r3, #20
 800aa46:	2203      	movs	r2, #3
 800aa48:	701a      	strb	r2, [r3, #0]
 800aa4a:	e02d      	b.n	800aaa8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800aa4c:	79fa      	ldrb	r2, [r7, #7]
 800aa4e:	4923      	ldr	r1, [pc, #140]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800aa50:	4613      	mov	r3, r2
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	4413      	add	r3, r2
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	440b      	add	r3, r1
 800aa5a:	3312      	adds	r3, #18
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800aa62:	d321      	bcc.n	800aaa8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800aa64:	79fa      	ldrb	r2, [r7, #7]
 800aa66:	4613      	mov	r3, r2
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	4413      	add	r3, r2
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	4a1b      	ldr	r2, [pc, #108]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800aa70:	4413      	add	r3, r2
 800aa72:	1d19      	adds	r1, r3, #4
 800aa74:	79fa      	ldrb	r2, [r7, #7]
 800aa76:	4613      	mov	r3, r2
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	4413      	add	r3, r2
 800aa7c:	00db      	lsls	r3, r3, #3
 800aa7e:	3308      	adds	r3, #8
 800aa80:	4a16      	ldr	r2, [pc, #88]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800aa82:	4413      	add	r3, r2
 800aa84:	3304      	adds	r3, #4
 800aa86:	461a      	mov	r2, r3
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f000 fafb 	bl	800b084 <etharp_request_dst>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d109      	bne.n	800aaa8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800aa94:	79fa      	ldrb	r2, [r7, #7]
 800aa96:	4911      	ldr	r1, [pc, #68]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800aa98:	4613      	mov	r3, r2
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	4413      	add	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	440b      	add	r3, r1
 800aaa2:	3314      	adds	r3, #20
 800aaa4:	2203      	movs	r2, #3
 800aaa6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 800aaae:	79fa      	ldrb	r2, [r7, #7]
 800aab0:	4613      	mov	r3, r2
 800aab2:	005b      	lsls	r3, r3, #1
 800aab4:	4413      	add	r3, r2
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	3308      	adds	r3, #8
 800aaba:	4a08      	ldr	r2, [pc, #32]	@ (800aadc <etharp_output_to_arp_index+0x124>)
 800aabc:	4413      	add	r3, r2
 800aabe:	3304      	adds	r3, #4
 800aac0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aac4:	9200      	str	r2, [sp, #0]
 800aac6:	460a      	mov	r2, r1
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f001 fe40 	bl	800c750 <ethernet_output>
 800aad0:	4603      	mov	r3, r0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	200082b8 	.word	0x200082b8
 800aae0:	0800fb24 	.word	0x0800fb24
 800aae4:	0800fc94 	.word	0x0800fc94
 800aae8:	0800fb9c 	.word	0x0800fb9c

0800aaec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08a      	sub	sp, #40	@ 0x28
 800aaf0:	af02      	add	r7, sp, #8
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d106      	bne.n	800ab10 <etharp_output+0x24>
 800ab02:	4b73      	ldr	r3, [pc, #460]	@ (800acd0 <etharp_output+0x1e4>)
 800ab04:	f240 321e 	movw	r2, #798	@ 0x31e
 800ab08:	4972      	ldr	r1, [pc, #456]	@ (800acd4 <etharp_output+0x1e8>)
 800ab0a:	4873      	ldr	r0, [pc, #460]	@ (800acd8 <etharp_output+0x1ec>)
 800ab0c:	f001 ff68 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d106      	bne.n	800ab24 <etharp_output+0x38>
 800ab16:	4b6e      	ldr	r3, [pc, #440]	@ (800acd0 <etharp_output+0x1e4>)
 800ab18:	f240 321f 	movw	r2, #799	@ 0x31f
 800ab1c:	496f      	ldr	r1, [pc, #444]	@ (800acdc <etharp_output+0x1f0>)
 800ab1e:	486e      	ldr	r0, [pc, #440]	@ (800acd8 <etharp_output+0x1ec>)
 800ab20:	f001 ff5e 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d106      	bne.n	800ab38 <etharp_output+0x4c>
 800ab2a:	4b69      	ldr	r3, [pc, #420]	@ (800acd0 <etharp_output+0x1e4>)
 800ab2c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ab30:	496b      	ldr	r1, [pc, #428]	@ (800ace0 <etharp_output+0x1f4>)
 800ab32:	4869      	ldr	r0, [pc, #420]	@ (800acd8 <etharp_output+0x1ec>)
 800ab34:	f001 ff54 	bl	800c9e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68f9      	ldr	r1, [r7, #12]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 fef8 	bl	800b934 <ip4_addr_isbroadcast_u32>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ab4a:	4b66      	ldr	r3, [pc, #408]	@ (800ace4 <etharp_output+0x1f8>)
 800ab4c:	61fb      	str	r3, [r7, #28]
 800ab4e:	e0af      	b.n	800acb0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ab58:	2be0      	cmp	r3, #224	@ 0xe0
 800ab5a:	d118      	bne.n	800ab8e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ab60:	2300      	movs	r3, #0
 800ab62:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ab64:	235e      	movs	r3, #94	@ 0x5e
 800ab66:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3302      	adds	r3, #2
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3303      	adds	r3, #3
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ab86:	f107 0310 	add.w	r3, r7, #16
 800ab8a:	61fb      	str	r3, [r7, #28]
 800ab8c:	e090      	b.n	800acb0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3304      	adds	r3, #4
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	405a      	eors	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4013      	ands	r3, r2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d012      	beq.n	800abcc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800abac:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d00b      	beq.n	800abcc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	330c      	adds	r3, #12
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	330c      	adds	r3, #12
 800abc2:	61bb      	str	r3, [r7, #24]
 800abc4:	e002      	b.n	800abcc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800abc6:	f06f 0303 	mvn.w	r3, #3
 800abca:	e07d      	b.n	800acc8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800abcc:	4b46      	ldr	r3, [pc, #280]	@ (800ace8 <etharp_output+0x1fc>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	4619      	mov	r1, r3
 800abd2:	4a46      	ldr	r2, [pc, #280]	@ (800acec <etharp_output+0x200>)
 800abd4:	460b      	mov	r3, r1
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	440b      	add	r3, r1
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	4413      	add	r3, r2
 800abde:	3314      	adds	r3, #20
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d925      	bls.n	800ac32 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800abe6:	4b40      	ldr	r3, [pc, #256]	@ (800ace8 <etharp_output+0x1fc>)
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	4619      	mov	r1, r3
 800abec:	4a3f      	ldr	r2, [pc, #252]	@ (800acec <etharp_output+0x200>)
 800abee:	460b      	mov	r3, r1
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	440b      	add	r3, r1
 800abf4:	00db      	lsls	r3, r3, #3
 800abf6:	4413      	add	r3, r2
 800abf8:	3308      	adds	r3, #8
 800abfa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d117      	bne.n	800ac32 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	4b38      	ldr	r3, [pc, #224]	@ (800ace8 <etharp_output+0x1fc>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	4937      	ldr	r1, [pc, #220]	@ (800acec <etharp_output+0x200>)
 800ac0e:	4603      	mov	r3, r0
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	4403      	add	r3, r0
 800ac14:	00db      	lsls	r3, r3, #3
 800ac16:	440b      	add	r3, r1
 800ac18:	3304      	adds	r3, #4
 800ac1a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d108      	bne.n	800ac32 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ac20:	4b31      	ldr	r3, [pc, #196]	@ (800ace8 <etharp_output+0x1fc>)
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	461a      	mov	r2, r3
 800ac26:	68b9      	ldr	r1, [r7, #8]
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f7ff fec5 	bl	800a9b8 <etharp_output_to_arp_index>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	e04a      	b.n	800acc8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ac32:	2300      	movs	r3, #0
 800ac34:	75fb      	strb	r3, [r7, #23]
 800ac36:	e031      	b.n	800ac9c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ac38:	7dfa      	ldrb	r2, [r7, #23]
 800ac3a:	492c      	ldr	r1, [pc, #176]	@ (800acec <etharp_output+0x200>)
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	005b      	lsls	r3, r3, #1
 800ac40:	4413      	add	r3, r2
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	440b      	add	r3, r1
 800ac46:	3314      	adds	r3, #20
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d923      	bls.n	800ac96 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ac4e:	7dfa      	ldrb	r2, [r7, #23]
 800ac50:	4926      	ldr	r1, [pc, #152]	@ (800acec <etharp_output+0x200>)
 800ac52:	4613      	mov	r3, r2
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	4413      	add	r3, r2
 800ac58:	00db      	lsls	r3, r3, #3
 800ac5a:	440b      	add	r3, r1
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d117      	bne.n	800ac96 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	6819      	ldr	r1, [r3, #0]
 800ac6a:	7dfa      	ldrb	r2, [r7, #23]
 800ac6c:	481f      	ldr	r0, [pc, #124]	@ (800acec <etharp_output+0x200>)
 800ac6e:	4613      	mov	r3, r2
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	4413      	add	r3, r2
 800ac74:	00db      	lsls	r3, r3, #3
 800ac76:	4403      	add	r3, r0
 800ac78:	3304      	adds	r3, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	d10a      	bne.n	800ac96 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ac80:	4a19      	ldr	r2, [pc, #100]	@ (800ace8 <etharp_output+0x1fc>)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	68b9      	ldr	r1, [r7, #8]
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7ff fe93 	bl	800a9b8 <etharp_output_to_arp_index>
 800ac92:	4603      	mov	r3, r0
 800ac94:	e018      	b.n	800acc8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	75fb      	strb	r3, [r7, #23]
 800ac9c:	7dfb      	ldrb	r3, [r7, #23]
 800ac9e:	2b09      	cmp	r3, #9
 800aca0:	d9ca      	bls.n	800ac38 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	69b9      	ldr	r1, [r7, #24]
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f000 f822 	bl	800acf0 <etharp_query>
 800acac:	4603      	mov	r3, r0
 800acae:	e00b      	b.n	800acc8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800acb6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	68b9      	ldr	r1, [r7, #8]
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f001 fd45 	bl	800c750 <ethernet_output>
 800acc6:	4603      	mov	r3, r0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	0800fb24 	.word	0x0800fb24
 800acd4:	0800fc74 	.word	0x0800fc74
 800acd8:	0800fb9c 	.word	0x0800fb9c
 800acdc:	0800fcc4 	.word	0x0800fcc4
 800ace0:	0800fc64 	.word	0x0800fc64
 800ace4:	080102d8 	.word	0x080102d8
 800ace8:	200083a8 	.word	0x200083a8
 800acec:	200082b8 	.word	0x200082b8

0800acf0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b08c      	sub	sp, #48	@ 0x30
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	332a      	adds	r3, #42	@ 0x2a
 800ad00:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ad02:	23ff      	movs	r3, #255	@ 0xff
 800ad04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68f9      	ldr	r1, [r7, #12]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 fe0e 	bl	800b934 <ip4_addr_isbroadcast_u32>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10c      	bne.n	800ad38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ad26:	2be0      	cmp	r3, #224	@ 0xe0
 800ad28:	d006      	beq.n	800ad38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d003      	beq.n	800ad38 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ad38:	f06f 030f 	mvn.w	r3, #15
 800ad3c:	e101      	b.n	800af42 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	2101      	movs	r1, #1
 800ad42:	68b8      	ldr	r0, [r7, #8]
 800ad44:	f7ff fb90 	bl	800a468 <etharp_find_entry>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ad4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	da02      	bge.n	800ad5a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ad54:	8a7b      	ldrh	r3, [r7, #18]
 800ad56:	b25b      	sxtb	r3, r3
 800ad58:	e0f3      	b.n	800af42 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ad5a:	8a7b      	ldrh	r3, [r7, #18]
 800ad5c:	2b7e      	cmp	r3, #126	@ 0x7e
 800ad5e:	d906      	bls.n	800ad6e <etharp_query+0x7e>
 800ad60:	4b7a      	ldr	r3, [pc, #488]	@ (800af4c <etharp_query+0x25c>)
 800ad62:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800ad66:	497a      	ldr	r1, [pc, #488]	@ (800af50 <etharp_query+0x260>)
 800ad68:	487a      	ldr	r0, [pc, #488]	@ (800af54 <etharp_query+0x264>)
 800ad6a:	f001 fe39 	bl	800c9e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ad6e:	8a7b      	ldrh	r3, [r7, #18]
 800ad70:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ad72:	7c7a      	ldrb	r2, [r7, #17]
 800ad74:	4978      	ldr	r1, [pc, #480]	@ (800af58 <etharp_query+0x268>)
 800ad76:	4613      	mov	r3, r2
 800ad78:	005b      	lsls	r3, r3, #1
 800ad7a:	4413      	add	r3, r2
 800ad7c:	00db      	lsls	r3, r3, #3
 800ad7e:	440b      	add	r3, r1
 800ad80:	3314      	adds	r3, #20
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d115      	bne.n	800adb4 <etharp_query+0xc4>
    is_new_entry = 1;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ad8c:	7c7a      	ldrb	r2, [r7, #17]
 800ad8e:	4972      	ldr	r1, [pc, #456]	@ (800af58 <etharp_query+0x268>)
 800ad90:	4613      	mov	r3, r2
 800ad92:	005b      	lsls	r3, r3, #1
 800ad94:	4413      	add	r3, r2
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	440b      	add	r3, r1
 800ad9a:	3314      	adds	r3, #20
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ada0:	7c7a      	ldrb	r2, [r7, #17]
 800ada2:	496d      	ldr	r1, [pc, #436]	@ (800af58 <etharp_query+0x268>)
 800ada4:	4613      	mov	r3, r2
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	4413      	add	r3, r2
 800adaa:	00db      	lsls	r3, r3, #3
 800adac:	440b      	add	r3, r1
 800adae:	3308      	adds	r3, #8
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800adb4:	7c7a      	ldrb	r2, [r7, #17]
 800adb6:	4968      	ldr	r1, [pc, #416]	@ (800af58 <etharp_query+0x268>)
 800adb8:	4613      	mov	r3, r2
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	4413      	add	r3, r2
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	440b      	add	r3, r1
 800adc2:	3314      	adds	r3, #20
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d011      	beq.n	800adee <etharp_query+0xfe>
 800adca:	7c7a      	ldrb	r2, [r7, #17]
 800adcc:	4962      	ldr	r1, [pc, #392]	@ (800af58 <etharp_query+0x268>)
 800adce:	4613      	mov	r3, r2
 800add0:	005b      	lsls	r3, r3, #1
 800add2:	4413      	add	r3, r2
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	440b      	add	r3, r1
 800add8:	3314      	adds	r3, #20
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d806      	bhi.n	800adee <etharp_query+0xfe>
 800ade0:	4b5a      	ldr	r3, [pc, #360]	@ (800af4c <etharp_query+0x25c>)
 800ade2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ade6:	495d      	ldr	r1, [pc, #372]	@ (800af5c <etharp_query+0x26c>)
 800ade8:	485a      	ldr	r0, [pc, #360]	@ (800af54 <etharp_query+0x264>)
 800adea:	f001 fdf9 	bl	800c9e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800adee:	6a3b      	ldr	r3, [r7, #32]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d102      	bne.n	800adfa <etharp_query+0x10a>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10c      	bne.n	800ae14 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800adfa:	68b9      	ldr	r1, [r7, #8]
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 f963 	bl	800b0c8 <etharp_request>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <etharp_query+0x124>
      return result;
 800ae0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ae12:	e096      	b.n	800af42 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <etharp_query+0x138>
 800ae1a:	4b4c      	ldr	r3, [pc, #304]	@ (800af4c <etharp_query+0x25c>)
 800ae1c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ae20:	494f      	ldr	r1, [pc, #316]	@ (800af60 <etharp_query+0x270>)
 800ae22:	484c      	ldr	r0, [pc, #304]	@ (800af54 <etharp_query+0x264>)
 800ae24:	f001 fddc 	bl	800c9e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ae28:	7c7a      	ldrb	r2, [r7, #17]
 800ae2a:	494b      	ldr	r1, [pc, #300]	@ (800af58 <etharp_query+0x268>)
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	005b      	lsls	r3, r3, #1
 800ae30:	4413      	add	r3, r2
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	440b      	add	r3, r1
 800ae36:	3314      	adds	r3, #20
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d917      	bls.n	800ae6e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ae3e:	4a49      	ldr	r2, [pc, #292]	@ (800af64 <etharp_query+0x274>)
 800ae40:	7c7b      	ldrb	r3, [r7, #17]
 800ae42:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ae44:	7c7a      	ldrb	r2, [r7, #17]
 800ae46:	4613      	mov	r3, r2
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	4413      	add	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	3308      	adds	r3, #8
 800ae50:	4a41      	ldr	r2, [pc, #260]	@ (800af58 <etharp_query+0x268>)
 800ae52:	4413      	add	r3, r2
 800ae54:	3304      	adds	r3, #4
 800ae56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae5a:	9200      	str	r2, [sp, #0]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f001 fc75 	bl	800c750 <ethernet_output>
 800ae66:	4603      	mov	r3, r0
 800ae68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae6c:	e067      	b.n	800af3e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ae6e:	7c7a      	ldrb	r2, [r7, #17]
 800ae70:	4939      	ldr	r1, [pc, #228]	@ (800af58 <etharp_query+0x268>)
 800ae72:	4613      	mov	r3, r2
 800ae74:	005b      	lsls	r3, r3, #1
 800ae76:	4413      	add	r3, r2
 800ae78:	00db      	lsls	r3, r3, #3
 800ae7a:	440b      	add	r3, r1
 800ae7c:	3314      	adds	r3, #20
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d15c      	bne.n	800af3e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ae8c:	e01c      	b.n	800aec8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	895a      	ldrh	r2, [r3, #10]
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	891b      	ldrh	r3, [r3, #8]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d10a      	bne.n	800aeb0 <etharp_query+0x1c0>
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d006      	beq.n	800aeb0 <etharp_query+0x1c0>
 800aea2:	4b2a      	ldr	r3, [pc, #168]	@ (800af4c <etharp_query+0x25c>)
 800aea4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800aea8:	492f      	ldr	r1, [pc, #188]	@ (800af68 <etharp_query+0x278>)
 800aeaa:	482a      	ldr	r0, [pc, #168]	@ (800af54 <etharp_query+0x264>)
 800aeac:	f001 fd98 	bl	800c9e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	7b1b      	ldrb	r3, [r3, #12]
 800aeb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <etharp_query+0x1d2>
        copy_needed = 1;
 800aebc:	2301      	movs	r3, #1
 800aebe:	61bb      	str	r3, [r7, #24]
        break;
 800aec0:	e005      	b.n	800aece <etharp_query+0x1de>
      }
      p = p->next;
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1df      	bne.n	800ae8e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d007      	beq.n	800aee4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800aeda:	200e      	movs	r0, #14
 800aedc:	f7f9 fd9e 	bl	8004a1c <pbuf_clone>
 800aee0:	61f8      	str	r0, [r7, #28]
 800aee2:	e004      	b.n	800aeee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800aee8:	69f8      	ldr	r0, [r7, #28]
 800aeea:	f7f9 fbdb 	bl	80046a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d021      	beq.n	800af38 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800aef4:	7c7a      	ldrb	r2, [r7, #17]
 800aef6:	4918      	ldr	r1, [pc, #96]	@ (800af58 <etharp_query+0x268>)
 800aef8:	4613      	mov	r3, r2
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	4413      	add	r3, r2
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	440b      	add	r3, r1
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00a      	beq.n	800af1e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800af08:	7c7a      	ldrb	r2, [r7, #17]
 800af0a:	4913      	ldr	r1, [pc, #76]	@ (800af58 <etharp_query+0x268>)
 800af0c:	4613      	mov	r3, r2
 800af0e:	005b      	lsls	r3, r3, #1
 800af10:	4413      	add	r3, r2
 800af12:	00db      	lsls	r3, r3, #3
 800af14:	440b      	add	r3, r1
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4618      	mov	r0, r3
 800af1a:	f7f9 fb23 	bl	8004564 <pbuf_free>
      }
      arp_table[i].q = p;
 800af1e:	7c7a      	ldrb	r2, [r7, #17]
 800af20:	490d      	ldr	r1, [pc, #52]	@ (800af58 <etharp_query+0x268>)
 800af22:	4613      	mov	r3, r2
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	4413      	add	r3, r2
 800af28:	00db      	lsls	r3, r3, #3
 800af2a:	440b      	add	r3, r1
 800af2c:	69fa      	ldr	r2, [r7, #28]
 800af2e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af36:	e002      	b.n	800af3e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800af38:	23ff      	movs	r3, #255	@ 0xff
 800af3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800af3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800af42:	4618      	mov	r0, r3
 800af44:	3728      	adds	r7, #40	@ 0x28
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	0800fb24 	.word	0x0800fb24
 800af50:	0800fcd0 	.word	0x0800fcd0
 800af54:	0800fb9c 	.word	0x0800fb9c
 800af58:	200082b8 	.word	0x200082b8
 800af5c:	0800fce0 	.word	0x0800fce0
 800af60:	0800fcc4 	.word	0x0800fcc4
 800af64:	200083a8 	.word	0x200083a8
 800af68:	0800fd08 	.word	0x0800fd08

0800af6c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08a      	sub	sp, #40	@ 0x28
 800af70:	af02      	add	r7, sp, #8
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
 800af78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d106      	bne.n	800af92 <etharp_raw+0x26>
 800af84:	4b3a      	ldr	r3, [pc, #232]	@ (800b070 <etharp_raw+0x104>)
 800af86:	f240 4257 	movw	r2, #1111	@ 0x457
 800af8a:	493a      	ldr	r1, [pc, #232]	@ (800b074 <etharp_raw+0x108>)
 800af8c:	483a      	ldr	r0, [pc, #232]	@ (800b078 <etharp_raw+0x10c>)
 800af8e:	f001 fd27 	bl	800c9e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800af92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800af96:	211c      	movs	r1, #28
 800af98:	200e      	movs	r0, #14
 800af9a:	f7f8 ffff 	bl	8003f9c <pbuf_alloc>
 800af9e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800afa6:	f04f 33ff 	mov.w	r3, #4294967295
 800afaa:	e05d      	b.n	800b068 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	895b      	ldrh	r3, [r3, #10]
 800afb0:	2b1b      	cmp	r3, #27
 800afb2:	d806      	bhi.n	800afc2 <etharp_raw+0x56>
 800afb4:	4b2e      	ldr	r3, [pc, #184]	@ (800b070 <etharp_raw+0x104>)
 800afb6:	f240 4262 	movw	r2, #1122	@ 0x462
 800afba:	4930      	ldr	r1, [pc, #192]	@ (800b07c <etharp_raw+0x110>)
 800afbc:	482e      	ldr	r0, [pc, #184]	@ (800b078 <etharp_raw+0x10c>)
 800afbe:	f001 fd0f 	bl	800c9e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800afc8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800afca:	4618      	mov	r0, r3
 800afcc:	f7f8 f853 	bl	8003076 <lwip_htons>
 800afd0:	4603      	mov	r3, r0
 800afd2:	461a      	mov	r2, r3
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800afde:	2b06      	cmp	r3, #6
 800afe0:	d006      	beq.n	800aff0 <etharp_raw+0x84>
 800afe2:	4b23      	ldr	r3, [pc, #140]	@ (800b070 <etharp_raw+0x104>)
 800afe4:	f240 4269 	movw	r2, #1129	@ 0x469
 800afe8:	4925      	ldr	r1, [pc, #148]	@ (800b080 <etharp_raw+0x114>)
 800afea:	4823      	ldr	r0, [pc, #140]	@ (800b078 <etharp_raw+0x10c>)
 800afec:	f001 fcf8 	bl	800c9e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	3308      	adds	r3, #8
 800aff4:	2206      	movs	r2, #6
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	4618      	mov	r0, r3
 800affa:	f001 fdcc 	bl	800cb96 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	3312      	adds	r3, #18
 800b002:	2206      	movs	r2, #6
 800b004:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b006:	4618      	mov	r0, r3
 800b008:	f001 fdc5 	bl	800cb96 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	330e      	adds	r3, #14
 800b010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b012:	6812      	ldr	r2, [r2, #0]
 800b014:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	3318      	adds	r3, #24
 800b01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b01c:	6812      	ldr	r2, [r2, #0]
 800b01e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	2200      	movs	r2, #0
 800b024:	701a      	strb	r2, [r3, #0]
 800b026:	2200      	movs	r2, #0
 800b028:	f042 0201 	orr.w	r2, r2, #1
 800b02c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2200      	movs	r2, #0
 800b032:	f042 0208 	orr.w	r2, r2, #8
 800b036:	709a      	strb	r2, [r3, #2]
 800b038:	2200      	movs	r2, #0
 800b03a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	2206      	movs	r2, #6
 800b040:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2204      	movs	r2, #4
 800b046:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b048:	f640 0306 	movw	r3, #2054	@ 0x806
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	69b9      	ldr	r1, [r7, #24]
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f001 fb7b 	bl	800c750 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b05a:	69b8      	ldr	r0, [r7, #24]
 800b05c:	f7f9 fa82 	bl	8004564 <pbuf_free>
  p = NULL;
 800b060:	2300      	movs	r3, #0
 800b062:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b064:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3720      	adds	r7, #32
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	0800fb24 	.word	0x0800fb24
 800b074:	0800fc74 	.word	0x0800fc74
 800b078:	0800fb9c 	.word	0x0800fb9c
 800b07c:	0800fd24 	.word	0x0800fd24
 800b080:	0800fd58 	.word	0x0800fd58

0800b084 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b088      	sub	sp, #32
 800b088:	af04      	add	r7, sp, #16
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	9203      	str	r2, [sp, #12]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	9202      	str	r2, [sp, #8]
 800b0a8:	4a06      	ldr	r2, [pc, #24]	@ (800b0c4 <etharp_request_dst+0x40>)
 800b0aa:	9201      	str	r2, [sp, #4]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f7ff ff5a 	bl	800af6c <etharp_raw>
 800b0b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	080102e0 	.word	0x080102e0

0800b0c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b0d2:	4a05      	ldr	r2, [pc, #20]	@ (800b0e8 <etharp_request+0x20>)
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff ffd4 	bl	800b084 <etharp_request_dst>
 800b0dc:	4603      	mov	r3, r0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	080102d8 	.word	0x080102d8

0800b0ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08e      	sub	sp, #56	@ 0x38
 800b0f0:	af04      	add	r7, sp, #16
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b0f6:	4b79      	ldr	r3, [pc, #484]	@ (800b2dc <icmp_input+0x1f0>)
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	b2db      	uxtb	r3, r3
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800b10c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b10e:	2b13      	cmp	r3, #19
 800b110:	f240 80cd 	bls.w	800b2ae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	895b      	ldrh	r3, [r3, #10]
 800b118:	2b03      	cmp	r3, #3
 800b11a:	f240 80ca 	bls.w	800b2b2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b128:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 80b7 	beq.w	800b2a0 <icmp_input+0x1b4>
 800b132:	2b08      	cmp	r3, #8
 800b134:	f040 80b7 	bne.w	800b2a6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800b138:	4b69      	ldr	r3, [pc, #420]	@ (800b2e0 <icmp_input+0x1f4>)
 800b13a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b13c:	4b67      	ldr	r3, [pc, #412]	@ (800b2dc <icmp_input+0x1f0>)
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b144:	2be0      	cmp	r3, #224	@ 0xe0
 800b146:	f000 80bb 	beq.w	800b2c0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b14a:	4b64      	ldr	r3, [pc, #400]	@ (800b2dc <icmp_input+0x1f0>)
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	4a63      	ldr	r2, [pc, #396]	@ (800b2dc <icmp_input+0x1f0>)
 800b150:	6812      	ldr	r2, [r2, #0]
 800b152:	4611      	mov	r1, r2
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fbed 	bl	800b934 <ip4_addr_isbroadcast_u32>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f040 80b1 	bne.w	800b2c4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	891b      	ldrh	r3, [r3, #8]
 800b166:	2b07      	cmp	r3, #7
 800b168:	f240 80a5 	bls.w	800b2b6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b16c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b16e:	330e      	adds	r3, #14
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7f9 f960 	bl	8004438 <pbuf_add_header>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d04b      	beq.n	800b216 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	891a      	ldrh	r2, [r3, #8]
 800b182:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b184:	4413      	add	r3, r2
 800b186:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	891b      	ldrh	r3, [r3, #8]
 800b18c:	8b7a      	ldrh	r2, [r7, #26]
 800b18e:	429a      	cmp	r2, r3
 800b190:	f0c0 809a 	bcc.w	800b2c8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800b194:	8b7b      	ldrh	r3, [r7, #26]
 800b196:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b19a:	4619      	mov	r1, r3
 800b19c:	200e      	movs	r0, #14
 800b19e:	f7f8 fefd 	bl	8003f9c <pbuf_alloc>
 800b1a2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f000 8090 	beq.w	800b2cc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	895b      	ldrh	r3, [r3, #10]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d203      	bcs.n	800b1c2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800b1ba:	6978      	ldr	r0, [r7, #20]
 800b1bc:	f7f9 f9d2 	bl	8004564 <pbuf_free>
          goto icmperr;
 800b1c0:	e085      	b.n	800b2ce <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b1c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f001 fce3 	bl	800cb96 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800b1d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6978      	ldr	r0, [r7, #20]
 800b1d6:	f7f9 f93f 	bl	8004458 <pbuf_remove_header>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d009      	beq.n	800b1f4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b1e0:	4b40      	ldr	r3, [pc, #256]	@ (800b2e4 <icmp_input+0x1f8>)
 800b1e2:	22b6      	movs	r2, #182	@ 0xb6
 800b1e4:	4940      	ldr	r1, [pc, #256]	@ (800b2e8 <icmp_input+0x1fc>)
 800b1e6:	4841      	ldr	r0, [pc, #260]	@ (800b2ec <icmp_input+0x200>)
 800b1e8:	f001 fbfa 	bl	800c9e0 <iprintf>
          pbuf_free(r);
 800b1ec:	6978      	ldr	r0, [r7, #20]
 800b1ee:	f7f9 f9b9 	bl	8004564 <pbuf_free>
          goto icmperr;
 800b1f2:	e06c      	b.n	800b2ce <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800b1f4:	6879      	ldr	r1, [r7, #4]
 800b1f6:	6978      	ldr	r0, [r7, #20]
 800b1f8:	f7f9 facc 	bl	8004794 <pbuf_copy>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d003      	beq.n	800b20a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800b202:	6978      	ldr	r0, [r7, #20]
 800b204:	f7f9 f9ae 	bl	8004564 <pbuf_free>
          goto icmperr;
 800b208:	e061      	b.n	800b2ce <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7f9 f9aa 	bl	8004564 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	607b      	str	r3, [r7, #4]
 800b214:	e00f      	b.n	800b236 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800b216:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b218:	330e      	adds	r3, #14
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7f9 f91b 	bl	8004458 <pbuf_remove_header>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d006      	beq.n	800b236 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b228:	4b2e      	ldr	r3, [pc, #184]	@ (800b2e4 <icmp_input+0x1f8>)
 800b22a:	22c7      	movs	r2, #199	@ 0xc7
 800b22c:	4930      	ldr	r1, [pc, #192]	@ (800b2f0 <icmp_input+0x204>)
 800b22e:	482f      	ldr	r0, [pc, #188]	@ (800b2ec <icmp_input+0x200>)
 800b230:	f001 fbd6 	bl	800c9e0 <iprintf>
          goto icmperr;
 800b234:	e04b      	b.n	800b2ce <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800b23c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7f9 f8f9 	bl	8004438 <pbuf_add_header>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d12b      	bne.n	800b2a4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b25a:	4b20      	ldr	r3, [pc, #128]	@ (800b2dc <icmp_input+0x1f0>)
 800b25c:	691a      	ldr	r2, [r3, #16]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2200      	movs	r2, #0
 800b266:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	2200      	movs	r2, #0
 800b26c:	709a      	strb	r2, [r3, #2]
 800b26e:	2200      	movs	r2, #0
 800b270:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	22ff      	movs	r2, #255	@ 0xff
 800b276:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	729a      	strb	r2, [r3, #10]
 800b27e:	2200      	movs	r2, #0
 800b280:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	9302      	str	r3, [sp, #8]
 800b286:	2301      	movs	r3, #1
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	2300      	movs	r3, #0
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	23ff      	movs	r3, #255	@ 0xff
 800b290:	2200      	movs	r2, #0
 800b292:	69f9      	ldr	r1, [r7, #28]
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 fa75 	bl	800b784 <ip4_output_if>
 800b29a:	4603      	mov	r3, r0
 800b29c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800b29e:	e001      	b.n	800b2a4 <icmp_input+0x1b8>
      break;
 800b2a0:	bf00      	nop
 800b2a2:	e000      	b.n	800b2a6 <icmp_input+0x1ba>
      break;
 800b2a4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f7f9 f95c 	bl	8004564 <pbuf_free>
  return;
 800b2ac:	e013      	b.n	800b2d6 <icmp_input+0x1ea>
    goto lenerr;
 800b2ae:	bf00      	nop
 800b2b0:	e002      	b.n	800b2b8 <icmp_input+0x1cc>
    goto lenerr;
 800b2b2:	bf00      	nop
 800b2b4:	e000      	b.n	800b2b8 <icmp_input+0x1cc>
        goto lenerr;
 800b2b6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7f9 f953 	bl	8004564 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b2be:	e00a      	b.n	800b2d6 <icmp_input+0x1ea>
        goto icmperr;
 800b2c0:	bf00      	nop
 800b2c2:	e004      	b.n	800b2ce <icmp_input+0x1e2>
        goto icmperr;
 800b2c4:	bf00      	nop
 800b2c6:	e002      	b.n	800b2ce <icmp_input+0x1e2>
          goto icmperr;
 800b2c8:	bf00      	nop
 800b2ca:	e000      	b.n	800b2ce <icmp_input+0x1e2>
          goto icmperr;
 800b2cc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7f9 f948 	bl	8004564 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b2d4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b2d6:	3728      	adds	r7, #40	@ 0x28
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	20004ce8 	.word	0x20004ce8
 800b2e0:	20004cfc 	.word	0x20004cfc
 800b2e4:	0800fd9c 	.word	0x0800fd9c
 800b2e8:	0800fdd4 	.word	0x0800fdd4
 800b2ec:	0800fe0c 	.word	0x0800fe0c
 800b2f0:	0800fe34 	.word	0x0800fe34

0800b2f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b300:	78fb      	ldrb	r3, [r7, #3]
 800b302:	461a      	mov	r2, r3
 800b304:	2103      	movs	r1, #3
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f814 	bl	800b334 <icmp_send_response>
}
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	460b      	mov	r3, r1
 800b31e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b320:	78fb      	ldrb	r3, [r7, #3]
 800b322:	461a      	mov	r2, r3
 800b324:	210b      	movs	r1, #11
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f804 	bl	800b334 <icmp_send_response>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08c      	sub	sp, #48	@ 0x30
 800b338:	af04      	add	r7, sp, #16
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	70fb      	strb	r3, [r7, #3]
 800b340:	4613      	mov	r3, r2
 800b342:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b344:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b348:	2124      	movs	r1, #36	@ 0x24
 800b34a:	2022      	movs	r0, #34	@ 0x22
 800b34c:	f7f8 fe26 	bl	8003f9c <pbuf_alloc>
 800b350:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d04c      	beq.n	800b3f2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	895b      	ldrh	r3, [r3, #10]
 800b35c:	2b23      	cmp	r3, #35	@ 0x23
 800b35e:	d806      	bhi.n	800b36e <icmp_send_response+0x3a>
 800b360:	4b26      	ldr	r3, [pc, #152]	@ (800b3fc <icmp_send_response+0xc8>)
 800b362:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800b366:	4926      	ldr	r1, [pc, #152]	@ (800b400 <icmp_send_response+0xcc>)
 800b368:	4826      	ldr	r0, [pc, #152]	@ (800b404 <icmp_send_response+0xd0>)
 800b36a:	f001 fb39 	bl	800c9e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	78fa      	ldrb	r2, [r7, #3]
 800b37e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	78ba      	ldrb	r2, [r7, #2]
 800b384:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2200      	movs	r2, #0
 800b38a:	711a      	strb	r2, [r3, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	2200      	movs	r2, #0
 800b394:	719a      	strb	r2, [r3, #6]
 800b396:	2200      	movs	r2, #0
 800b398:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f103 0008 	add.w	r0, r3, #8
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	221c      	movs	r2, #28
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	f001 fbf4 	bl	800cb96 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b3b4:	f107 030c 	add.w	r3, r7, #12
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 f825 	bl	800b408 <ip4_route>
 800b3be:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d011      	beq.n	800b3ea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	709a      	strb	r2, [r3, #2]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b3d0:	f107 020c 	add.w	r2, r7, #12
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	9302      	str	r3, [sp, #8]
 800b3d8:	2301      	movs	r3, #1
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	23ff      	movs	r3, #255	@ 0xff
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	69f8      	ldr	r0, [r7, #28]
 800b3e6:	f000 f9cd 	bl	800b784 <ip4_output_if>
  }
  pbuf_free(q);
 800b3ea:	69f8      	ldr	r0, [r7, #28]
 800b3ec:	f7f9 f8ba 	bl	8004564 <pbuf_free>
 800b3f0:	e000      	b.n	800b3f4 <icmp_send_response+0xc0>
    return;
 800b3f2:	bf00      	nop
}
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	0800fd9c 	.word	0x0800fd9c
 800b400:	0800fe68 	.word	0x0800fe68
 800b404:	0800fe0c 	.word	0x0800fe0c

0800b408 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800b410:	4b33      	ldr	r3, [pc, #204]	@ (800b4e0 <ip4_route+0xd8>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	60fb      	str	r3, [r7, #12]
 800b416:	e036      	b.n	800b486 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b00      	cmp	r3, #0
 800b426:	d02b      	beq.n	800b480 <ip4_route+0x78>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b42e:	089b      	lsrs	r3, r3, #2
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d022      	beq.n	800b480 <ip4_route+0x78>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3304      	adds	r3, #4
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01d      	beq.n	800b480 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3304      	adds	r3, #4
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	405a      	eors	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3308      	adds	r3, #8
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4013      	ands	r3, r2
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	e038      	b.n	800b4d2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b466:	f003 0302 	and.w	r3, r3, #2
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d108      	bne.n	800b480 <ip4_route+0x78>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	330c      	adds	r3, #12
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d101      	bne.n	800b480 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	e028      	b.n	800b4d2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1c5      	bne.n	800b418 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b48c:	4b15      	ldr	r3, [pc, #84]	@ (800b4e4 <ip4_route+0xdc>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d01a      	beq.n	800b4ca <ip4_route+0xc2>
 800b494:	4b13      	ldr	r3, [pc, #76]	@ (800b4e4 <ip4_route+0xdc>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b49c:	f003 0301 	and.w	r3, r3, #1
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d012      	beq.n	800b4ca <ip4_route+0xc2>
 800b4a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e4 <ip4_route+0xdc>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b4ac:	f003 0304 	and.w	r3, r3, #4
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00a      	beq.n	800b4ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b4b4:	4b0b      	ldr	r3, [pc, #44]	@ (800b4e4 <ip4_route+0xdc>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3304      	adds	r3, #4
 800b4ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d004      	beq.n	800b4ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4c8:	d101      	bne.n	800b4ce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e001      	b.n	800b4d2 <ip4_route+0xca>
  }

  return netif_default;
 800b4ce:	4b05      	ldr	r3, [pc, #20]	@ (800b4e4 <ip4_route+0xdc>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	2000824c 	.word	0x2000824c
 800b4e4:	20008250 	.word	0x20008250

0800b4e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d016      	beq.n	800b52e <ip4_input_accept+0x46>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	3304      	adds	r3, #4
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d011      	beq.n	800b52e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b50a:	4b0b      	ldr	r3, [pc, #44]	@ (800b538 <ip4_input_accept+0x50>)
 800b50c:	695a      	ldr	r2, [r3, #20]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	3304      	adds	r3, #4
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d008      	beq.n	800b52a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b518:	4b07      	ldr	r3, [pc, #28]	@ (800b538 <ip4_input_accept+0x50>)
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	6879      	ldr	r1, [r7, #4]
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 fa08 	bl	800b934 <ip4_addr_isbroadcast_u32>
 800b524:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20004ce8 	.word	0x20004ce8

0800b53c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	091b      	lsrs	r3, r3, #4
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b04      	cmp	r3, #4
 800b556:	d004      	beq.n	800b562 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7f9 f803 	bl	8004564 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	e107      	b.n	800b772 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	f003 030f 	and.w	r3, r3, #15
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	b29b      	uxth	r3, r3
 800b578:	4618      	mov	r0, r3
 800b57a:	f7f7 fd7c 	bl	8003076 <lwip_htons>
 800b57e:	4603      	mov	r3, r0
 800b580:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	891b      	ldrh	r3, [r3, #8]
 800b586:	89ba      	ldrh	r2, [r7, #12]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d204      	bcs.n	800b596 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800b58c:	89bb      	ldrh	r3, [r7, #12]
 800b58e:	4619      	mov	r1, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7f8 fe61 	bl	8004258 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	895b      	ldrh	r3, [r3, #10]
 800b59a:	89fa      	ldrh	r2, [r7, #14]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d807      	bhi.n	800b5b0 <ip4_input+0x74>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	891b      	ldrh	r3, [r3, #8]
 800b5a4:	89ba      	ldrh	r2, [r7, #12]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d802      	bhi.n	800b5b0 <ip4_input+0x74>
 800b5aa:	89fb      	ldrh	r3, [r7, #14]
 800b5ac:	2b13      	cmp	r3, #19
 800b5ae:	d804      	bhi.n	800b5ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7f8 ffd7 	bl	8004564 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	e0db      	b.n	800b772 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	4a6f      	ldr	r2, [pc, #444]	@ (800b77c <ip4_input+0x240>)
 800b5c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	4a6d      	ldr	r2, [pc, #436]	@ (800b77c <ip4_input+0x240>)
 800b5c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b5ca:	4b6c      	ldr	r3, [pc, #432]	@ (800b77c <ip4_input+0x240>)
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5d2:	2be0      	cmp	r3, #224	@ 0xe0
 800b5d4:	d112      	bne.n	800b5fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b5dc:	f003 0301 	and.w	r3, r3, #1
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d007      	beq.n	800b5f6 <ip4_input+0xba>
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d002      	beq.n	800b5f6 <ip4_input+0xba>
      netif = inp;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	613b      	str	r3, [r7, #16]
 800b5f4:	e02a      	b.n	800b64c <ip4_input+0x110>
    } else {
      netif = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	613b      	str	r3, [r7, #16]
 800b5fa:	e027      	b.n	800b64c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800b5fc:	6838      	ldr	r0, [r7, #0]
 800b5fe:	f7ff ff73 	bl	800b4e8 <ip4_input_accept>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d002      	beq.n	800b60e <ip4_input+0xd2>
      netif = inp;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	613b      	str	r3, [r7, #16]
 800b60c:	e01e      	b.n	800b64c <ip4_input+0x110>
    } else {
      netif = NULL;
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800b612:	4b5a      	ldr	r3, [pc, #360]	@ (800b77c <ip4_input+0x240>)
 800b614:	695b      	ldr	r3, [r3, #20]
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b7f      	cmp	r3, #127	@ 0x7f
 800b61a:	d017      	beq.n	800b64c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800b61c:	4b58      	ldr	r3, [pc, #352]	@ (800b780 <ip4_input+0x244>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	613b      	str	r3, [r7, #16]
 800b622:	e00e      	b.n	800b642 <ip4_input+0x106>
          if (netif == inp) {
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d006      	beq.n	800b63a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800b62c:	6938      	ldr	r0, [r7, #16]
 800b62e:	f7ff ff5b 	bl	800b4e8 <ip4_input_accept>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d108      	bne.n	800b64a <ip4_input+0x10e>
 800b638:	e000      	b.n	800b63c <ip4_input+0x100>
            continue;
 800b63a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	613b      	str	r3, [r7, #16]
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1ed      	bne.n	800b624 <ip4_input+0xe8>
 800b648:	e000      	b.n	800b64c <ip4_input+0x110>
            break;
 800b64a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b64c:	4b4b      	ldr	r3, [pc, #300]	@ (800b77c <ip4_input+0x240>)
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f000 f96e 	bl	800b934 <ip4_addr_isbroadcast_u32>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d105      	bne.n	800b66a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b65e:	4b47      	ldr	r3, [pc, #284]	@ (800b77c <ip4_input+0x240>)
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b666:	2be0      	cmp	r3, #224	@ 0xe0
 800b668:	d104      	bne.n	800b674 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7f8 ff7a 	bl	8004564 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	e07e      	b.n	800b772 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d104      	bne.n	800b684 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7f8 ff72 	bl	8004564 <pbuf_free>
    return ERR_OK;
 800b680:	2300      	movs	r3, #0
 800b682:	e076      	b.n	800b772 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	88db      	ldrh	r3, [r3, #6]
 800b688:	b29b      	uxth	r3, r3
 800b68a:	461a      	mov	r2, r3
 800b68c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800b690:	4013      	ands	r3, r2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00b      	beq.n	800b6ae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fc92 	bl	800bfc0 <ip4_reass>
 800b69c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <ip4_input+0x16c>
      return ERR_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e064      	b.n	800b772 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b6ae:	4a33      	ldr	r2, [pc, #204]	@ (800b77c <ip4_input+0x240>)
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b6b4:	4a31      	ldr	r2, [pc, #196]	@ (800b77c <ip4_input+0x240>)
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b6ba:	4a30      	ldr	r2, [pc, #192]	@ (800b77c <ip4_input+0x240>)
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	f003 030f 	and.w	r3, r3, #15
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b77c <ip4_input+0x240>)
 800b6d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800b6d4:	89fb      	ldrh	r3, [r7, #14]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f7f8 febd 	bl	8004458 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	7a5b      	ldrb	r3, [r3, #9]
 800b6e2:	2b11      	cmp	r3, #17
 800b6e4:	d006      	beq.n	800b6f4 <ip4_input+0x1b8>
 800b6e6:	2b11      	cmp	r3, #17
 800b6e8:	dc13      	bgt.n	800b712 <ip4_input+0x1d6>
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d00c      	beq.n	800b708 <ip4_input+0x1cc>
 800b6ee:	2b06      	cmp	r3, #6
 800b6f0:	d005      	beq.n	800b6fe <ip4_input+0x1c2>
 800b6f2:	e00e      	b.n	800b712 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f7fe fc98 	bl	800a02c <udp_input>
        break;
 800b6fc:	e026      	b.n	800b74c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7fa fd59 	bl	80061b8 <tcp_input>
        break;
 800b706:	e021      	b.n	800b74c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff fcee 	bl	800b0ec <icmp_input>
        break;
 800b710:	e01c      	b.n	800b74c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b712:	4b1a      	ldr	r3, [pc, #104]	@ (800b77c <ip4_input+0x240>)
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	6939      	ldr	r1, [r7, #16]
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 f90b 	bl	800b934 <ip4_addr_isbroadcast_u32>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10f      	bne.n	800b744 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b724:	4b15      	ldr	r3, [pc, #84]	@ (800b77c <ip4_input+0x240>)
 800b726:	695b      	ldr	r3, [r3, #20]
 800b728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800b72c:	2be0      	cmp	r3, #224	@ 0xe0
 800b72e:	d009      	beq.n	800b744 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800b730:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7f8 ff01 	bl	800453e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800b73c:	2102      	movs	r1, #2
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f7ff fdd8 	bl	800b2f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7f8 ff0d 	bl	8004564 <pbuf_free>
        break;
 800b74a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800b74c:	4b0b      	ldr	r3, [pc, #44]	@ (800b77c <ip4_input+0x240>)
 800b74e:	2200      	movs	r2, #0
 800b750:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800b752:	4b0a      	ldr	r3, [pc, #40]	@ (800b77c <ip4_input+0x240>)
 800b754:	2200      	movs	r2, #0
 800b756:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800b758:	4b08      	ldr	r3, [pc, #32]	@ (800b77c <ip4_input+0x240>)
 800b75a:	2200      	movs	r2, #0
 800b75c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800b75e:	4b07      	ldr	r3, [pc, #28]	@ (800b77c <ip4_input+0x240>)
 800b760:	2200      	movs	r2, #0
 800b762:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800b764:	4b05      	ldr	r3, [pc, #20]	@ (800b77c <ip4_input+0x240>)
 800b766:	2200      	movs	r2, #0
 800b768:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800b76a:	4b04      	ldr	r3, [pc, #16]	@ (800b77c <ip4_input+0x240>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3718      	adds	r7, #24
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	20004ce8 	.word	0x20004ce8
 800b780:	2000824c 	.word	0x2000824c

0800b784 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b08a      	sub	sp, #40	@ 0x28
 800b788:	af04      	add	r7, sp, #16
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d009      	beq.n	800b7b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d003      	beq.n	800b7aa <ip4_output_if+0x26>
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d102      	bne.n	800b7b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800b7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800b7b0:	78fa      	ldrb	r2, [r7, #3]
 800b7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b4:	9302      	str	r3, [sp, #8]
 800b7b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	6979      	ldr	r1, [r7, #20]
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f805 	bl	800b7d8 <ip4_output_if_src>
 800b7ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3718      	adds	r7, #24
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	7b9b      	ldrb	r3, [r3, #14]
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d006      	beq.n	800b7fc <ip4_output_if_src+0x24>
 800b7ee:	4b4b      	ldr	r3, [pc, #300]	@ (800b91c <ip4_output_if_src+0x144>)
 800b7f0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800b7f4:	494a      	ldr	r1, [pc, #296]	@ (800b920 <ip4_output_if_src+0x148>)
 800b7f6:	484b      	ldr	r0, [pc, #300]	@ (800b924 <ip4_output_if_src+0x14c>)
 800b7f8:	f001 f8f2 	bl	800c9e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d060      	beq.n	800b8c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800b802:	2314      	movs	r3, #20
 800b804:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800b806:	2114      	movs	r1, #20
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f7f8 fe15 	bl	8004438 <pbuf_add_header>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b814:	f06f 0301 	mvn.w	r3, #1
 800b818:	e07c      	b.n	800b914 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	895b      	ldrh	r3, [r3, #10]
 800b824:	2b13      	cmp	r3, #19
 800b826:	d806      	bhi.n	800b836 <ip4_output_if_src+0x5e>
 800b828:	4b3c      	ldr	r3, [pc, #240]	@ (800b91c <ip4_output_if_src+0x144>)
 800b82a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800b82e:	493e      	ldr	r1, [pc, #248]	@ (800b928 <ip4_output_if_src+0x150>)
 800b830:	483c      	ldr	r0, [pc, #240]	@ (800b924 <ip4_output_if_src+0x14c>)
 800b832:	f001 f8d5 	bl	800c9e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	78fa      	ldrb	r2, [r7, #3]
 800b83a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800b842:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800b84c:	8b7b      	ldrh	r3, [r7, #26]
 800b84e:	089b      	lsrs	r3, r3, #2
 800b850:	b29b      	uxth	r3, r3
 800b852:	b2db      	uxtb	r3, r3
 800b854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800b864:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	891b      	ldrh	r3, [r3, #8]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7f7 fc03 	bl	8003076 <lwip_htons>
 800b870:	4603      	mov	r3, r0
 800b872:	461a      	mov	r2, r3
 800b874:	69fb      	ldr	r3, [r7, #28]
 800b876:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	2200      	movs	r2, #0
 800b87c:	719a      	strb	r2, [r3, #6]
 800b87e:	2200      	movs	r2, #0
 800b880:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800b882:	4b2a      	ldr	r3, [pc, #168]	@ (800b92c <ip4_output_if_src+0x154>)
 800b884:	881b      	ldrh	r3, [r3, #0]
 800b886:	4618      	mov	r0, r3
 800b888:	f7f7 fbf5 	bl	8003076 <lwip_htons>
 800b88c:	4603      	mov	r3, r0
 800b88e:	461a      	mov	r2, r3
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800b894:	4b25      	ldr	r3, [pc, #148]	@ (800b92c <ip4_output_if_src+0x154>)
 800b896:	881b      	ldrh	r3, [r3, #0]
 800b898:	3301      	adds	r3, #1
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	4b23      	ldr	r3, [pc, #140]	@ (800b92c <ip4_output_if_src+0x154>)
 800b89e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d104      	bne.n	800b8b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800b8a6:	4b22      	ldr	r3, [pc, #136]	@ (800b930 <ip4_output_if_src+0x158>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	60da      	str	r2, [r3, #12]
 800b8ae:	e003      	b.n	800b8b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	729a      	strb	r2, [r3, #10]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	72da      	strb	r2, [r3, #11]
 800b8c2:	e00f      	b.n	800b8e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	895b      	ldrh	r3, [r3, #10]
 800b8c8:	2b13      	cmp	r3, #19
 800b8ca:	d802      	bhi.n	800b8d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800b8cc:	f06f 0301 	mvn.w	r3, #1
 800b8d0:	e020      	b.n	800b914 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800b8de:	f107 0314 	add.w	r3, r7, #20
 800b8e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00c      	beq.n	800b906 <ip4_output_if_src+0x12e>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	891a      	ldrh	r2, [r3, #8]
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d906      	bls.n	800b906 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f000 fd53 	bl	800c3a8 <ip4_frag>
 800b902:	4603      	mov	r3, r0
 800b904:	e006      	b.n	800b914 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800b906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b908:	695b      	ldr	r3, [r3, #20]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	68f9      	ldr	r1, [r7, #12]
 800b90e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b910:	4798      	blx	r3
 800b912:	4603      	mov	r3, r0
}
 800b914:	4618      	mov	r0, r3
 800b916:	3720      	adds	r7, #32
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	0800fe94 	.word	0x0800fe94
 800b920:	0800fec8 	.word	0x0800fec8
 800b924:	0800fed4 	.word	0x0800fed4
 800b928:	0800fefc 	.word	0x0800fefc
 800b92c:	200083aa 	.word	0x200083aa
 800b930:	080102d4 	.word	0x080102d4

0800b934 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b948:	d002      	beq.n	800b950 <ip4_addr_isbroadcast_u32+0x1c>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d101      	bne.n	800b954 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800b950:	2301      	movs	r3, #1
 800b952:	e02a      	b.n	800b9aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b95a:	f003 0302 	and.w	r3, r3, #2
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800b962:	2300      	movs	r3, #0
 800b964:	e021      	b.n	800b9aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	3304      	adds	r3, #4
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d101      	bne.n	800b976 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800b972:	2300      	movs	r3, #0
 800b974:	e019      	b.n	800b9aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	3304      	adds	r3, #4
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	405a      	eors	r2, r3
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	3308      	adds	r3, #8
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4013      	ands	r3, r2
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d10d      	bne.n	800b9a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	3308      	adds	r3, #8
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	43da      	mvns	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	3308      	adds	r3, #8
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d101      	bne.n	800b9a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e000      	b.n	800b9aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800b9a8:	2300      	movs	r3, #0
  }
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3714      	adds	r7, #20
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
	...

0800b9b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800b9c2:	4b12      	ldr	r3, [pc, #72]	@ (800ba0c <ip_reass_tmr+0x54>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800b9c8:	e018      	b.n	800b9fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	7fdb      	ldrb	r3, [r3, #31]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00b      	beq.n	800b9ea <ip_reass_tmr+0x32>
      r->timer--;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	7fdb      	ldrb	r3, [r3, #31]
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	60fb      	str	r3, [r7, #12]
 800b9e8:	e008      	b.n	800b9fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800b9f4:	68b9      	ldr	r1, [r7, #8]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f80a 	bl	800ba10 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e3      	bne.n	800b9ca <ip_reass_tmr+0x12>
    }
  }
}
 800ba02:	bf00      	nop
 800ba04:	bf00      	nop
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	200083ac 	.word	0x200083ac

0800ba10 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d105      	bne.n	800ba32 <ip_reass_free_complete_datagram+0x22>
 800ba26:	4b45      	ldr	r3, [pc, #276]	@ (800bb3c <ip_reass_free_complete_datagram+0x12c>)
 800ba28:	22ab      	movs	r2, #171	@ 0xab
 800ba2a:	4945      	ldr	r1, [pc, #276]	@ (800bb40 <ip_reass_free_complete_datagram+0x130>)
 800ba2c:	4845      	ldr	r0, [pc, #276]	@ (800bb44 <ip_reass_free_complete_datagram+0x134>)
 800ba2e:	f000 ffd7 	bl	800c9e0 <iprintf>
  if (prev != NULL) {
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00a      	beq.n	800ba4e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d005      	beq.n	800ba4e <ip_reass_free_complete_datagram+0x3e>
 800ba42:	4b3e      	ldr	r3, [pc, #248]	@ (800bb3c <ip_reass_free_complete_datagram+0x12c>)
 800ba44:	22ad      	movs	r2, #173	@ 0xad
 800ba46:	4940      	ldr	r1, [pc, #256]	@ (800bb48 <ip_reass_free_complete_datagram+0x138>)
 800ba48:	483e      	ldr	r0, [pc, #248]	@ (800bb44 <ip_reass_free_complete_datagram+0x134>)
 800ba4a:	f000 ffc9 	bl	800c9e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	889b      	ldrh	r3, [r3, #4]
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d12a      	bne.n	800bab6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	6858      	ldr	r0, [r3, #4]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	3308      	adds	r3, #8
 800ba76:	2214      	movs	r2, #20
 800ba78:	4619      	mov	r1, r3
 800ba7a:	f001 f88c 	bl	800cb96 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ba7e:	2101      	movs	r1, #1
 800ba80:	69b8      	ldr	r0, [r7, #24]
 800ba82:	f7ff fc47 	bl	800b314 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ba86:	69b8      	ldr	r0, [r7, #24]
 800ba88:	f7f8 fdf4 	bl	8004674 <pbuf_clen>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ba90:	8bfa      	ldrh	r2, [r7, #30]
 800ba92:	8a7b      	ldrh	r3, [r7, #18]
 800ba94:	4413      	add	r3, r2
 800ba96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba9a:	db05      	blt.n	800baa8 <ip_reass_free_complete_datagram+0x98>
 800ba9c:	4b27      	ldr	r3, [pc, #156]	@ (800bb3c <ip_reass_free_complete_datagram+0x12c>)
 800ba9e:	22bc      	movs	r2, #188	@ 0xbc
 800baa0:	492a      	ldr	r1, [pc, #168]	@ (800bb4c <ip_reass_free_complete_datagram+0x13c>)
 800baa2:	4828      	ldr	r0, [pc, #160]	@ (800bb44 <ip_reass_free_complete_datagram+0x134>)
 800baa4:	f000 ff9c 	bl	800c9e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800baa8:	8bfa      	ldrh	r2, [r7, #30]
 800baaa:	8a7b      	ldrh	r3, [r7, #18]
 800baac:	4413      	add	r3, r2
 800baae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800bab0:	69b8      	ldr	r0, [r7, #24]
 800bab2:	f7f8 fd57 	bl	8004564 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800babc:	e01f      	b.n	800bafe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f7f8 fdd0 	bl	8004674 <pbuf_clen>
 800bad4:	4603      	mov	r3, r0
 800bad6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800bad8:	8bfa      	ldrh	r2, [r7, #30]
 800bada:	8a7b      	ldrh	r3, [r7, #18]
 800badc:	4413      	add	r3, r2
 800bade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bae2:	db05      	blt.n	800baf0 <ip_reass_free_complete_datagram+0xe0>
 800bae4:	4b15      	ldr	r3, [pc, #84]	@ (800bb3c <ip_reass_free_complete_datagram+0x12c>)
 800bae6:	22cc      	movs	r2, #204	@ 0xcc
 800bae8:	4918      	ldr	r1, [pc, #96]	@ (800bb4c <ip_reass_free_complete_datagram+0x13c>)
 800baea:	4816      	ldr	r0, [pc, #88]	@ (800bb44 <ip_reass_free_complete_datagram+0x134>)
 800baec:	f000 ff78 	bl	800c9e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800baf0:	8bfa      	ldrh	r2, [r7, #30]
 800baf2:	8a7b      	ldrh	r3, [r7, #18]
 800baf4:	4413      	add	r3, r2
 800baf6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f7f8 fd33 	bl	8004564 <pbuf_free>
  while (p != NULL) {
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1dc      	bne.n	800babe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800bb04:	6839      	ldr	r1, [r7, #0]
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f8c2 	bl	800bc90 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800bb0c:	4b10      	ldr	r3, [pc, #64]	@ (800bb50 <ip_reass_free_complete_datagram+0x140>)
 800bb0e:	881b      	ldrh	r3, [r3, #0]
 800bb10:	8bfa      	ldrh	r2, [r7, #30]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d905      	bls.n	800bb22 <ip_reass_free_complete_datagram+0x112>
 800bb16:	4b09      	ldr	r3, [pc, #36]	@ (800bb3c <ip_reass_free_complete_datagram+0x12c>)
 800bb18:	22d2      	movs	r2, #210	@ 0xd2
 800bb1a:	490e      	ldr	r1, [pc, #56]	@ (800bb54 <ip_reass_free_complete_datagram+0x144>)
 800bb1c:	4809      	ldr	r0, [pc, #36]	@ (800bb44 <ip_reass_free_complete_datagram+0x134>)
 800bb1e:	f000 ff5f 	bl	800c9e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800bb22:	4b0b      	ldr	r3, [pc, #44]	@ (800bb50 <ip_reass_free_complete_datagram+0x140>)
 800bb24:	881a      	ldrh	r2, [r3, #0]
 800bb26:	8bfb      	ldrh	r3, [r7, #30]
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	4b08      	ldr	r3, [pc, #32]	@ (800bb50 <ip_reass_free_complete_datagram+0x140>)
 800bb2e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800bb30:	8bfb      	ldrh	r3, [r7, #30]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3720      	adds	r7, #32
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	0800ff2c 	.word	0x0800ff2c
 800bb40:	0800ff68 	.word	0x0800ff68
 800bb44:	0800ff74 	.word	0x0800ff74
 800bb48:	0800ff9c 	.word	0x0800ff9c
 800bb4c:	0800ffb0 	.word	0x0800ffb0
 800bb50:	200083b0 	.word	0x200083b0
 800bb54:	0800ffd0 	.word	0x0800ffd0

0800bb58 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b08a      	sub	sp, #40	@ 0x28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800bb62:	2300      	movs	r3, #0
 800bb64:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800bb76:	4b28      	ldr	r3, [pc, #160]	@ (800bc18 <ip_reass_remove_oldest_datagram+0xc0>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800bb7c:	e030      	b.n	800bbe0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb80:	695a      	ldr	r2, [r3, #20]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d10c      	bne.n	800bba4 <ip_reass_remove_oldest_datagram+0x4c>
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8c:	699a      	ldr	r2, [r3, #24]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d106      	bne.n	800bba4 <ip_reass_remove_oldest_datagram+0x4c>
 800bb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb98:	899a      	ldrh	r2, [r3, #12]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	889b      	ldrh	r3, [r3, #4]
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d014      	beq.n	800bbce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	3301      	adds	r3, #1
 800bba8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800bbaa:	6a3b      	ldr	r3, [r7, #32]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d104      	bne.n	800bbba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	61bb      	str	r3, [r7, #24]
 800bbb8:	e009      	b.n	800bbce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbbc:	7fda      	ldrb	r2, [r3, #31]
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	7fdb      	ldrb	r3, [r3, #31]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d803      	bhi.n	800bbce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1cb      	bne.n	800bb7e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d008      	beq.n	800bbfe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800bbec:	69b9      	ldr	r1, [r7, #24]
 800bbee:	6a38      	ldr	r0, [r7, #32]
 800bbf0:	f7ff ff0e 	bl	800ba10 <ip_reass_free_complete_datagram>
 800bbf4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	da02      	bge.n	800bc0c <ip_reass_remove_oldest_datagram+0xb4>
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	dcac      	bgt.n	800bb66 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800bc0c:	697b      	ldr	r3, [r7, #20]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3728      	adds	r7, #40	@ 0x28
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	200083ac 	.word	0x200083ac

0800bc1c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800bc26:	2004      	movs	r0, #4
 800bc28:	f7f7 fe7c 	bl	8003924 <memp_malloc>
 800bc2c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d110      	bne.n	800bc56 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7ff ff8e 	bl	800bb58 <ip_reass_remove_oldest_datagram>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	4293      	cmp	r3, r2
 800bc42:	dc03      	bgt.n	800bc4c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800bc44:	2004      	movs	r0, #4
 800bc46:	f7f7 fe6d 	bl	8003924 <memp_malloc>
 800bc4a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	e016      	b.n	800bc84 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800bc56:	2220      	movs	r2, #32
 800bc58:	2100      	movs	r1, #0
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f000 ff25 	bl	800caaa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	220f      	movs	r2, #15
 800bc64:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800bc66:	4b09      	ldr	r3, [pc, #36]	@ (800bc8c <ip_reass_enqueue_new_datagram+0x70>)
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800bc6e:	4a07      	ldr	r2, [pc, #28]	@ (800bc8c <ip_reass_enqueue_new_datagram+0x70>)
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	3308      	adds	r3, #8
 800bc78:	2214      	movs	r2, #20
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 ff8a 	bl	800cb96 <memcpy>
  return ipr;
 800bc82:	68fb      	ldr	r3, [r7, #12]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	200083ac 	.word	0x200083ac

0800bc90 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800bc9a:	4b10      	ldr	r3, [pc, #64]	@ (800bcdc <ip_reass_dequeue_datagram+0x4c>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d104      	bne.n	800bcae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a0c      	ldr	r2, [pc, #48]	@ (800bcdc <ip_reass_dequeue_datagram+0x4c>)
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	e00d      	b.n	800bcca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d106      	bne.n	800bcc2 <ip_reass_dequeue_datagram+0x32>
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bce0 <ip_reass_dequeue_datagram+0x50>)
 800bcb6:	f240 1245 	movw	r2, #325	@ 0x145
 800bcba:	490a      	ldr	r1, [pc, #40]	@ (800bce4 <ip_reass_dequeue_datagram+0x54>)
 800bcbc:	480a      	ldr	r0, [pc, #40]	@ (800bce8 <ip_reass_dequeue_datagram+0x58>)
 800bcbe:	f000 fe8f 	bl	800c9e0 <iprintf>
    prev->next = ipr->next;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800bcca:	6879      	ldr	r1, [r7, #4]
 800bccc:	2004      	movs	r0, #4
 800bcce:	f7f7 fe75 	bl	80039bc <memp_free>
}
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	200083ac 	.word	0x200083ac
 800bce0:	0800ff2c 	.word	0x0800ff2c
 800bce4:	0800fff4 	.word	0x0800fff4
 800bce8:	0800ff74 	.word	0x0800ff74

0800bcec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08c      	sub	sp, #48	@ 0x30
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	885b      	ldrh	r3, [r3, #2]
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7f7 f9b2 	bl	8003076 <lwip_htons>
 800bd12:	4603      	mov	r3, r0
 800bd14:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	f003 030f 	and.w	r3, r3, #15
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800bd24:	7e7b      	ldrb	r3, [r7, #25]
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	8b7a      	ldrh	r2, [r7, #26]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d202      	bcs.n	800bd34 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bd2e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd32:	e135      	b.n	800bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800bd34:	7e7b      	ldrb	r3, [r7, #25]
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	8b7a      	ldrh	r2, [r7, #26]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	88db      	ldrh	r3, [r3, #6]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7f7 f996 	bl	8003076 <lwip_htons>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	00db      	lsls	r3, r3, #3
 800bd54:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800bd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5e:	2200      	movs	r2, #0
 800bd60:	701a      	strb	r2, [r3, #0]
 800bd62:	2200      	movs	r2, #0
 800bd64:	705a      	strb	r2, [r3, #1]
 800bd66:	2200      	movs	r2, #0
 800bd68:	709a      	strb	r2, [r3, #2]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800bd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd70:	8afa      	ldrh	r2, [r7, #22]
 800bd72:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800bd74:	8afa      	ldrh	r2, [r7, #22]
 800bd76:	8b7b      	ldrh	r3, [r7, #26]
 800bd78:	4413      	add	r3, r2
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800bd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd82:	88db      	ldrh	r3, [r3, #6]
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	8afa      	ldrh	r2, [r7, #22]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d902      	bls.n	800bd92 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bd8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd90:	e106      	b.n	800bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd98:	e068      	b.n	800be6c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800bda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda2:	889b      	ldrh	r3, [r3, #4]
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	889b      	ldrh	r3, [r3, #4]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d235      	bcs.n	800be1c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800bdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d020      	beq.n	800bdfe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800bdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdbe:	889b      	ldrh	r3, [r3, #4]
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc4:	88db      	ldrh	r3, [r3, #6]
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d307      	bcc.n	800bddc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800bdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdce:	88db      	ldrh	r3, [r3, #6]
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	889b      	ldrh	r3, [r3, #4]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d902      	bls.n	800bde2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800bddc:	f04f 33ff 	mov.w	r3, #4294967295
 800bde0:	e0de      	b.n	800bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800bde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800bde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdea:	88db      	ldrh	r3, [r3, #6]
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf0:	889b      	ldrh	r3, [r3, #4]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d03d      	beq.n	800be74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800bdfc:	e03a      	b.n	800be74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800bdfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be00:	88db      	ldrh	r3, [r3, #6]
 800be02:	b29a      	uxth	r2, r3
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	889b      	ldrh	r3, [r3, #4]
 800be08:	b29b      	uxth	r3, r3
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d902      	bls.n	800be14 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800be0e:	f04f 33ff 	mov.w	r3, #4294967295
 800be12:	e0c5      	b.n	800bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	605a      	str	r2, [r3, #4]
      break;
 800be1a:	e02b      	b.n	800be74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800be1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1e:	889b      	ldrh	r3, [r3, #4]
 800be20:	b29a      	uxth	r2, r3
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	889b      	ldrh	r3, [r3, #4]
 800be26:	b29b      	uxth	r3, r3
 800be28:	429a      	cmp	r2, r3
 800be2a:	d102      	bne.n	800be32 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800be2c:	f04f 33ff 	mov.w	r3, #4294967295
 800be30:	e0b6      	b.n	800bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800be32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be34:	889b      	ldrh	r3, [r3, #4]
 800be36:	b29a      	uxth	r2, r3
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	88db      	ldrh	r3, [r3, #6]
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	429a      	cmp	r2, r3
 800be40:	d202      	bcs.n	800be48 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800be42:	f04f 33ff 	mov.w	r3, #4294967295
 800be46:	e0ab      	b.n	800bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800be48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d009      	beq.n	800be62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800be4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be50:	88db      	ldrh	r3, [r3, #6]
 800be52:	b29a      	uxth	r2, r3
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	889b      	ldrh	r3, [r3, #4]
 800be58:	b29b      	uxth	r3, r3
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d001      	beq.n	800be62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800be6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d193      	bne.n	800bd9a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800be72:	e000      	b.n	800be76 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800be74:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800be76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d12d      	bne.n	800bed8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800be7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d01c      	beq.n	800bebc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800be82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be84:	88db      	ldrh	r3, [r3, #6]
 800be86:	b29a      	uxth	r2, r3
 800be88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8a:	889b      	ldrh	r3, [r3, #4]
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	429a      	cmp	r2, r3
 800be90:	d906      	bls.n	800bea0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800be92:	4b45      	ldr	r3, [pc, #276]	@ (800bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800be94:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800be98:	4944      	ldr	r1, [pc, #272]	@ (800bfac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800be9a:	4845      	ldr	r0, [pc, #276]	@ (800bfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800be9c:	f000 fda0 	bl	800c9e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800bea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800bea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea8:	88db      	ldrh	r3, [r3, #6]
 800beaa:	b29a      	uxth	r2, r3
 800beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beae:	889b      	ldrh	r3, [r3, #4]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d010      	beq.n	800bed8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	623b      	str	r3, [r7, #32]
 800beba:	e00d      	b.n	800bed8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d006      	beq.n	800bed2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800bec4:	4b38      	ldr	r3, [pc, #224]	@ (800bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bec6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800beca:	493a      	ldr	r1, [pc, #232]	@ (800bfb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800becc:	4838      	ldr	r0, [pc, #224]	@ (800bfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bece:	f000 fd87 	bl	800c9e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d105      	bne.n	800beea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	7f9b      	ldrb	r3, [r3, #30]
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d059      	beq.n	800bf9e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d04f      	beq.n	800bf90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d006      	beq.n	800bf06 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	889b      	ldrh	r3, [r3, #4]
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d002      	beq.n	800bf0c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800bf06:	2300      	movs	r3, #0
 800bf08:	623b      	str	r3, [r7, #32]
 800bf0a:	e041      	b.n	800bf90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800bf0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800bf10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800bf16:	e012      	b.n	800bf3e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800bf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800bf1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf20:	88db      	ldrh	r3, [r3, #6]
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf26:	889b      	ldrh	r3, [r3, #4]
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d002      	beq.n	800bf34 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	623b      	str	r3, [r7, #32]
            break;
 800bf32:	e007      	b.n	800bf44 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800bf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf36:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800bf38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800bf3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e9      	bne.n	800bf18 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d022      	beq.n	800bf90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d106      	bne.n	800bf60 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800bf52:	4b15      	ldr	r3, [pc, #84]	@ (800bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bf54:	f240 12df 	movw	r2, #479	@ 0x1df
 800bf58:	4917      	ldr	r1, [pc, #92]	@ (800bfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bf5a:	4815      	ldr	r0, [pc, #84]	@ (800bfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bf5c:	f000 fd40 	bl	800c9e0 <iprintf>
          LWIP_ASSERT("sanity check",
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	685b      	ldr	r3, [r3, #4]
 800bf66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d106      	bne.n	800bf7a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800bf6c:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bf6e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800bf72:	4911      	ldr	r1, [pc, #68]	@ (800bfb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800bf74:	480e      	ldr	r0, [pc, #56]	@ (800bfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bf76:	f000 fd33 	bl	800c9e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800bf7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d006      	beq.n	800bf90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800bf82:	4b09      	ldr	r3, [pc, #36]	@ (800bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800bf84:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800bf88:	490c      	ldr	r1, [pc, #48]	@ (800bfbc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800bf8a:	4809      	ldr	r0, [pc, #36]	@ (800bfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800bf8c:	f000 fd28 	bl	800c9e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	bf14      	ite	ne
 800bf96:	2301      	movne	r3, #1
 800bf98:	2300      	moveq	r3, #0
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	e000      	b.n	800bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3730      	adds	r7, #48	@ 0x30
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	0800ff2c 	.word	0x0800ff2c
 800bfac:	08010010 	.word	0x08010010
 800bfb0:	0800ff74 	.word	0x0800ff74
 800bfb4:	08010030 	.word	0x08010030
 800bfb8:	08010068 	.word	0x08010068
 800bfbc:	08010078 	.word	0x08010078

0800bfc0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b08e      	sub	sp, #56	@ 0x38
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800bfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	f003 030f 	and.w	r3, r3, #15
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	009b      	lsls	r3, r3, #2
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	2b14      	cmp	r3, #20
 800bfde:	f040 8171 	bne.w	800c2c4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800bfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe4:	88db      	ldrh	r3, [r3, #6]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7f7 f844 	bl	8003076 <lwip_htons>
 800bfee:	4603      	mov	r3, r0
 800bff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	00db      	lsls	r3, r3, #3
 800bff8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800bffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffc:	885b      	ldrh	r3, [r3, #2]
 800bffe:	b29b      	uxth	r3, r3
 800c000:	4618      	mov	r0, r3
 800c002:	f7f7 f838 	bl	8003076 <lwip_htons>
 800c006:	4603      	mov	r3, r0
 800c008:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800c00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	f003 030f 	and.w	r3, r3, #15
 800c012:	b2db      	uxtb	r3, r3
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800c01a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c01e:	b29b      	uxth	r3, r3
 800c020:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c022:	429a      	cmp	r2, r3
 800c024:	f0c0 8150 	bcc.w	800c2c8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800c028:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7f8 fb1d 	bl	8004674 <pbuf_clen>
 800c03a:	4603      	mov	r3, r0
 800c03c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c03e:	4b8c      	ldr	r3, [pc, #560]	@ (800c270 <ip4_reass+0x2b0>)
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	8c3b      	ldrh	r3, [r7, #32]
 800c046:	4413      	add	r3, r2
 800c048:	2b0a      	cmp	r3, #10
 800c04a:	dd10      	ble.n	800c06e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c04c:	8c3b      	ldrh	r3, [r7, #32]
 800c04e:	4619      	mov	r1, r3
 800c050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c052:	f7ff fd81 	bl	800bb58 <ip_reass_remove_oldest_datagram>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f000 8137 	beq.w	800c2cc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c05e:	4b84      	ldr	r3, [pc, #528]	@ (800c270 <ip4_reass+0x2b0>)
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	8c3b      	ldrh	r3, [r7, #32]
 800c066:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c068:	2b0a      	cmp	r3, #10
 800c06a:	f300 812f 	bgt.w	800c2cc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c06e:	4b81      	ldr	r3, [pc, #516]	@ (800c274 <ip4_reass+0x2b4>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	633b      	str	r3, [r7, #48]	@ 0x30
 800c074:	e015      	b.n	800c0a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c078:	695a      	ldr	r2, [r3, #20]
 800c07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d10c      	bne.n	800c09c <ip4_reass+0xdc>
 800c082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c084:	699a      	ldr	r2, [r3, #24]
 800c086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d106      	bne.n	800c09c <ip4_reass+0xdc>
 800c08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c090:	899a      	ldrh	r2, [r3, #12]
 800c092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c094:	889b      	ldrh	r3, [r3, #4]
 800c096:	b29b      	uxth	r3, r3
 800c098:	429a      	cmp	r2, r3
 800c09a:	d006      	beq.n	800c0aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1e6      	bne.n	800c076 <ip4_reass+0xb6>
 800c0a8:	e000      	b.n	800c0ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c0aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d109      	bne.n	800c0c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c0b2:	8c3b      	ldrh	r3, [r7, #32]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0b8:	f7ff fdb0 	bl	800bc1c <ip_reass_enqueue_new_datagram>
 800c0bc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d11c      	bne.n	800c0fe <ip4_reass+0x13e>
      goto nullreturn;
 800c0c4:	e105      	b.n	800c2d2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c8:	88db      	ldrh	r3, [r3, #6]
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f6 ffd2 	bl	8003076 <lwip_htons>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d110      	bne.n	800c0fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0de:	89db      	ldrh	r3, [r3, #14]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7f6 ffc8 	bl	8003076 <lwip_htons>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d006      	beq.n	800c0fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	2214      	movs	r2, #20
 800c0f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f000 fd4c 	bl	800cb96 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c100:	88db      	ldrh	r3, [r3, #6]
 800c102:	b29b      	uxth	r3, r3
 800c104:	f003 0320 	and.w	r3, r3, #32
 800c108:	2b00      	cmp	r3, #0
 800c10a:	bf0c      	ite	eq
 800c10c:	2301      	moveq	r3, #1
 800c10e:	2300      	movne	r3, #0
 800c110:	b2db      	uxtb	r3, r3
 800c112:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00e      	beq.n	800c138 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800c11a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c11c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c11e:	4413      	add	r3, r2
 800c120:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c122:	8b7a      	ldrh	r2, [r7, #26]
 800c124:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c126:	429a      	cmp	r2, r3
 800c128:	f0c0 80a0 	bcc.w	800c26c <ip4_reass+0x2ac>
 800c12c:	8b7b      	ldrh	r3, [r7, #26]
 800c12e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800c132:	4293      	cmp	r3, r2
 800c134:	f200 809a 	bhi.w	800c26c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c138:	69fa      	ldr	r2, [r7, #28]
 800c13a:	6879      	ldr	r1, [r7, #4]
 800c13c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c13e:	f7ff fdd5 	bl	800bcec <ip_reass_chain_frag_into_datagram_and_validate>
 800c142:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14a:	f000 809b 	beq.w	800c284 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c14e:	4b48      	ldr	r3, [pc, #288]	@ (800c270 <ip4_reass+0x2b0>)
 800c150:	881a      	ldrh	r2, [r3, #0]
 800c152:	8c3b      	ldrh	r3, [r7, #32]
 800c154:	4413      	add	r3, r2
 800c156:	b29a      	uxth	r2, r3
 800c158:	4b45      	ldr	r3, [pc, #276]	@ (800c270 <ip4_reass+0x2b0>)
 800c15a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00d      	beq.n	800c17e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800c162:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c166:	4413      	add	r3, r2
 800c168:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c16c:	8a7a      	ldrh	r2, [r7, #18]
 800c16e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c172:	7f9b      	ldrb	r3, [r3, #30]
 800c174:	f043 0301 	orr.w	r3, r3, #1
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d171      	bne.n	800c268 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800c184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c186:	8b9b      	ldrh	r3, [r3, #28]
 800c188:	3314      	adds	r3, #20
 800c18a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800c18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800c196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	2214      	movs	r2, #20
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1a8:	f000 fcf5 	bl	800cb96 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800c1ac:	8a3b      	ldrh	r3, [r7, #16]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7f6 ff61 	bl	8003076 <lwip_htons>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1be:	2200      	movs	r2, #0
 800c1c0:	719a      	strb	r2, [r3, #6]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	729a      	strb	r2, [r3, #10]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c1d6:	e00d      	b.n	800c1f4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800c1d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800c1de:	2114      	movs	r1, #20
 800c1e0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c1e2:	f7f8 f939 	bl	8004458 <pbuf_remove_header>
      pbuf_cat(p, r);
 800c1e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7f8 fa7d 	bl	80046e8 <pbuf_cat>
      r = iprh->next_pbuf;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800c1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1ee      	bne.n	800c1d8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c1fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c274 <ip4_reass+0x2b4>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c200:	429a      	cmp	r2, r3
 800c202:	d102      	bne.n	800c20a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800c204:	2300      	movs	r3, #0
 800c206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c208:	e010      	b.n	800c22c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c20a:	4b1a      	ldr	r3, [pc, #104]	@ (800c274 <ip4_reass+0x2b4>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c210:	e007      	b.n	800c222 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800c212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c218:	429a      	cmp	r2, r3
 800c21a:	d006      	beq.n	800c22a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1f4      	bne.n	800c212 <ip4_reass+0x252>
 800c228:	e000      	b.n	800c22c <ip4_reass+0x26c>
          break;
 800c22a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c22c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c22e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c230:	f7ff fd2e 	bl	800bc90 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f7f8 fa1d 	bl	8004674 <pbuf_clen>
 800c23a:	4603      	mov	r3, r0
 800c23c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800c23e:	4b0c      	ldr	r3, [pc, #48]	@ (800c270 <ip4_reass+0x2b0>)
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	8c3a      	ldrh	r2, [r7, #32]
 800c244:	429a      	cmp	r2, r3
 800c246:	d906      	bls.n	800c256 <ip4_reass+0x296>
 800c248:	4b0b      	ldr	r3, [pc, #44]	@ (800c278 <ip4_reass+0x2b8>)
 800c24a:	f240 229b 	movw	r2, #667	@ 0x29b
 800c24e:	490b      	ldr	r1, [pc, #44]	@ (800c27c <ip4_reass+0x2bc>)
 800c250:	480b      	ldr	r0, [pc, #44]	@ (800c280 <ip4_reass+0x2c0>)
 800c252:	f000 fbc5 	bl	800c9e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800c256:	4b06      	ldr	r3, [pc, #24]	@ (800c270 <ip4_reass+0x2b0>)
 800c258:	881a      	ldrh	r2, [r3, #0]
 800c25a:	8c3b      	ldrh	r3, [r7, #32]
 800c25c:	1ad3      	subs	r3, r2, r3
 800c25e:	b29a      	uxth	r2, r3
 800c260:	4b03      	ldr	r3, [pc, #12]	@ (800c270 <ip4_reass+0x2b0>)
 800c262:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	e038      	b.n	800c2da <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c268:	2300      	movs	r3, #0
 800c26a:	e036      	b.n	800c2da <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800c26c:	bf00      	nop
 800c26e:	e00a      	b.n	800c286 <ip4_reass+0x2c6>
 800c270:	200083b0 	.word	0x200083b0
 800c274:	200083ac 	.word	0x200083ac
 800c278:	0800ff2c 	.word	0x0800ff2c
 800c27c:	0801009c 	.word	0x0801009c
 800c280:	0800ff74 	.word	0x0800ff74
    goto nullreturn_ipr;
 800c284:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800c286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d106      	bne.n	800c29a <ip4_reass+0x2da>
 800c28c:	4b15      	ldr	r3, [pc, #84]	@ (800c2e4 <ip4_reass+0x324>)
 800c28e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800c292:	4915      	ldr	r1, [pc, #84]	@ (800c2e8 <ip4_reass+0x328>)
 800c294:	4815      	ldr	r0, [pc, #84]	@ (800c2ec <ip4_reass+0x32c>)
 800c296:	f000 fba3 	bl	800c9e0 <iprintf>
  if (ipr->p == NULL) {
 800c29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d116      	bne.n	800c2d0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800c2a2:	4b13      	ldr	r3, [pc, #76]	@ (800c2f0 <ip4_reass+0x330>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d006      	beq.n	800c2ba <ip4_reass+0x2fa>
 800c2ac:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e4 <ip4_reass+0x324>)
 800c2ae:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c2b2:	4910      	ldr	r1, [pc, #64]	@ (800c2f4 <ip4_reass+0x334>)
 800c2b4:	480d      	ldr	r0, [pc, #52]	@ (800c2ec <ip4_reass+0x32c>)
 800c2b6:	f000 fb93 	bl	800c9e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c2be:	f7ff fce7 	bl	800bc90 <ip_reass_dequeue_datagram>
 800c2c2:	e006      	b.n	800c2d2 <ip4_reass+0x312>
    goto nullreturn;
 800c2c4:	bf00      	nop
 800c2c6:	e004      	b.n	800c2d2 <ip4_reass+0x312>
    goto nullreturn;
 800c2c8:	bf00      	nop
 800c2ca:	e002      	b.n	800c2d2 <ip4_reass+0x312>
      goto nullreturn;
 800c2cc:	bf00      	nop
 800c2ce:	e000      	b.n	800c2d2 <ip4_reass+0x312>
  }

nullreturn:
 800c2d0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7f8 f946 	bl	8004564 <pbuf_free>
  return NULL;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3738      	adds	r7, #56	@ 0x38
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	0800ff2c 	.word	0x0800ff2c
 800c2e8:	080100b8 	.word	0x080100b8
 800c2ec:	0800ff74 	.word	0x0800ff74
 800c2f0:	200083ac 	.word	0x200083ac
 800c2f4:	080100c4 	.word	0x080100c4

0800c2f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800c2fc:	2005      	movs	r0, #5
 800c2fe:	f7f7 fb11 	bl	8003924 <memp_malloc>
 800c302:	4603      	mov	r3, r0
}
 800c304:	4618      	mov	r0, r3
 800c306:	bd80      	pop	{r7, pc}

0800c308 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b082      	sub	sp, #8
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d106      	bne.n	800c324 <ip_frag_free_pbuf_custom_ref+0x1c>
 800c316:	4b07      	ldr	r3, [pc, #28]	@ (800c334 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c318:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800c31c:	4906      	ldr	r1, [pc, #24]	@ (800c338 <ip_frag_free_pbuf_custom_ref+0x30>)
 800c31e:	4807      	ldr	r0, [pc, #28]	@ (800c33c <ip_frag_free_pbuf_custom_ref+0x34>)
 800c320:	f000 fb5e 	bl	800c9e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c324:	6879      	ldr	r1, [r7, #4]
 800c326:	2005      	movs	r0, #5
 800c328:	f7f7 fb48 	bl	80039bc <memp_free>
}
 800c32c:	bf00      	nop
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	0800ff2c 	.word	0x0800ff2c
 800c338:	080100e4 	.word	0x080100e4
 800c33c:	0800ff74 	.word	0x0800ff74

0800c340 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d106      	bne.n	800c360 <ipfrag_free_pbuf_custom+0x20>
 800c352:	4b11      	ldr	r3, [pc, #68]	@ (800c398 <ipfrag_free_pbuf_custom+0x58>)
 800c354:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800c358:	4910      	ldr	r1, [pc, #64]	@ (800c39c <ipfrag_free_pbuf_custom+0x5c>)
 800c35a:	4811      	ldr	r0, [pc, #68]	@ (800c3a0 <ipfrag_free_pbuf_custom+0x60>)
 800c35c:	f000 fb40 	bl	800c9e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	429a      	cmp	r2, r3
 800c366:	d006      	beq.n	800c376 <ipfrag_free_pbuf_custom+0x36>
 800c368:	4b0b      	ldr	r3, [pc, #44]	@ (800c398 <ipfrag_free_pbuf_custom+0x58>)
 800c36a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800c36e:	490d      	ldr	r1, [pc, #52]	@ (800c3a4 <ipfrag_free_pbuf_custom+0x64>)
 800c370:	480b      	ldr	r0, [pc, #44]	@ (800c3a0 <ipfrag_free_pbuf_custom+0x60>)
 800c372:	f000 fb35 	bl	800c9e0 <iprintf>
  if (pcr->original != NULL) {
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d004      	beq.n	800c388 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	4618      	mov	r0, r3
 800c384:	f7f8 f8ee 	bl	8004564 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff ffbd 	bl	800c308 <ip_frag_free_pbuf_custom_ref>
}
 800c38e:	bf00      	nop
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	0800ff2c 	.word	0x0800ff2c
 800c39c:	080100f0 	.word	0x080100f0
 800c3a0:	0800ff74 	.word	0x0800ff74
 800c3a4:	080100fc 	.word	0x080100fc

0800c3a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b094      	sub	sp, #80	@ 0x50
 800c3ac:	af02      	add	r7, sp, #8
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c3be:	3b14      	subs	r3, #20
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	da00      	bge.n	800c3c6 <ip4_frag+0x1e>
 800c3c4:	3307      	adds	r3, #7
 800c3c6:	10db      	asrs	r3, r3, #3
 800c3c8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c3ca:	2314      	movs	r3, #20
 800c3cc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800c3d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3d6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800c3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	f003 030f 	and.w	r3, r3, #15
 800c3e0:	b2db      	uxtb	r3, r3
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b14      	cmp	r3, #20
 800c3e8:	d002      	beq.n	800c3f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800c3ea:	f06f 0305 	mvn.w	r3, #5
 800c3ee:	e110      	b.n	800c612 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	895b      	ldrh	r3, [r3, #10]
 800c3f4:	2b13      	cmp	r3, #19
 800c3f6:	d809      	bhi.n	800c40c <ip4_frag+0x64>
 800c3f8:	4b88      	ldr	r3, [pc, #544]	@ (800c61c <ip4_frag+0x274>)
 800c3fa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800c3fe:	4988      	ldr	r1, [pc, #544]	@ (800c620 <ip4_frag+0x278>)
 800c400:	4888      	ldr	r0, [pc, #544]	@ (800c624 <ip4_frag+0x27c>)
 800c402:	f000 faed 	bl	800c9e0 <iprintf>
 800c406:	f06f 0305 	mvn.w	r3, #5
 800c40a:	e102      	b.n	800c612 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c40e:	88db      	ldrh	r3, [r3, #6]
 800c410:	b29b      	uxth	r3, r3
 800c412:	4618      	mov	r0, r3
 800c414:	f7f6 fe2f 	bl	8003076 <lwip_htons>
 800c418:	4603      	mov	r3, r0
 800c41a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800c41c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c41e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c422:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800c426:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c42c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	891b      	ldrh	r3, [r3, #8]
 800c432:	3b14      	subs	r3, #20
 800c434:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800c438:	e0e1      	b.n	800c5fe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800c43a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	b29b      	uxth	r3, r3
 800c440:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c444:	4293      	cmp	r3, r2
 800c446:	bf28      	it	cs
 800c448:	4613      	movcs	r3, r2
 800c44a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c44c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c450:	2114      	movs	r1, #20
 800c452:	200e      	movs	r0, #14
 800c454:	f7f7 fda2 	bl	8003f9c <pbuf_alloc>
 800c458:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f000 80d5 	beq.w	800c60c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c464:	895b      	ldrh	r3, [r3, #10]
 800c466:	2b13      	cmp	r3, #19
 800c468:	d806      	bhi.n	800c478 <ip4_frag+0xd0>
 800c46a:	4b6c      	ldr	r3, [pc, #432]	@ (800c61c <ip4_frag+0x274>)
 800c46c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800c470:	496d      	ldr	r1, [pc, #436]	@ (800c628 <ip4_frag+0x280>)
 800c472:	486c      	ldr	r0, [pc, #432]	@ (800c624 <ip4_frag+0x27c>)
 800c474:	f000 fab4 	bl	800c9e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	2214      	movs	r2, #20
 800c47e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c480:	4618      	mov	r0, r3
 800c482:	f000 fb88 	bl	800cb96 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800c48c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c48e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800c492:	e064      	b.n	800c55e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	895a      	ldrh	r2, [r3, #10]
 800c498:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	895b      	ldrh	r3, [r3, #10]
 800c4a2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d906      	bls.n	800c4b6 <ip4_frag+0x10e>
 800c4a8:	4b5c      	ldr	r3, [pc, #368]	@ (800c61c <ip4_frag+0x274>)
 800c4aa:	f240 322d 	movw	r2, #813	@ 0x32d
 800c4ae:	495f      	ldr	r1, [pc, #380]	@ (800c62c <ip4_frag+0x284>)
 800c4b0:	485c      	ldr	r0, [pc, #368]	@ (800c624 <ip4_frag+0x27c>)
 800c4b2:	f000 fa95 	bl	800c9e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c4b6:	8bfa      	ldrh	r2, [r7, #30]
 800c4b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	bf28      	it	cs
 800c4c0:	4613      	movcs	r3, r2
 800c4c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c4c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d105      	bne.n	800c4da <ip4_frag+0x132>
        poff = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	60fb      	str	r3, [r7, #12]
        continue;
 800c4d8:	e041      	b.n	800c55e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c4da:	f7ff ff0d 	bl	800c2f8 <ip_frag_alloc_pbuf_custom_ref>
 800c4de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d103      	bne.n	800c4ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 800c4e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4e8:	f7f8 f83c 	bl	8004564 <pbuf_free>
        goto memerr;
 800c4ec:	e08f      	b.n	800c60e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c4ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c4f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800c4fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800c500:	9201      	str	r2, [sp, #4]
 800c502:	9300      	str	r3, [sp, #0]
 800c504:	4603      	mov	r3, r0
 800c506:	2241      	movs	r2, #65	@ 0x41
 800c508:	2000      	movs	r0, #0
 800c50a:	f7f7 fe71 	bl	80041f0 <pbuf_alloced_custom>
 800c50e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d106      	bne.n	800c524 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800c516:	69b8      	ldr	r0, [r7, #24]
 800c518:	f7ff fef6 	bl	800c308 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800c51c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c51e:	f7f8 f821 	bl	8004564 <pbuf_free>
        goto memerr;
 800c522:	e074      	b.n	800c60e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f7f8 f8bd 	bl	80046a4 <pbuf_ref>
      pcr->original = p;
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	4a3f      	ldr	r2, [pc, #252]	@ (800c630 <ip4_frag+0x288>)
 800c534:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800c536:	6979      	ldr	r1, [r7, #20]
 800c538:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c53a:	f7f8 f8d5 	bl	80046e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800c53e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800c542:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800c54c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <ip4_frag+0x1b6>
        poff = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800c55e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c562:	2b00      	cmp	r3, #0
 800c564:	d196      	bne.n	800c494 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800c566:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c568:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c56c:	4413      	add	r3, r2
 800c56e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c574:	f1a3 0213 	sub.w	r2, r3, #19
 800c578:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c57c:	429a      	cmp	r2, r3
 800c57e:	bfcc      	ite	gt
 800c580:	2301      	movgt	r3, #1
 800c582:	2300      	movle	r3, #0
 800c584:	b2db      	uxtb	r3, r3
 800c586:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800c588:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c58c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c590:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800c592:	6a3b      	ldr	r3, [r7, #32]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <ip4_frag+0x1f6>
 800c598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d003      	beq.n	800c5a6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800c59e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c5a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c5a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800c5a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7f6 fd64 	bl	8003076 <lwip_htons>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800c5b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c5b8:	3314      	adds	r3, #20
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7f6 fd5a 	bl	8003076 <lwip_htons>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	729a      	strb	r2, [r3, #10]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	695b      	ldr	r3, [r3, #20]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5dc:	68b8      	ldr	r0, [r7, #8]
 800c5de:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800c5e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c5e2:	f7f7 ffbf 	bl	8004564 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800c5e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c5ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800c5f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c5f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800c5fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c602:	2b00      	cmp	r3, #0
 800c604:	f47f af19 	bne.w	800c43a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800c608:	2300      	movs	r3, #0
 800c60a:	e002      	b.n	800c612 <ip4_frag+0x26a>
      goto memerr;
 800c60c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800c60e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c612:	4618      	mov	r0, r3
 800c614:	3748      	adds	r7, #72	@ 0x48
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	0800ff2c 	.word	0x0800ff2c
 800c620:	08010108 	.word	0x08010108
 800c624:	0800ff74 	.word	0x0800ff74
 800c628:	08010124 	.word	0x08010124
 800c62c:	08010144 	.word	0x08010144
 800c630:	0800c341 	.word	0x0800c341

0800c634 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b086      	sub	sp, #24
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800c63e:	230e      	movs	r3, #14
 800c640:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	895b      	ldrh	r3, [r3, #10]
 800c646:	2b0e      	cmp	r3, #14
 800c648:	d96e      	bls.n	800c728 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7bdb      	ldrb	r3, [r3, #15]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d106      	bne.n	800c660 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c658:	3301      	adds	r3, #1
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	7b1a      	ldrb	r2, [r3, #12]
 800c66a:	7b5b      	ldrb	r3, [r3, #13]
 800c66c:	021b      	lsls	r3, r3, #8
 800c66e:	4313      	orrs	r3, r2
 800c670:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	f003 0301 	and.w	r3, r3, #1
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d023      	beq.n	800c6c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d10f      	bne.n	800c6a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	785b      	ldrb	r3, [r3, #1]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d11b      	bne.n	800c6c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c692:	2b5e      	cmp	r3, #94	@ 0x5e
 800c694:	d117      	bne.n	800c6c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	7b5b      	ldrb	r3, [r3, #13]
 800c69a:	f043 0310 	orr.w	r3, r3, #16
 800c69e:	b2da      	uxtb	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	735a      	strb	r2, [r3, #13]
 800c6a4:	e00f      	b.n	800c6c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	2206      	movs	r2, #6
 800c6aa:	4928      	ldr	r1, [pc, #160]	@ (800c74c <ethernet_input+0x118>)
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f000 f9ec 	bl	800ca8a <memcmp>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d106      	bne.n	800c6c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	7b5b      	ldrb	r3, [r3, #13]
 800c6bc:	f043 0308 	orr.w	r3, r3, #8
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800c6c6:	89fb      	ldrh	r3, [r7, #14]
 800c6c8:	2b08      	cmp	r3, #8
 800c6ca:	d003      	beq.n	800c6d4 <ethernet_input+0xa0>
 800c6cc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800c6d0:	d014      	beq.n	800c6fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800c6d2:	e032      	b.n	800c73a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c6da:	f003 0308 	and.w	r3, r3, #8
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d024      	beq.n	800c72c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c6e2:	8afb      	ldrh	r3, [r7, #22]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7f7 feb6 	bl	8004458 <pbuf_remove_header>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d11e      	bne.n	800c730 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7fe ff21 	bl	800b53c <ip4_input>
      break;
 800c6fa:	e013      	b.n	800c724 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c702:	f003 0308 	and.w	r3, r3, #8
 800c706:	2b00      	cmp	r3, #0
 800c708:	d014      	beq.n	800c734 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c70a:	8afb      	ldrh	r3, [r7, #22]
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7f7 fea2 	bl	8004458 <pbuf_remove_header>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10e      	bne.n	800c738 <ethernet_input+0x104>
        etharp_input(p, netif);
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7fe f8c1 	bl	800a8a4 <etharp_input>
      break;
 800c722:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	e00c      	b.n	800c742 <ethernet_input+0x10e>
    goto free_and_return;
 800c728:	bf00      	nop
 800c72a:	e006      	b.n	800c73a <ethernet_input+0x106>
        goto free_and_return;
 800c72c:	bf00      	nop
 800c72e:	e004      	b.n	800c73a <ethernet_input+0x106>
        goto free_and_return;
 800c730:	bf00      	nop
 800c732:	e002      	b.n	800c73a <ethernet_input+0x106>
        goto free_and_return;
 800c734:	bf00      	nop
 800c736:	e000      	b.n	800c73a <ethernet_input+0x106>
        goto free_and_return;
 800c738:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7f7 ff12 	bl	8004564 <pbuf_free>
  return ERR_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3718      	adds	r7, #24
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	080102d8 	.word	0x080102d8

0800c750 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
 800c75c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800c75e:	8c3b      	ldrh	r3, [r7, #32]
 800c760:	4618      	mov	r0, r3
 800c762:	f7f6 fc88 	bl	8003076 <lwip_htons>
 800c766:	4603      	mov	r3, r0
 800c768:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800c76a:	210e      	movs	r1, #14
 800c76c:	68b8      	ldr	r0, [r7, #8]
 800c76e:	f7f7 fe63 	bl	8004438 <pbuf_add_header>
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d125      	bne.n	800c7c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	8afa      	ldrh	r2, [r7, #22]
 800c782:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	2206      	movs	r2, #6
 800c788:	6839      	ldr	r1, [r7, #0]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 fa03 	bl	800cb96 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	3306      	adds	r3, #6
 800c794:	2206      	movs	r2, #6
 800c796:	6879      	ldr	r1, [r7, #4]
 800c798:	4618      	mov	r0, r3
 800c79a:	f000 f9fc 	bl	800cb96 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7a4:	2b06      	cmp	r3, #6
 800c7a6:	d006      	beq.n	800c7b6 <ethernet_output+0x66>
 800c7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c7d4 <ethernet_output+0x84>)
 800c7aa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800c7ae:	490a      	ldr	r1, [pc, #40]	@ (800c7d8 <ethernet_output+0x88>)
 800c7b0:	480a      	ldr	r0, [pc, #40]	@ (800c7dc <ethernet_output+0x8c>)
 800c7b2:	f000 f915 	bl	800c9e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	68b9      	ldr	r1, [r7, #8]
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	4798      	blx	r3
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	e002      	b.n	800c7ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800c7c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800c7c6:	f06f 0301 	mvn.w	r3, #1
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3718      	adds	r7, #24
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	08010154 	.word	0x08010154
 800c7d8:	0801018c 	.word	0x0801018c
 800c7dc:	080101c0 	.word	0x080101c0

0800c7e0 <rand>:
 800c7e0:	4b16      	ldr	r3, [pc, #88]	@ (800c83c <rand+0x5c>)
 800c7e2:	b510      	push	{r4, lr}
 800c7e4:	681c      	ldr	r4, [r3, #0]
 800c7e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c7e8:	b9b3      	cbnz	r3, 800c818 <rand+0x38>
 800c7ea:	2018      	movs	r0, #24
 800c7ec:	f000 fa4a 	bl	800cc84 <malloc>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	6320      	str	r0, [r4, #48]	@ 0x30
 800c7f4:	b920      	cbnz	r0, 800c800 <rand+0x20>
 800c7f6:	4b12      	ldr	r3, [pc, #72]	@ (800c840 <rand+0x60>)
 800c7f8:	4812      	ldr	r0, [pc, #72]	@ (800c844 <rand+0x64>)
 800c7fa:	2152      	movs	r1, #82	@ 0x52
 800c7fc:	f000 f9da 	bl	800cbb4 <__assert_func>
 800c800:	4911      	ldr	r1, [pc, #68]	@ (800c848 <rand+0x68>)
 800c802:	4b12      	ldr	r3, [pc, #72]	@ (800c84c <rand+0x6c>)
 800c804:	e9c0 1300 	strd	r1, r3, [r0]
 800c808:	4b11      	ldr	r3, [pc, #68]	@ (800c850 <rand+0x70>)
 800c80a:	6083      	str	r3, [r0, #8]
 800c80c:	230b      	movs	r3, #11
 800c80e:	8183      	strh	r3, [r0, #12]
 800c810:	2100      	movs	r1, #0
 800c812:	2001      	movs	r0, #1
 800c814:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c818:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c81a:	480e      	ldr	r0, [pc, #56]	@ (800c854 <rand+0x74>)
 800c81c:	690b      	ldr	r3, [r1, #16]
 800c81e:	694c      	ldr	r4, [r1, #20]
 800c820:	4a0d      	ldr	r2, [pc, #52]	@ (800c858 <rand+0x78>)
 800c822:	4358      	muls	r0, r3
 800c824:	fb02 0004 	mla	r0, r2, r4, r0
 800c828:	fba3 3202 	umull	r3, r2, r3, r2
 800c82c:	3301      	adds	r3, #1
 800c82e:	eb40 0002 	adc.w	r0, r0, r2
 800c832:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c836:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c83a:	bd10      	pop	{r4, pc}
 800c83c:	20000020 	.word	0x20000020
 800c840:	080102e6 	.word	0x080102e6
 800c844:	080102fd 	.word	0x080102fd
 800c848:	abcd330e 	.word	0xabcd330e
 800c84c:	e66d1234 	.word	0xe66d1234
 800c850:	0005deec 	.word	0x0005deec
 800c854:	5851f42d 	.word	0x5851f42d
 800c858:	4c957f2d 	.word	0x4c957f2d

0800c85c <std>:
 800c85c:	2300      	movs	r3, #0
 800c85e:	b510      	push	{r4, lr}
 800c860:	4604      	mov	r4, r0
 800c862:	e9c0 3300 	strd	r3, r3, [r0]
 800c866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c86a:	6083      	str	r3, [r0, #8]
 800c86c:	8181      	strh	r1, [r0, #12]
 800c86e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c870:	81c2      	strh	r2, [r0, #14]
 800c872:	6183      	str	r3, [r0, #24]
 800c874:	4619      	mov	r1, r3
 800c876:	2208      	movs	r2, #8
 800c878:	305c      	adds	r0, #92	@ 0x5c
 800c87a:	f000 f916 	bl	800caaa <memset>
 800c87e:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b4 <std+0x58>)
 800c880:	6263      	str	r3, [r4, #36]	@ 0x24
 800c882:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b8 <std+0x5c>)
 800c884:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c886:	4b0d      	ldr	r3, [pc, #52]	@ (800c8bc <std+0x60>)
 800c888:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c88a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c0 <std+0x64>)
 800c88c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c88e:	4b0d      	ldr	r3, [pc, #52]	@ (800c8c4 <std+0x68>)
 800c890:	6224      	str	r4, [r4, #32]
 800c892:	429c      	cmp	r4, r3
 800c894:	d006      	beq.n	800c8a4 <std+0x48>
 800c896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c89a:	4294      	cmp	r4, r2
 800c89c:	d002      	beq.n	800c8a4 <std+0x48>
 800c89e:	33d0      	adds	r3, #208	@ 0xd0
 800c8a0:	429c      	cmp	r4, r3
 800c8a2:	d105      	bne.n	800c8b0 <std+0x54>
 800c8a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8ac:	f000 b970 	b.w	800cb90 <__retarget_lock_init_recursive>
 800c8b0:	bd10      	pop	{r4, pc}
 800c8b2:	bf00      	nop
 800c8b4:	0800ca05 	.word	0x0800ca05
 800c8b8:	0800ca27 	.word	0x0800ca27
 800c8bc:	0800ca5f 	.word	0x0800ca5f
 800c8c0:	0800ca83 	.word	0x0800ca83
 800c8c4:	200083b4 	.word	0x200083b4

0800c8c8 <stdio_exit_handler>:
 800c8c8:	4a02      	ldr	r2, [pc, #8]	@ (800c8d4 <stdio_exit_handler+0xc>)
 800c8ca:	4903      	ldr	r1, [pc, #12]	@ (800c8d8 <stdio_exit_handler+0x10>)
 800c8cc:	4803      	ldr	r0, [pc, #12]	@ (800c8dc <stdio_exit_handler+0x14>)
 800c8ce:	f000 b869 	b.w	800c9a4 <_fwalk_sglue>
 800c8d2:	bf00      	nop
 800c8d4:	20000014 	.word	0x20000014
 800c8d8:	0800d495 	.word	0x0800d495
 800c8dc:	20000024 	.word	0x20000024

0800c8e0 <cleanup_stdio>:
 800c8e0:	6841      	ldr	r1, [r0, #4]
 800c8e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c914 <cleanup_stdio+0x34>)
 800c8e4:	4299      	cmp	r1, r3
 800c8e6:	b510      	push	{r4, lr}
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	d001      	beq.n	800c8f0 <cleanup_stdio+0x10>
 800c8ec:	f000 fdd2 	bl	800d494 <_fflush_r>
 800c8f0:	68a1      	ldr	r1, [r4, #8]
 800c8f2:	4b09      	ldr	r3, [pc, #36]	@ (800c918 <cleanup_stdio+0x38>)
 800c8f4:	4299      	cmp	r1, r3
 800c8f6:	d002      	beq.n	800c8fe <cleanup_stdio+0x1e>
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f000 fdcb 	bl	800d494 <_fflush_r>
 800c8fe:	68e1      	ldr	r1, [r4, #12]
 800c900:	4b06      	ldr	r3, [pc, #24]	@ (800c91c <cleanup_stdio+0x3c>)
 800c902:	4299      	cmp	r1, r3
 800c904:	d004      	beq.n	800c910 <cleanup_stdio+0x30>
 800c906:	4620      	mov	r0, r4
 800c908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c90c:	f000 bdc2 	b.w	800d494 <_fflush_r>
 800c910:	bd10      	pop	{r4, pc}
 800c912:	bf00      	nop
 800c914:	200083b4 	.word	0x200083b4
 800c918:	2000841c 	.word	0x2000841c
 800c91c:	20008484 	.word	0x20008484

0800c920 <global_stdio_init.part.0>:
 800c920:	b510      	push	{r4, lr}
 800c922:	4b0b      	ldr	r3, [pc, #44]	@ (800c950 <global_stdio_init.part.0+0x30>)
 800c924:	4c0b      	ldr	r4, [pc, #44]	@ (800c954 <global_stdio_init.part.0+0x34>)
 800c926:	4a0c      	ldr	r2, [pc, #48]	@ (800c958 <global_stdio_init.part.0+0x38>)
 800c928:	601a      	str	r2, [r3, #0]
 800c92a:	4620      	mov	r0, r4
 800c92c:	2200      	movs	r2, #0
 800c92e:	2104      	movs	r1, #4
 800c930:	f7ff ff94 	bl	800c85c <std>
 800c934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c938:	2201      	movs	r2, #1
 800c93a:	2109      	movs	r1, #9
 800c93c:	f7ff ff8e 	bl	800c85c <std>
 800c940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c944:	2202      	movs	r2, #2
 800c946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c94a:	2112      	movs	r1, #18
 800c94c:	f7ff bf86 	b.w	800c85c <std>
 800c950:	200084ec 	.word	0x200084ec
 800c954:	200083b4 	.word	0x200083b4
 800c958:	0800c8c9 	.word	0x0800c8c9

0800c95c <__sfp_lock_acquire>:
 800c95c:	4801      	ldr	r0, [pc, #4]	@ (800c964 <__sfp_lock_acquire+0x8>)
 800c95e:	f000 b918 	b.w	800cb92 <__retarget_lock_acquire_recursive>
 800c962:	bf00      	nop
 800c964:	200084f5 	.word	0x200084f5

0800c968 <__sfp_lock_release>:
 800c968:	4801      	ldr	r0, [pc, #4]	@ (800c970 <__sfp_lock_release+0x8>)
 800c96a:	f000 b913 	b.w	800cb94 <__retarget_lock_release_recursive>
 800c96e:	bf00      	nop
 800c970:	200084f5 	.word	0x200084f5

0800c974 <__sinit>:
 800c974:	b510      	push	{r4, lr}
 800c976:	4604      	mov	r4, r0
 800c978:	f7ff fff0 	bl	800c95c <__sfp_lock_acquire>
 800c97c:	6a23      	ldr	r3, [r4, #32]
 800c97e:	b11b      	cbz	r3, 800c988 <__sinit+0x14>
 800c980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c984:	f7ff bff0 	b.w	800c968 <__sfp_lock_release>
 800c988:	4b04      	ldr	r3, [pc, #16]	@ (800c99c <__sinit+0x28>)
 800c98a:	6223      	str	r3, [r4, #32]
 800c98c:	4b04      	ldr	r3, [pc, #16]	@ (800c9a0 <__sinit+0x2c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1f5      	bne.n	800c980 <__sinit+0xc>
 800c994:	f7ff ffc4 	bl	800c920 <global_stdio_init.part.0>
 800c998:	e7f2      	b.n	800c980 <__sinit+0xc>
 800c99a:	bf00      	nop
 800c99c:	0800c8e1 	.word	0x0800c8e1
 800c9a0:	200084ec 	.word	0x200084ec

0800c9a4 <_fwalk_sglue>:
 800c9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	4688      	mov	r8, r1
 800c9ac:	4614      	mov	r4, r2
 800c9ae:	2600      	movs	r6, #0
 800c9b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9b4:	f1b9 0901 	subs.w	r9, r9, #1
 800c9b8:	d505      	bpl.n	800c9c6 <_fwalk_sglue+0x22>
 800c9ba:	6824      	ldr	r4, [r4, #0]
 800c9bc:	2c00      	cmp	r4, #0
 800c9be:	d1f7      	bne.n	800c9b0 <_fwalk_sglue+0xc>
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c6:	89ab      	ldrh	r3, [r5, #12]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d907      	bls.n	800c9dc <_fwalk_sglue+0x38>
 800c9cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	d003      	beq.n	800c9dc <_fwalk_sglue+0x38>
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	47c0      	blx	r8
 800c9da:	4306      	orrs	r6, r0
 800c9dc:	3568      	adds	r5, #104	@ 0x68
 800c9de:	e7e9      	b.n	800c9b4 <_fwalk_sglue+0x10>

0800c9e0 <iprintf>:
 800c9e0:	b40f      	push	{r0, r1, r2, r3}
 800c9e2:	b507      	push	{r0, r1, r2, lr}
 800c9e4:	4906      	ldr	r1, [pc, #24]	@ (800ca00 <iprintf+0x20>)
 800c9e6:	ab04      	add	r3, sp, #16
 800c9e8:	6808      	ldr	r0, [r1, #0]
 800c9ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ee:	6881      	ldr	r1, [r0, #8]
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	f000 fa27 	bl	800ce44 <_vfiprintf_r>
 800c9f6:	b003      	add	sp, #12
 800c9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9fc:	b004      	add	sp, #16
 800c9fe:	4770      	bx	lr
 800ca00:	20000020 	.word	0x20000020

0800ca04 <__sread>:
 800ca04:	b510      	push	{r4, lr}
 800ca06:	460c      	mov	r4, r1
 800ca08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca0c:	f000 f878 	bl	800cb00 <_read_r>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	bfab      	itete	ge
 800ca14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca16:	89a3      	ldrhlt	r3, [r4, #12]
 800ca18:	181b      	addge	r3, r3, r0
 800ca1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca1e:	bfac      	ite	ge
 800ca20:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca22:	81a3      	strhlt	r3, [r4, #12]
 800ca24:	bd10      	pop	{r4, pc}

0800ca26 <__swrite>:
 800ca26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2a:	461f      	mov	r7, r3
 800ca2c:	898b      	ldrh	r3, [r1, #12]
 800ca2e:	05db      	lsls	r3, r3, #23
 800ca30:	4605      	mov	r5, r0
 800ca32:	460c      	mov	r4, r1
 800ca34:	4616      	mov	r6, r2
 800ca36:	d505      	bpl.n	800ca44 <__swrite+0x1e>
 800ca38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f000 f84c 	bl	800cadc <_lseek_r>
 800ca44:	89a3      	ldrh	r3, [r4, #12]
 800ca46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca4e:	81a3      	strh	r3, [r4, #12]
 800ca50:	4632      	mov	r2, r6
 800ca52:	463b      	mov	r3, r7
 800ca54:	4628      	mov	r0, r5
 800ca56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5a:	f000 b863 	b.w	800cb24 <_write_r>

0800ca5e <__sseek>:
 800ca5e:	b510      	push	{r4, lr}
 800ca60:	460c      	mov	r4, r1
 800ca62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca66:	f000 f839 	bl	800cadc <_lseek_r>
 800ca6a:	1c43      	adds	r3, r0, #1
 800ca6c:	89a3      	ldrh	r3, [r4, #12]
 800ca6e:	bf15      	itete	ne
 800ca70:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca7a:	81a3      	strheq	r3, [r4, #12]
 800ca7c:	bf18      	it	ne
 800ca7e:	81a3      	strhne	r3, [r4, #12]
 800ca80:	bd10      	pop	{r4, pc}

0800ca82 <__sclose>:
 800ca82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca86:	f000 b819 	b.w	800cabc <_close_r>

0800ca8a <memcmp>:
 800ca8a:	b510      	push	{r4, lr}
 800ca8c:	3901      	subs	r1, #1
 800ca8e:	4402      	add	r2, r0
 800ca90:	4290      	cmp	r0, r2
 800ca92:	d101      	bne.n	800ca98 <memcmp+0xe>
 800ca94:	2000      	movs	r0, #0
 800ca96:	e005      	b.n	800caa4 <memcmp+0x1a>
 800ca98:	7803      	ldrb	r3, [r0, #0]
 800ca9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ca9e:	42a3      	cmp	r3, r4
 800caa0:	d001      	beq.n	800caa6 <memcmp+0x1c>
 800caa2:	1b18      	subs	r0, r3, r4
 800caa4:	bd10      	pop	{r4, pc}
 800caa6:	3001      	adds	r0, #1
 800caa8:	e7f2      	b.n	800ca90 <memcmp+0x6>

0800caaa <memset>:
 800caaa:	4402      	add	r2, r0
 800caac:	4603      	mov	r3, r0
 800caae:	4293      	cmp	r3, r2
 800cab0:	d100      	bne.n	800cab4 <memset+0xa>
 800cab2:	4770      	bx	lr
 800cab4:	f803 1b01 	strb.w	r1, [r3], #1
 800cab8:	e7f9      	b.n	800caae <memset+0x4>
	...

0800cabc <_close_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4d06      	ldr	r5, [pc, #24]	@ (800cad8 <_close_r+0x1c>)
 800cac0:	2300      	movs	r3, #0
 800cac2:	4604      	mov	r4, r0
 800cac4:	4608      	mov	r0, r1
 800cac6:	602b      	str	r3, [r5, #0]
 800cac8:	f7f4 f884 	bl	8000bd4 <_close>
 800cacc:	1c43      	adds	r3, r0, #1
 800cace:	d102      	bne.n	800cad6 <_close_r+0x1a>
 800cad0:	682b      	ldr	r3, [r5, #0]
 800cad2:	b103      	cbz	r3, 800cad6 <_close_r+0x1a>
 800cad4:	6023      	str	r3, [r4, #0]
 800cad6:	bd38      	pop	{r3, r4, r5, pc}
 800cad8:	200084f0 	.word	0x200084f0

0800cadc <_lseek_r>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	4d07      	ldr	r5, [pc, #28]	@ (800cafc <_lseek_r+0x20>)
 800cae0:	4604      	mov	r4, r0
 800cae2:	4608      	mov	r0, r1
 800cae4:	4611      	mov	r1, r2
 800cae6:	2200      	movs	r2, #0
 800cae8:	602a      	str	r2, [r5, #0]
 800caea:	461a      	mov	r2, r3
 800caec:	f7f4 f899 	bl	8000c22 <_lseek>
 800caf0:	1c43      	adds	r3, r0, #1
 800caf2:	d102      	bne.n	800cafa <_lseek_r+0x1e>
 800caf4:	682b      	ldr	r3, [r5, #0]
 800caf6:	b103      	cbz	r3, 800cafa <_lseek_r+0x1e>
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	bd38      	pop	{r3, r4, r5, pc}
 800cafc:	200084f0 	.word	0x200084f0

0800cb00 <_read_r>:
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	4d07      	ldr	r5, [pc, #28]	@ (800cb20 <_read_r+0x20>)
 800cb04:	4604      	mov	r4, r0
 800cb06:	4608      	mov	r0, r1
 800cb08:	4611      	mov	r1, r2
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	602a      	str	r2, [r5, #0]
 800cb0e:	461a      	mov	r2, r3
 800cb10:	f7f4 f827 	bl	8000b62 <_read>
 800cb14:	1c43      	adds	r3, r0, #1
 800cb16:	d102      	bne.n	800cb1e <_read_r+0x1e>
 800cb18:	682b      	ldr	r3, [r5, #0]
 800cb1a:	b103      	cbz	r3, 800cb1e <_read_r+0x1e>
 800cb1c:	6023      	str	r3, [r4, #0]
 800cb1e:	bd38      	pop	{r3, r4, r5, pc}
 800cb20:	200084f0 	.word	0x200084f0

0800cb24 <_write_r>:
 800cb24:	b538      	push	{r3, r4, r5, lr}
 800cb26:	4d07      	ldr	r5, [pc, #28]	@ (800cb44 <_write_r+0x20>)
 800cb28:	4604      	mov	r4, r0
 800cb2a:	4608      	mov	r0, r1
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	2200      	movs	r2, #0
 800cb30:	602a      	str	r2, [r5, #0]
 800cb32:	461a      	mov	r2, r3
 800cb34:	f7f4 f832 	bl	8000b9c <_write>
 800cb38:	1c43      	adds	r3, r0, #1
 800cb3a:	d102      	bne.n	800cb42 <_write_r+0x1e>
 800cb3c:	682b      	ldr	r3, [r5, #0]
 800cb3e:	b103      	cbz	r3, 800cb42 <_write_r+0x1e>
 800cb40:	6023      	str	r3, [r4, #0]
 800cb42:	bd38      	pop	{r3, r4, r5, pc}
 800cb44:	200084f0 	.word	0x200084f0

0800cb48 <__libc_init_array>:
 800cb48:	b570      	push	{r4, r5, r6, lr}
 800cb4a:	4d0d      	ldr	r5, [pc, #52]	@ (800cb80 <__libc_init_array+0x38>)
 800cb4c:	4c0d      	ldr	r4, [pc, #52]	@ (800cb84 <__libc_init_array+0x3c>)
 800cb4e:	1b64      	subs	r4, r4, r5
 800cb50:	10a4      	asrs	r4, r4, #2
 800cb52:	2600      	movs	r6, #0
 800cb54:	42a6      	cmp	r6, r4
 800cb56:	d109      	bne.n	800cb6c <__libc_init_array+0x24>
 800cb58:	4d0b      	ldr	r5, [pc, #44]	@ (800cb88 <__libc_init_array+0x40>)
 800cb5a:	4c0c      	ldr	r4, [pc, #48]	@ (800cb8c <__libc_init_array+0x44>)
 800cb5c:	f000 fe48 	bl	800d7f0 <_init>
 800cb60:	1b64      	subs	r4, r4, r5
 800cb62:	10a4      	asrs	r4, r4, #2
 800cb64:	2600      	movs	r6, #0
 800cb66:	42a6      	cmp	r6, r4
 800cb68:	d105      	bne.n	800cb76 <__libc_init_array+0x2e>
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}
 800cb6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb70:	4798      	blx	r3
 800cb72:	3601      	adds	r6, #1
 800cb74:	e7ee      	b.n	800cb54 <__libc_init_array+0xc>
 800cb76:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb7a:	4798      	blx	r3
 800cb7c:	3601      	adds	r6, #1
 800cb7e:	e7f2      	b.n	800cb66 <__libc_init_array+0x1e>
 800cb80:	080103cc 	.word	0x080103cc
 800cb84:	080103cc 	.word	0x080103cc
 800cb88:	080103cc 	.word	0x080103cc
 800cb8c:	080103d0 	.word	0x080103d0

0800cb90 <__retarget_lock_init_recursive>:
 800cb90:	4770      	bx	lr

0800cb92 <__retarget_lock_acquire_recursive>:
 800cb92:	4770      	bx	lr

0800cb94 <__retarget_lock_release_recursive>:
 800cb94:	4770      	bx	lr

0800cb96 <memcpy>:
 800cb96:	440a      	add	r2, r1
 800cb98:	4291      	cmp	r1, r2
 800cb9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb9e:	d100      	bne.n	800cba2 <memcpy+0xc>
 800cba0:	4770      	bx	lr
 800cba2:	b510      	push	{r4, lr}
 800cba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbac:	4291      	cmp	r1, r2
 800cbae:	d1f9      	bne.n	800cba4 <memcpy+0xe>
 800cbb0:	bd10      	pop	{r4, pc}
	...

0800cbb4 <__assert_func>:
 800cbb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbb6:	4614      	mov	r4, r2
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4b09      	ldr	r3, [pc, #36]	@ (800cbe0 <__assert_func+0x2c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	68d8      	ldr	r0, [r3, #12]
 800cbc2:	b14c      	cbz	r4, 800cbd8 <__assert_func+0x24>
 800cbc4:	4b07      	ldr	r3, [pc, #28]	@ (800cbe4 <__assert_func+0x30>)
 800cbc6:	9100      	str	r1, [sp, #0]
 800cbc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbcc:	4906      	ldr	r1, [pc, #24]	@ (800cbe8 <__assert_func+0x34>)
 800cbce:	462b      	mov	r3, r5
 800cbd0:	f000 fc88 	bl	800d4e4 <fiprintf>
 800cbd4:	f000 fd3c 	bl	800d650 <abort>
 800cbd8:	4b04      	ldr	r3, [pc, #16]	@ (800cbec <__assert_func+0x38>)
 800cbda:	461c      	mov	r4, r3
 800cbdc:	e7f3      	b.n	800cbc6 <__assert_func+0x12>
 800cbde:	bf00      	nop
 800cbe0:	20000020 	.word	0x20000020
 800cbe4:	08010355 	.word	0x08010355
 800cbe8:	08010362 	.word	0x08010362
 800cbec:	08010390 	.word	0x08010390

0800cbf0 <_free_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4605      	mov	r5, r0
 800cbf4:	2900      	cmp	r1, #0
 800cbf6:	d041      	beq.n	800cc7c <_free_r+0x8c>
 800cbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbfc:	1f0c      	subs	r4, r1, #4
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bfb8      	it	lt
 800cc02:	18e4      	addlt	r4, r4, r3
 800cc04:	f000 f8e8 	bl	800cdd8 <__malloc_lock>
 800cc08:	4a1d      	ldr	r2, [pc, #116]	@ (800cc80 <_free_r+0x90>)
 800cc0a:	6813      	ldr	r3, [r2, #0]
 800cc0c:	b933      	cbnz	r3, 800cc1c <_free_r+0x2c>
 800cc0e:	6063      	str	r3, [r4, #4]
 800cc10:	6014      	str	r4, [r2, #0]
 800cc12:	4628      	mov	r0, r5
 800cc14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc18:	f000 b8e4 	b.w	800cde4 <__malloc_unlock>
 800cc1c:	42a3      	cmp	r3, r4
 800cc1e:	d908      	bls.n	800cc32 <_free_r+0x42>
 800cc20:	6820      	ldr	r0, [r4, #0]
 800cc22:	1821      	adds	r1, r4, r0
 800cc24:	428b      	cmp	r3, r1
 800cc26:	bf01      	itttt	eq
 800cc28:	6819      	ldreq	r1, [r3, #0]
 800cc2a:	685b      	ldreq	r3, [r3, #4]
 800cc2c:	1809      	addeq	r1, r1, r0
 800cc2e:	6021      	streq	r1, [r4, #0]
 800cc30:	e7ed      	b.n	800cc0e <_free_r+0x1e>
 800cc32:	461a      	mov	r2, r3
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	b10b      	cbz	r3, 800cc3c <_free_r+0x4c>
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	d9fa      	bls.n	800cc32 <_free_r+0x42>
 800cc3c:	6811      	ldr	r1, [r2, #0]
 800cc3e:	1850      	adds	r0, r2, r1
 800cc40:	42a0      	cmp	r0, r4
 800cc42:	d10b      	bne.n	800cc5c <_free_r+0x6c>
 800cc44:	6820      	ldr	r0, [r4, #0]
 800cc46:	4401      	add	r1, r0
 800cc48:	1850      	adds	r0, r2, r1
 800cc4a:	4283      	cmp	r3, r0
 800cc4c:	6011      	str	r1, [r2, #0]
 800cc4e:	d1e0      	bne.n	800cc12 <_free_r+0x22>
 800cc50:	6818      	ldr	r0, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	6053      	str	r3, [r2, #4]
 800cc56:	4408      	add	r0, r1
 800cc58:	6010      	str	r0, [r2, #0]
 800cc5a:	e7da      	b.n	800cc12 <_free_r+0x22>
 800cc5c:	d902      	bls.n	800cc64 <_free_r+0x74>
 800cc5e:	230c      	movs	r3, #12
 800cc60:	602b      	str	r3, [r5, #0]
 800cc62:	e7d6      	b.n	800cc12 <_free_r+0x22>
 800cc64:	6820      	ldr	r0, [r4, #0]
 800cc66:	1821      	adds	r1, r4, r0
 800cc68:	428b      	cmp	r3, r1
 800cc6a:	bf04      	itt	eq
 800cc6c:	6819      	ldreq	r1, [r3, #0]
 800cc6e:	685b      	ldreq	r3, [r3, #4]
 800cc70:	6063      	str	r3, [r4, #4]
 800cc72:	bf04      	itt	eq
 800cc74:	1809      	addeq	r1, r1, r0
 800cc76:	6021      	streq	r1, [r4, #0]
 800cc78:	6054      	str	r4, [r2, #4]
 800cc7a:	e7ca      	b.n	800cc12 <_free_r+0x22>
 800cc7c:	bd38      	pop	{r3, r4, r5, pc}
 800cc7e:	bf00      	nop
 800cc80:	200084fc 	.word	0x200084fc

0800cc84 <malloc>:
 800cc84:	4b02      	ldr	r3, [pc, #8]	@ (800cc90 <malloc+0xc>)
 800cc86:	4601      	mov	r1, r0
 800cc88:	6818      	ldr	r0, [r3, #0]
 800cc8a:	f000 b825 	b.w	800ccd8 <_malloc_r>
 800cc8e:	bf00      	nop
 800cc90:	20000020 	.word	0x20000020

0800cc94 <sbrk_aligned>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	4e0f      	ldr	r6, [pc, #60]	@ (800ccd4 <sbrk_aligned+0x40>)
 800cc98:	460c      	mov	r4, r1
 800cc9a:	6831      	ldr	r1, [r6, #0]
 800cc9c:	4605      	mov	r5, r0
 800cc9e:	b911      	cbnz	r1, 800cca6 <sbrk_aligned+0x12>
 800cca0:	f000 fcc6 	bl	800d630 <_sbrk_r>
 800cca4:	6030      	str	r0, [r6, #0]
 800cca6:	4621      	mov	r1, r4
 800cca8:	4628      	mov	r0, r5
 800ccaa:	f000 fcc1 	bl	800d630 <_sbrk_r>
 800ccae:	1c43      	adds	r3, r0, #1
 800ccb0:	d103      	bne.n	800ccba <sbrk_aligned+0x26>
 800ccb2:	f04f 34ff 	mov.w	r4, #4294967295
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	bd70      	pop	{r4, r5, r6, pc}
 800ccba:	1cc4      	adds	r4, r0, #3
 800ccbc:	f024 0403 	bic.w	r4, r4, #3
 800ccc0:	42a0      	cmp	r0, r4
 800ccc2:	d0f8      	beq.n	800ccb6 <sbrk_aligned+0x22>
 800ccc4:	1a21      	subs	r1, r4, r0
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f000 fcb2 	bl	800d630 <_sbrk_r>
 800cccc:	3001      	adds	r0, #1
 800ccce:	d1f2      	bne.n	800ccb6 <sbrk_aligned+0x22>
 800ccd0:	e7ef      	b.n	800ccb2 <sbrk_aligned+0x1e>
 800ccd2:	bf00      	nop
 800ccd4:	200084f8 	.word	0x200084f8

0800ccd8 <_malloc_r>:
 800ccd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccdc:	1ccd      	adds	r5, r1, #3
 800ccde:	f025 0503 	bic.w	r5, r5, #3
 800cce2:	3508      	adds	r5, #8
 800cce4:	2d0c      	cmp	r5, #12
 800cce6:	bf38      	it	cc
 800cce8:	250c      	movcc	r5, #12
 800ccea:	2d00      	cmp	r5, #0
 800ccec:	4606      	mov	r6, r0
 800ccee:	db01      	blt.n	800ccf4 <_malloc_r+0x1c>
 800ccf0:	42a9      	cmp	r1, r5
 800ccf2:	d904      	bls.n	800ccfe <_malloc_r+0x26>
 800ccf4:	230c      	movs	r3, #12
 800ccf6:	6033      	str	r3, [r6, #0]
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cdd4 <_malloc_r+0xfc>
 800cd02:	f000 f869 	bl	800cdd8 <__malloc_lock>
 800cd06:	f8d8 3000 	ldr.w	r3, [r8]
 800cd0a:	461c      	mov	r4, r3
 800cd0c:	bb44      	cbnz	r4, 800cd60 <_malloc_r+0x88>
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4630      	mov	r0, r6
 800cd12:	f7ff ffbf 	bl	800cc94 <sbrk_aligned>
 800cd16:	1c43      	adds	r3, r0, #1
 800cd18:	4604      	mov	r4, r0
 800cd1a:	d158      	bne.n	800cdce <_malloc_r+0xf6>
 800cd1c:	f8d8 4000 	ldr.w	r4, [r8]
 800cd20:	4627      	mov	r7, r4
 800cd22:	2f00      	cmp	r7, #0
 800cd24:	d143      	bne.n	800cdae <_malloc_r+0xd6>
 800cd26:	2c00      	cmp	r4, #0
 800cd28:	d04b      	beq.n	800cdc2 <_malloc_r+0xea>
 800cd2a:	6823      	ldr	r3, [r4, #0]
 800cd2c:	4639      	mov	r1, r7
 800cd2e:	4630      	mov	r0, r6
 800cd30:	eb04 0903 	add.w	r9, r4, r3
 800cd34:	f000 fc7c 	bl	800d630 <_sbrk_r>
 800cd38:	4581      	cmp	r9, r0
 800cd3a:	d142      	bne.n	800cdc2 <_malloc_r+0xea>
 800cd3c:	6821      	ldr	r1, [r4, #0]
 800cd3e:	1a6d      	subs	r5, r5, r1
 800cd40:	4629      	mov	r1, r5
 800cd42:	4630      	mov	r0, r6
 800cd44:	f7ff ffa6 	bl	800cc94 <sbrk_aligned>
 800cd48:	3001      	adds	r0, #1
 800cd4a:	d03a      	beq.n	800cdc2 <_malloc_r+0xea>
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	442b      	add	r3, r5
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	f8d8 3000 	ldr.w	r3, [r8]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	bb62      	cbnz	r2, 800cdb4 <_malloc_r+0xdc>
 800cd5a:	f8c8 7000 	str.w	r7, [r8]
 800cd5e:	e00f      	b.n	800cd80 <_malloc_r+0xa8>
 800cd60:	6822      	ldr	r2, [r4, #0]
 800cd62:	1b52      	subs	r2, r2, r5
 800cd64:	d420      	bmi.n	800cda8 <_malloc_r+0xd0>
 800cd66:	2a0b      	cmp	r2, #11
 800cd68:	d917      	bls.n	800cd9a <_malloc_r+0xc2>
 800cd6a:	1961      	adds	r1, r4, r5
 800cd6c:	42a3      	cmp	r3, r4
 800cd6e:	6025      	str	r5, [r4, #0]
 800cd70:	bf18      	it	ne
 800cd72:	6059      	strne	r1, [r3, #4]
 800cd74:	6863      	ldr	r3, [r4, #4]
 800cd76:	bf08      	it	eq
 800cd78:	f8c8 1000 	streq.w	r1, [r8]
 800cd7c:	5162      	str	r2, [r4, r5]
 800cd7e:	604b      	str	r3, [r1, #4]
 800cd80:	4630      	mov	r0, r6
 800cd82:	f000 f82f 	bl	800cde4 <__malloc_unlock>
 800cd86:	f104 000b 	add.w	r0, r4, #11
 800cd8a:	1d23      	adds	r3, r4, #4
 800cd8c:	f020 0007 	bic.w	r0, r0, #7
 800cd90:	1ac2      	subs	r2, r0, r3
 800cd92:	bf1c      	itt	ne
 800cd94:	1a1b      	subne	r3, r3, r0
 800cd96:	50a3      	strne	r3, [r4, r2]
 800cd98:	e7af      	b.n	800ccfa <_malloc_r+0x22>
 800cd9a:	6862      	ldr	r2, [r4, #4]
 800cd9c:	42a3      	cmp	r3, r4
 800cd9e:	bf0c      	ite	eq
 800cda0:	f8c8 2000 	streq.w	r2, [r8]
 800cda4:	605a      	strne	r2, [r3, #4]
 800cda6:	e7eb      	b.n	800cd80 <_malloc_r+0xa8>
 800cda8:	4623      	mov	r3, r4
 800cdaa:	6864      	ldr	r4, [r4, #4]
 800cdac:	e7ae      	b.n	800cd0c <_malloc_r+0x34>
 800cdae:	463c      	mov	r4, r7
 800cdb0:	687f      	ldr	r7, [r7, #4]
 800cdb2:	e7b6      	b.n	800cd22 <_malloc_r+0x4a>
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	d1fb      	bne.n	800cdb4 <_malloc_r+0xdc>
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	6053      	str	r3, [r2, #4]
 800cdc0:	e7de      	b.n	800cd80 <_malloc_r+0xa8>
 800cdc2:	230c      	movs	r3, #12
 800cdc4:	6033      	str	r3, [r6, #0]
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	f000 f80c 	bl	800cde4 <__malloc_unlock>
 800cdcc:	e794      	b.n	800ccf8 <_malloc_r+0x20>
 800cdce:	6005      	str	r5, [r0, #0]
 800cdd0:	e7d6      	b.n	800cd80 <_malloc_r+0xa8>
 800cdd2:	bf00      	nop
 800cdd4:	200084fc 	.word	0x200084fc

0800cdd8 <__malloc_lock>:
 800cdd8:	4801      	ldr	r0, [pc, #4]	@ (800cde0 <__malloc_lock+0x8>)
 800cdda:	f7ff beda 	b.w	800cb92 <__retarget_lock_acquire_recursive>
 800cdde:	bf00      	nop
 800cde0:	200084f4 	.word	0x200084f4

0800cde4 <__malloc_unlock>:
 800cde4:	4801      	ldr	r0, [pc, #4]	@ (800cdec <__malloc_unlock+0x8>)
 800cde6:	f7ff bed5 	b.w	800cb94 <__retarget_lock_release_recursive>
 800cdea:	bf00      	nop
 800cdec:	200084f4 	.word	0x200084f4

0800cdf0 <__sfputc_r>:
 800cdf0:	6893      	ldr	r3, [r2, #8]
 800cdf2:	3b01      	subs	r3, #1
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	b410      	push	{r4}
 800cdf8:	6093      	str	r3, [r2, #8]
 800cdfa:	da08      	bge.n	800ce0e <__sfputc_r+0x1e>
 800cdfc:	6994      	ldr	r4, [r2, #24]
 800cdfe:	42a3      	cmp	r3, r4
 800ce00:	db01      	blt.n	800ce06 <__sfputc_r+0x16>
 800ce02:	290a      	cmp	r1, #10
 800ce04:	d103      	bne.n	800ce0e <__sfputc_r+0x1e>
 800ce06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce0a:	f000 bb7d 	b.w	800d508 <__swbuf_r>
 800ce0e:	6813      	ldr	r3, [r2, #0]
 800ce10:	1c58      	adds	r0, r3, #1
 800ce12:	6010      	str	r0, [r2, #0]
 800ce14:	7019      	strb	r1, [r3, #0]
 800ce16:	4608      	mov	r0, r1
 800ce18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce1c:	4770      	bx	lr

0800ce1e <__sfputs_r>:
 800ce1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce20:	4606      	mov	r6, r0
 800ce22:	460f      	mov	r7, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	18d5      	adds	r5, r2, r3
 800ce28:	42ac      	cmp	r4, r5
 800ce2a:	d101      	bne.n	800ce30 <__sfputs_r+0x12>
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	e007      	b.n	800ce40 <__sfputs_r+0x22>
 800ce30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce34:	463a      	mov	r2, r7
 800ce36:	4630      	mov	r0, r6
 800ce38:	f7ff ffda 	bl	800cdf0 <__sfputc_r>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d1f3      	bne.n	800ce28 <__sfputs_r+0xa>
 800ce40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce44 <_vfiprintf_r>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	460d      	mov	r5, r1
 800ce4a:	b09d      	sub	sp, #116	@ 0x74
 800ce4c:	4614      	mov	r4, r2
 800ce4e:	4698      	mov	r8, r3
 800ce50:	4606      	mov	r6, r0
 800ce52:	b118      	cbz	r0, 800ce5c <_vfiprintf_r+0x18>
 800ce54:	6a03      	ldr	r3, [r0, #32]
 800ce56:	b90b      	cbnz	r3, 800ce5c <_vfiprintf_r+0x18>
 800ce58:	f7ff fd8c 	bl	800c974 <__sinit>
 800ce5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce5e:	07d9      	lsls	r1, r3, #31
 800ce60:	d405      	bmi.n	800ce6e <_vfiprintf_r+0x2a>
 800ce62:	89ab      	ldrh	r3, [r5, #12]
 800ce64:	059a      	lsls	r2, r3, #22
 800ce66:	d402      	bmi.n	800ce6e <_vfiprintf_r+0x2a>
 800ce68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce6a:	f7ff fe92 	bl	800cb92 <__retarget_lock_acquire_recursive>
 800ce6e:	89ab      	ldrh	r3, [r5, #12]
 800ce70:	071b      	lsls	r3, r3, #28
 800ce72:	d501      	bpl.n	800ce78 <_vfiprintf_r+0x34>
 800ce74:	692b      	ldr	r3, [r5, #16]
 800ce76:	b99b      	cbnz	r3, 800cea0 <_vfiprintf_r+0x5c>
 800ce78:	4629      	mov	r1, r5
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f000 fb82 	bl	800d584 <__swsetup_r>
 800ce80:	b170      	cbz	r0, 800cea0 <_vfiprintf_r+0x5c>
 800ce82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce84:	07dc      	lsls	r4, r3, #31
 800ce86:	d504      	bpl.n	800ce92 <_vfiprintf_r+0x4e>
 800ce88:	f04f 30ff 	mov.w	r0, #4294967295
 800ce8c:	b01d      	add	sp, #116	@ 0x74
 800ce8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce92:	89ab      	ldrh	r3, [r5, #12]
 800ce94:	0598      	lsls	r0, r3, #22
 800ce96:	d4f7      	bmi.n	800ce88 <_vfiprintf_r+0x44>
 800ce98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce9a:	f7ff fe7b 	bl	800cb94 <__retarget_lock_release_recursive>
 800ce9e:	e7f3      	b.n	800ce88 <_vfiprintf_r+0x44>
 800cea0:	2300      	movs	r3, #0
 800cea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cea4:	2320      	movs	r3, #32
 800cea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ceaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800ceae:	2330      	movs	r3, #48	@ 0x30
 800ceb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d060 <_vfiprintf_r+0x21c>
 800ceb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ceb8:	f04f 0901 	mov.w	r9, #1
 800cebc:	4623      	mov	r3, r4
 800cebe:	469a      	mov	sl, r3
 800cec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cec4:	b10a      	cbz	r2, 800ceca <_vfiprintf_r+0x86>
 800cec6:	2a25      	cmp	r2, #37	@ 0x25
 800cec8:	d1f9      	bne.n	800cebe <_vfiprintf_r+0x7a>
 800ceca:	ebba 0b04 	subs.w	fp, sl, r4
 800cece:	d00b      	beq.n	800cee8 <_vfiprintf_r+0xa4>
 800ced0:	465b      	mov	r3, fp
 800ced2:	4622      	mov	r2, r4
 800ced4:	4629      	mov	r1, r5
 800ced6:	4630      	mov	r0, r6
 800ced8:	f7ff ffa1 	bl	800ce1e <__sfputs_r>
 800cedc:	3001      	adds	r0, #1
 800cede:	f000 80a7 	beq.w	800d030 <_vfiprintf_r+0x1ec>
 800cee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cee4:	445a      	add	r2, fp
 800cee6:	9209      	str	r2, [sp, #36]	@ 0x24
 800cee8:	f89a 3000 	ldrb.w	r3, [sl]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f000 809f 	beq.w	800d030 <_vfiprintf_r+0x1ec>
 800cef2:	2300      	movs	r3, #0
 800cef4:	f04f 32ff 	mov.w	r2, #4294967295
 800cef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cefc:	f10a 0a01 	add.w	sl, sl, #1
 800cf00:	9304      	str	r3, [sp, #16]
 800cf02:	9307      	str	r3, [sp, #28]
 800cf04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf08:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf0a:	4654      	mov	r4, sl
 800cf0c:	2205      	movs	r2, #5
 800cf0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf12:	4853      	ldr	r0, [pc, #332]	@ (800d060 <_vfiprintf_r+0x21c>)
 800cf14:	f7f3 f95c 	bl	80001d0 <memchr>
 800cf18:	9a04      	ldr	r2, [sp, #16]
 800cf1a:	b9d8      	cbnz	r0, 800cf54 <_vfiprintf_r+0x110>
 800cf1c:	06d1      	lsls	r1, r2, #27
 800cf1e:	bf44      	itt	mi
 800cf20:	2320      	movmi	r3, #32
 800cf22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf26:	0713      	lsls	r3, r2, #28
 800cf28:	bf44      	itt	mi
 800cf2a:	232b      	movmi	r3, #43	@ 0x2b
 800cf2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf30:	f89a 3000 	ldrb.w	r3, [sl]
 800cf34:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf36:	d015      	beq.n	800cf64 <_vfiprintf_r+0x120>
 800cf38:	9a07      	ldr	r2, [sp, #28]
 800cf3a:	4654      	mov	r4, sl
 800cf3c:	2000      	movs	r0, #0
 800cf3e:	f04f 0c0a 	mov.w	ip, #10
 800cf42:	4621      	mov	r1, r4
 800cf44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf48:	3b30      	subs	r3, #48	@ 0x30
 800cf4a:	2b09      	cmp	r3, #9
 800cf4c:	d94b      	bls.n	800cfe6 <_vfiprintf_r+0x1a2>
 800cf4e:	b1b0      	cbz	r0, 800cf7e <_vfiprintf_r+0x13a>
 800cf50:	9207      	str	r2, [sp, #28]
 800cf52:	e014      	b.n	800cf7e <_vfiprintf_r+0x13a>
 800cf54:	eba0 0308 	sub.w	r3, r0, r8
 800cf58:	fa09 f303 	lsl.w	r3, r9, r3
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	9304      	str	r3, [sp, #16]
 800cf60:	46a2      	mov	sl, r4
 800cf62:	e7d2      	b.n	800cf0a <_vfiprintf_r+0xc6>
 800cf64:	9b03      	ldr	r3, [sp, #12]
 800cf66:	1d19      	adds	r1, r3, #4
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	9103      	str	r1, [sp, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	bfbb      	ittet	lt
 800cf70:	425b      	neglt	r3, r3
 800cf72:	f042 0202 	orrlt.w	r2, r2, #2
 800cf76:	9307      	strge	r3, [sp, #28]
 800cf78:	9307      	strlt	r3, [sp, #28]
 800cf7a:	bfb8      	it	lt
 800cf7c:	9204      	strlt	r2, [sp, #16]
 800cf7e:	7823      	ldrb	r3, [r4, #0]
 800cf80:	2b2e      	cmp	r3, #46	@ 0x2e
 800cf82:	d10a      	bne.n	800cf9a <_vfiprintf_r+0x156>
 800cf84:	7863      	ldrb	r3, [r4, #1]
 800cf86:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf88:	d132      	bne.n	800cff0 <_vfiprintf_r+0x1ac>
 800cf8a:	9b03      	ldr	r3, [sp, #12]
 800cf8c:	1d1a      	adds	r2, r3, #4
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	9203      	str	r2, [sp, #12]
 800cf92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf96:	3402      	adds	r4, #2
 800cf98:	9305      	str	r3, [sp, #20]
 800cf9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d070 <_vfiprintf_r+0x22c>
 800cf9e:	7821      	ldrb	r1, [r4, #0]
 800cfa0:	2203      	movs	r2, #3
 800cfa2:	4650      	mov	r0, sl
 800cfa4:	f7f3 f914 	bl	80001d0 <memchr>
 800cfa8:	b138      	cbz	r0, 800cfba <_vfiprintf_r+0x176>
 800cfaa:	9b04      	ldr	r3, [sp, #16]
 800cfac:	eba0 000a 	sub.w	r0, r0, sl
 800cfb0:	2240      	movs	r2, #64	@ 0x40
 800cfb2:	4082      	lsls	r2, r0
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	3401      	adds	r4, #1
 800cfb8:	9304      	str	r3, [sp, #16]
 800cfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbe:	4829      	ldr	r0, [pc, #164]	@ (800d064 <_vfiprintf_r+0x220>)
 800cfc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cfc4:	2206      	movs	r2, #6
 800cfc6:	f7f3 f903 	bl	80001d0 <memchr>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d03f      	beq.n	800d04e <_vfiprintf_r+0x20a>
 800cfce:	4b26      	ldr	r3, [pc, #152]	@ (800d068 <_vfiprintf_r+0x224>)
 800cfd0:	bb1b      	cbnz	r3, 800d01a <_vfiprintf_r+0x1d6>
 800cfd2:	9b03      	ldr	r3, [sp, #12]
 800cfd4:	3307      	adds	r3, #7
 800cfd6:	f023 0307 	bic.w	r3, r3, #7
 800cfda:	3308      	adds	r3, #8
 800cfdc:	9303      	str	r3, [sp, #12]
 800cfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfe0:	443b      	add	r3, r7
 800cfe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfe4:	e76a      	b.n	800cebc <_vfiprintf_r+0x78>
 800cfe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfea:	460c      	mov	r4, r1
 800cfec:	2001      	movs	r0, #1
 800cfee:	e7a8      	b.n	800cf42 <_vfiprintf_r+0xfe>
 800cff0:	2300      	movs	r3, #0
 800cff2:	3401      	adds	r4, #1
 800cff4:	9305      	str	r3, [sp, #20]
 800cff6:	4619      	mov	r1, r3
 800cff8:	f04f 0c0a 	mov.w	ip, #10
 800cffc:	4620      	mov	r0, r4
 800cffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d002:	3a30      	subs	r2, #48	@ 0x30
 800d004:	2a09      	cmp	r2, #9
 800d006:	d903      	bls.n	800d010 <_vfiprintf_r+0x1cc>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d0c6      	beq.n	800cf9a <_vfiprintf_r+0x156>
 800d00c:	9105      	str	r1, [sp, #20]
 800d00e:	e7c4      	b.n	800cf9a <_vfiprintf_r+0x156>
 800d010:	fb0c 2101 	mla	r1, ip, r1, r2
 800d014:	4604      	mov	r4, r0
 800d016:	2301      	movs	r3, #1
 800d018:	e7f0      	b.n	800cffc <_vfiprintf_r+0x1b8>
 800d01a:	ab03      	add	r3, sp, #12
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	462a      	mov	r2, r5
 800d020:	4b12      	ldr	r3, [pc, #72]	@ (800d06c <_vfiprintf_r+0x228>)
 800d022:	a904      	add	r1, sp, #16
 800d024:	4630      	mov	r0, r6
 800d026:	f3af 8000 	nop.w
 800d02a:	4607      	mov	r7, r0
 800d02c:	1c78      	adds	r0, r7, #1
 800d02e:	d1d6      	bne.n	800cfde <_vfiprintf_r+0x19a>
 800d030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d032:	07d9      	lsls	r1, r3, #31
 800d034:	d405      	bmi.n	800d042 <_vfiprintf_r+0x1fe>
 800d036:	89ab      	ldrh	r3, [r5, #12]
 800d038:	059a      	lsls	r2, r3, #22
 800d03a:	d402      	bmi.n	800d042 <_vfiprintf_r+0x1fe>
 800d03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d03e:	f7ff fda9 	bl	800cb94 <__retarget_lock_release_recursive>
 800d042:	89ab      	ldrh	r3, [r5, #12]
 800d044:	065b      	lsls	r3, r3, #25
 800d046:	f53f af1f 	bmi.w	800ce88 <_vfiprintf_r+0x44>
 800d04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d04c:	e71e      	b.n	800ce8c <_vfiprintf_r+0x48>
 800d04e:	ab03      	add	r3, sp, #12
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	462a      	mov	r2, r5
 800d054:	4b05      	ldr	r3, [pc, #20]	@ (800d06c <_vfiprintf_r+0x228>)
 800d056:	a904      	add	r1, sp, #16
 800d058:	4630      	mov	r0, r6
 800d05a:	f000 f879 	bl	800d150 <_printf_i>
 800d05e:	e7e4      	b.n	800d02a <_vfiprintf_r+0x1e6>
 800d060:	08010391 	.word	0x08010391
 800d064:	0801039b 	.word	0x0801039b
 800d068:	00000000 	.word	0x00000000
 800d06c:	0800ce1f 	.word	0x0800ce1f
 800d070:	08010397 	.word	0x08010397

0800d074 <_printf_common>:
 800d074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d078:	4616      	mov	r6, r2
 800d07a:	4698      	mov	r8, r3
 800d07c:	688a      	ldr	r2, [r1, #8]
 800d07e:	690b      	ldr	r3, [r1, #16]
 800d080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d084:	4293      	cmp	r3, r2
 800d086:	bfb8      	it	lt
 800d088:	4613      	movlt	r3, r2
 800d08a:	6033      	str	r3, [r6, #0]
 800d08c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d090:	4607      	mov	r7, r0
 800d092:	460c      	mov	r4, r1
 800d094:	b10a      	cbz	r2, 800d09a <_printf_common+0x26>
 800d096:	3301      	adds	r3, #1
 800d098:	6033      	str	r3, [r6, #0]
 800d09a:	6823      	ldr	r3, [r4, #0]
 800d09c:	0699      	lsls	r1, r3, #26
 800d09e:	bf42      	ittt	mi
 800d0a0:	6833      	ldrmi	r3, [r6, #0]
 800d0a2:	3302      	addmi	r3, #2
 800d0a4:	6033      	strmi	r3, [r6, #0]
 800d0a6:	6825      	ldr	r5, [r4, #0]
 800d0a8:	f015 0506 	ands.w	r5, r5, #6
 800d0ac:	d106      	bne.n	800d0bc <_printf_common+0x48>
 800d0ae:	f104 0a19 	add.w	sl, r4, #25
 800d0b2:	68e3      	ldr	r3, [r4, #12]
 800d0b4:	6832      	ldr	r2, [r6, #0]
 800d0b6:	1a9b      	subs	r3, r3, r2
 800d0b8:	42ab      	cmp	r3, r5
 800d0ba:	dc26      	bgt.n	800d10a <_printf_common+0x96>
 800d0bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d0c0:	6822      	ldr	r2, [r4, #0]
 800d0c2:	3b00      	subs	r3, #0
 800d0c4:	bf18      	it	ne
 800d0c6:	2301      	movne	r3, #1
 800d0c8:	0692      	lsls	r2, r2, #26
 800d0ca:	d42b      	bmi.n	800d124 <_printf_common+0xb0>
 800d0cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d0d0:	4641      	mov	r1, r8
 800d0d2:	4638      	mov	r0, r7
 800d0d4:	47c8      	blx	r9
 800d0d6:	3001      	adds	r0, #1
 800d0d8:	d01e      	beq.n	800d118 <_printf_common+0xa4>
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	6922      	ldr	r2, [r4, #16]
 800d0de:	f003 0306 	and.w	r3, r3, #6
 800d0e2:	2b04      	cmp	r3, #4
 800d0e4:	bf02      	ittt	eq
 800d0e6:	68e5      	ldreq	r5, [r4, #12]
 800d0e8:	6833      	ldreq	r3, [r6, #0]
 800d0ea:	1aed      	subeq	r5, r5, r3
 800d0ec:	68a3      	ldr	r3, [r4, #8]
 800d0ee:	bf0c      	ite	eq
 800d0f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0f4:	2500      	movne	r5, #0
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	bfc4      	itt	gt
 800d0fa:	1a9b      	subgt	r3, r3, r2
 800d0fc:	18ed      	addgt	r5, r5, r3
 800d0fe:	2600      	movs	r6, #0
 800d100:	341a      	adds	r4, #26
 800d102:	42b5      	cmp	r5, r6
 800d104:	d11a      	bne.n	800d13c <_printf_common+0xc8>
 800d106:	2000      	movs	r0, #0
 800d108:	e008      	b.n	800d11c <_printf_common+0xa8>
 800d10a:	2301      	movs	r3, #1
 800d10c:	4652      	mov	r2, sl
 800d10e:	4641      	mov	r1, r8
 800d110:	4638      	mov	r0, r7
 800d112:	47c8      	blx	r9
 800d114:	3001      	adds	r0, #1
 800d116:	d103      	bne.n	800d120 <_printf_common+0xac>
 800d118:	f04f 30ff 	mov.w	r0, #4294967295
 800d11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d120:	3501      	adds	r5, #1
 800d122:	e7c6      	b.n	800d0b2 <_printf_common+0x3e>
 800d124:	18e1      	adds	r1, r4, r3
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	2030      	movs	r0, #48	@ 0x30
 800d12a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d12e:	4422      	add	r2, r4
 800d130:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d138:	3302      	adds	r3, #2
 800d13a:	e7c7      	b.n	800d0cc <_printf_common+0x58>
 800d13c:	2301      	movs	r3, #1
 800d13e:	4622      	mov	r2, r4
 800d140:	4641      	mov	r1, r8
 800d142:	4638      	mov	r0, r7
 800d144:	47c8      	blx	r9
 800d146:	3001      	adds	r0, #1
 800d148:	d0e6      	beq.n	800d118 <_printf_common+0xa4>
 800d14a:	3601      	adds	r6, #1
 800d14c:	e7d9      	b.n	800d102 <_printf_common+0x8e>
	...

0800d150 <_printf_i>:
 800d150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d154:	7e0f      	ldrb	r7, [r1, #24]
 800d156:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d158:	2f78      	cmp	r7, #120	@ 0x78
 800d15a:	4691      	mov	r9, r2
 800d15c:	4680      	mov	r8, r0
 800d15e:	460c      	mov	r4, r1
 800d160:	469a      	mov	sl, r3
 800d162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d166:	d807      	bhi.n	800d178 <_printf_i+0x28>
 800d168:	2f62      	cmp	r7, #98	@ 0x62
 800d16a:	d80a      	bhi.n	800d182 <_printf_i+0x32>
 800d16c:	2f00      	cmp	r7, #0
 800d16e:	f000 80d1 	beq.w	800d314 <_printf_i+0x1c4>
 800d172:	2f58      	cmp	r7, #88	@ 0x58
 800d174:	f000 80b8 	beq.w	800d2e8 <_printf_i+0x198>
 800d178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d17c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d180:	e03a      	b.n	800d1f8 <_printf_i+0xa8>
 800d182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d186:	2b15      	cmp	r3, #21
 800d188:	d8f6      	bhi.n	800d178 <_printf_i+0x28>
 800d18a:	a101      	add	r1, pc, #4	@ (adr r1, 800d190 <_printf_i+0x40>)
 800d18c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d190:	0800d1e9 	.word	0x0800d1e9
 800d194:	0800d1fd 	.word	0x0800d1fd
 800d198:	0800d179 	.word	0x0800d179
 800d19c:	0800d179 	.word	0x0800d179
 800d1a0:	0800d179 	.word	0x0800d179
 800d1a4:	0800d179 	.word	0x0800d179
 800d1a8:	0800d1fd 	.word	0x0800d1fd
 800d1ac:	0800d179 	.word	0x0800d179
 800d1b0:	0800d179 	.word	0x0800d179
 800d1b4:	0800d179 	.word	0x0800d179
 800d1b8:	0800d179 	.word	0x0800d179
 800d1bc:	0800d2fb 	.word	0x0800d2fb
 800d1c0:	0800d227 	.word	0x0800d227
 800d1c4:	0800d2b5 	.word	0x0800d2b5
 800d1c8:	0800d179 	.word	0x0800d179
 800d1cc:	0800d179 	.word	0x0800d179
 800d1d0:	0800d31d 	.word	0x0800d31d
 800d1d4:	0800d179 	.word	0x0800d179
 800d1d8:	0800d227 	.word	0x0800d227
 800d1dc:	0800d179 	.word	0x0800d179
 800d1e0:	0800d179 	.word	0x0800d179
 800d1e4:	0800d2bd 	.word	0x0800d2bd
 800d1e8:	6833      	ldr	r3, [r6, #0]
 800d1ea:	1d1a      	adds	r2, r3, #4
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6032      	str	r2, [r6, #0]
 800d1f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	e09c      	b.n	800d336 <_printf_i+0x1e6>
 800d1fc:	6833      	ldr	r3, [r6, #0]
 800d1fe:	6820      	ldr	r0, [r4, #0]
 800d200:	1d19      	adds	r1, r3, #4
 800d202:	6031      	str	r1, [r6, #0]
 800d204:	0606      	lsls	r6, r0, #24
 800d206:	d501      	bpl.n	800d20c <_printf_i+0xbc>
 800d208:	681d      	ldr	r5, [r3, #0]
 800d20a:	e003      	b.n	800d214 <_printf_i+0xc4>
 800d20c:	0645      	lsls	r5, r0, #25
 800d20e:	d5fb      	bpl.n	800d208 <_printf_i+0xb8>
 800d210:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d214:	2d00      	cmp	r5, #0
 800d216:	da03      	bge.n	800d220 <_printf_i+0xd0>
 800d218:	232d      	movs	r3, #45	@ 0x2d
 800d21a:	426d      	negs	r5, r5
 800d21c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d220:	4858      	ldr	r0, [pc, #352]	@ (800d384 <_printf_i+0x234>)
 800d222:	230a      	movs	r3, #10
 800d224:	e011      	b.n	800d24a <_printf_i+0xfa>
 800d226:	6821      	ldr	r1, [r4, #0]
 800d228:	6833      	ldr	r3, [r6, #0]
 800d22a:	0608      	lsls	r0, r1, #24
 800d22c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d230:	d402      	bmi.n	800d238 <_printf_i+0xe8>
 800d232:	0649      	lsls	r1, r1, #25
 800d234:	bf48      	it	mi
 800d236:	b2ad      	uxthmi	r5, r5
 800d238:	2f6f      	cmp	r7, #111	@ 0x6f
 800d23a:	4852      	ldr	r0, [pc, #328]	@ (800d384 <_printf_i+0x234>)
 800d23c:	6033      	str	r3, [r6, #0]
 800d23e:	bf14      	ite	ne
 800d240:	230a      	movne	r3, #10
 800d242:	2308      	moveq	r3, #8
 800d244:	2100      	movs	r1, #0
 800d246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d24a:	6866      	ldr	r6, [r4, #4]
 800d24c:	60a6      	str	r6, [r4, #8]
 800d24e:	2e00      	cmp	r6, #0
 800d250:	db05      	blt.n	800d25e <_printf_i+0x10e>
 800d252:	6821      	ldr	r1, [r4, #0]
 800d254:	432e      	orrs	r6, r5
 800d256:	f021 0104 	bic.w	r1, r1, #4
 800d25a:	6021      	str	r1, [r4, #0]
 800d25c:	d04b      	beq.n	800d2f6 <_printf_i+0x1a6>
 800d25e:	4616      	mov	r6, r2
 800d260:	fbb5 f1f3 	udiv	r1, r5, r3
 800d264:	fb03 5711 	mls	r7, r3, r1, r5
 800d268:	5dc7      	ldrb	r7, [r0, r7]
 800d26a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d26e:	462f      	mov	r7, r5
 800d270:	42bb      	cmp	r3, r7
 800d272:	460d      	mov	r5, r1
 800d274:	d9f4      	bls.n	800d260 <_printf_i+0x110>
 800d276:	2b08      	cmp	r3, #8
 800d278:	d10b      	bne.n	800d292 <_printf_i+0x142>
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	07df      	lsls	r7, r3, #31
 800d27e:	d508      	bpl.n	800d292 <_printf_i+0x142>
 800d280:	6923      	ldr	r3, [r4, #16]
 800d282:	6861      	ldr	r1, [r4, #4]
 800d284:	4299      	cmp	r1, r3
 800d286:	bfde      	ittt	le
 800d288:	2330      	movle	r3, #48	@ 0x30
 800d28a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d28e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d292:	1b92      	subs	r2, r2, r6
 800d294:	6122      	str	r2, [r4, #16]
 800d296:	f8cd a000 	str.w	sl, [sp]
 800d29a:	464b      	mov	r3, r9
 800d29c:	aa03      	add	r2, sp, #12
 800d29e:	4621      	mov	r1, r4
 800d2a0:	4640      	mov	r0, r8
 800d2a2:	f7ff fee7 	bl	800d074 <_printf_common>
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	d14a      	bne.n	800d340 <_printf_i+0x1f0>
 800d2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ae:	b004      	add	sp, #16
 800d2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	f043 0320 	orr.w	r3, r3, #32
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	4832      	ldr	r0, [pc, #200]	@ (800d388 <_printf_i+0x238>)
 800d2be:	2778      	movs	r7, #120	@ 0x78
 800d2c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d2c4:	6823      	ldr	r3, [r4, #0]
 800d2c6:	6831      	ldr	r1, [r6, #0]
 800d2c8:	061f      	lsls	r7, r3, #24
 800d2ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800d2ce:	d402      	bmi.n	800d2d6 <_printf_i+0x186>
 800d2d0:	065f      	lsls	r7, r3, #25
 800d2d2:	bf48      	it	mi
 800d2d4:	b2ad      	uxthmi	r5, r5
 800d2d6:	6031      	str	r1, [r6, #0]
 800d2d8:	07d9      	lsls	r1, r3, #31
 800d2da:	bf44      	itt	mi
 800d2dc:	f043 0320 	orrmi.w	r3, r3, #32
 800d2e0:	6023      	strmi	r3, [r4, #0]
 800d2e2:	b11d      	cbz	r5, 800d2ec <_printf_i+0x19c>
 800d2e4:	2310      	movs	r3, #16
 800d2e6:	e7ad      	b.n	800d244 <_printf_i+0xf4>
 800d2e8:	4826      	ldr	r0, [pc, #152]	@ (800d384 <_printf_i+0x234>)
 800d2ea:	e7e9      	b.n	800d2c0 <_printf_i+0x170>
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	f023 0320 	bic.w	r3, r3, #32
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	e7f6      	b.n	800d2e4 <_printf_i+0x194>
 800d2f6:	4616      	mov	r6, r2
 800d2f8:	e7bd      	b.n	800d276 <_printf_i+0x126>
 800d2fa:	6833      	ldr	r3, [r6, #0]
 800d2fc:	6825      	ldr	r5, [r4, #0]
 800d2fe:	6961      	ldr	r1, [r4, #20]
 800d300:	1d18      	adds	r0, r3, #4
 800d302:	6030      	str	r0, [r6, #0]
 800d304:	062e      	lsls	r6, r5, #24
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	d501      	bpl.n	800d30e <_printf_i+0x1be>
 800d30a:	6019      	str	r1, [r3, #0]
 800d30c:	e002      	b.n	800d314 <_printf_i+0x1c4>
 800d30e:	0668      	lsls	r0, r5, #25
 800d310:	d5fb      	bpl.n	800d30a <_printf_i+0x1ba>
 800d312:	8019      	strh	r1, [r3, #0]
 800d314:	2300      	movs	r3, #0
 800d316:	6123      	str	r3, [r4, #16]
 800d318:	4616      	mov	r6, r2
 800d31a:	e7bc      	b.n	800d296 <_printf_i+0x146>
 800d31c:	6833      	ldr	r3, [r6, #0]
 800d31e:	1d1a      	adds	r2, r3, #4
 800d320:	6032      	str	r2, [r6, #0]
 800d322:	681e      	ldr	r6, [r3, #0]
 800d324:	6862      	ldr	r2, [r4, #4]
 800d326:	2100      	movs	r1, #0
 800d328:	4630      	mov	r0, r6
 800d32a:	f7f2 ff51 	bl	80001d0 <memchr>
 800d32e:	b108      	cbz	r0, 800d334 <_printf_i+0x1e4>
 800d330:	1b80      	subs	r0, r0, r6
 800d332:	6060      	str	r0, [r4, #4]
 800d334:	6863      	ldr	r3, [r4, #4]
 800d336:	6123      	str	r3, [r4, #16]
 800d338:	2300      	movs	r3, #0
 800d33a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d33e:	e7aa      	b.n	800d296 <_printf_i+0x146>
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	4632      	mov	r2, r6
 800d344:	4649      	mov	r1, r9
 800d346:	4640      	mov	r0, r8
 800d348:	47d0      	blx	sl
 800d34a:	3001      	adds	r0, #1
 800d34c:	d0ad      	beq.n	800d2aa <_printf_i+0x15a>
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	079b      	lsls	r3, r3, #30
 800d352:	d413      	bmi.n	800d37c <_printf_i+0x22c>
 800d354:	68e0      	ldr	r0, [r4, #12]
 800d356:	9b03      	ldr	r3, [sp, #12]
 800d358:	4298      	cmp	r0, r3
 800d35a:	bfb8      	it	lt
 800d35c:	4618      	movlt	r0, r3
 800d35e:	e7a6      	b.n	800d2ae <_printf_i+0x15e>
 800d360:	2301      	movs	r3, #1
 800d362:	4632      	mov	r2, r6
 800d364:	4649      	mov	r1, r9
 800d366:	4640      	mov	r0, r8
 800d368:	47d0      	blx	sl
 800d36a:	3001      	adds	r0, #1
 800d36c:	d09d      	beq.n	800d2aa <_printf_i+0x15a>
 800d36e:	3501      	adds	r5, #1
 800d370:	68e3      	ldr	r3, [r4, #12]
 800d372:	9903      	ldr	r1, [sp, #12]
 800d374:	1a5b      	subs	r3, r3, r1
 800d376:	42ab      	cmp	r3, r5
 800d378:	dcf2      	bgt.n	800d360 <_printf_i+0x210>
 800d37a:	e7eb      	b.n	800d354 <_printf_i+0x204>
 800d37c:	2500      	movs	r5, #0
 800d37e:	f104 0619 	add.w	r6, r4, #25
 800d382:	e7f5      	b.n	800d370 <_printf_i+0x220>
 800d384:	080103a2 	.word	0x080103a2
 800d388:	080103b3 	.word	0x080103b3

0800d38c <__sflush_r>:
 800d38c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d394:	0716      	lsls	r6, r2, #28
 800d396:	4605      	mov	r5, r0
 800d398:	460c      	mov	r4, r1
 800d39a:	d454      	bmi.n	800d446 <__sflush_r+0xba>
 800d39c:	684b      	ldr	r3, [r1, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	dc02      	bgt.n	800d3a8 <__sflush_r+0x1c>
 800d3a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dd48      	ble.n	800d43a <__sflush_r+0xae>
 800d3a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3aa:	2e00      	cmp	r6, #0
 800d3ac:	d045      	beq.n	800d43a <__sflush_r+0xae>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d3b4:	682f      	ldr	r7, [r5, #0]
 800d3b6:	6a21      	ldr	r1, [r4, #32]
 800d3b8:	602b      	str	r3, [r5, #0]
 800d3ba:	d030      	beq.n	800d41e <__sflush_r+0x92>
 800d3bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d3be:	89a3      	ldrh	r3, [r4, #12]
 800d3c0:	0759      	lsls	r1, r3, #29
 800d3c2:	d505      	bpl.n	800d3d0 <__sflush_r+0x44>
 800d3c4:	6863      	ldr	r3, [r4, #4]
 800d3c6:	1ad2      	subs	r2, r2, r3
 800d3c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3ca:	b10b      	cbz	r3, 800d3d0 <__sflush_r+0x44>
 800d3cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d3ce:	1ad2      	subs	r2, r2, r3
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3d4:	6a21      	ldr	r1, [r4, #32]
 800d3d6:	4628      	mov	r0, r5
 800d3d8:	47b0      	blx	r6
 800d3da:	1c43      	adds	r3, r0, #1
 800d3dc:	89a3      	ldrh	r3, [r4, #12]
 800d3de:	d106      	bne.n	800d3ee <__sflush_r+0x62>
 800d3e0:	6829      	ldr	r1, [r5, #0]
 800d3e2:	291d      	cmp	r1, #29
 800d3e4:	d82b      	bhi.n	800d43e <__sflush_r+0xb2>
 800d3e6:	4a2a      	ldr	r2, [pc, #168]	@ (800d490 <__sflush_r+0x104>)
 800d3e8:	40ca      	lsrs	r2, r1
 800d3ea:	07d6      	lsls	r6, r2, #31
 800d3ec:	d527      	bpl.n	800d43e <__sflush_r+0xb2>
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	6062      	str	r2, [r4, #4]
 800d3f2:	04d9      	lsls	r1, r3, #19
 800d3f4:	6922      	ldr	r2, [r4, #16]
 800d3f6:	6022      	str	r2, [r4, #0]
 800d3f8:	d504      	bpl.n	800d404 <__sflush_r+0x78>
 800d3fa:	1c42      	adds	r2, r0, #1
 800d3fc:	d101      	bne.n	800d402 <__sflush_r+0x76>
 800d3fe:	682b      	ldr	r3, [r5, #0]
 800d400:	b903      	cbnz	r3, 800d404 <__sflush_r+0x78>
 800d402:	6560      	str	r0, [r4, #84]	@ 0x54
 800d404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d406:	602f      	str	r7, [r5, #0]
 800d408:	b1b9      	cbz	r1, 800d43a <__sflush_r+0xae>
 800d40a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d40e:	4299      	cmp	r1, r3
 800d410:	d002      	beq.n	800d418 <__sflush_r+0x8c>
 800d412:	4628      	mov	r0, r5
 800d414:	f7ff fbec 	bl	800cbf0 <_free_r>
 800d418:	2300      	movs	r3, #0
 800d41a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d41c:	e00d      	b.n	800d43a <__sflush_r+0xae>
 800d41e:	2301      	movs	r3, #1
 800d420:	4628      	mov	r0, r5
 800d422:	47b0      	blx	r6
 800d424:	4602      	mov	r2, r0
 800d426:	1c50      	adds	r0, r2, #1
 800d428:	d1c9      	bne.n	800d3be <__sflush_r+0x32>
 800d42a:	682b      	ldr	r3, [r5, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d0c6      	beq.n	800d3be <__sflush_r+0x32>
 800d430:	2b1d      	cmp	r3, #29
 800d432:	d001      	beq.n	800d438 <__sflush_r+0xac>
 800d434:	2b16      	cmp	r3, #22
 800d436:	d11e      	bne.n	800d476 <__sflush_r+0xea>
 800d438:	602f      	str	r7, [r5, #0]
 800d43a:	2000      	movs	r0, #0
 800d43c:	e022      	b.n	800d484 <__sflush_r+0xf8>
 800d43e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d442:	b21b      	sxth	r3, r3
 800d444:	e01b      	b.n	800d47e <__sflush_r+0xf2>
 800d446:	690f      	ldr	r7, [r1, #16]
 800d448:	2f00      	cmp	r7, #0
 800d44a:	d0f6      	beq.n	800d43a <__sflush_r+0xae>
 800d44c:	0793      	lsls	r3, r2, #30
 800d44e:	680e      	ldr	r6, [r1, #0]
 800d450:	bf08      	it	eq
 800d452:	694b      	ldreq	r3, [r1, #20]
 800d454:	600f      	str	r7, [r1, #0]
 800d456:	bf18      	it	ne
 800d458:	2300      	movne	r3, #0
 800d45a:	eba6 0807 	sub.w	r8, r6, r7
 800d45e:	608b      	str	r3, [r1, #8]
 800d460:	f1b8 0f00 	cmp.w	r8, #0
 800d464:	dde9      	ble.n	800d43a <__sflush_r+0xae>
 800d466:	6a21      	ldr	r1, [r4, #32]
 800d468:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d46a:	4643      	mov	r3, r8
 800d46c:	463a      	mov	r2, r7
 800d46e:	4628      	mov	r0, r5
 800d470:	47b0      	blx	r6
 800d472:	2800      	cmp	r0, #0
 800d474:	dc08      	bgt.n	800d488 <__sflush_r+0xfc>
 800d476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d47a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d47e:	81a3      	strh	r3, [r4, #12]
 800d480:	f04f 30ff 	mov.w	r0, #4294967295
 800d484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d488:	4407      	add	r7, r0
 800d48a:	eba8 0800 	sub.w	r8, r8, r0
 800d48e:	e7e7      	b.n	800d460 <__sflush_r+0xd4>
 800d490:	20400001 	.word	0x20400001

0800d494 <_fflush_r>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	690b      	ldr	r3, [r1, #16]
 800d498:	4605      	mov	r5, r0
 800d49a:	460c      	mov	r4, r1
 800d49c:	b913      	cbnz	r3, 800d4a4 <_fflush_r+0x10>
 800d49e:	2500      	movs	r5, #0
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	bd38      	pop	{r3, r4, r5, pc}
 800d4a4:	b118      	cbz	r0, 800d4ae <_fflush_r+0x1a>
 800d4a6:	6a03      	ldr	r3, [r0, #32]
 800d4a8:	b90b      	cbnz	r3, 800d4ae <_fflush_r+0x1a>
 800d4aa:	f7ff fa63 	bl	800c974 <__sinit>
 800d4ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d0f3      	beq.n	800d49e <_fflush_r+0xa>
 800d4b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d4b8:	07d0      	lsls	r0, r2, #31
 800d4ba:	d404      	bmi.n	800d4c6 <_fflush_r+0x32>
 800d4bc:	0599      	lsls	r1, r3, #22
 800d4be:	d402      	bmi.n	800d4c6 <_fflush_r+0x32>
 800d4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4c2:	f7ff fb66 	bl	800cb92 <__retarget_lock_acquire_recursive>
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	f7ff ff5f 	bl	800d38c <__sflush_r>
 800d4ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4d0:	07da      	lsls	r2, r3, #31
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	d4e4      	bmi.n	800d4a0 <_fflush_r+0xc>
 800d4d6:	89a3      	ldrh	r3, [r4, #12]
 800d4d8:	059b      	lsls	r3, r3, #22
 800d4da:	d4e1      	bmi.n	800d4a0 <_fflush_r+0xc>
 800d4dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4de:	f7ff fb59 	bl	800cb94 <__retarget_lock_release_recursive>
 800d4e2:	e7dd      	b.n	800d4a0 <_fflush_r+0xc>

0800d4e4 <fiprintf>:
 800d4e4:	b40e      	push	{r1, r2, r3}
 800d4e6:	b503      	push	{r0, r1, lr}
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	ab03      	add	r3, sp, #12
 800d4ec:	4805      	ldr	r0, [pc, #20]	@ (800d504 <fiprintf+0x20>)
 800d4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4f2:	6800      	ldr	r0, [r0, #0]
 800d4f4:	9301      	str	r3, [sp, #4]
 800d4f6:	f7ff fca5 	bl	800ce44 <_vfiprintf_r>
 800d4fa:	b002      	add	sp, #8
 800d4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d500:	b003      	add	sp, #12
 800d502:	4770      	bx	lr
 800d504:	20000020 	.word	0x20000020

0800d508 <__swbuf_r>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	460e      	mov	r6, r1
 800d50c:	4614      	mov	r4, r2
 800d50e:	4605      	mov	r5, r0
 800d510:	b118      	cbz	r0, 800d51a <__swbuf_r+0x12>
 800d512:	6a03      	ldr	r3, [r0, #32]
 800d514:	b90b      	cbnz	r3, 800d51a <__swbuf_r+0x12>
 800d516:	f7ff fa2d 	bl	800c974 <__sinit>
 800d51a:	69a3      	ldr	r3, [r4, #24]
 800d51c:	60a3      	str	r3, [r4, #8]
 800d51e:	89a3      	ldrh	r3, [r4, #12]
 800d520:	071a      	lsls	r2, r3, #28
 800d522:	d501      	bpl.n	800d528 <__swbuf_r+0x20>
 800d524:	6923      	ldr	r3, [r4, #16]
 800d526:	b943      	cbnz	r3, 800d53a <__swbuf_r+0x32>
 800d528:	4621      	mov	r1, r4
 800d52a:	4628      	mov	r0, r5
 800d52c:	f000 f82a 	bl	800d584 <__swsetup_r>
 800d530:	b118      	cbz	r0, 800d53a <__swbuf_r+0x32>
 800d532:	f04f 37ff 	mov.w	r7, #4294967295
 800d536:	4638      	mov	r0, r7
 800d538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	6922      	ldr	r2, [r4, #16]
 800d53e:	1a98      	subs	r0, r3, r2
 800d540:	6963      	ldr	r3, [r4, #20]
 800d542:	b2f6      	uxtb	r6, r6
 800d544:	4283      	cmp	r3, r0
 800d546:	4637      	mov	r7, r6
 800d548:	dc05      	bgt.n	800d556 <__swbuf_r+0x4e>
 800d54a:	4621      	mov	r1, r4
 800d54c:	4628      	mov	r0, r5
 800d54e:	f7ff ffa1 	bl	800d494 <_fflush_r>
 800d552:	2800      	cmp	r0, #0
 800d554:	d1ed      	bne.n	800d532 <__swbuf_r+0x2a>
 800d556:	68a3      	ldr	r3, [r4, #8]
 800d558:	3b01      	subs	r3, #1
 800d55a:	60a3      	str	r3, [r4, #8]
 800d55c:	6823      	ldr	r3, [r4, #0]
 800d55e:	1c5a      	adds	r2, r3, #1
 800d560:	6022      	str	r2, [r4, #0]
 800d562:	701e      	strb	r6, [r3, #0]
 800d564:	6962      	ldr	r2, [r4, #20]
 800d566:	1c43      	adds	r3, r0, #1
 800d568:	429a      	cmp	r2, r3
 800d56a:	d004      	beq.n	800d576 <__swbuf_r+0x6e>
 800d56c:	89a3      	ldrh	r3, [r4, #12]
 800d56e:	07db      	lsls	r3, r3, #31
 800d570:	d5e1      	bpl.n	800d536 <__swbuf_r+0x2e>
 800d572:	2e0a      	cmp	r6, #10
 800d574:	d1df      	bne.n	800d536 <__swbuf_r+0x2e>
 800d576:	4621      	mov	r1, r4
 800d578:	4628      	mov	r0, r5
 800d57a:	f7ff ff8b 	bl	800d494 <_fflush_r>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d0d9      	beq.n	800d536 <__swbuf_r+0x2e>
 800d582:	e7d6      	b.n	800d532 <__swbuf_r+0x2a>

0800d584 <__swsetup_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4b29      	ldr	r3, [pc, #164]	@ (800d62c <__swsetup_r+0xa8>)
 800d588:	4605      	mov	r5, r0
 800d58a:	6818      	ldr	r0, [r3, #0]
 800d58c:	460c      	mov	r4, r1
 800d58e:	b118      	cbz	r0, 800d598 <__swsetup_r+0x14>
 800d590:	6a03      	ldr	r3, [r0, #32]
 800d592:	b90b      	cbnz	r3, 800d598 <__swsetup_r+0x14>
 800d594:	f7ff f9ee 	bl	800c974 <__sinit>
 800d598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d59c:	0719      	lsls	r1, r3, #28
 800d59e:	d422      	bmi.n	800d5e6 <__swsetup_r+0x62>
 800d5a0:	06da      	lsls	r2, r3, #27
 800d5a2:	d407      	bmi.n	800d5b4 <__swsetup_r+0x30>
 800d5a4:	2209      	movs	r2, #9
 800d5a6:	602a      	str	r2, [r5, #0]
 800d5a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ac:	81a3      	strh	r3, [r4, #12]
 800d5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b2:	e033      	b.n	800d61c <__swsetup_r+0x98>
 800d5b4:	0758      	lsls	r0, r3, #29
 800d5b6:	d512      	bpl.n	800d5de <__swsetup_r+0x5a>
 800d5b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5ba:	b141      	cbz	r1, 800d5ce <__swsetup_r+0x4a>
 800d5bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5c0:	4299      	cmp	r1, r3
 800d5c2:	d002      	beq.n	800d5ca <__swsetup_r+0x46>
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	f7ff fb13 	bl	800cbf0 <_free_r>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5ce:	89a3      	ldrh	r3, [r4, #12]
 800d5d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d5d4:	81a3      	strh	r3, [r4, #12]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	6063      	str	r3, [r4, #4]
 800d5da:	6923      	ldr	r3, [r4, #16]
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	89a3      	ldrh	r3, [r4, #12]
 800d5e0:	f043 0308 	orr.w	r3, r3, #8
 800d5e4:	81a3      	strh	r3, [r4, #12]
 800d5e6:	6923      	ldr	r3, [r4, #16]
 800d5e8:	b94b      	cbnz	r3, 800d5fe <__swsetup_r+0x7a>
 800d5ea:	89a3      	ldrh	r3, [r4, #12]
 800d5ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d5f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5f4:	d003      	beq.n	800d5fe <__swsetup_r+0x7a>
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	f000 f856 	bl	800d6aa <__smakebuf_r>
 800d5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d602:	f013 0201 	ands.w	r2, r3, #1
 800d606:	d00a      	beq.n	800d61e <__swsetup_r+0x9a>
 800d608:	2200      	movs	r2, #0
 800d60a:	60a2      	str	r2, [r4, #8]
 800d60c:	6962      	ldr	r2, [r4, #20]
 800d60e:	4252      	negs	r2, r2
 800d610:	61a2      	str	r2, [r4, #24]
 800d612:	6922      	ldr	r2, [r4, #16]
 800d614:	b942      	cbnz	r2, 800d628 <__swsetup_r+0xa4>
 800d616:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d61a:	d1c5      	bne.n	800d5a8 <__swsetup_r+0x24>
 800d61c:	bd38      	pop	{r3, r4, r5, pc}
 800d61e:	0799      	lsls	r1, r3, #30
 800d620:	bf58      	it	pl
 800d622:	6962      	ldrpl	r2, [r4, #20]
 800d624:	60a2      	str	r2, [r4, #8]
 800d626:	e7f4      	b.n	800d612 <__swsetup_r+0x8e>
 800d628:	2000      	movs	r0, #0
 800d62a:	e7f7      	b.n	800d61c <__swsetup_r+0x98>
 800d62c:	20000020 	.word	0x20000020

0800d630 <_sbrk_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	4d06      	ldr	r5, [pc, #24]	@ (800d64c <_sbrk_r+0x1c>)
 800d634:	2300      	movs	r3, #0
 800d636:	4604      	mov	r4, r0
 800d638:	4608      	mov	r0, r1
 800d63a:	602b      	str	r3, [r5, #0]
 800d63c:	f7f3 fafe 	bl	8000c3c <_sbrk>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_sbrk_r+0x1a>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_sbrk_r+0x1a>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	200084f0 	.word	0x200084f0

0800d650 <abort>:
 800d650:	b508      	push	{r3, lr}
 800d652:	2006      	movs	r0, #6
 800d654:	f000 f88e 	bl	800d774 <raise>
 800d658:	2001      	movs	r0, #1
 800d65a:	f7f3 fa77 	bl	8000b4c <_exit>

0800d65e <__swhatbuf_r>:
 800d65e:	b570      	push	{r4, r5, r6, lr}
 800d660:	460c      	mov	r4, r1
 800d662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d666:	2900      	cmp	r1, #0
 800d668:	b096      	sub	sp, #88	@ 0x58
 800d66a:	4615      	mov	r5, r2
 800d66c:	461e      	mov	r6, r3
 800d66e:	da0d      	bge.n	800d68c <__swhatbuf_r+0x2e>
 800d670:	89a3      	ldrh	r3, [r4, #12]
 800d672:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d676:	f04f 0100 	mov.w	r1, #0
 800d67a:	bf14      	ite	ne
 800d67c:	2340      	movne	r3, #64	@ 0x40
 800d67e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d682:	2000      	movs	r0, #0
 800d684:	6031      	str	r1, [r6, #0]
 800d686:	602b      	str	r3, [r5, #0]
 800d688:	b016      	add	sp, #88	@ 0x58
 800d68a:	bd70      	pop	{r4, r5, r6, pc}
 800d68c:	466a      	mov	r2, sp
 800d68e:	f000 f879 	bl	800d784 <_fstat_r>
 800d692:	2800      	cmp	r0, #0
 800d694:	dbec      	blt.n	800d670 <__swhatbuf_r+0x12>
 800d696:	9901      	ldr	r1, [sp, #4]
 800d698:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d69c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6a0:	4259      	negs	r1, r3
 800d6a2:	4159      	adcs	r1, r3
 800d6a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6a8:	e7eb      	b.n	800d682 <__swhatbuf_r+0x24>

0800d6aa <__smakebuf_r>:
 800d6aa:	898b      	ldrh	r3, [r1, #12]
 800d6ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ae:	079d      	lsls	r5, r3, #30
 800d6b0:	4606      	mov	r6, r0
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	d507      	bpl.n	800d6c6 <__smakebuf_r+0x1c>
 800d6b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d6ba:	6023      	str	r3, [r4, #0]
 800d6bc:	6123      	str	r3, [r4, #16]
 800d6be:	2301      	movs	r3, #1
 800d6c0:	6163      	str	r3, [r4, #20]
 800d6c2:	b003      	add	sp, #12
 800d6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6c6:	ab01      	add	r3, sp, #4
 800d6c8:	466a      	mov	r2, sp
 800d6ca:	f7ff ffc8 	bl	800d65e <__swhatbuf_r>
 800d6ce:	9f00      	ldr	r7, [sp, #0]
 800d6d0:	4605      	mov	r5, r0
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f7ff faff 	bl	800ccd8 <_malloc_r>
 800d6da:	b948      	cbnz	r0, 800d6f0 <__smakebuf_r+0x46>
 800d6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e0:	059a      	lsls	r2, r3, #22
 800d6e2:	d4ee      	bmi.n	800d6c2 <__smakebuf_r+0x18>
 800d6e4:	f023 0303 	bic.w	r3, r3, #3
 800d6e8:	f043 0302 	orr.w	r3, r3, #2
 800d6ec:	81a3      	strh	r3, [r4, #12]
 800d6ee:	e7e2      	b.n	800d6b6 <__smakebuf_r+0xc>
 800d6f0:	89a3      	ldrh	r3, [r4, #12]
 800d6f2:	6020      	str	r0, [r4, #0]
 800d6f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6f8:	81a3      	strh	r3, [r4, #12]
 800d6fa:	9b01      	ldr	r3, [sp, #4]
 800d6fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d700:	b15b      	cbz	r3, 800d71a <__smakebuf_r+0x70>
 800d702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d706:	4630      	mov	r0, r6
 800d708:	f000 f84e 	bl	800d7a8 <_isatty_r>
 800d70c:	b128      	cbz	r0, 800d71a <__smakebuf_r+0x70>
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	f023 0303 	bic.w	r3, r3, #3
 800d714:	f043 0301 	orr.w	r3, r3, #1
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	431d      	orrs	r5, r3
 800d71e:	81a5      	strh	r5, [r4, #12]
 800d720:	e7cf      	b.n	800d6c2 <__smakebuf_r+0x18>

0800d722 <_raise_r>:
 800d722:	291f      	cmp	r1, #31
 800d724:	b538      	push	{r3, r4, r5, lr}
 800d726:	4605      	mov	r5, r0
 800d728:	460c      	mov	r4, r1
 800d72a:	d904      	bls.n	800d736 <_raise_r+0x14>
 800d72c:	2316      	movs	r3, #22
 800d72e:	6003      	str	r3, [r0, #0]
 800d730:	f04f 30ff 	mov.w	r0, #4294967295
 800d734:	bd38      	pop	{r3, r4, r5, pc}
 800d736:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d738:	b112      	cbz	r2, 800d740 <_raise_r+0x1e>
 800d73a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d73e:	b94b      	cbnz	r3, 800d754 <_raise_r+0x32>
 800d740:	4628      	mov	r0, r5
 800d742:	f000 f853 	bl	800d7ec <_getpid_r>
 800d746:	4622      	mov	r2, r4
 800d748:	4601      	mov	r1, r0
 800d74a:	4628      	mov	r0, r5
 800d74c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d750:	f000 b83a 	b.w	800d7c8 <_kill_r>
 800d754:	2b01      	cmp	r3, #1
 800d756:	d00a      	beq.n	800d76e <_raise_r+0x4c>
 800d758:	1c59      	adds	r1, r3, #1
 800d75a:	d103      	bne.n	800d764 <_raise_r+0x42>
 800d75c:	2316      	movs	r3, #22
 800d75e:	6003      	str	r3, [r0, #0]
 800d760:	2001      	movs	r0, #1
 800d762:	e7e7      	b.n	800d734 <_raise_r+0x12>
 800d764:	2100      	movs	r1, #0
 800d766:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d76a:	4620      	mov	r0, r4
 800d76c:	4798      	blx	r3
 800d76e:	2000      	movs	r0, #0
 800d770:	e7e0      	b.n	800d734 <_raise_r+0x12>
	...

0800d774 <raise>:
 800d774:	4b02      	ldr	r3, [pc, #8]	@ (800d780 <raise+0xc>)
 800d776:	4601      	mov	r1, r0
 800d778:	6818      	ldr	r0, [r3, #0]
 800d77a:	f7ff bfd2 	b.w	800d722 <_raise_r>
 800d77e:	bf00      	nop
 800d780:	20000020 	.word	0x20000020

0800d784 <_fstat_r>:
 800d784:	b538      	push	{r3, r4, r5, lr}
 800d786:	4d07      	ldr	r5, [pc, #28]	@ (800d7a4 <_fstat_r+0x20>)
 800d788:	2300      	movs	r3, #0
 800d78a:	4604      	mov	r4, r0
 800d78c:	4608      	mov	r0, r1
 800d78e:	4611      	mov	r1, r2
 800d790:	602b      	str	r3, [r5, #0]
 800d792:	f7f3 fa2b 	bl	8000bec <_fstat>
 800d796:	1c43      	adds	r3, r0, #1
 800d798:	d102      	bne.n	800d7a0 <_fstat_r+0x1c>
 800d79a:	682b      	ldr	r3, [r5, #0]
 800d79c:	b103      	cbz	r3, 800d7a0 <_fstat_r+0x1c>
 800d79e:	6023      	str	r3, [r4, #0]
 800d7a0:	bd38      	pop	{r3, r4, r5, pc}
 800d7a2:	bf00      	nop
 800d7a4:	200084f0 	.word	0x200084f0

0800d7a8 <_isatty_r>:
 800d7a8:	b538      	push	{r3, r4, r5, lr}
 800d7aa:	4d06      	ldr	r5, [pc, #24]	@ (800d7c4 <_isatty_r+0x1c>)
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	4608      	mov	r0, r1
 800d7b2:	602b      	str	r3, [r5, #0]
 800d7b4:	f7f3 fa2a 	bl	8000c0c <_isatty>
 800d7b8:	1c43      	adds	r3, r0, #1
 800d7ba:	d102      	bne.n	800d7c2 <_isatty_r+0x1a>
 800d7bc:	682b      	ldr	r3, [r5, #0]
 800d7be:	b103      	cbz	r3, 800d7c2 <_isatty_r+0x1a>
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	bd38      	pop	{r3, r4, r5, pc}
 800d7c4:	200084f0 	.word	0x200084f0

0800d7c8 <_kill_r>:
 800d7c8:	b538      	push	{r3, r4, r5, lr}
 800d7ca:	4d07      	ldr	r5, [pc, #28]	@ (800d7e8 <_kill_r+0x20>)
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	4608      	mov	r0, r1
 800d7d2:	4611      	mov	r1, r2
 800d7d4:	602b      	str	r3, [r5, #0]
 800d7d6:	f7f3 f9a7 	bl	8000b28 <_kill>
 800d7da:	1c43      	adds	r3, r0, #1
 800d7dc:	d102      	bne.n	800d7e4 <_kill_r+0x1c>
 800d7de:	682b      	ldr	r3, [r5, #0]
 800d7e0:	b103      	cbz	r3, 800d7e4 <_kill_r+0x1c>
 800d7e2:	6023      	str	r3, [r4, #0]
 800d7e4:	bd38      	pop	{r3, r4, r5, pc}
 800d7e6:	bf00      	nop
 800d7e8:	200084f0 	.word	0x200084f0

0800d7ec <_getpid_r>:
 800d7ec:	f7f3 b993 	b.w	8000b16 <_getpid>

0800d7f0 <_init>:
 800d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f2:	bf00      	nop
 800d7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7f6:	bc08      	pop	{r3}
 800d7f8:	469e      	mov	lr, r3
 800d7fa:	4770      	bx	lr

0800d7fc <_fini>:
 800d7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7fe:	bf00      	nop
 800d800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d802:	bc08      	pop	{r3}
 800d804:	469e      	mov	lr, r3
 800d806:	4770      	bx	lr
